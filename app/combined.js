var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
System.register("app/services/logger.service", ['angular2/core'], function(exports_1, context_1) {
    "use strict";
    var __moduleName = context_1 && context_1.id;
    var core_1;
    var Logger;
    return {
        setters:[
            function (core_1_1) {
                core_1 = core_1_1;
            }],
        execute: function() {
            Logger = (function () {
                function Logger() {
                }
                Logger.prototype.log = function (s) {
                    console.log(s);
                };
                Logger.prototype.error = function (s) {
                    console.error(s);
                };
                Logger = __decorate([
                    core_1.Injectable(), 
                    __metadata('design:paramtypes', [])
                ], Logger);
                return Logger;
            }());
            exports_1("Logger", Logger);
        }
    }
});
System.register("app/services/googleapi.service", ['angular2/core', 'angular2/http', 'rxjs/Rx', "app/services/logger.service"], function(exports_2, context_2) {
    "use strict";
    var __moduleName = context_2 && context_2.id;
    var core_2, http_1, logger_service_1;
    var GoogleApi;
    return {
        setters:[
            function (core_2_1) {
                core_2 = core_2_1;
            },
            function (http_1_1) {
                http_1 = http_1_1;
            },
            function (_1) {},
            function (logger_service_1_1) {
                logger_service_1 = logger_service_1_1;
            }],
        execute: function() {
            GoogleApi = (function () {
                function GoogleApi(http, logger) {
                    this.http = http;
                    this.logger = logger;
                    this.http = http;
                    this.logger = logger;
                }
                GoogleApi.prototype.video = function (id, cb) {
                    var params = {
                        id: id,
                        part: 'snippet',
                        key: 'AIzaSyAzWTgldNKQqc8MPajiWHPhJ6UI6SPdaSE'
                    };
                    this.http.get(this.constructURL('https://www.googleapis.com/youtube/v3/videos', params))
                        .map(function (res) { return res.json(); })
                        .subscribe(function (data) { cb(data, false); }, function (err) { return cb(false, err); });
                };
                GoogleApi.prototype.initialize = function (data) {
                    //assumes 1 result
                    data = data.items[0];
                    console.log(data);
                    this.description = data.snippet.description.replace(/\\n/g, '');
                };
                GoogleApi.prototype.constructURL = function (url, params) {
                    var r = '';
                    for (var i in params) {
                        r += i + '=' + params[i] + '&';
                    }
                    return url + '?' + r;
                };
                GoogleApi = __decorate([
                    core_2.Injectable(), 
                    __metadata('design:paramtypes', [http_1.Http, logger_service_1.Logger])
                ], GoogleApi);
                return GoogleApi;
            }());
            exports_2("GoogleApi", GoogleApi);
        }
    }
});
System.register("app/services/appdata.service", ['angular2/core', "app/services/logger.service"], function(exports_3, context_3) {
    "use strict";
    var __moduleName = context_3 && context_3.id;
    var core_3, logger_service_2;
    var AppData;
    return {
        setters:[
            function (core_3_1) {
                core_3 = core_3_1;
            },
            function (logger_service_2_1) {
                logger_service_2 = logger_service_2_1;
            }],
        execute: function() {
            AppData = (function () {
                function AppData(logger) {
                    this.logger = logger;
                    this.language = this.getLanguage();
                    this.contents = {};
                    this.contents.en = {
                        masthead: {
                            enabled: true,
                            image: "./public/images/refer-landing-masthead.jpg",
                            alt: "Kitchen",
                            title: ""
                        },
                        banner: {
                            enabled: true,
                            link: 'http://www.whirlpool.ca/en_CA/everydaycare/',
                            image: './public/images/banner.jpg',
                            alt: 'Father and Daughter',
                            ctaText: 'Learn More'
                        },
                        features: {
                            enabled: true,
                            features: [
                                {
                                    image: "./public/images/refer-landing-shopping-cart.png",
                                    title: "Buying Guide",
                                    alt: "Buying guide",
                                    desc: "What to look for when buying",
                                    cta: "Click Here",
                                    link: "http://blog.whirlpool.ca/whirlpool-refrigerator-buying-guide/",
                                    type: "cart"
                                },
                                {
                                    image: "./public/images/refer-landing-star.png",
                                    title: "Ratings and Reviews",
                                    alt: "Ratings and reviews",
                                    desc: "See what others are saying",
                                    cta: "Click Here",
                                    link: "http://www.whirlpool.ca/en_CA/2_3_90/jump-pages_best-products.content.html",
                                    type: "star"
                                },
                                {
                                    image: "./public/images/refer-landing-mag-glass.png",
                                    title: "Find Your Whirlpool",
                                    alt: "Find your Whirlpool",
                                    desc: "Need help finding your refrigerator?",
                                    cta: "Click Here",
                                    link: "http://findmy.whirlpool.ca",
                                    type: "magnifier"
                                }
                            ]
                        },
                        morefeatures: {
                            enabled: true,
                            title: "Additional Features",
                            features: [
                                {
                                    title: "Additional Accessories",
                                    image: "./public/images/more-features-1.jpg",
                                    link: "http://www.whirlpool.ca/en_CA/Accessories-1/Accessories_Kitchen_Accessories_Refrigerator-3/102280119/",
                                    alt: "Refrigerator exterior",
                                    text: "",
                                    cta: ""
                                },
                                {
                                    title: "Water Filtration",
                                    image: "./public/images/more-features-2.jpg",
                                    link: "http://www.whirlpool.ca/en_CA/2_3_80/jump-pages_water-filters.content.html",
                                    alt: "Refrigerator exterior",
                                    text: "",
                                    cta: ""
                                },
                                {
                                    title: "Certified Care",
                                    image: "./public/images/more-features-3.jpg",
                                    link: "https://whirlpoolcertifiedcare.ca/en",
                                    alt: "Refrigerator exterior",
                                    text: "",
                                    cta: ""
                                }
                            ]
                        },
                        videoplayer: {
                            enabled: true,
                            title: "Must-See Innovation",
                            videos: [
                                {
                                    id: '8uqalJESFos',
                                    thumb: './public/images/video-select-1.jpg',
                                    title: 'Perfect Places<sup>&trade;</sup>',
                                    alt: "Full Refrigerator",
                                    ctaTitle: 'Perfect Places<sup>&trade;</sup>',
                                    cta: 'Play Video',
                                    desc: false
                                },
                                {
                                    id: 'xI986ew0VD0',
                                    thumb: './public/images/video-select-2.jpg',
                                    title: 'Resource Saver<sup>&trade;</sup> & EasyView<sup>&trade;</sup>',
                                    alt: "Refrigerator Exterior",
                                    ctaTitle: 'Resource Saver<sup>&trade;</sup> & EasyView<sup>&trade;</sup>',
                                    cta: 'Play Video',
                                    desc: false,
                                },
                                {
                                    id: 'j-SeXWbpEaw',
                                    thumb: './public/images/video-select-3.jpg',
                                    title: 'StoreRight<sup>&trade;</sup> System',
                                    alt: "Full Refrigerator Drawer",
                                    ctaTitle: 'StoreRight<sup>&trade;</sup> System',
                                    cta: 'Play Video',
                                    desc: false
                                }
                            ]
                        },
                        productselector: {
                            enabled: true,
                            title: 'Choose Your Style',
                            nav: {
                                text: 'See<br/>All',
                                link: 'http://www.whirlpool.ca/en_CA/Kitchen-1/Kitchen_Refrigeration_Refrigerators-3/102280023+102110368/#back'
                            },
                            products: [
                                {
                                    image: "./public/images/products/double-drawer.png",
                                    title: "Double Drawer",
                                    alt: "5-Door Refrigerator ",
                                    desc: "Get even more organized with our versatile Double Drawer refrigerator, designed with your family's needs in mind. This unique style offers 9 storage zones with our PerfectPlaces™ System, including our temperature-controlled drawer and small items bin.",
                                    link: "http://www.whirlpool.ca/en_CA/kitchen-1/refrigeration-2/refrigerators-3/-[WRV986FDEM]-5552596/WRV986FDEM/",
                                    id: "double-drawer",
                                    ctaText: "Learn More"
                                },
                                {
                                    image: "./public/images/products/french-door.png",
                                    title: "French Door",
                                    alt: "French-door refrigerator with bottom freezer and exterior ice dispensor",
                                    desc: "Our French Door refrigerators offer the flexible organization and convenience to keep your fresh foods at eye level and easily store your frozen favourites. The premium look and optimal capacity make these refrigerators an ideal piece for your family's kitchen.",
                                    link: "http://www.whirlpool.ca/en_CA/Kitchen-1/Kitchen_Refrigeration_Refrigerators-3/102280023+102110368/",
                                    id: "french-door",
                                    ctaText: "Learn More"
                                },
                                {
                                    image: "./public/images/products/side-by-side.png",
                                    title: "Side-by-Side",
                                    alt: "French-door refrigerator ",
                                    desc: "Learn all the ways more door bin space makes it easy for your family to organize and access items big or small. This classic style offers a great balance of space for both fresh and frozen foods with the flexibility for different size options.",
                                    link: "http://www.whirlpool.ca/en_CA/Kitchen-1/Kitchen_Refrigeration_Refrigerators-3/102280023+102110369/",
                                    id: "side-by-side",
                                    ctaText: "Learn More"
                                },
                                {
                                    image: "./public/images/products/bottom-freezer.png",
                                    title: "Bottom Freezer",
                                    alt: "Single door refrigerator with bottom freezer",
                                    desc: "See how convenient it is to reach fresh foods and after-school snacks on the go. You have the option of pull-out drawer or swing-door style freezers, plus a variety of sizes to fit any space in your home.",
                                    link: "http://www.whirlpool.ca/en_CA/Kitchen-1/Kitchen_Refrigeration_Refrigerators-3/102280023+102110370/",
                                    id: "bottom-freezer",
                                    ctaText: "Learn More"
                                },
                                {
                                    image: "./public/images/products/top-freezer.png",
                                    title: "Top Freezer",
                                    alt: "Single door refrigerator with top freezer",
                                    desc: "There's always a place for fresh and frozen favourites inside this simple, classic style. Our Top Freezer refrigerator offers great quality and value and is available in smaller sizes for use as second one when you need the extra space.",
                                    link: "http://www.whirlpool.ca/en_CA/Kitchen-1/Kitchen_Refrigeration_Refrigerators-3/102280023+102110371/",
                                    id: "top-freezer",
                                    ctaText: "Learn More"
                                },
                                {
                                    image: "./public/images/products/freezer.png",
                                    title: "Freezers",
                                    alt: "Freezer",
                                    desc: "See all the extra storage for frozen foods, from pizza to popsicles. Our chest and upright styles ensure the perfect fit for any home.",
                                    link: "http://www.whirlpool.ca/en_CA/Kitchen-1/Kitchen_Refrigeration_Freezers-3/102280030/",
                                    id: "freezers",
                                    ctaText: "Learn More"
                                }
                            ]
                        }
                    };
                    this.contents.fr = {
                        masthead: {
                            enabled: true,
                            image: "./public/images/refer-landing-masthead-fr.jpg",
                            alt: "Cuisine",
                            title: ""
                        },
                        banner: {
                            enabled: true,
                            link: 'http://www.whirlpool.ca/fr_CA/everydaycare/',
                            image: './public/images/banner_fr.jpg',
                            alt: 'Père et fille',
                            ctaText: 'En savoir plus'
                        },
                        features: {
                            enabled: true,
                            features: [
                                {
                                    image: "./public/images/refer-landing-shopping-cart.png",
                                    title: "Guide D'achat",
                                    desc: "Éléments à considérer lorsque vous magasinez",
                                    alt: "Guide d’achat",
                                    cta: "Cliquez ici",
                                    link: "/other-assets/fr_CA/pdf/Refer-Buying-Guide-WP-FR.pdf",
                                    type: "cart"
                                },
                                {
                                    image: "./public/images/refer-landing-star.png",
                                    title: "Classements et Évaluations",
                                    desc: "Voyez ce que les autres clients en disent",
                                    alt: "Évaluations et commentaires",
                                    cta: "Cliquez ici",
                                    link: "http://www.whirlpool.ca/fr_CA/2_3_90/jump-pages_best-products.content.html",
                                    type: "star"
                                },
                                {
                                    image: "./public/images/refer-landing-mag-glass.png",
                                    title: "Trouvez Votre Électroménager Whirlpool",
                                    desc: "Vous avez besoin d'aide pour trouver un réfrigérateur?",
                                    alt: "Trouver votre électroménager Whirlpool",
                                    cta: "Cliquez ici",
                                    link: "http://trouvermon.whirlpool.ca",
                                    type: "magnifier"
                                }
                            ]
                        },
                        morefeatures: {
                            enabled: true,
                            title: "Fonctions supplémentaires",
                            features: [
                                {
                                    title: "Accessoires supplémentaires",
                                    image: "./public/images/more-features-1.jpg",
                                    link: "http://www.whirlpool.ca/fr_CA/Accessories-1/Accessories_Kitchen_Accessories_Refrigerator-3/102280119/",
                                    alt: "Réfrigérateur extérieur",
                                    text: "",
                                    cta: ""
                                },
                                {
                                    title: "Filtres à eau",
                                    image: "./public/images/more-features-2.jpg",
                                    link: "http://www.whirlpool.ca/fr_CA/2_3_80/jump-pages_water-filters.content.html",
                                    alt: "Réfrigérateur extérieur",
                                    text: "",
                                    cta: ""
                                },
                                {
                                    title: "Entretien autorisé",
                                    image: "./public/images/more-features-3.jpg",
                                    link: "https://whirlpoolcertifiedcare.ca/fr",
                                    alt: "Réfrigérateur extérieur",
                                    text: "",
                                    cta: ""
                                }
                            ]
                        },
                        videoplayer: {
                            enabled: true,
                            title: "Innovation à voir absolument",
                            videos: [
                                {
                                    image: './public/images/video-thumb-1.jpg',
                                    thumb: './public/images/video-select-1.jpg',
                                    title: 'Système de rangement Perfect Places<sup>&trade;</sup>',
                                    ctaTitle: 'Système de rangement Perfect Places™<sup>&trade;</sup>',
                                    alt: "Réfrigérateur complet",
                                    cta: 'Voir',
                                    desc: 'La conception Whirlpool à double tiroir  offre cinq zones de rangement uniques pour mieux organiser vos articles. Il s\'agit de notre réfrigérateur le plus flexible à ce jour.'
                                },
                                {
                                    image: './public/images/video-thumb-2.jpg',
                                    thumb: './public/images/video-select-2.jpg',
                                    title: 'Fonctions Resource Saver<sup>&trade;</sup> et EasyView<sup>&trade;</sup>',
                                    ctaTitle: 'Fonctions Resource Saver<sup>&trade;</sup><br/>et EasyView<sup>&trade;</sup>',
                                    alt: "Réfrigérateur extérieur",
                                    cta: 'Voir',
                                    desc: 'Les réfrigérateurs les plus efficaces de l’industrie dans leur catégorie respective. Augmentez la souplesse de rangement de votre réfrigérateur et préservez la fraîcheur et le bon goût de vos fruits et légumes grâce au système de bacs à légumes triples EasyView™. Désormais, vous pouvez facilement accéder aux aliments grâce à la visibilité totale à travers le bac à légumes. De plus, vous pourrez ranger une grande variété d\'articles grâce aux trois tiroirs. Le contrôle automatique d\'humidité contribue également à maintenir la fraîcheur.',
                                },
                                {
                                    image: './public/images/video-thumb-3.jpg',
                                    thumb: './public/images/video-select-3.jpg',
                                    title: 'Système de rangement StoreRight<sup>&trade;</sup>',
                                    ctaTitle: 'Système de rangement StoreRight<sup>&trade;</sup>',
                                    alt: "Tiroir de réfrigérateur complet",
                                    cta: 'Voir',
                                    desc: 'Le système de rangement StoreRight™ préserve la fraîcheur des aliments et réduit les brûlures de congélation, grâce à une technologie de refroidissement perfectionnée et ajuste automatiquement les niveaux d\'humidité.'
                                }
                            ]
                        },
                        productselector: {
                            enabled: true,
                            title: 'Choisissez votre style',
                            nav: {
                                text: 'Tout<br/>Voir',
                                link: 'http://www.whirlpool.ca/fr_CA/Kitchen-1/Kitchen_Refrigeration_Refrigerators-3/102280023+102110368/#back'
                            },
                            products: [
                                {
                                    image: "./public/images/products/double-drawer.png",
                                    title: "Tiroir double",
                                    desc: "Devenez le champion de l’organisation grâce à notre réfrigérateur polyvalent à double tiroir, conçu pour tous les besoins de votre famille. Son style unique offre 9 espaces de rangement, optimisés par notre système PerfectPlaces™, avec le tiroir à température contrôlée et le bac pour petits articles.",
                                    link: "http://www.whirlpool.ca/fr_CA/kitchen-1/refrigeration-2/refrigerators-3/-%5BWRV986FDEM%5D-5552596/WRV986FDEM/",
                                    alt: "Réfrigérateur à 5 portes",
                                    id: "double-drawer",
                                    ctaText: "En savoir plus"
                                },
                                {
                                    image: "./public/images/products/french-door.png",
                                    title: "Portes françaises",
                                    desc: "Nos réfrigérateurs à portes françaises procurent un rangement polyvalent, maintiennent vos produits frais à hauteur des yeux et vous permettent de conserver facilement vos produits congelés favoris. Leur élégance et capacité optimale font de ces réfrigérateurs un élément idéal de votre cuisine familiale.",
                                    link: "http://www.whirlpool.ca/fr_CA/Kitchen-1/Kitchen_Refrigeration_Refrigerators-3/102280023+102110368/#back",
                                    alt: "Réfrigérateur à portes françaises à congélateur inférieur et distributeur de glaçons extérieur",
                                    id: "french-door",
                                    ctaText: "En savoir plus"
                                },
                                {
                                    image: "./public/images/products/side-by-side.png",
                                    title: "Côte à côte",
                                    desc: "Découvrez l’avantage d’un espace supplémentaire dans les balconnets de porte qui facilitent le rangement et l'accès aux petits ou grands articles. Ce style classique offre un rangement parfaitement équilibré entre les aliments frais et surgelés, avec la possibilité de choisir différentes tailles.",
                                    link: "http://www.whirlpool.ca/fr_CA/Kitchen-1/Kitchen_Refrigeration_Refrigerators-3/102280023+102110368/#back",
                                    alt: "Réfrigérateur à portes françaises",
                                    id: "side-by-side",
                                    ctaText: "En savoir plus"
                                },
                                {
                                    image: "./public/images/products/bottom-freezer.png",
                                    title: "Congélateur inférieur",
                                    desc: "Bénéficiez d’un accès pratique aux aliments frais et aux collations sur le pouce ou après l'école. Vous avez le choix entre le congélateur-tiroir ou à porte, ainsi qu'une variété de tailles s'agençant à tout espace de votre maison.",
                                    link: "http://www.whirlpool.ca/fr_CA/Kitchen-1/Kitchen_Refrigeration_Refrigerators-3/102280023/",
                                    alt: "Réfrigérateur à porte simple avec congélateur inférieur",
                                    id: "bottom-freezer",
                                    ctaText: "En savoir plus"
                                },
                                {
                                    image: "./public/images/products/top-freezer.png",
                                    title: "Congélateur supérieur",
                                    desc: "Il y aura toujours une place pour vos aliments frais ou surgelés favoris dans ce réfrigérateur au style simple et classique à la fois. Notre réfrigérateur à congélateur supérieur offre un excellent rapport qualité/prix et est aussi disponible en tailles plus petites.",
                                    link: "http://www.whirlpool.ca/fr_CA/Kitchen-1/Kitchen_Refrigeration_Refrigerators-3/102280023/",
                                    alt: "Réfrigérateur à porte simple avec congélateur supérieur",
                                    id: "top-freezer",
                                    ctaText: "En savoir plus"
                                },
                                {
                                    image: "./public/images/products/freezer.png",
                                    title: "Congélateurs",
                                    desc: "Découvrez tout l'espace supplémentaire pour les aliments congelés, tels que les pizzas ou les suçons glacées. Nos modèles horizontaux ou verticaux assurent l'ajustement idéal pour tout espace.",
                                    link: "http://www.whirlpool.ca/fr_CA/Kitchen-1/Kitchen_Refrigeration_Freezers-3/102280030/",
                                    alt: "Congélateur",
                                    id: "freezers",
                                    ctaText: "En savoir plus"
                                }
                            ]
                        }
                    };
                }
                AppData.prototype.get = function () {
                    if (!(this.language in this.contents)) {
                        this.logger.error('Language does not exist');
                    }
                    return this.contents[this.language];
                };
                AppData.prototype.getLanguage = function () {
                    var url = window.location.href;
                    if (url.indexOf('/fr_CA') > -1)
                        return 'fr';
                    return 'en';
                };
                AppData = __decorate([
                    core_3.Injectable(), 
                    __metadata('design:paramtypes', [logger_service_2.Logger])
                ], AppData);
                return AppData;
            }());
            exports_3("AppData", AppData);
        }
    }
});
System.register("app/landing.video-player.selector", ['angular2/core', "app/services/logger.service", "app/services/googleapi.service"], function(exports_4, context_4) {
    "use strict";
    var __moduleName = context_4 && context_4.id;
    var core_4, logger_service_3, googleapi_service_1;
    var VideoPlayerSelector;
    return {
        setters:[
            function (core_4_1) {
                core_4 = core_4_1;
            },
            function (logger_service_3_1) {
                logger_service_3 = logger_service_3_1;
            },
            function (googleapi_service_1_1) {
                googleapi_service_1 = googleapi_service_1_1;
            }],
        execute: function() {
            VideoPlayerSelector = (function () {
                function VideoPlayerSelector(logger, api) {
                    this.logger = logger;
                    this.api = api;
                    this.selectedVideo = new core_4.EventEmitter();
                    this.ready = false;
                    this.selected = false;
                }
                VideoPlayerSelector.prototype.ngOnInit = function () {
                    var self = this;
                    if (this.data.id && this.data.id.length && !(this.data.desc && this.data.desc.length)) {
                        this.api.video(this.data.id, function (data, err) {
                            if (data && !err) {
                                self.initialize(data);
                            }
                            else {
                                self.logger.error(err);
                            }
                        });
                    }
                };
                VideoPlayerSelector.prototype.initialize = function (data) {
                    //assumes 1 result
                    data = data.items[0];
                    this.data.desc = data.snippet.description.replace(/\\n/g, '');
                    this.ready = true;
                };
                VideoPlayerSelector.prototype.select = function () {
                    this.selectedVideo.emit(this.id);
                    this.selected = true;
                };
                __decorate([
                    core_4.Input(), 
                    __metadata('design:type', Object)
                ], VideoPlayerSelector.prototype, "data", void 0);
                __decorate([
                    core_4.Input(), 
                    __metadata('design:type', Object)
                ], VideoPlayerSelector.prototype, "id", void 0);
                __decorate([
                    core_4.Input(), 
                    __metadata('design:type', Object)
                ], VideoPlayerSelector.prototype, "selected", void 0);
                __decorate([
                    core_4.Output(), 
                    __metadata('design:type', Object)
                ], VideoPlayerSelector.prototype, "selectedVideo", void 0);
                VideoPlayerSelector = __decorate([
                    core_4.Component({
                        selector: 'videoplayer-selector',
                        templateUrl: 'app/views/landing.video-player.selector.view.html'
                    }), 
                    __metadata('design:paramtypes', [logger_service_3.Logger, googleapi_service_1.GoogleApi])
                ], VideoPlayerSelector);
                return VideoPlayerSelector;
            }());
            exports_4("VideoPlayerSelector", VideoPlayerSelector);
        }
    }
});
System.register("app/landing.video-player.video", ['angular2/core', "app/services/logger.service"], function(exports_5, context_5) {
    "use strict";
    var __moduleName = context_5 && context_5.id;
    var core_5, logger_service_4;
    var VideoPlayerVideo;
    return {
        setters:[
            function (core_5_1) {
                core_5 = core_5_1;
            },
            function (logger_service_4_1) {
                logger_service_4 = logger_service_4_1;
            }],
        execute: function() {
            VideoPlayerVideo = (function () {
                function VideoPlayerVideo(logger) {
                    this.logger = logger;
                    this.ready = false;
                    this.selected = true;
                    this.ended = false;
                }
                VideoPlayerVideo.prototype.ngAfterViewInit = function () {
                    var self = this;
                    if (this.hasVideo()) {
                        this.player = new YT.Player(this.id, {
                            events: {
                                onReady: function () {
                                    self._onReady(self);
                                },
                                onStateChanged: function (state) {
                                    switch (state) {
                                        case 0:
                                            //ended
                                            self._onEnded(self);
                                            break;
                                        case 1:
                                        //playing
                                        case 2:
                                        //paused
                                        case 3:
                                        //buffering
                                        case 4:
                                    }
                                }
                            }
                        });
                    }
                };
                VideoPlayerVideo.prototype.ngOnChanges = function (changes) {
                    if (this.hasVideo()) {
                        if ("selected" in changes) {
                            console.log(changes);
                            if (changes.selected.currentValue) {
                                //if (this.ended) {
                                this.ended = false;
                                this.restart(this);
                            }
                            else {
                                this.pause(this);
                                this.reset(this);
                            }
                        }
                    }
                };
                VideoPlayerVideo.prototype.hasVideo = function () {
                    return this.id && this.id.length;
                };
                VideoPlayerVideo.prototype.hasImage = function () {
                    return this.image && this.image.length;
                };
                VideoPlayerVideo.prototype._onReady = function (self) {
                    //need to pass a ref of `this` since this is a callback on YT.Player
                    self.ready = true;
                };
                VideoPlayerVideo.prototype._onEnded = function (self) {
                    this.ended = true;
                };
                VideoPlayerVideo.prototype.play = function (self) {
                    if (!self)
                        self = this;
                    if (!self.ready || !self.hasVideo())
                        return;
                    self.player.playVideo();
                };
                VideoPlayerVideo.prototype.pause = function (self) {
                    if (!self)
                        self = this;
                    if (!self.ready || !self.hasVideo())
                        return;
                    self.player.pauseVideo();
                };
                VideoPlayerVideo.prototype.restart = function (self) {
                    if (!self)
                        self = this;
                    if (!self.ready || !self.hasVideo())
                        return;
                    //this is finicky, sometimes just doesn't work
                    //seems to be a bug with the player
                    //maybe we could que an interval on self.play until we see the state change, but that seems hacky
                    //self.reset(self)
                    self.player.seekTo(0);
                    self.play(self);
                };
                VideoPlayerVideo.prototype.reset = function (self) {
                    if (!self)
                        self = this;
                    if (!self.ready || !self.hasVideo())
                        return;
                    //self.player.seekTo(0)
                };
                __decorate([
                    core_5.Input(), 
                    __metadata('design:type', String)
                ], VideoPlayerVideo.prototype, "id", void 0);
                __decorate([
                    core_5.Input(), 
                    __metadata('design:type', String)
                ], VideoPlayerVideo.prototype, "image", void 0);
                __decorate([
                    core_5.Input(), 
                    __metadata('design:type', Boolean)
                ], VideoPlayerVideo.prototype, "selected", void 0);
                VideoPlayerVideo = __decorate([
                    core_5.Component({
                        selector: 'videoplayer-video',
                        templateUrl: 'app/views/landing.video-player.video.view.html'
                    }), 
                    __metadata('design:paramtypes', [logger_service_4.Logger])
                ], VideoPlayerVideo);
                return VideoPlayerVideo;
            }());
            exports_5("VideoPlayerVideo", VideoPlayerVideo);
        }
    }
});
System.register("app/landing.video-player.player", ['angular2/core', "app/services/logger.service", "app/landing.video-player.video"], function(exports_6, context_6) {
    "use strict";
    var __moduleName = context_6 && context_6.id;
    var core_6, logger_service_5, landing_video_player_video_1;
    var VideoPlayerPlayer;
    return {
        setters:[
            function (core_6_1) {
                core_6 = core_6_1;
            },
            function (logger_service_5_1) {
                logger_service_5 = logger_service_5_1;
            },
            function (landing_video_player_video_1_1) {
                landing_video_player_video_1 = landing_video_player_video_1_1;
            }],
        execute: function() {
            VideoPlayerPlayer = (function () {
                function VideoPlayerPlayer(logger) {
                    this.logger = logger;
                }
                __decorate([
                    core_6.Input(), 
                    __metadata('design:type', Object)
                ], VideoPlayerPlayer.prototype, "data", void 0);
                __decorate([
                    core_6.Input(), 
                    __metadata('design:type', Object)
                ], VideoPlayerPlayer.prototype, "currentId", void 0);
                VideoPlayerPlayer = __decorate([
                    core_6.Component({
                        selector: 'videoplayer-player',
                        templateUrl: 'app/views/landing.video-player.player.view.html',
                        directives: [landing_video_player_video_1.VideoPlayerVideo]
                    }), 
                    __metadata('design:paramtypes', [logger_service_5.Logger])
                ], VideoPlayerPlayer);
                return VideoPlayerPlayer;
            }());
            exports_6("VideoPlayerPlayer", VideoPlayerPlayer);
        }
    }
});
System.register("app/landing.video-player", ['angular2/core', "app/landing.video-player.selector", "app/landing.video-player.player", "app/services/logger.service", "app/services/appdata.service"], function(exports_7, context_7) {
    "use strict";
    var __moduleName = context_7 && context_7.id;
    var core_7, landing_video_player_selector_1, landing_video_player_player_1, logger_service_6, appdata_service_1;
    var VideoPlayer;
    return {
        setters:[
            function (core_7_1) {
                core_7 = core_7_1;
            },
            function (landing_video_player_selector_1_1) {
                landing_video_player_selector_1 = landing_video_player_selector_1_1;
            },
            function (landing_video_player_player_1_1) {
                landing_video_player_player_1 = landing_video_player_player_1_1;
            },
            function (logger_service_6_1) {
                logger_service_6 = logger_service_6_1;
            },
            function (appdata_service_1_1) {
                appdata_service_1 = appdata_service_1_1;
            }],
        execute: function() {
            VideoPlayer = (function () {
                function VideoPlayer(appdata, logger) {
                    this.appdata = appdata;
                    this.logger = logger;
                    this.currentId = 0;
                    this.enabled = true;
                    var data = appdata.get();
                    this.enabled = data.videoplayer.enabled;
                    this.title = data.videoplayer.title;
                    this.videos = data.videoplayer.videos;
                }
                VideoPlayer.prototype.select = function (id) {
                    this.currentId = id;
                };
                VideoPlayer = __decorate([
                    core_7.Component({
                        selector: 'videoplayer',
                        templateUrl: 'app/views/landing.video-player.view.html',
                        directives: [landing_video_player_player_1.VideoPlayerPlayer, landing_video_player_selector_1.VideoPlayerSelector]
                    }), 
                    __metadata('design:paramtypes', [appdata_service_1.AppData, logger_service_6.Logger])
                ], VideoPlayer);
                return VideoPlayer;
            }());
            exports_7("VideoPlayer", VideoPlayer);
        }
    }
});
System.register("app/landing.masthead", ['angular2/core', "app/services/appdata.service"], function(exports_8, context_8) {
    "use strict";
    var __moduleName = context_8 && context_8.id;
    var core_8, appdata_service_2;
    var AppMasthead;
    return {
        setters:[
            function (core_8_1) {
                core_8 = core_8_1;
            },
            function (appdata_service_2_1) {
                appdata_service_2 = appdata_service_2_1;
            }],
        execute: function() {
            AppMasthead = (function () {
                function AppMasthead(appdata) {
                    this.appdata = appdata;
                    this.enabled = true;
                    var data = appdata.get();
                    this.enabled = data.masthead.enabled;
                    this.image = data.masthead.image;
                    this.title = data.masthead.title;
                    this.alt = data.masthead.alt;
                }
                AppMasthead = __decorate([
                    core_8.Component({
                        selector: 'masthead',
                        templateUrl: 'app/views/masthead.view.html'
                    }), 
                    __metadata('design:paramtypes', [appdata_service_2.AppData])
                ], AppMasthead);
                return AppMasthead;
            }());
            exports_8("AppMasthead", AppMasthead);
        }
    }
});
/// <reference path="../typings/greensock/greensock.d.ts" />
System.register("app/landing.timeline-controller", [], function(exports_9, context_9) {
    "use strict";
    var __moduleName = context_9 && context_9.id;
    var TimelineController;
    return {
        setters:[],
        execute: function() {
            TimelineController = (function () {
                function TimelineController() {
                    this.timeline = new TimelineMax();
                }
                TimelineController.prototype.start = function () {
                    this.timeline.play();
                };
                TimelineController.prototype.pause = function () {
                    this.timeline.pause();
                };
                TimelineController.prototype.restart = function () {
                    this.timeline.seek(0);
                    this.timeline.play();
                };
                TimelineController.prototype.reset = function () {
                    this.timeline.seek(0);
                };
                return TimelineController;
            }());
            exports_9("TimelineController", TimelineController);
        }
    }
});
System.register("app/landing.feature.button", ['angular2/core', "app/landing.timeline-controller"], function(exports_10, context_10) {
    "use strict";
    var __moduleName = context_10 && context_10.id;
    var core_9, landing_timeline_controller_1;
    var FeatureButton;
    return {
        setters:[
            function (core_9_1) {
                core_9 = core_9_1;
            },
            function (landing_timeline_controller_1_1) {
                landing_timeline_controller_1 = landing_timeline_controller_1_1;
            }],
        execute: function() {
            FeatureButton = (function (_super) {
                __extends(FeatureButton, _super);
                function FeatureButton(elementRef) {
                    this.elementRef = elementRef;
                    this.rootElement = $(this.elementRef.nativeElement);
                    _super.call(this);
                }
                FeatureButton.prototype.playAnimations = function (bType) {
                    console.log(bType);
                    switch (bType) {
                        case "cart":
                            //TweenMax.to(this.target, 1, {delay:1.5, left:0, ease:Power3.easeOut});
                            //TweenMax.to(this.target, 1, {delay:2, left:50, css: {transform:"rotate(5deg)"}, ease:Power3.easeOut});
                            //TweenMax.to(this.target, .3, {delay:2.5, css: {transform:"rotate(0deg)"}, ease:Bounce.easeOut});
                            //TweenMax.to(this.target, 1, {delay:6, left:150, opacity:0, ease:Power3.easeIn});
                            TweenMax.to(this.target, 2, { delay: 1, css: { transform: "scale(1)" }, ease: Elastic.easeOut });
                            break;
                        case "star":
                            //TweenMax.to(this.target, 1, {delay:2.2, top: 0, ease:Bounce.easeOut});
                            //TweenMax.to(this.target, 1, {delay:6, top:150, opacity:0, ease:Power3.easeIn});
                            TweenMax.to(this.target, 2, { delay: 1.3, css: { transform: "scale(1)" }, ease: Elastic.easeOut });
                            break;
                        case "magnifier":
                            TweenMax.to(this.target, 2, { delay: 1.6, css: { transform: "scale(1)" }, ease: Elastic.easeOut });
                            //TweenMax.to(this.target, 1, {delay:6, opacity:0, ease:Power3.easeIn});
                            break;
                    }
                };
                FeatureButton.prototype.resetAnimations = function () {
                    switch (this.btnType) {
                        case "cart":
                            //TweenMax.to(this.target, 0, {delay:0, opacity:1, left:-150, ease:Power3.easeOut});
                            TweenMax.to(this.target, 0, { delay: 0, opacity: 1, css: { transform: "scale(0.01)" }, ease: Power3.easeOut });
                            break;
                        case "star":
                            //TweenMax.to(this.target, 0, {delay:0, opacity:1, top:-160, ease:Power3.easeOut});
                            TweenMax.to(this.target, 0, { delay: 0, opacity: 1, css: { transform: "scale(0.01)" }, ease: Power3.easeOut });
                            break;
                        case "magnifier":
                            TweenMax.to(this.target, 0, { delay: 0, opacity: 1, css: { transform: "scale(0.01)" }, ease: Power3.easeOut });
                            break;
                    }
                    this.playAnimations(this.btnType);
                };
                FeatureButton.prototype.ngAfterViewInit = function () {
                    //this is ugly, but the syntax of gsap restricts me from decoupling animations from their target element
                    //I could probably adjust timeline-controller to instantiate timelines without specifying a target element
                    //but just want to get it working for now
                    //Not that ugly, but didn't hit the ask.
                    this.target = $(this.rootElement).find('img');
                    this.targetWidth = $(this.rootElement).find('img').parent().width();
                    this.targetHeight = $(this.rootElement).find('img').parent().height();
                    /* switch(this.btnType) {
                         case "cart":
                             this.timeline.to(target, 0, { left: "-="+width })
                                 .to(target, 1, { ease: Power4.easeOut, left: "+="+width })
                                 .to(target, 0.2, { ease: Power1.easeOut, css: {transform:"rotate(5deg)"} }).add('stop')
                                 .to(target, 0.1, { left: "+=" + 1 }, 'stop').add('backDown')
                                 .to(target, 0.1, { left: "-=" + 1 }, 'backDown')
                                 .to(target, 0.1, { ease: Power1.easeIn, css: {transform:"rotate(0deg)"} })
                             break;
                         case "star":
                             this.timeline.add('start').set({}, {}, 'start=2')
                                 .to(target, 0, { top: "-="+height })
                                 .to(target, 1, { ease: Bounce.easeOut, top: "+="+height })
                             break;
                         case "magnifier":
                             this.timeline.add('start').set({}, {}, 'start=3')
                                 .to(target, 0, { opacity: 0, css: { transform: "scale(0.2)" } })
                                 .to(target, .5
                                 , { ease: Back.easeOut, opacity: 1, css: {transform:"scale(1)"} })
                             break;
                     } */
                    //setInterval(() => {
                    //    this.restart()
                    // }, 10000)
                    this.resetAnimations();
                };
                __decorate([
                    core_9.Input(), 
                    __metadata('design:type', Object)
                ], FeatureButton.prototype, "btnIcon", void 0);
                __decorate([
                    core_9.Input(), 
                    __metadata('design:type', Object)
                ], FeatureButton.prototype, "btnTitle", void 0);
                __decorate([
                    core_9.Input(), 
                    __metadata('design:type', Object)
                ], FeatureButton.prototype, "btnRollOverCopy", void 0);
                __decorate([
                    core_9.Input(), 
                    __metadata('design:type', Object)
                ], FeatureButton.prototype, "btnRollOverCTA", void 0);
                __decorate([
                    core_9.Input(), 
                    __metadata('design:type', Object)
                ], FeatureButton.prototype, "btnLink", void 0);
                __decorate([
                    core_9.Input(), 
                    __metadata('design:type', Object)
                ], FeatureButton.prototype, "btnType", void 0);
                __decorate([
                    core_9.Input(), 
                    __metadata('design:type', Object)
                ], FeatureButton.prototype, "btnAlt", void 0);
                FeatureButton = __decorate([
                    core_9.Component({
                        selector: 'feature-button',
                        templateUrl: 'app/views/landing.feature.button.view.html',
                    }),
                    __param(0, core_9.Inject(core_9.ElementRef)), 
                    __metadata('design:paramtypes', [core_9.ElementRef])
                ], FeatureButton);
                return FeatureButton;
            }(landing_timeline_controller_1.TimelineController));
            exports_10("FeatureButton", FeatureButton);
        }
    }
});
System.register("app/models/features.model", [], function(exports_11, context_11) {
    "use strict";
    var __moduleName = context_11 && context_11.id;
    var FeatureModel;
    return {
        setters:[],
        execute: function() {
            FeatureModel = (function () {
                function FeatureModel(btnIcon, btnTitle, btnRollOverCopy, btnRollOverCTA, btnLink, btnType, btnAlt) {
                    if (btnIcon === void 0) { btnIcon = ""; }
                    if (btnTitle === void 0) { btnTitle = ""; }
                    if (btnRollOverCopy === void 0) { btnRollOverCopy = ""; }
                    if (btnRollOverCTA === void 0) { btnRollOverCTA = ""; }
                    if (btnLink === void 0) { btnLink = ""; }
                    if (btnType === void 0) { btnType = ""; }
                    if (btnAlt === void 0) { btnAlt = ""; }
                    this.btnIcon = btnIcon;
                    this.btnTitle = btnTitle;
                    this.btnRollOverCopy = btnRollOverCopy;
                    this.btnRollOverCTA = btnRollOverCTA;
                    this.btnLink = btnLink;
                    this.btnType = btnType;
                    this.btnAlt = btnAlt;
                }
                return FeatureModel;
            }());
            exports_11("FeatureModel", FeatureModel);
        }
    }
});
System.register("app/landing.feature", ['angular2/core', "app/landing.feature.button", "app/models/features.model", "app/services/appdata.service"], function(exports_12, context_12) {
    "use strict";
    var __moduleName = context_12 && context_12.id;
    var core_10, landing_feature_button_1, features_model_1, appdata_service_3;
    var Features;
    return {
        setters:[
            function (core_10_1) {
                core_10 = core_10_1;
            },
            function (landing_feature_button_1_1) {
                landing_feature_button_1 = landing_feature_button_1_1;
            },
            function (features_model_1_1) {
                features_model_1 = features_model_1_1;
            },
            function (appdata_service_3_1) {
                appdata_service_3 = appdata_service_3_1;
            }],
        execute: function() {
            Features = (function () {
                function Features(appdata) {
                    this.appdata = appdata;
                    this.featureButtons = [];
                    this.enabled = true;
                    var data = appdata.get();
                    this.enabled = data.features.enabled;
                    for (var i in data.features.features) {
                        var feature = data.features.features[i];
                        this.featureButtons.push(new features_model_1.FeatureModel(feature.image, feature.title, feature.desc, feature.cta, feature.link, feature.type, feature.alt));
                    }
                }
                Features = __decorate([
                    core_10.Component({
                        selector: 'features',
                        templateUrl: 'app/views/landing.feature.view.html',
                        directives: [landing_feature_button_1.FeatureButton],
                    }), 
                    __metadata('design:paramtypes', [appdata_service_3.AppData])
                ], Features);
                return Features;
            }());
            exports_12("Features", Features);
        }
    }
});
System.register("app/landing.learn-more.button", ['angular2/core'], function(exports_13, context_13) {
    "use strict";
    var __moduleName = context_13 && context_13.id;
    var core_11;
    var LearnMoreButton;
    return {
        setters:[
            function (core_11_1) {
                core_11 = core_11_1;
            }],
        execute: function() {
            LearnMoreButton = (function () {
                function LearnMoreButton() {
                }
                __decorate([
                    core_11.Input(), 
                    __metadata('design:type', Object)
                ], LearnMoreButton.prototype, "link", void 0);
                __decorate([
                    core_11.Input(), 
                    __metadata('design:type', Object)
                ], LearnMoreButton.prototype, "text", void 0);
                LearnMoreButton = __decorate([
                    core_11.Component({
                        selector: 'learn-more-button',
                        templateUrl: 'app/views/landing.learn-more.button.view.html'
                    }), 
                    __metadata('design:paramtypes', [])
                ], LearnMoreButton);
                return LearnMoreButton;
            }());
            exports_13("LearnMoreButton", LearnMoreButton);
        }
    }
});
System.register("app/product.selector.slide", ['angular2/core', "app/landing.learn-more.button"], function(exports_14, context_14) {
    "use strict";
    var __moduleName = context_14 && context_14.id;
    var core_12, landing_learn_more_button_1;
    var ProductSlide;
    return {
        setters:[
            function (core_12_1) {
                core_12 = core_12_1;
            },
            function (landing_learn_more_button_1_1) {
                landing_learn_more_button_1 = landing_learn_more_button_1_1;
            }],
        execute: function() {
            ProductSlide = (function () {
                function ProductSlide() {
                }
                ProductSlide.prototype.ngOnChanges = function (changes) {
                    if ("selected" in changes) {
                        console.log(changes);
                    }
                };
                __decorate([
                    core_12.Input(), 
                    __metadata('design:type', Object)
                ], ProductSlide.prototype, "fridge", void 0);
                __decorate([
                    core_12.Input(), 
                    __metadata('design:type', Object)
                ], ProductSlide.prototype, "fridgeTitle", void 0);
                __decorate([
                    core_12.Input(), 
                    __metadata('design:type', Object)
                ], ProductSlide.prototype, "fridgeDescription", void 0);
                __decorate([
                    core_12.Input(), 
                    __metadata('design:type', Object)
                ], ProductSlide.prototype, "fridgeUrl", void 0);
                __decorate([
                    core_12.Input(), 
                    __metadata('design:type', Object)
                ], ProductSlide.prototype, "fridgeId", void 0);
                __decorate([
                    core_12.Input(), 
                    __metadata('design:type', Object)
                ], ProductSlide.prototype, "selected", void 0);
                __decorate([
                    core_12.Input(), 
                    __metadata('design:type', Object)
                ], ProductSlide.prototype, "ctaText", void 0);
                __decorate([
                    core_12.Input(), 
                    __metadata('design:type', Object)
                ], ProductSlide.prototype, "fridgeAlt", void 0);
                ProductSlide = __decorate([
                    core_12.Component({
                        selector: 'product-slide',
                        templateUrl: 'app/views/product.selector.singleSlide.view.html',
                        directives: [landing_learn_more_button_1.LearnMoreButton]
                    }), 
                    __metadata('design:paramtypes', [])
                ], ProductSlide);
                return ProductSlide;
            }());
            exports_14("ProductSlide", ProductSlide);
        }
    }
});
System.register("app/models/products.model", [], function(exports_15, context_15) {
    "use strict";
    var __moduleName = context_15 && context_15.id;
    var ProductModel;
    return {
        setters:[],
        execute: function() {
            ProductModel = (function () {
                function ProductModel(prodImage, prodName, prodDescription, prodUrl, prodId, ctaText, prodAlt) {
                    if (prodImage === void 0) { prodImage = ""; }
                    if (prodName === void 0) { prodName = ""; }
                    if (prodDescription === void 0) { prodDescription = ""; }
                    if (prodUrl === void 0) { prodUrl = ""; }
                    if (prodId === void 0) { prodId = ""; }
                    if (ctaText === void 0) { ctaText = ""; }
                    if (prodAlt === void 0) { prodAlt = ""; }
                    this.prodImage = prodImage;
                    this.prodName = prodName;
                    this.prodDescription = prodDescription;
                    this.prodUrl = prodUrl;
                    this.prodId = prodId;
                    this.ctaText = ctaText;
                    this.prodAlt = prodAlt;
                }
                return ProductModel;
            }());
            exports_15("ProductModel", ProductModel);
        }
    }
});
System.register("app/product.selector.slides", ['angular2/core', "app/product.selector.slide", "app/landing.timeline-controller"], function(exports_16, context_16) {
    "use strict";
    var __moduleName = context_16 && context_16.id;
    var core_13, product_selector_slide_1, landing_timeline_controller_2;
    var ProductSlides;
    return {
        setters:[
            function (core_13_1) {
                core_13 = core_13_1;
            },
            function (product_selector_slide_1_1) {
                product_selector_slide_1 = product_selector_slide_1_1;
            },
            function (landing_timeline_controller_2_1) {
                landing_timeline_controller_2 = landing_timeline_controller_2_1;
            }],
        execute: function() {
            ProductSlides = (function (_super) {
                __extends(ProductSlides, _super);
                function ProductSlides(elementRef) {
                    _super.call(this);
                    this.isAnimating = new core_13.EventEmitter();
                    this.elementRef = elementRef;
                    this.animating = false;
                    this.imageTop = 155;
                    this.titleTop = 170;
                    this.descTop = 215;
                    this.learnTop = 500;
                }
                Object.defineProperty(ProductSlides.prototype, "animating", {
                    set: function (a) {
                        if (this._animating != a) {
                            this._animating = a;
                            this.isAnimating.emit(a);
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                ProductSlides.prototype.ngAfterViewInit = function () {
                    this.rootElement = $(this.elementRef.nativeElement);
                    var target = this.selectedProduct.prodId;
                    this.playIn(this, true, target);
                };
                ProductSlides.prototype.ngOnChanges = function (changes) {
                    var self = this;
                    if ("selectedProduct" in changes && !this.animating) {
                        this.playOut(changes.selectedProduct.previousValue.prodId, function () {
                            //just get it done
                            if (changes.selectedProduct.currentValue.prodId == 'under-counter' && $('product-selector').hasClass('fr') && $(window).innerWidth() > 820) {
                                self.descTop = 265;
                            }
                            else {
                                self.descTop = 215;
                            }
                            self.playIn(self, false, changes.selectedProduct.currentValue.prodId);
                        });
                    }
                };
                ProductSlides.prototype.playOut = function (target, cb) {
                    var self = this;
                    target = $(this.rootElement).find('#' + target);
                    var image = ($(target).find('.rl-wp-lndng-fridge'));
                    var title = ($(target).find('.rl-wp-lndng-fridge-title'));
                    var desc = ($(target).find('.rl-wp-lndng-fridge-desc'));
                    var learn = ($(target).find('learn-more-button'));
                    this.animating = true;
                    TweenMax.to(image, .3, { delay: 0, opacity: 0, ease: Power3.easeOut });
                    TweenMax.to(title, .3, { delay: 0, opacity: 0, ease: Power3.easeOut });
                    TweenMax.to(desc, .3, { delay: 0, opacity: 0, ease: Power3.easeOut });
                    TweenMax.to(learn, .3, { delay: 0, opacity: 0, ease: Power3.easeOut, onComplete: function () {
                            TweenMax.to(target, 0, { delay: 0, opacity: 0 });
                            cb();
                        } });
                };
                ProductSlides.prototype.playIn = function (self, delay, target) {
                    if (delay === void 0) { delay = true; }
                    if (!self)
                        self = this;
                    target = $(self.rootElement).find('#' + target);
                    $(self.rootElement).find('product-slide').css('zIndex', 1);
                    $(target).parent().css('zIndex', 2);
                    var image = ($(target).find('.rl-wp-lndng-fridge'));
                    var title = ($(target).find('.rl-wp-lndng-fridge-title'));
                    var desc = ($(target).find('.rl-wp-lndng-fridge-desc'));
                    var learn = ($(target).find('learn-more-button'));
                    var isMobile = $(window).innerWidth() <= 820;
                    if (isMobile) {
                        TweenMax.to(image, 0, { delay: 0, top: -20 });
                        TweenMax.to(title, 0, { delay: 0, top: -20 });
                        TweenMax.to(desc, 0, { delay: 0, top: -20 });
                        TweenMax.to(learn, 0, { delay: 0, top: -20 });
                    }
                    else {
                        TweenMax.to(image, 0, { delay: 0, top: this.imageTop - 20 });
                        TweenMax.to(title, 0, { delay: 0, top: this.titleTop - 20 });
                        TweenMax.to(desc, 0, { delay: 0, top: this.descTop - 20 });
                        TweenMax.to(learn, 0, { delay: 0, top: this.learnTop - 20 });
                    }
                    TweenMax.to(target, 0, { delay: 0.1, opacity: 1 });
                    if (delay) {
                        if (isMobile) {
                            TweenMax.to(image, 1.5, { delay: .6, top: 0, opacity: 1, ease: Power1.easeOut });
                            TweenMax.to(title, 1.5, { delay: .9, top: 0, opacity: 1, ease: Power1.easeOut });
                            TweenMax.to(desc, 1.5, { delay: 1.2, top: 0, opacity: 1, ease: Power1.easeOut });
                            TweenMax.to(learn, 1.5, {
                                delay: 1.2, top: 0, opacity: 1, ease: Power1.easeOut, onComplete: function () {
                                    self.animating = false;
                                }
                            });
                        }
                        else {
                            TweenMax.to(image, 1.5, { delay: .6, top: this.imageTop, opacity: 1, ease: Power1.easeOut });
                            TweenMax.to(title, 1.5, { delay: .9, top: this.titleTop, opacity: 1, ease: Power1.easeOut });
                            TweenMax.to(desc, 1.5, { delay: 1.2, top: this.descTop, opacity: 1, ease: Power1.easeOut });
                            TweenMax.to(learn, 1.5, {
                                delay: 1.2, top: this.learnTop, opacity: 1, ease: Power1.easeOut, onComplete: function () {
                                    self.animating = false;
                                }
                            });
                        }
                    }
                    else {
                        if (isMobile) {
                            TweenMax.to(image, 1.5, { delay: .5, top: 0, opacity: 1, ease: Power1.easeOut });
                            TweenMax.to(title, 1.5, { delay: 0.7, top: 0, opacity: 1, ease: Power1.easeOut });
                            TweenMax.to(desc, 1.5, { delay: 0.9, top: 0, opacity: 1, ease: Power1.easeOut });
                            TweenMax.to(learn, 1.5, {
                                delay: 0.9, top: 0, opacity: 1, ease: Power1.easeOut, onComplete: function () {
                                    self.animating = false;
                                }
                            });
                        }
                        else {
                            TweenMax.to(image, 1.5, { delay: .6, top: this.imageTop, opacity: 1, ease: Power1.easeOut });
                            TweenMax.to(title, 1.5, { delay: .9, top: this.titleTop, opacity: 1, ease: Power1.easeOut });
                            TweenMax.to(desc, 1.5, { delay: 1.2, top: this.descTop, opacity: 1, ease: Power1.easeOut });
                            TweenMax.to(learn, 1.5, {
                                delay: 1.2, top: this.learnTop, opacity: 1, ease: Power1.easeOut, onComplete: function () {
                                    self.animating = false;
                                }
                            });
                        }
                    }
                };
                __decorate([
                    core_13.Input(), 
                    __metadata('design:type', Object)
                ], ProductSlides.prototype, "products", void 0);
                __decorate([
                    core_13.Input(), 
                    __metadata('design:type', Object)
                ], ProductSlides.prototype, "selectedProduct", void 0);
                __decorate([
                    core_13.Output(), 
                    __metadata('design:type', Object)
                ], ProductSlides.prototype, "isAnimating", void 0);
                ProductSlides = __decorate([
                    core_13.Component({
                        selector: 'product-slides',
                        templateUrl: 'app/views/product.selector.slides.view.html',
                        directives: [product_selector_slide_1.ProductSlide]
                    }),
                    __param(0, core_13.Inject(core_13.ElementRef)), 
                    __metadata('design:paramtypes', [core_13.ElementRef])
                ], ProductSlides);
                return ProductSlides;
            }(landing_timeline_controller_2.TimelineController));
            exports_16("ProductSlides", ProductSlides);
        }
    }
});
System.register("app/insertBreak.pipe", ['angular2/core'], function(exports_17, context_17) {
    "use strict";
    var __moduleName = context_17 && context_17.id;
    var core_14;
    var InsertBreakPipe;
    return {
        setters:[
            function (core_14_1) {
                core_14 = core_14_1;
            }],
        execute: function() {
            InsertBreakPipe = (function () {
                function InsertBreakPipe() {
                }
                InsertBreakPipe.prototype.transform = function (str) {
                    console.log(str);
                    return str.replace(/\s/g, '<br/>');
                };
                InsertBreakPipe = __decorate([
                    core_14.Pipe({
                        name: "insertBreak"
                    }), 
                    __metadata('design:paramtypes', [])
                ], InsertBreakPipe);
                return InsertBreakPipe;
            }());
            exports_17("InsertBreakPipe", InsertBreakPipe);
        }
    }
});
System.register("app/product.selector.nav", ['angular2/core', "app/services/appdata.service", "app/insertBreak.pipe"], function(exports_18, context_18) {
    "use strict";
    var __moduleName = context_18 && context_18.id;
    var core_15, appdata_service_4, insertBreak_pipe_1;
    var ProductSelectorNav;
    return {
        setters:[
            function (core_15_1) {
                core_15 = core_15_1;
            },
            function (appdata_service_4_1) {
                appdata_service_4 = appdata_service_4_1;
            },
            function (insertBreak_pipe_1_1) {
                insertBreak_pipe_1 = insertBreak_pipe_1_1;
            }],
        execute: function() {
            ProductSelectorNav = (function () {
                function ProductSelectorNav(appdata) {
                    this.appdata = appdata;
                    this.productSelected = new core_15.EventEmitter();
                    this.enabled = true;
                    var data = appdata.get();
                    this.enabled = data.productselector.enabled;
                    this.ctaText = data.productselector.nav.text;
                    this.ctaLink = data.productselector.nav.link;
                }
                ProductSelectorNav.prototype.select = function (product) {
                    this.productSelected.emit(product);
                };
                __decorate([
                    core_15.Input(), 
                    __metadata('design:type', Object)
                ], ProductSelectorNav.prototype, "products", void 0);
                __decorate([
                    core_15.Input(), 
                    __metadata('design:type', Object)
                ], ProductSelectorNav.prototype, "selectedProduct", void 0);
                __decorate([
                    core_15.Output(), 
                    __metadata('design:type', Object)
                ], ProductSelectorNav.prototype, "productSelected", void 0);
                ProductSelectorNav = __decorate([
                    core_15.Component({
                        selector: 'product-selector-nav',
                        pipes: [insertBreak_pipe_1.InsertBreakPipe],
                        templateUrl: 'app/views/product.selector.nav.view.html'
                    }), 
                    __metadata('design:paramtypes', [appdata_service_4.AppData])
                ], ProductSelectorNav);
                return ProductSelectorNav;
            }());
            exports_18("ProductSelectorNav", ProductSelectorNav);
        }
    }
});
System.register("app/product.selector", ['angular2/core', "app/product.selector.slides", "app/product.selector.nav", "app/services/appdata.service", "app/models/products.model"], function(exports_19, context_19) {
    "use strict";
    var __moduleName = context_19 && context_19.id;
    var core_16, product_selector_slides_1, product_selector_nav_1, appdata_service_5, products_model_1;
    var ProductSelector;
    return {
        setters:[
            function (core_16_1) {
                core_16 = core_16_1;
            },
            function (product_selector_slides_1_1) {
                product_selector_slides_1 = product_selector_slides_1_1;
            },
            function (product_selector_nav_1_1) {
                product_selector_nav_1 = product_selector_nav_1_1;
            },
            function (appdata_service_5_1) {
                appdata_service_5 = appdata_service_5_1;
            },
            function (products_model_1_1) {
                products_model_1 = products_model_1_1;
            }],
        execute: function() {
            ProductSelector = (function () {
                function ProductSelector(appdata) {
                    this.appdata = appdata;
                    this.enabled = true;
                    var data = appdata.get();
                    this.enabled = data.productselector.enabled;
                    this.title = data.productselector.title;
                    this.products = [];
                    for (var i in data.productselector.products) {
                        var product = data.productselector.products[i];
                        this.products.push(new products_model_1.ProductModel(product.image, product.title, product.desc, product.link, product.id, product.ctaText, product.alt));
                    }
                    this.selectedProduct = this.products[0];
                    this.animating = false;
                }
                ProductSelector.prototype.ngOnChanges = function (changes) {
                    if ("selectedProduct" in changes) {
                        console.log('product selector changed product: ', changes.selectedProduct.currentValue);
                    }
                };
                //@Output on product.selector.nav
                ProductSelector.prototype.productSelected = function (product) {
                    if (!this.animating) {
                        this.selectedProduct = product;
                        console.log('product.selector got new product: ' + product.prodId);
                    }
                };
                //@Output on product.selector.slides
                ProductSelector.prototype.isAnimating = function (animating) {
                    this.animating = animating;
                };
                ProductSelector = __decorate([
                    core_16.Component({
                        selector: 'product-selector',
                        templateUrl: 'app/views/product.selector.view.html',
                        directives: [product_selector_slides_1.ProductSlides, product_selector_nav_1.ProductSelectorNav],
                    }), 
                    __metadata('design:paramtypes', [appdata_service_5.AppData])
                ], ProductSelector);
                return ProductSelector;
            }());
            exports_19("ProductSelector", ProductSelector);
        }
    }
});
System.register("app/landing.morefeatures.feature", ['angular2/core'], function(exports_20, context_20) {
    "use strict";
    var __moduleName = context_20 && context_20.id;
    var core_17;
    var MoreFeaturesFeature;
    return {
        setters:[
            function (core_17_1) {
                core_17 = core_17_1;
            }],
        execute: function() {
            MoreFeaturesFeature = (function () {
                function MoreFeaturesFeature() {
                }
                __decorate([
                    core_17.Input(), 
                    __metadata('design:type', Object)
                ], MoreFeaturesFeature.prototype, "image", void 0);
                __decorate([
                    core_17.Input(), 
                    __metadata('design:type', Object)
                ], MoreFeaturesFeature.prototype, "title", void 0);
                __decorate([
                    core_17.Input(), 
                    __metadata('design:type', Object)
                ], MoreFeaturesFeature.prototype, "link", void 0);
                __decorate([
                    core_17.Input(), 
                    __metadata('design:type', Object)
                ], MoreFeaturesFeature.prototype, "text", void 0);
                __decorate([
                    core_17.Input(), 
                    __metadata('design:type', Object)
                ], MoreFeaturesFeature.prototype, "cta", void 0);
                __decorate([
                    core_17.Input(), 
                    __metadata('design:type', Object)
                ], MoreFeaturesFeature.prototype, "alt", void 0);
                MoreFeaturesFeature = __decorate([
                    core_17.Component({
                        selector: 'more-features-feature',
                        templateUrl: 'app/views/landing.morefeatures.feature.view.html',
                    }), 
                    __metadata('design:paramtypes', [])
                ], MoreFeaturesFeature);
                return MoreFeaturesFeature;
            }());
            exports_20("MoreFeaturesFeature", MoreFeaturesFeature);
        }
    }
});
System.register("app/landing.morefeatures", ['angular2/core', "app/landing.morefeatures.feature", "app/services/appdata.service", "app/services/logger.service"], function(exports_21, context_21) {
    "use strict";
    var __moduleName = context_21 && context_21.id;
    var core_18, landing_morefeatures_feature_1, appdata_service_6, logger_service_7;
    var MoreFeatures;
    return {
        setters:[
            function (core_18_1) {
                core_18 = core_18_1;
            },
            function (landing_morefeatures_feature_1_1) {
                landing_morefeatures_feature_1 = landing_morefeatures_feature_1_1;
            },
            function (appdata_service_6_1) {
                appdata_service_6 = appdata_service_6_1;
            },
            function (logger_service_7_1) {
                logger_service_7 = logger_service_7_1;
            }],
        execute: function() {
            MoreFeatures = (function () {
                function MoreFeatures(appdata, logger) {
                    this.appdata = appdata;
                    this.logger = logger;
                    this.enabled = true;
                    var data = appdata.get();
                    this.enabled = data.morefeatures.enabled;
                    this.title = data.morefeatures.title;
                    this.moreFeatures = data.morefeatures.features;
                }
                MoreFeatures = __decorate([
                    core_18.Component({
                        selector: 'more-features',
                        templateUrl: 'app/views/landing.morefeatures.view.html',
                        directives: [landing_morefeatures_feature_1.MoreFeaturesFeature],
                    }), 
                    __metadata('design:paramtypes', [appdata_service_6.AppData, logger_service_7.Logger])
                ], MoreFeatures);
                return MoreFeatures;
            }());
            exports_21("MoreFeatures", MoreFeatures);
        }
    }
});
System.register("app/landing.banner", ['angular2/core', "app/landing.learn-more.button", "app/services/appdata.service", "app/services/logger.service"], function(exports_22, context_22) {
    "use strict";
    var __moduleName = context_22 && context_22.id;
    var core_19, landing_learn_more_button_2, appdata_service_7, logger_service_8;
    var Banner;
    return {
        setters:[
            function (core_19_1) {
                core_19 = core_19_1;
            },
            function (landing_learn_more_button_2_1) {
                landing_learn_more_button_2 = landing_learn_more_button_2_1;
            },
            function (appdata_service_7_1) {
                appdata_service_7 = appdata_service_7_1;
            },
            function (logger_service_8_1) {
                logger_service_8 = logger_service_8_1;
            }],
        execute: function() {
            Banner = (function () {
                function Banner(appdata, logger) {
                    this.appdata = appdata;
                    this.logger = logger;
                    this.enabled = true;
                    var data = appdata.get();
                    this.enabled = data.banner.enabled;
                    this.link = data.banner.link;
                    this.image = data.banner.image;
                    this.ctaText = data.banner.ctaText;
                }
                Banner = __decorate([
                    core_19.Component({
                        selector: 'banner',
                        templateUrl: 'app/views/landing.banner.view.html',
                        directives: [landing_learn_more_button_2.LearnMoreButton],
                    }), 
                    __metadata('design:paramtypes', [appdata_service_7.AppData, logger_service_8.Logger])
                ], Banner);
                return Banner;
            }());
            exports_22("Banner", Banner);
        }
    }
});
System.register("app/landing.header", ['angular2/core'], function(exports_23, context_23) {
    "use strict";
    var __moduleName = context_23 && context_23.id;
    var core_20;
    var Header;
    return {
        setters:[
            function (core_20_1) {
                core_20 = core_20_1;
            }],
        execute: function() {
            Header = (function () {
                function Header() {
                }
                Header = __decorate([
                    core_20.Component({
                        selector: 'header',
                        templateUrl: 'app/views/landing.header.view.html',
                    }), 
                    __metadata('design:paramtypes', [])
                ], Header);
                return Header;
            }());
            exports_23("Header", Header);
        }
    }
});
System.register("app/landing.footer", ['angular2/core'], function(exports_24, context_24) {
    "use strict";
    var __moduleName = context_24 && context_24.id;
    var core_21;
    var Footer;
    return {
        setters:[
            function (core_21_1) {
                core_21 = core_21_1;
            }],
        execute: function() {
            Footer = (function () {
                function Footer() {
                }
                Footer = __decorate([
                    core_21.Component({
                        selector: 'footer',
                        templateUrl: 'app/views/landing.footer.view.html',
                    }), 
                    __metadata('design:paramtypes', [])
                ], Footer);
                return Footer;
            }());
            exports_24("Footer", Footer);
        }
    }
});
System.register("app/app", ['angular2/platform/browser', 'angular2/http', "app/services/logger.service", "app/services/googleapi.service", "app/services/appdata.service", 'angular2/core', "app/landing.video-player", "app/landing.masthead", "app/landing.feature", "app/product.selector", "app/landing.morefeatures", "app/landing.banner", "app/landing.header", "app/landing.footer"], function(exports_25, context_25) {
    "use strict";
    var __moduleName = context_25 && context_25.id;
    var browser_1, http_2, logger_service_9, googleapi_service_2, appdata_service_8, core_22, landing_video_player_1, landing_masthead_1, landing_feature_1, product_selector_1, landing_morefeatures_1, landing_banner_1, landing_header_1, landing_footer_1;
    var AppComponent;
    return {
        setters:[
            function (browser_1_1) {
                browser_1 = browser_1_1;
            },
            function (http_2_1) {
                http_2 = http_2_1;
            },
            function (logger_service_9_1) {
                logger_service_9 = logger_service_9_1;
            },
            function (googleapi_service_2_1) {
                googleapi_service_2 = googleapi_service_2_1;
            },
            function (appdata_service_8_1) {
                appdata_service_8 = appdata_service_8_1;
            },
            function (core_22_1) {
                core_22 = core_22_1;
            },
            function (landing_video_player_1_1) {
                landing_video_player_1 = landing_video_player_1_1;
            },
            function (landing_masthead_1_1) {
                landing_masthead_1 = landing_masthead_1_1;
            },
            function (landing_feature_1_1) {
                landing_feature_1 = landing_feature_1_1;
            },
            function (product_selector_1_1) {
                product_selector_1 = product_selector_1_1;
            },
            function (landing_morefeatures_1_1) {
                landing_morefeatures_1 = landing_morefeatures_1_1;
            },
            function (landing_banner_1_1) {
                landing_banner_1 = landing_banner_1_1;
            },
            function (landing_header_1_1) {
                landing_header_1 = landing_header_1_1;
            },
            function (landing_footer_1_1) {
                landing_footer_1 = landing_footer_1_1;
            }],
        execute: function() {
            AppComponent = (function () {
                function AppComponent(appdata) {
                    this.appdata = appdata;
                    this.language = appdata.language;
                }
                AppComponent = __decorate([
                    core_22.Component({
                        selector: 'rl-wp-refer-landing',
                        templateUrl: 'app/views/app.view.html',
                        directives: [landing_video_player_1.VideoPlayer, landing_masthead_1.AppMasthead, landing_feature_1.Features, product_selector_1.ProductSelector, landing_banner_1.Banner, landing_morefeatures_1.MoreFeatures, landing_header_1.Header, landing_footer_1.Footer]
                    }), 
                    __metadata('design:paramtypes', [appdata_service_8.AppData])
                ], AppComponent);
                return AppComponent;
            }());
            browser_1.bootstrap(AppComponent, [http_2.HTTP_PROVIDERS, logger_service_9.Logger, googleapi_service_2.GoogleApi, appdata_service_8.AppData]);
        }
    }
});
System.register("cuat/temp/landing.video-player.selector", ['angular2/core', './services/logger.service', './services/googleapi.service'], function(exports_26, context_26) {
    "use strict";
    var __moduleName = context_26 && context_26.id;
    var core_23, logger_service_10, googleapi_service_3;
    var VideoPlayerSelector;
    return {
        setters:[
            function (core_23_1) {
                core_23 = core_23_1;
            },
            function (logger_service_10_1) {
                logger_service_10 = logger_service_10_1;
            },
            function (googleapi_service_3_1) {
                googleapi_service_3 = googleapi_service_3_1;
            }],
        execute: function() {
            VideoPlayerSelector = (function () {
                function VideoPlayerSelector(logger, api) {
                    this.logger = logger;
                    this.api = api;
                    this.selectedVideo = new core_23.EventEmitter();
                    this.ready = false;
                    this.selected = false;
                }
                VideoPlayerSelector.prototype.ngOnInit = function () {
                    var self = this;
                    if (this.data.id && this.data.id.length && !(this.data.desc && this.data.desc.length)) {
                        this.api.video(this.data.id, function (data, err) {
                            if (data && !err) {
                                self.initialize(data);
                            }
                            else {
                                self.logger.error(err);
                            }
                        });
                    }
                };
                VideoPlayerSelector.prototype.initialize = function (data) {
                    //assumes 1 result
                    data = data.items[0];
                    this.data.desc = data.snippet.description.replace(/\\n/g, '');
                    this.ready = true;
                };
                VideoPlayerSelector.prototype.select = function () {
                    this.selectedVideo.emit(this.id);
                    this.selected = true;
                };
                __decorate([
                    core_23.Input(), 
                    __metadata('design:type', Object)
                ], VideoPlayerSelector.prototype, "data", void 0);
                __decorate([
                    core_23.Input(), 
                    __metadata('design:type', Object)
                ], VideoPlayerSelector.prototype, "id", void 0);
                __decorate([
                    core_23.Input(), 
                    __metadata('design:type', Object)
                ], VideoPlayerSelector.prototype, "selected", void 0);
                __decorate([
                    core_23.Output(), 
                    __metadata('design:type', Object)
                ], VideoPlayerSelector.prototype, "selectedVideo", void 0);
                VideoPlayerSelector = __decorate([
                    core_23.Component({
                        selector: 'videoplayer-selector',
                        template: "undefined"
                    }), 
                    __metadata('design:paramtypes', [(typeof (_a = typeof logger_service_10.Logger !== 'undefined' && logger_service_10.Logger) === 'function' && _a) || Object, (typeof (_b = typeof googleapi_service_3.GoogleApi !== 'undefined' && googleapi_service_3.GoogleApi) === 'function' && _b) || Object])
                ], VideoPlayerSelector);
                return VideoPlayerSelector;
                var _a, _b;
            }());
            exports_26("VideoPlayerSelector", VideoPlayerSelector);
        }
    }
});
System.register("cuat/temp/landing.video-player.video", ['angular2/core', './services/logger.service'], function(exports_27, context_27) {
    "use strict";
    var __moduleName = context_27 && context_27.id;
    var core_24, logger_service_11;
    var VideoPlayerVideo;
    return {
        setters:[
            function (core_24_1) {
                core_24 = core_24_1;
            },
            function (logger_service_11_1) {
                logger_service_11 = logger_service_11_1;
            }],
        execute: function() {
            VideoPlayerVideo = (function () {
                function VideoPlayerVideo(logger) {
                    this.logger = logger;
                    this.ready = false;
                    this.selected = true;
                    this.ended = false;
                }
                VideoPlayerVideo.prototype.ngAfterViewInit = function () {
                    var self = this;
                    if (this.hasVideo()) {
                        this.player = new YT.Player(this.id, {
                            events: {
                                onReady: function () {
                                    self._onReady(self);
                                },
                                onStateChanged: function (state) {
                                    switch (state) {
                                        case 0:
                                            //ended
                                            self._onEnded(self);
                                            break;
                                        case 1:
                                        //playing
                                        case 2:
                                        //paused
                                        case 3:
                                        //buffering
                                        case 4:
                                    }
                                }
                            }
                        });
                    }
                };
                VideoPlayerVideo.prototype.ngOnChanges = function (changes) {
                    if (this.hasVideo()) {
                        if ("selected" in changes) {
                            console.log(changes);
                            if (changes.selected.currentValue) {
                                //if (this.ended) {
                                this.ended = false;
                                this.restart(this);
                            }
                            else {
                                this.pause(this);
                                this.reset(this);
                            }
                        }
                    }
                };
                VideoPlayerVideo.prototype.hasVideo = function () {
                    return this.id && this.id.length;
                };
                VideoPlayerVideo.prototype.hasImage = function () {
                    return this.image && this.image.length;
                };
                VideoPlayerVideo.prototype._onReady = function (self) {
                    //need to pass a ref of `this` since this is a callback on YT.Player
                    self.ready = true;
                };
                VideoPlayerVideo.prototype._onEnded = function (self) {
                    this.ended = true;
                };
                VideoPlayerVideo.prototype.play = function (self) {
                    if (!self)
                        self = this;
                    if (!self.ready || !self.hasVideo())
                        return;
                    self.player.playVideo();
                };
                VideoPlayerVideo.prototype.pause = function (self) {
                    if (!self)
                        self = this;
                    if (!self.ready || !self.hasVideo())
                        return;
                    self.player.pauseVideo();
                };
                VideoPlayerVideo.prototype.restart = function (self) {
                    if (!self)
                        self = this;
                    if (!self.ready || !self.hasVideo())
                        return;
                    //this is finicky, sometimes just doesn't work
                    //seems to be a bug with the player
                    //maybe we could que an interval on self.play until we see the state change, but that seems hacky
                    //self.reset(self)
                    self.player.seekTo(0);
                    self.play(self);
                };
                VideoPlayerVideo.prototype.reset = function (self) {
                    if (!self)
                        self = this;
                    if (!self.ready || !self.hasVideo())
                        return;
                    //self.player.seekTo(0)
                };
                __decorate([
                    core_24.Input(), 
                    __metadata('design:type', String)
                ], VideoPlayerVideo.prototype, "id", void 0);
                __decorate([
                    core_24.Input(), 
                    __metadata('design:type', String)
                ], VideoPlayerVideo.prototype, "image", void 0);
                __decorate([
                    core_24.Input(), 
                    __metadata('design:type', Boolean)
                ], VideoPlayerVideo.prototype, "selected", void 0);
                VideoPlayerVideo = __decorate([
                    core_24.Component({
                        selector: 'videoplayer-video',
                        template: "undefined"
                    }), 
                    __metadata('design:paramtypes', [(typeof (_a = typeof logger_service_11.Logger !== 'undefined' && logger_service_11.Logger) === 'function' && _a) || Object])
                ], VideoPlayerVideo);
                return VideoPlayerVideo;
                var _a;
            }());
            exports_27("VideoPlayerVideo", VideoPlayerVideo);
        }
    }
});
System.register("cuat/temp/landing.video-player.player", ['angular2/core', './services/logger.service', "cuat/temp/landing.video-player.video"], function(exports_28, context_28) {
    "use strict";
    var __moduleName = context_28 && context_28.id;
    var core_25, logger_service_12, landing_video_player_video_2;
    var VideoPlayerPlayer;
    return {
        setters:[
            function (core_25_1) {
                core_25 = core_25_1;
            },
            function (logger_service_12_1) {
                logger_service_12 = logger_service_12_1;
            },
            function (landing_video_player_video_2_1) {
                landing_video_player_video_2 = landing_video_player_video_2_1;
            }],
        execute: function() {
            VideoPlayerPlayer = (function () {
                function VideoPlayerPlayer(logger) {
                    this.logger = logger;
                }
                __decorate([
                    core_25.Input(), 
                    __metadata('design:type', Object)
                ], VideoPlayerPlayer.prototype, "data", void 0);
                __decorate([
                    core_25.Input(), 
                    __metadata('design:type', Object)
                ], VideoPlayerPlayer.prototype, "currentId", void 0);
                VideoPlayerPlayer = __decorate([
                    core_25.Component({
                        selector: 'videoplayer-player',
                        template: "undefined",
                        directives: [landing_video_player_video_2.VideoPlayerVideo]
                    }), 
                    __metadata('design:paramtypes', [(typeof (_a = typeof logger_service_12.Logger !== 'undefined' && logger_service_12.Logger) === 'function' && _a) || Object])
                ], VideoPlayerPlayer);
                return VideoPlayerPlayer;
                var _a;
            }());
            exports_28("VideoPlayerPlayer", VideoPlayerPlayer);
        }
    }
});
System.register("cuat/temp/landing.video-player", ['angular2/core', "cuat/temp/landing.video-player.selector", "cuat/temp/landing.video-player.player", './services/logger.service', './services/appdata.service'], function(exports_29, context_29) {
    "use strict";
    var __moduleName = context_29 && context_29.id;
    var core_26, landing_video_player_selector_2, landing_video_player_player_2, logger_service_13, appdata_service_9;
    var VideoPlayer;
    return {
        setters:[
            function (core_26_1) {
                core_26 = core_26_1;
            },
            function (landing_video_player_selector_2_1) {
                landing_video_player_selector_2 = landing_video_player_selector_2_1;
            },
            function (landing_video_player_player_2_1) {
                landing_video_player_player_2 = landing_video_player_player_2_1;
            },
            function (logger_service_13_1) {
                logger_service_13 = logger_service_13_1;
            },
            function (appdata_service_9_1) {
                appdata_service_9 = appdata_service_9_1;
            }],
        execute: function() {
            VideoPlayer = (function () {
                function VideoPlayer(appdata, logger) {
                    this.appdata = appdata;
                    this.logger = logger;
                    this.currentId = 0;
                    this.enabled = true;
                    var data = appdata.get();
                    this.enabled = data.videoplayer.enabled;
                    this.title = data.videoplayer.title;
                    this.videos = data.videoplayer.videos;
                }
                VideoPlayer.prototype.select = function (id) {
                    this.currentId = id;
                };
                VideoPlayer = __decorate([
                    core_26.Component({
                        selector: 'videoplayer',
                        template: "undefined",
                        directives: [landing_video_player_player_2.VideoPlayerPlayer, landing_video_player_selector_2.VideoPlayerSelector]
                    }), 
                    __metadata('design:paramtypes', [(typeof (_a = typeof appdata_service_9.AppData !== 'undefined' && appdata_service_9.AppData) === 'function' && _a) || Object, (typeof (_b = typeof logger_service_13.Logger !== 'undefined' && logger_service_13.Logger) === 'function' && _b) || Object])
                ], VideoPlayer);
                return VideoPlayer;
                var _a, _b;
            }());
            exports_29("VideoPlayer", VideoPlayer);
        }
    }
});
System.register("cuat/temp/landing.masthead", ['angular2/core', './services/appdata.service'], function(exports_30, context_30) {
    "use strict";
    var __moduleName = context_30 && context_30.id;
    var core_27, appdata_service_10;
    var AppMasthead;
    return {
        setters:[
            function (core_27_1) {
                core_27 = core_27_1;
            },
            function (appdata_service_10_1) {
                appdata_service_10 = appdata_service_10_1;
            }],
        execute: function() {
            AppMasthead = (function () {
                function AppMasthead(appdata) {
                    this.appdata = appdata;
                    this.enabled = true;
                    var data = appdata.get();
                    this.enabled = data.masthead.enabled;
                    this.image = data.masthead.image;
                    this.title = data.masthead.title;
                    this.alt = data.masthead.alt;
                }
                AppMasthead = __decorate([
                    core_27.Component({
                        selector: 'masthead',
                        templateUrl: 'app/views/masthead.view.html'
                    }), 
                    __metadata('design:paramtypes', [(typeof (_a = typeof appdata_service_10.AppData !== 'undefined' && appdata_service_10.AppData) === 'function' && _a) || Object])
                ], AppMasthead);
                return AppMasthead;
                var _a;
            }());
            exports_30("AppMasthead", AppMasthead);
        }
    }
});
/// <reference path="../typings/greensock/greensock.d.ts" />
System.register("cuat/temp/landing.timeline-controller", [], function(exports_31, context_31) {
    "use strict";
    var __moduleName = context_31 && context_31.id;
    var TimelineController;
    return {
        setters:[],
        execute: function() {
            TimelineController = (function () {
                function TimelineController() {
                    this.timeline = new TimelineMax();
                }
                TimelineController.prototype.start = function () {
                    this.timeline.play();
                };
                TimelineController.prototype.pause = function () {
                    this.timeline.pause();
                };
                TimelineController.prototype.restart = function () {
                    this.timeline.seek(0);
                    this.timeline.play();
                };
                TimelineController.prototype.reset = function () {
                    this.timeline.seek(0);
                };
                return TimelineController;
            }());
            exports_31("TimelineController", TimelineController);
        }
    }
});
System.register("cuat/temp/landing.feature.button", ['angular2/core', "cuat/temp/landing.timeline-controller"], function(exports_32, context_32) {
    "use strict";
    var __moduleName = context_32 && context_32.id;
    var core_28, landing_timeline_controller_3;
    var FeatureButton;
    return {
        setters:[
            function (core_28_1) {
                core_28 = core_28_1;
            },
            function (landing_timeline_controller_3_1) {
                landing_timeline_controller_3 = landing_timeline_controller_3_1;
            }],
        execute: function() {
            FeatureButton = (function (_super) {
                __extends(FeatureButton, _super);
                function FeatureButton(elementRef) {
                    this.elementRef = elementRef;
                    this.rootElement = $(this.elementRef.nativeElement);
                    _super.call(this);
                }
                FeatureButton.prototype.playAnimations = function (bType) {
                    console.log(bType);
                    switch (bType) {
                        case "cart":
                            //TweenMax.to(this.target, 1, {delay:1.5, left:0, ease:Power3.easeOut});
                            //TweenMax.to(this.target, 1, {delay:2, left:50, css: {transform:"rotate(5deg)"}, ease:Power3.easeOut});
                            //TweenMax.to(this.target, .3, {delay:2.5, css: {transform:"rotate(0deg)"}, ease:Bounce.easeOut});
                            //TweenMax.to(this.target, 1, {delay:6, left:150, opacity:0, ease:Power3.easeIn});
                            TweenMax.to(this.target, 2, { delay: 1, css: { transform: "scale(1)" }, ease: Elastic.easeOut });
                            break;
                        case "star":
                            //TweenMax.to(this.target, 1, {delay:2.2, top: 0, ease:Bounce.easeOut});
                            //TweenMax.to(this.target, 1, {delay:6, top:150, opacity:0, ease:Power3.easeIn});
                            TweenMax.to(this.target, 2, { delay: 1.3, css: { transform: "scale(1)" }, ease: Elastic.easeOut });
                            break;
                        case "magnifier":
                            TweenMax.to(this.target, 2, { delay: 1.6, css: { transform: "scale(1)" }, ease: Elastic.easeOut });
                            //TweenMax.to(this.target, 1, {delay:6, opacity:0, ease:Power3.easeIn});
                            break;
                    }
                };
                FeatureButton.prototype.resetAnimations = function () {
                    switch (this.btnType) {
                        case "cart":
                            //TweenMax.to(this.target, 0, {delay:0, opacity:1, left:-150, ease:Power3.easeOut});
                            TweenMax.to(this.target, 0, { delay: 0, opacity: 1, css: { transform: "scale(0.01)" }, ease: Power3.easeOut });
                            break;
                        case "star":
                            //TweenMax.to(this.target, 0, {delay:0, opacity:1, top:-160, ease:Power3.easeOut});
                            TweenMax.to(this.target, 0, { delay: 0, opacity: 1, css: { transform: "scale(0.01)" }, ease: Power3.easeOut });
                            break;
                        case "magnifier":
                            TweenMax.to(this.target, 0, { delay: 0, opacity: 1, css: { transform: "scale(0.01)" }, ease: Power3.easeOut });
                            break;
                    }
                    this.playAnimations(this.btnType);
                };
                FeatureButton.prototype.ngAfterViewInit = function () {
                    //this is ugly, but the syntax of gsap restricts me from decoupling animations from their target element
                    //I could probably adjust timeline-controller to instantiate timelines without specifying a target element
                    //but just want to get it working for now
                    //Not that ugly, but didn't hit the ask.
                    this.target = $(this.rootElement).find('img');
                    this.targetWidth = $(this.rootElement).find('img').parent().width();
                    this.targetHeight = $(this.rootElement).find('img').parent().height();
                    /* switch(this.btnType) {
                         case "cart":
                             this.timeline.to(target, 0, { left: "-="+width })
                                 .to(target, 1, { ease: Power4.easeOut, left: "+="+width })
                                 .to(target, 0.2, { ease: Power1.easeOut, css: {transform:"rotate(5deg)"} }).add('stop')
                                 .to(target, 0.1, { left: "+=" + 1 }, 'stop').add('backDown')
                                 .to(target, 0.1, { left: "-=" + 1 }, 'backDown')
                                 .to(target, 0.1, { ease: Power1.easeIn, css: {transform:"rotate(0deg)"} })
                             break;
                         case "star":
                             this.timeline.add('start').set({}, {}, 'start=2')
                                 .to(target, 0, { top: "-="+height })
                                 .to(target, 1, { ease: Bounce.easeOut, top: "+="+height })
                             break;
                         case "magnifier":
                             this.timeline.add('start').set({}, {}, 'start=3')
                                 .to(target, 0, { opacity: 0, css: { transform: "scale(0.2)" } })
                                 .to(target, .5
                                 , { ease: Back.easeOut, opacity: 1, css: {transform:"scale(1)"} })
                             break;
                     } */
                    //setInterval(() => {
                    //    this.restart()
                    // }, 10000)
                    this.resetAnimations();
                };
                __decorate([
                    core_28.Input(), 
                    __metadata('design:type', Object)
                ], FeatureButton.prototype, "btnIcon", void 0);
                __decorate([
                    core_28.Input(), 
                    __metadata('design:type', Object)
                ], FeatureButton.prototype, "btnTitle", void 0);
                __decorate([
                    core_28.Input(), 
                    __metadata('design:type', Object)
                ], FeatureButton.prototype, "btnRollOverCopy", void 0);
                __decorate([
                    core_28.Input(), 
                    __metadata('design:type', Object)
                ], FeatureButton.prototype, "btnRollOverCTA", void 0);
                __decorate([
                    core_28.Input(), 
                    __metadata('design:type', Object)
                ], FeatureButton.prototype, "btnLink", void 0);
                __decorate([
                    core_28.Input(), 
                    __metadata('design:type', Object)
                ], FeatureButton.prototype, "btnType", void 0);
                __decorate([
                    core_28.Input(), 
                    __metadata('design:type', Object)
                ], FeatureButton.prototype, "btnAlt", void 0);
                FeatureButton = __decorate([
                    core_28.Component({
                        selector: 'feature-button',
                        template: "undefined",
                    }),
                    __param(0, core_28.Inject(core_28.ElementRef)), 
                    __metadata('design:paramtypes', [core_28.ElementRef])
                ], FeatureButton);
                return FeatureButton;
            }(landing_timeline_controller_3.TimelineController));
            exports_32("FeatureButton", FeatureButton);
        }
    }
});
System.register("cuat/temp/landing.feature", ['angular2/core', "cuat/temp/landing.feature.button", './models/features.model', './services/appdata.service'], function(exports_33, context_33) {
    "use strict";
    var __moduleName = context_33 && context_33.id;
    var core_29, landing_feature_button_2, features_model_2, appdata_service_11;
    var Features;
    return {
        setters:[
            function (core_29_1) {
                core_29 = core_29_1;
            },
            function (landing_feature_button_2_1) {
                landing_feature_button_2 = landing_feature_button_2_1;
            },
            function (features_model_2_1) {
                features_model_2 = features_model_2_1;
            },
            function (appdata_service_11_1) {
                appdata_service_11 = appdata_service_11_1;
            }],
        execute: function() {
            Features = (function () {
                function Features(appdata) {
                    this.appdata = appdata;
                    this.featureButtons = [];
                    this.enabled = true;
                    var data = appdata.get();
                    this.enabled = data.features.enabled;
                    for (var i in data.features.features) {
                        var feature = data.features.features[i];
                        this.featureButtons.push(new features_model_2.FeatureModel(feature.image, feature.title, feature.desc, feature.cta, feature.link, feature.type, feature.alt));
                    }
                }
                Features = __decorate([
                    core_29.Component({
                        selector: 'features',
                        template: "undefined",
                        directives: [landing_feature_button_2.FeatureButton],
                    }), 
                    __metadata('design:paramtypes', [(typeof (_a = typeof appdata_service_11.AppData !== 'undefined' && appdata_service_11.AppData) === 'function' && _a) || Object])
                ], Features);
                return Features;
                var _a;
            }());
            exports_33("Features", Features);
        }
    }
});
System.register("cuat/temp/landing.learn-more.button", ['angular2/core'], function(exports_34, context_34) {
    "use strict";
    var __moduleName = context_34 && context_34.id;
    var core_30;
    var LearnMoreButton;
    return {
        setters:[
            function (core_30_1) {
                core_30 = core_30_1;
            }],
        execute: function() {
            LearnMoreButton = (function () {
                function LearnMoreButton() {
                }
                __decorate([
                    core_30.Input(), 
                    __metadata('design:type', Object)
                ], LearnMoreButton.prototype, "link", void 0);
                __decorate([
                    core_30.Input(), 
                    __metadata('design:type', Object)
                ], LearnMoreButton.prototype, "text", void 0);
                LearnMoreButton = __decorate([
                    core_30.Component({
                        selector: 'learn-more-button',
                        template: "undefined"
                    }), 
                    __metadata('design:paramtypes', [])
                ], LearnMoreButton);
                return LearnMoreButton;
            }());
            exports_34("LearnMoreButton", LearnMoreButton);
        }
    }
});
System.register("cuat/temp/product.selector.slide", ['angular2/core', "cuat/temp/landing.learn-more.button"], function(exports_35, context_35) {
    "use strict";
    var __moduleName = context_35 && context_35.id;
    var core_31, landing_learn_more_button_3;
    var ProductSlide;
    return {
        setters:[
            function (core_31_1) {
                core_31 = core_31_1;
            },
            function (landing_learn_more_button_3_1) {
                landing_learn_more_button_3 = landing_learn_more_button_3_1;
            }],
        execute: function() {
            ProductSlide = (function () {
                function ProductSlide() {
                }
                ProductSlide.prototype.ngOnChanges = function (changes) {
                    if ("selected" in changes) {
                        console.log(changes);
                    }
                };
                __decorate([
                    core_31.Input(), 
                    __metadata('design:type', Object)
                ], ProductSlide.prototype, "fridge", void 0);
                __decorate([
                    core_31.Input(), 
                    __metadata('design:type', Object)
                ], ProductSlide.prototype, "fridgeTitle", void 0);
                __decorate([
                    core_31.Input(), 
                    __metadata('design:type', Object)
                ], ProductSlide.prototype, "fridgeDescription", void 0);
                __decorate([
                    core_31.Input(), 
                    __metadata('design:type', Object)
                ], ProductSlide.prototype, "fridgeUrl", void 0);
                __decorate([
                    core_31.Input(), 
                    __metadata('design:type', Object)
                ], ProductSlide.prototype, "fridgeId", void 0);
                __decorate([
                    core_31.Input(), 
                    __metadata('design:type', Object)
                ], ProductSlide.prototype, "selected", void 0);
                __decorate([
                    core_31.Input(), 
                    __metadata('design:type', Object)
                ], ProductSlide.prototype, "ctaText", void 0);
                __decorate([
                    core_31.Input(), 
                    __metadata('design:type', Object)
                ], ProductSlide.prototype, "fridgeAlt", void 0);
                ProductSlide = __decorate([
                    core_31.Component({
                        selector: 'product-slide',
                        template: "undefined",
                        directives: [landing_learn_more_button_3.LearnMoreButton]
                    }), 
                    __metadata('design:paramtypes', [])
                ], ProductSlide);
                return ProductSlide;
            }());
            exports_35("ProductSlide", ProductSlide);
        }
    }
});
System.register("cuat/temp/product.selector.slides", ['angular2/core', "cuat/temp/product.selector.slide", "cuat/temp/landing.timeline-controller"], function(exports_36, context_36) {
    "use strict";
    var __moduleName = context_36 && context_36.id;
    var core_32, product_selector_slide_2, landing_timeline_controller_4;
    var ProductSlides;
    return {
        setters:[
            function (core_32_1) {
                core_32 = core_32_1;
            },
            function (product_selector_slide_2_1) {
                product_selector_slide_2 = product_selector_slide_2_1;
            },
            function (landing_timeline_controller_4_1) {
                landing_timeline_controller_4 = landing_timeline_controller_4_1;
            }],
        execute: function() {
            ProductSlides = (function (_super) {
                __extends(ProductSlides, _super);
                function ProductSlides(elementRef) {
                    _super.call(this);
                    this.isAnimating = new core_32.EventEmitter();
                    this.elementRef = elementRef;
                    this.animating = false;
                    this.imageTop = 155;
                    this.titleTop = 170;
                    this.descTop = 215;
                    this.learnTop = 500;
                }
                Object.defineProperty(ProductSlides.prototype, "animating", {
                    set: function (a) {
                        if (this._animating != a) {
                            this._animating = a;
                            this.isAnimating.emit(a);
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                ProductSlides.prototype.ngAfterViewInit = function () {
                    this.rootElement = $(this.elementRef.nativeElement);
                    var target = this.selectedProduct.prodId;
                    this.playIn(this, true, target);
                };
                ProductSlides.prototype.ngOnChanges = function (changes) {
                    var self = this;
                    if ("selectedProduct" in changes && !this.animating) {
                        this.playOut(changes.selectedProduct.previousValue.prodId, function () {
                            //just get it done
                            if (changes.selectedProduct.currentValue.prodId == 'under-counter' && $('product-selector').hasClass('fr') && $(window).innerWidth() > 820) {
                                self.descTop = 265;
                            }
                            else {
                                self.descTop = 215;
                            }
                            self.playIn(self, false, changes.selectedProduct.currentValue.prodId);
                        });
                    }
                };
                ProductSlides.prototype.playOut = function (target, cb) {
                    var self = this;
                    target = $(this.rootElement).find('#' + target);
                    var image = ($(target).find('.rl-wp-lndng-fridge'));
                    var title = ($(target).find('.rl-wp-lndng-fridge-title'));
                    var desc = ($(target).find('.rl-wp-lndng-fridge-desc'));
                    var learn = ($(target).find('learn-more-button'));
                    this.animating = true;
                    TweenMax.to(image, .3, { delay: 0, opacity: 0, ease: Power3.easeOut });
                    TweenMax.to(title, .3, { delay: 0, opacity: 0, ease: Power3.easeOut });
                    TweenMax.to(desc, .3, { delay: 0, opacity: 0, ease: Power3.easeOut });
                    TweenMax.to(learn, .3, { delay: 0, opacity: 0, ease: Power3.easeOut, onComplete: function () {
                            TweenMax.to(target, 0, { delay: 0, opacity: 0 });
                            cb();
                        } });
                };
                ProductSlides.prototype.playIn = function (self, delay, target) {
                    if (delay === void 0) { delay = true; }
                    if (!self)
                        self = this;
                    target = $(self.rootElement).find('#' + target);
                    $(self.rootElement).find('product-slide').css('zIndex', 1);
                    $(target).parent().css('zIndex', 2);
                    var image = ($(target).find('.rl-wp-lndng-fridge'));
                    var title = ($(target).find('.rl-wp-lndng-fridge-title'));
                    var desc = ($(target).find('.rl-wp-lndng-fridge-desc'));
                    var learn = ($(target).find('learn-more-button'));
                    var isMobile = $(window).innerWidth() <= 820;
                    if (isMobile) {
                        TweenMax.to(image, 0, { delay: 0, top: -20 });
                        TweenMax.to(title, 0, { delay: 0, top: -20 });
                        TweenMax.to(desc, 0, { delay: 0, top: -20 });
                        TweenMax.to(learn, 0, { delay: 0, top: -20 });
                    }
                    else {
                        TweenMax.to(image, 0, { delay: 0, top: this.imageTop - 20 });
                        TweenMax.to(title, 0, { delay: 0, top: this.titleTop - 20 });
                        TweenMax.to(desc, 0, { delay: 0, top: this.descTop - 20 });
                        TweenMax.to(learn, 0, { delay: 0, top: this.learnTop - 20 });
                    }
                    TweenMax.to(target, 0, { delay: 0.1, opacity: 1 });
                    if (delay) {
                        if (isMobile) {
                            TweenMax.to(image, 1.5, { delay: .6, top: 0, opacity: 1, ease: Power1.easeOut });
                            TweenMax.to(title, 1.5, { delay: .9, top: 0, opacity: 1, ease: Power1.easeOut });
                            TweenMax.to(desc, 1.5, { delay: 1.2, top: 0, opacity: 1, ease: Power1.easeOut });
                            TweenMax.to(learn, 1.5, {
                                delay: 1.2, top: 0, opacity: 1, ease: Power1.easeOut, onComplete: function () {
                                    self.animating = false;
                                }
                            });
                        }
                        else {
                            TweenMax.to(image, 1.5, { delay: .6, top: this.imageTop, opacity: 1, ease: Power1.easeOut });
                            TweenMax.to(title, 1.5, { delay: .9, top: this.titleTop, opacity: 1, ease: Power1.easeOut });
                            TweenMax.to(desc, 1.5, { delay: 1.2, top: this.descTop, opacity: 1, ease: Power1.easeOut });
                            TweenMax.to(learn, 1.5, {
                                delay: 1.2, top: this.learnTop, opacity: 1, ease: Power1.easeOut, onComplete: function () {
                                    self.animating = false;
                                }
                            });
                        }
                    }
                    else {
                        if (isMobile) {
                            TweenMax.to(image, 1.5, { delay: .5, top: 0, opacity: 1, ease: Power1.easeOut });
                            TweenMax.to(title, 1.5, { delay: 0.7, top: 0, opacity: 1, ease: Power1.easeOut });
                            TweenMax.to(desc, 1.5, { delay: 0.9, top: 0, opacity: 1, ease: Power1.easeOut });
                            TweenMax.to(learn, 1.5, {
                                delay: 0.9, top: 0, opacity: 1, ease: Power1.easeOut, onComplete: function () {
                                    self.animating = false;
                                }
                            });
                        }
                        else {
                            TweenMax.to(image, 1.5, { delay: .6, top: this.imageTop, opacity: 1, ease: Power1.easeOut });
                            TweenMax.to(title, 1.5, { delay: .9, top: this.titleTop, opacity: 1, ease: Power1.easeOut });
                            TweenMax.to(desc, 1.5, { delay: 1.2, top: this.descTop, opacity: 1, ease: Power1.easeOut });
                            TweenMax.to(learn, 1.5, {
                                delay: 1.2, top: this.learnTop, opacity: 1, ease: Power1.easeOut, onComplete: function () {
                                    self.animating = false;
                                }
                            });
                        }
                    }
                };
                __decorate([
                    core_32.Input(), 
                    __metadata('design:type', Object)
                ], ProductSlides.prototype, "products", void 0);
                __decorate([
                    core_32.Input(), 
                    __metadata('design:type', Object)
                ], ProductSlides.prototype, "selectedProduct", void 0);
                __decorate([
                    core_32.Output(), 
                    __metadata('design:type', Object)
                ], ProductSlides.prototype, "isAnimating", void 0);
                ProductSlides = __decorate([
                    core_32.Component({
                        selector: 'product-slides',
                        template: "undefined",
                        directives: [product_selector_slide_2.ProductSlide]
                    }),
                    __param(0, core_32.Inject(core_32.ElementRef)), 
                    __metadata('design:paramtypes', [core_32.ElementRef])
                ], ProductSlides);
                return ProductSlides;
            }(landing_timeline_controller_4.TimelineController));
            exports_36("ProductSlides", ProductSlides);
        }
    }
});
System.register("cuat/temp/insertBreak.pipe", ['angular2/core'], function(exports_37, context_37) {
    "use strict";
    var __moduleName = context_37 && context_37.id;
    var core_33;
    var InsertBreakPipe;
    return {
        setters:[
            function (core_33_1) {
                core_33 = core_33_1;
            }],
        execute: function() {
            InsertBreakPipe = (function () {
                function InsertBreakPipe() {
                }
                InsertBreakPipe.prototype.transform = function (str) {
                    console.log(str);
                    return str.replace(/\s/g, '<br/>');
                };
                InsertBreakPipe = __decorate([
                    core_33.Pipe({
                        name: "insertBreak"
                    }), 
                    __metadata('design:paramtypes', [])
                ], InsertBreakPipe);
                return InsertBreakPipe;
            }());
            exports_37("InsertBreakPipe", InsertBreakPipe);
        }
    }
});
System.register("cuat/temp/product.selector.nav", ['angular2/core', './services/appdata.service', "cuat/temp/insertBreak.pipe"], function(exports_38, context_38) {
    "use strict";
    var __moduleName = context_38 && context_38.id;
    var core_34, appdata_service_12, insertBreak_pipe_2;
    var ProductSelectorNav;
    return {
        setters:[
            function (core_34_1) {
                core_34 = core_34_1;
            },
            function (appdata_service_12_1) {
                appdata_service_12 = appdata_service_12_1;
            },
            function (insertBreak_pipe_2_1) {
                insertBreak_pipe_2 = insertBreak_pipe_2_1;
            }],
        execute: function() {
            ProductSelectorNav = (function () {
                function ProductSelectorNav(appdata) {
                    this.appdata = appdata;
                    this.productSelected = new core_34.EventEmitter();
                    this.enabled = true;
                    var data = appdata.get();
                    this.enabled = data.productselector.enabled;
                    this.ctaText = data.productselector.nav.text;
                    this.ctaLink = data.productselector.nav.link;
                }
                ProductSelectorNav.prototype.select = function (product) {
                    this.productSelected.emit(product);
                };
                __decorate([
                    core_34.Input(), 
                    __metadata('design:type', Object)
                ], ProductSelectorNav.prototype, "products", void 0);
                __decorate([
                    core_34.Input(), 
                    __metadata('design:type', Object)
                ], ProductSelectorNav.prototype, "selectedProduct", void 0);
                __decorate([
                    core_34.Output(), 
                    __metadata('design:type', Object)
                ], ProductSelectorNav.prototype, "productSelected", void 0);
                ProductSelectorNav = __decorate([
                    core_34.Component({
                        selector: 'product-selector-nav',
                        pipes: [insertBreak_pipe_2.InsertBreakPipe],
                        template: "undefined"
                    }), 
                    __metadata('design:paramtypes', [(typeof (_a = typeof appdata_service_12.AppData !== 'undefined' && appdata_service_12.AppData) === 'function' && _a) || Object])
                ], ProductSelectorNav);
                return ProductSelectorNav;
                var _a;
            }());
            exports_38("ProductSelectorNav", ProductSelectorNav);
        }
    }
});
System.register("cuat/temp/product.selector", ['angular2/core', "cuat/temp/product.selector.slides", "cuat/temp/product.selector.nav", './services/appdata.service', './models/products.model'], function(exports_39, context_39) {
    "use strict";
    var __moduleName = context_39 && context_39.id;
    var core_35, product_selector_slides_2, product_selector_nav_2, appdata_service_13, products_model_2;
    var ProductSelector;
    return {
        setters:[
            function (core_35_1) {
                core_35 = core_35_1;
            },
            function (product_selector_slides_2_1) {
                product_selector_slides_2 = product_selector_slides_2_1;
            },
            function (product_selector_nav_2_1) {
                product_selector_nav_2 = product_selector_nav_2_1;
            },
            function (appdata_service_13_1) {
                appdata_service_13 = appdata_service_13_1;
            },
            function (products_model_2_1) {
                products_model_2 = products_model_2_1;
            }],
        execute: function() {
            ProductSelector = (function () {
                function ProductSelector(appdata) {
                    this.appdata = appdata;
                    this.enabled = true;
                    var data = appdata.get();
                    this.enabled = data.productselector.enabled;
                    this.title = data.productselector.title;
                    this.products = [];
                    for (var i in data.productselector.products) {
                        var product = data.productselector.products[i];
                        this.products.push(new products_model_2.ProductModel(product.image, product.title, product.desc, product.link, product.id, product.ctaText, product.alt));
                    }
                    this.selectedProduct = this.products[0];
                    this.animating = false;
                }
                ProductSelector.prototype.ngOnChanges = function (changes) {
                    if ("selectedProduct" in changes) {
                        console.log('product selector changed product: ', changes.selectedProduct.currentValue);
                    }
                };
                //@Output on product.selector.nav
                ProductSelector.prototype.productSelected = function (product) {
                    if (!this.animating) {
                        this.selectedProduct = product;
                        console.log('product.selector got new product: ' + product.prodId);
                    }
                };
                //@Output on product.selector.slides
                ProductSelector.prototype.isAnimating = function (animating) {
                    this.animating = animating;
                };
                ProductSelector = __decorate([
                    core_35.Component({
                        selector: 'product-selector',
                        template: "undefined",
                        directives: [product_selector_slides_2.ProductSlides, product_selector_nav_2.ProductSelectorNav],
                    }), 
                    __metadata('design:paramtypes', [(typeof (_a = typeof appdata_service_13.AppData !== 'undefined' && appdata_service_13.AppData) === 'function' && _a) || Object])
                ], ProductSelector);
                return ProductSelector;
                var _a;
            }());
            exports_39("ProductSelector", ProductSelector);
        }
    }
});
System.register("cuat/temp/landing.morefeatures.feature", ['angular2/core'], function(exports_40, context_40) {
    "use strict";
    var __moduleName = context_40 && context_40.id;
    var core_36;
    var MoreFeaturesFeature;
    return {
        setters:[
            function (core_36_1) {
                core_36 = core_36_1;
            }],
        execute: function() {
            MoreFeaturesFeature = (function () {
                function MoreFeaturesFeature() {
                }
                __decorate([
                    core_36.Input(), 
                    __metadata('design:type', Object)
                ], MoreFeaturesFeature.prototype, "image", void 0);
                __decorate([
                    core_36.Input(), 
                    __metadata('design:type', Object)
                ], MoreFeaturesFeature.prototype, "title", void 0);
                __decorate([
                    core_36.Input(), 
                    __metadata('design:type', Object)
                ], MoreFeaturesFeature.prototype, "link", void 0);
                __decorate([
                    core_36.Input(), 
                    __metadata('design:type', Object)
                ], MoreFeaturesFeature.prototype, "text", void 0);
                __decorate([
                    core_36.Input(), 
                    __metadata('design:type', Object)
                ], MoreFeaturesFeature.prototype, "cta", void 0);
                __decorate([
                    core_36.Input(), 
                    __metadata('design:type', Object)
                ], MoreFeaturesFeature.prototype, "alt", void 0);
                MoreFeaturesFeature = __decorate([
                    core_36.Component({
                        selector: 'more-features-feature',
                        template: "undefined",
                    }), 
                    __metadata('design:paramtypes', [])
                ], MoreFeaturesFeature);
                return MoreFeaturesFeature;
            }());
            exports_40("MoreFeaturesFeature", MoreFeaturesFeature);
        }
    }
});
System.register("cuat/temp/landing.morefeatures", ['angular2/core', "cuat/temp/landing.morefeatures.feature", './services/appdata.service', './services/logger.service'], function(exports_41, context_41) {
    "use strict";
    var __moduleName = context_41 && context_41.id;
    var core_37, landing_morefeatures_feature_2, appdata_service_14, logger_service_14;
    var MoreFeatures;
    return {
        setters:[
            function (core_37_1) {
                core_37 = core_37_1;
            },
            function (landing_morefeatures_feature_2_1) {
                landing_morefeatures_feature_2 = landing_morefeatures_feature_2_1;
            },
            function (appdata_service_14_1) {
                appdata_service_14 = appdata_service_14_1;
            },
            function (logger_service_14_1) {
                logger_service_14 = logger_service_14_1;
            }],
        execute: function() {
            MoreFeatures = (function () {
                function MoreFeatures(appdata, logger) {
                    this.appdata = appdata;
                    this.logger = logger;
                    this.enabled = true;
                    var data = appdata.get();
                    this.enabled = data.morefeatures.enabled;
                    this.title = data.morefeatures.title;
                    this.moreFeatures = data.morefeatures.features;
                }
                MoreFeatures = __decorate([
                    core_37.Component({
                        selector: 'more-features',
                        template: "undefined",
                        directives: [landing_morefeatures_feature_2.MoreFeaturesFeature],
                    }), 
                    __metadata('design:paramtypes', [(typeof (_a = typeof appdata_service_14.AppData !== 'undefined' && appdata_service_14.AppData) === 'function' && _a) || Object, (typeof (_b = typeof logger_service_14.Logger !== 'undefined' && logger_service_14.Logger) === 'function' && _b) || Object])
                ], MoreFeatures);
                return MoreFeatures;
                var _a, _b;
            }());
            exports_41("MoreFeatures", MoreFeatures);
        }
    }
});
System.register("cuat/temp/landing.banner", ['angular2/core', "cuat/temp/landing.learn-more.button", './services/appdata.service', './services/logger.service'], function(exports_42, context_42) {
    "use strict";
    var __moduleName = context_42 && context_42.id;
    var core_38, landing_learn_more_button_4, appdata_service_15, logger_service_15;
    var Banner;
    return {
        setters:[
            function (core_38_1) {
                core_38 = core_38_1;
            },
            function (landing_learn_more_button_4_1) {
                landing_learn_more_button_4 = landing_learn_more_button_4_1;
            },
            function (appdata_service_15_1) {
                appdata_service_15 = appdata_service_15_1;
            },
            function (logger_service_15_1) {
                logger_service_15 = logger_service_15_1;
            }],
        execute: function() {
            Banner = (function () {
                function Banner(appdata, logger) {
                    this.appdata = appdata;
                    this.logger = logger;
                    this.enabled = true;
                    var data = appdata.get();
                    this.enabled = data.banner.enabled;
                    this.link = data.banner.link;
                    this.image = data.banner.image;
                    this.ctaText = data.banner.ctaText;
                }
                Banner = __decorate([
                    core_38.Component({
                        selector: 'banner',
                        template: "undefined",
                        directives: [landing_learn_more_button_4.LearnMoreButton],
                    }), 
                    __metadata('design:paramtypes', [(typeof (_a = typeof appdata_service_15.AppData !== 'undefined' && appdata_service_15.AppData) === 'function' && _a) || Object, (typeof (_b = typeof logger_service_15.Logger !== 'undefined' && logger_service_15.Logger) === 'function' && _b) || Object])
                ], Banner);
                return Banner;
                var _a, _b;
            }());
            exports_42("Banner", Banner);
        }
    }
});
System.register("cuat/temp/landing.header", ['angular2/core'], function(exports_43, context_43) {
    "use strict";
    var __moduleName = context_43 && context_43.id;
    var core_39;
    var Header;
    return {
        setters:[
            function (core_39_1) {
                core_39 = core_39_1;
            }],
        execute: function() {
            Header = (function () {
                function Header() {
                }
                Header = __decorate([
                    core_39.Component({
                        selector: 'header',
                        template: "undefined",
                    }), 
                    __metadata('design:paramtypes', [])
                ], Header);
                return Header;
            }());
            exports_43("Header", Header);
        }
    }
});
System.register("cuat/temp/landing.footer", ['angular2/core'], function(exports_44, context_44) {
    "use strict";
    var __moduleName = context_44 && context_44.id;
    var core_40;
    var Footer;
    return {
        setters:[
            function (core_40_1) {
                core_40 = core_40_1;
            }],
        execute: function() {
            Footer = (function () {
                function Footer() {
                }
                Footer = __decorate([
                    core_40.Component({
                        selector: 'footer',
                        template: "undefined",
                    }), 
                    __metadata('design:paramtypes', [])
                ], Footer);
                return Footer;
            }());
            exports_44("Footer", Footer);
        }
    }
});
System.register("cuat/temp/app", ['angular2/platform/browser', 'angular2/http', './services/logger.service', './services/googleapi.service', './services/appdata.service', 'angular2/core', "cuat/temp/landing.video-player", "cuat/temp/landing.masthead", "cuat/temp/landing.feature", "cuat/temp/product.selector", "cuat/temp/landing.morefeatures", "cuat/temp/landing.banner", "cuat/temp/landing.header", "cuat/temp/landing.footer"], function(exports_45, context_45) {
    "use strict";
    var __moduleName = context_45 && context_45.id;
    var browser_2, http_3, logger_service_16, googleapi_service_4, appdata_service_16, core_41, landing_video_player_2, landing_masthead_2, landing_feature_2, product_selector_2, landing_morefeatures_2, landing_banner_2, landing_header_2, landing_footer_2;
    var AppComponent;
    return {
        setters:[
            function (browser_2_1) {
                browser_2 = browser_2_1;
            },
            function (http_3_1) {
                http_3 = http_3_1;
            },
            function (logger_service_16_1) {
                logger_service_16 = logger_service_16_1;
            },
            function (googleapi_service_4_1) {
                googleapi_service_4 = googleapi_service_4_1;
            },
            function (appdata_service_16_1) {
                appdata_service_16 = appdata_service_16_1;
            },
            function (core_41_1) {
                core_41 = core_41_1;
            },
            function (landing_video_player_2_1) {
                landing_video_player_2 = landing_video_player_2_1;
            },
            function (landing_masthead_2_1) {
                landing_masthead_2 = landing_masthead_2_1;
            },
            function (landing_feature_2_1) {
                landing_feature_2 = landing_feature_2_1;
            },
            function (product_selector_2_1) {
                product_selector_2 = product_selector_2_1;
            },
            function (landing_morefeatures_2_1) {
                landing_morefeatures_2 = landing_morefeatures_2_1;
            },
            function (landing_banner_2_1) {
                landing_banner_2 = landing_banner_2_1;
            },
            function (landing_header_2_1) {
                landing_header_2 = landing_header_2_1;
            },
            function (landing_footer_2_1) {
                landing_footer_2 = landing_footer_2_1;
            }],
        execute: function() {
            AppComponent = (function () {
                function AppComponent(appdata) {
                    this.appdata = appdata;
                    this.language = appdata.language;
                }
                AppComponent = __decorate([
                    core_41.Component({
                        selector: 'rl-wp-refer-landing',
                        template: "undefined",
                        directives: [landing_video_player_2.VideoPlayer, landing_masthead_2.AppMasthead, landing_feature_2.Features, product_selector_2.ProductSelector, landing_banner_2.Banner, landing_morefeatures_2.MoreFeatures, landing_header_2.Header, landing_footer_2.Footer]
                    }), 
                    __metadata('design:paramtypes', [(typeof (_a = typeof appdata_service_16.AppData !== 'undefined' && appdata_service_16.AppData) === 'function' && _a) || Object])
                ], AppComponent);
                return AppComponent;
                var _a;
            }());
            browser_2.bootstrap(AppComponent, [http_3.HTTP_PROVIDERS, logger_service_16.Logger, googleapi_service_4.GoogleApi, appdata_service_16.AppData]);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/animate/browser_details", ['angular2/src/core/di', 'angular2/src/facade/math', 'angular2/src/platform/dom/dom_adapter'], function(exports_46, context_46) {
    "use strict";
    var __moduleName = context_46 && context_46.id;
    var di_1, math_1, dom_adapter_1;
    var BrowserDetails, RafQueue;
    return {
        setters:[
            function (di_1_1) {
                di_1 = di_1_1;
            },
            function (math_1_1) {
                math_1 = math_1_1;
            },
            function (dom_adapter_1_1) {
                dom_adapter_1 = dom_adapter_1_1;
            }],
        execute: function() {
            BrowserDetails = (function () {
                function BrowserDetails() {
                    this.elapsedTimeIncludesDelay = false;
                    this.doesElapsedTimeIncludesDelay();
                }
                /**
                 * Determines if `event.elapsedTime` includes transition delay in the current browser.  At this
                 * time, Chrome and Opera seem to be the only browsers that include this.
                 */
                BrowserDetails.prototype.doesElapsedTimeIncludesDelay = function () {
                    var _this = this;
                    var div = dom_adapter_1.DOM.createElement('div');
                    dom_adapter_1.DOM.setAttribute(div, 'style', "position: absolute; top: -9999px; left: -9999px; width: 1px;\n      height: 1px; transition: all 1ms linear 1ms;");
                    // Firefox requires that we wait for 2 frames for some reason
                    this.raf(function (timestamp) {
                        dom_adapter_1.DOM.on(div, 'transitionend', function (event) {
                            var elapsed = math_1.Math.round(event.elapsedTime * 1000);
                            _this.elapsedTimeIncludesDelay = elapsed == 2;
                            dom_adapter_1.DOM.remove(div);
                        });
                        dom_adapter_1.DOM.setStyle(div, 'width', '2px');
                    }, 2);
                };
                BrowserDetails.prototype.raf = function (callback, frames) {
                    if (frames === void 0) { frames = 1; }
                    var queue = new RafQueue(callback, frames);
                    return function () { return queue.cancel(); };
                };
                BrowserDetails = __decorate([
                    di_1.Injectable(), 
                    __metadata('design:paramtypes', [])
                ], BrowserDetails);
                return BrowserDetails;
            }());
            exports_46("BrowserDetails", BrowserDetails);
            RafQueue = (function () {
                function RafQueue(callback, frames) {
                    this.callback = callback;
                    this.frames = frames;
                    this._raf();
                }
                RafQueue.prototype._raf = function () {
                    var _this = this;
                    this.currentFrameId =
                        dom_adapter_1.DOM.requestAnimationFrame(function (timestamp) { return _this._nextFrame(timestamp); });
                };
                RafQueue.prototype._nextFrame = function (timestamp) {
                    this.frames--;
                    if (this.frames > 0) {
                        this._raf();
                    }
                    else {
                        this.callback(timestamp);
                    }
                };
                RafQueue.prototype.cancel = function () {
                    dom_adapter_1.DOM.cancelAnimationFrame(this.currentFrameId);
                    this.currentFrameId = null;
                };
                return RafQueue;
            }());
        }
    }
});
System.register("test/node_modules/angular2/ts/src/animate/css_animation_options", [], function(exports_47, context_47) {
    "use strict";
    var __moduleName = context_47 && context_47.id;
    var CssAnimationOptions;
    return {
        setters:[],
        execute: function() {
            CssAnimationOptions = (function () {
                function CssAnimationOptions() {
                    /** classes to be added to the element */
                    this.classesToAdd = [];
                    /** classes to be removed from the element */
                    this.classesToRemove = [];
                    /** classes to be added for the duration of the animation */
                    this.animationClasses = [];
                }
                return CssAnimationOptions;
            }());
            exports_47("CssAnimationOptions", CssAnimationOptions);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/animate/animation", ['angular2/src/facade/lang', 'angular2/src/facade/math', 'angular2/src/platform/dom/util', 'angular2/src/facade/collection', 'angular2/src/platform/dom/dom_adapter'], function(exports_48, context_48) {
    "use strict";
    var __moduleName = context_48 && context_48.id;
    var lang_1, math_2, util_1, collection_1, dom_adapter_2;
    var Animation;
    return {
        setters:[
            function (lang_1_1) {
                lang_1 = lang_1_1;
            },
            function (math_2_1) {
                math_2 = math_2_1;
            },
            function (util_1_1) {
                util_1 = util_1_1;
            },
            function (collection_1_1) {
                collection_1 = collection_1_1;
            },
            function (dom_adapter_2_1) {
                dom_adapter_2 = dom_adapter_2_1;
            }],
        execute: function() {
            Animation = (function () {
                /**
                 * Stores the start time and starts the animation
                 * @param element
                 * @param data
                 * @param browserDetails
                 */
                function Animation(element, data, browserDetails) {
                    var _this = this;
                    this.element = element;
                    this.data = data;
                    this.browserDetails = browserDetails;
                    /** functions to be called upon completion */
                    this.callbacks = [];
                    /** functions for removing event listeners */
                    this.eventClearFunctions = [];
                    /** flag used to track whether or not the animation has finished */
                    this.completed = false;
                    this._stringPrefix = '';
                    this.startTime = lang_1.DateWrapper.toMillis(lang_1.DateWrapper.now());
                    this._stringPrefix = dom_adapter_2.DOM.getAnimationPrefix();
                    this.setup();
                    this.wait(function (timestamp) { return _this.start(); });
                }
                Object.defineProperty(Animation.prototype, "totalTime", {
                    /** total amount of time that the animation should take including delay */
                    get: function () {
                        var delay = this.computedDelay != null ? this.computedDelay : 0;
                        var duration = this.computedDuration != null ? this.computedDuration : 0;
                        return delay + duration;
                    },
                    enumerable: true,
                    configurable: true
                });
                Animation.prototype.wait = function (callback) {
                    // Firefox requires 2 frames for some reason
                    this.browserDetails.raf(callback, 2);
                };
                /**
                 * Sets up the initial styles before the animation is started
                 */
                Animation.prototype.setup = function () {
                    if (this.data.fromStyles != null)
                        this.applyStyles(this.data.fromStyles);
                    if (this.data.duration != null)
                        this.applyStyles({ 'transitionDuration': this.data.duration.toString() + 'ms' });
                    if (this.data.delay != null)
                        this.applyStyles({ 'transitionDelay': this.data.delay.toString() + 'ms' });
                };
                /**
                 * After the initial setup has occurred, this method adds the animation styles
                 */
                Animation.prototype.start = function () {
                    this.addClasses(this.data.classesToAdd);
                    this.addClasses(this.data.animationClasses);
                    this.removeClasses(this.data.classesToRemove);
                    if (this.data.toStyles != null)
                        this.applyStyles(this.data.toStyles);
                    var computedStyles = dom_adapter_2.DOM.getComputedStyle(this.element);
                    this.computedDelay =
                        math_2.Math.max(this.parseDurationString(computedStyles.getPropertyValue(this._stringPrefix + 'transition-delay')), this.parseDurationString(this.element.style.getPropertyValue(this._stringPrefix + 'transition-delay')));
                    this.computedDuration = math_2.Math.max(this.parseDurationString(computedStyles.getPropertyValue(this._stringPrefix + 'transition-duration')), this.parseDurationString(this.element.style.getPropertyValue(this._stringPrefix + 'transition-duration')));
                    this.addEvents();
                };
                /**
                 * Applies the provided styles to the element
                 * @param styles
                 */
                Animation.prototype.applyStyles = function (styles) {
                    var _this = this;
                    collection_1.StringMapWrapper.forEach(styles, function (value, key) {
                        var dashCaseKey = util_1.camelCaseToDashCase(key);
                        if (lang_1.isPresent(dom_adapter_2.DOM.getStyle(_this.element, dashCaseKey))) {
                            dom_adapter_2.DOM.setStyle(_this.element, dashCaseKey, value.toString());
                        }
                        else {
                            dom_adapter_2.DOM.setStyle(_this.element, _this._stringPrefix + dashCaseKey, value.toString());
                        }
                    });
                };
                /**
                 * Adds the provided classes to the element
                 * @param classes
                 */
                Animation.prototype.addClasses = function (classes) {
                    for (var i = 0, len = classes.length; i < len; i++)
                        dom_adapter_2.DOM.addClass(this.element, classes[i]);
                };
                /**
                 * Removes the provided classes from the element
                 * @param classes
                 */
                Animation.prototype.removeClasses = function (classes) {
                    for (var i = 0, len = classes.length; i < len; i++)
                        dom_adapter_2.DOM.removeClass(this.element, classes[i]);
                };
                /**
                 * Adds events to track when animations have finished
                 */
                Animation.prototype.addEvents = function () {
                    var _this = this;
                    if (this.totalTime > 0) {
                        this.eventClearFunctions.push(dom_adapter_2.DOM.onAndCancel(this.element, dom_adapter_2.DOM.getTransitionEnd(), function (event) { return _this.handleAnimationEvent(event); }));
                    }
                    else {
                        this.handleAnimationCompleted();
                    }
                };
                Animation.prototype.handleAnimationEvent = function (event) {
                    var elapsedTime = math_2.Math.round(event.elapsedTime * 1000);
                    if (!this.browserDetails.elapsedTimeIncludesDelay)
                        elapsedTime += this.computedDelay;
                    event.stopPropagation();
                    if (elapsedTime >= this.totalTime)
                        this.handleAnimationCompleted();
                };
                /**
                 * Runs all animation callbacks and removes temporary classes
                 */
                Animation.prototype.handleAnimationCompleted = function () {
                    this.removeClasses(this.data.animationClasses);
                    this.callbacks.forEach(function (callback) { return callback(); });
                    this.callbacks = [];
                    this.eventClearFunctions.forEach(function (fn) { return fn(); });
                    this.eventClearFunctions = [];
                    this.completed = true;
                };
                /**
                 * Adds animation callbacks to be called upon completion
                 * @param callback
                 * @returns {Animation}
                 */
                Animation.prototype.onComplete = function (callback) {
                    if (this.completed) {
                        callback();
                    }
                    else {
                        this.callbacks.push(callback);
                    }
                    return this;
                };
                /**
                 * Converts the duration string to the number of milliseconds
                 * @param duration
                 * @returns {number}
                 */
                Animation.prototype.parseDurationString = function (duration) {
                    var maxValue = 0;
                    // duration must have at least 2 characters to be valid. (number + type)
                    if (duration == null || duration.length < 2) {
                        return maxValue;
                    }
                    else if (duration.substring(duration.length - 2) == 'ms') {
                        var value = lang_1.NumberWrapper.parseInt(this.stripLetters(duration), 10);
                        if (value > maxValue)
                            maxValue = value;
                    }
                    else if (duration.substring(duration.length - 1) == 's') {
                        var ms = lang_1.NumberWrapper.parseFloat(this.stripLetters(duration)) * 1000;
                        var value = math_2.Math.floor(ms);
                        if (value > maxValue)
                            maxValue = value;
                    }
                    return maxValue;
                };
                /**
                 * Strips the letters from the duration string
                 * @param str
                 * @returns {string}
                 */
                Animation.prototype.stripLetters = function (str) {
                    return lang_1.StringWrapper.replaceAll(str, lang_1.RegExpWrapper.create('[^0-9]+$', ''), '');
                };
                return Animation;
            }());
            exports_48("Animation", Animation);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/animate/css_animation_builder", ["test/node_modules/angular2/ts/src/animate/css_animation_options", "test/node_modules/angular2/ts/src/animate/animation"], function(exports_49, context_49) {
    "use strict";
    var __moduleName = context_49 && context_49.id;
    var css_animation_options_1, animation_1;
    var CssAnimationBuilder;
    return {
        setters:[
            function (css_animation_options_1_1) {
                css_animation_options_1 = css_animation_options_1_1;
            },
            function (animation_1_1) {
                animation_1 = animation_1_1;
            }],
        execute: function() {
            CssAnimationBuilder = (function () {
                /**
                 * Accepts public properties for CssAnimationBuilder
                 */
                function CssAnimationBuilder(browserDetails) {
                    this.browserDetails = browserDetails;
                    /** @type {CssAnimationOptions} */
                    this.data = new css_animation_options_1.CssAnimationOptions();
                }
                /**
                 * Adds a temporary class that will be removed at the end of the animation
                 * @param className
                 */
                CssAnimationBuilder.prototype.addAnimationClass = function (className) {
                    this.data.animationClasses.push(className);
                    return this;
                };
                /**
                 * Adds a class that will remain on the element after the animation has finished
                 * @param className
                 */
                CssAnimationBuilder.prototype.addClass = function (className) {
                    this.data.classesToAdd.push(className);
                    return this;
                };
                /**
                 * Removes a class from the element
                 * @param className
                 */
                CssAnimationBuilder.prototype.removeClass = function (className) {
                    this.data.classesToRemove.push(className);
                    return this;
                };
                /**
                 * Sets the animation duration (and overrides any defined through CSS)
                 * @param duration
                 */
                CssAnimationBuilder.prototype.setDuration = function (duration) {
                    this.data.duration = duration;
                    return this;
                };
                /**
                 * Sets the animation delay (and overrides any defined through CSS)
                 * @param delay
                 */
                CssAnimationBuilder.prototype.setDelay = function (delay) {
                    this.data.delay = delay;
                    return this;
                };
                /**
                 * Sets styles for both the initial state and the destination state
                 * @param from
                 * @param to
                 */
                CssAnimationBuilder.prototype.setStyles = function (from, to) {
                    return this.setFromStyles(from).setToStyles(to);
                };
                /**
                 * Sets the initial styles for the animation
                 * @param from
                 */
                CssAnimationBuilder.prototype.setFromStyles = function (from) {
                    this.data.fromStyles = from;
                    return this;
                };
                /**
                 * Sets the destination styles for the animation
                 * @param to
                 */
                CssAnimationBuilder.prototype.setToStyles = function (to) {
                    this.data.toStyles = to;
                    return this;
                };
                /**
                 * Starts the animation and returns a promise
                 * @param element
                 */
                CssAnimationBuilder.prototype.start = function (element) {
                    return new animation_1.Animation(element, this.data, this.browserDetails);
                };
                return CssAnimationBuilder;
            }());
            exports_49("CssAnimationBuilder", CssAnimationBuilder);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/animate/animation_builder", ['angular2/src/core/di', "test/node_modules/angular2/ts/src/animate/css_animation_builder", "test/node_modules/angular2/ts/src/animate/browser_details"], function(exports_50, context_50) {
    "use strict";
    var __moduleName = context_50 && context_50.id;
    var di_2, css_animation_builder_1, browser_details_1;
    var AnimationBuilder;
    return {
        setters:[
            function (di_2_1) {
                di_2 = di_2_1;
            },
            function (css_animation_builder_1_1) {
                css_animation_builder_1 = css_animation_builder_1_1;
            },
            function (browser_details_1_1) {
                browser_details_1 = browser_details_1_1;
            }],
        execute: function() {
            AnimationBuilder = (function () {
                /**
                 * Used for DI
                 * @param browserDetails
                 */
                function AnimationBuilder(browserDetails) {
                    this.browserDetails = browserDetails;
                }
                /**
                 * Creates a new CSS Animation
                 * @returns {CssAnimationBuilder}
                 */
                AnimationBuilder.prototype.css = function () { return new css_animation_builder_1.CssAnimationBuilder(this.browserDetails); };
                AnimationBuilder = __decorate([
                    di_2.Injectable(), 
                    __metadata('design:paramtypes', [browser_details_1.BrowserDetails])
                ], AnimationBuilder);
                return AnimationBuilder;
            }());
            exports_50("AnimationBuilder", AnimationBuilder);
        }
    }
});
System.register("test/node_modules/angular2/ts/animate", ["test/node_modules/angular2/ts/src/animate/animation", "test/node_modules/angular2/ts/src/animate/animation_builder", "test/node_modules/angular2/ts/src/animate/browser_details", "test/node_modules/angular2/ts/src/animate/css_animation_builder", "test/node_modules/angular2/ts/src/animate/css_animation_options"], function(exports_51, context_51) {
    "use strict";
    var __moduleName = context_51 && context_51.id;
    return {
        setters:[
            function (animation_2_1) {
                exports_51({
                    "Animation": animation_2_1["Animation"]
                });
            },
            function (animation_builder_1_1) {
                exports_51({
                    "AnimationBuilder": animation_builder_1_1["AnimationBuilder"]
                });
            },
            function (browser_details_2_1) {
                exports_51({
                    "BrowserDetails": browser_details_2_1["BrowserDetails"]
                });
            },
            function (css_animation_builder_2_1) {
                exports_51({
                    "CssAnimationBuilder": css_animation_builder_2_1["CssAnimationBuilder"]
                });
            },
            function (css_animation_options_2_1) {
                exports_51({
                    "CssAnimationOptions": css_animation_options_2_1["CssAnimationOptions"]
                });
            }],
        execute: function() {
        }
    }
});
System.register("test/node_modules/angular2/ts/bootstrap", ['angular2/platform/browser', 'angular2/src/core/angular_entrypoint'], function(exports_52, context_52) {
    "use strict";
    var __moduleName = context_52 && context_52.id;
    return {
        setters:[
            function (browser_3_1) {
                exports_52({
                    "bootstrap": browser_3_1["bootstrap"]
                });
            },
            function (angular_entrypoint_1_1) {
                exports_52({
                    "AngularEntrypoint": angular_entrypoint_1_1["AngularEntrypoint"]
                });
            }],
        execute: function() {
        }
    }
});
System.register("test/node_modules/angular2/ts/bootstrap_static", ['angular2/platform/browser_static', 'angular2/src/core/angular_entrypoint'], function(exports_53, context_53) {
    "use strict";
    var __moduleName = context_53 && context_53.id;
    return {
        setters:[
            function (browser_static_1_1) {
                exports_53({
                    "bootstrapStatic": browser_static_1_1["bootstrapStatic"]
                });
            },
            function (angular_entrypoint_2_1) {
                exports_53({
                    "AngularEntrypoint": angular_entrypoint_2_1["AngularEntrypoint"]
                });
            }],
        execute: function() {
        }
    }
});
System.register("test/node_modules/angular2/ts/src/common/pipes/invalid_pipe_argument_exception", ['angular2/src/facade/lang', 'angular2/src/facade/exceptions'], function(exports_54, context_54) {
    "use strict";
    var __moduleName = context_54 && context_54.id;
    var lang_2, exceptions_1;
    var InvalidPipeArgumentException;
    return {
        setters:[
            function (lang_2_1) {
                lang_2 = lang_2_1;
            },
            function (exceptions_1_1) {
                exceptions_1 = exceptions_1_1;
            }],
        execute: function() {
            InvalidPipeArgumentException = (function (_super) {
                __extends(InvalidPipeArgumentException, _super);
                function InvalidPipeArgumentException(type, value) {
                    _super.call(this, "Invalid argument '" + value + "' for pipe '" + lang_2.stringify(type) + "'");
                }
                return InvalidPipeArgumentException;
            }(exceptions_1.BaseException));
            exports_54("InvalidPipeArgumentException", InvalidPipeArgumentException);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/common/pipes/async_pipe", ['angular2/src/facade/lang', 'angular2/src/facade/async', 'angular2/core', "test/node_modules/angular2/ts/src/common/pipes/invalid_pipe_argument_exception"], function(exports_55, context_55) {
    "use strict";
    var __moduleName = context_55 && context_55.id;
    var lang_3, async_1, core_42, invalid_pipe_argument_exception_1;
    var ObservableStrategy, PromiseStrategy, _promiseStrategy, _observableStrategy, __unused, AsyncPipe;
    return {
        setters:[
            function (lang_3_1) {
                lang_3 = lang_3_1;
            },
            function (async_1_1) {
                async_1 = async_1_1;
            },
            function (core_42_1) {
                core_42 = core_42_1;
            },
            function (invalid_pipe_argument_exception_1_1) {
                invalid_pipe_argument_exception_1 = invalid_pipe_argument_exception_1_1;
            }],
        execute: function() {
            ObservableStrategy = (function () {
                function ObservableStrategy() {
                }
                ObservableStrategy.prototype.createSubscription = function (async, updateLatestValue) {
                    return async_1.ObservableWrapper.subscribe(async, updateLatestValue, function (e) { throw e; });
                };
                ObservableStrategy.prototype.dispose = function (subscription) { async_1.ObservableWrapper.dispose(subscription); };
                ObservableStrategy.prototype.onDestroy = function (subscription) { async_1.ObservableWrapper.dispose(subscription); };
                return ObservableStrategy;
            }());
            PromiseStrategy = (function () {
                function PromiseStrategy() {
                }
                PromiseStrategy.prototype.createSubscription = function (async, updateLatestValue) {
                    return async.then(updateLatestValue);
                };
                PromiseStrategy.prototype.dispose = function (subscription) { };
                PromiseStrategy.prototype.onDestroy = function (subscription) { };
                return PromiseStrategy;
            }());
            _promiseStrategy = new PromiseStrategy();
            _observableStrategy = new ObservableStrategy();
             // avoid unused import when Promise union types are erased
            /**
             * The `async` pipe subscribes to an Observable or Promise and returns the latest value it has
             * emitted.
             * When a new value is emitted, the `async` pipe marks the component to be checked for changes.
             *
             * ### Example
             *
             * This example binds a `Promise` to the view. Clicking the `Resolve` button resolves the
             * promise.
             *
             * {@example core/pipes/ts/async_pipe/async_pipe_example.ts region='AsyncPipe'}
             *
             * It's also possible to use `async` with Observables. The example below binds the `time` Observable
             * to the view. Every 500ms, the `time` Observable updates the view with the current time.
             *
             * ```typescript
             * ```
             */
            AsyncPipe = (function () {
                function AsyncPipe(_ref) {
                    /** @internal */
                    this._latestValue = null;
                    /** @internal */
                    this._latestReturnedValue = null;
                    /** @internal */
                    this._subscription = null;
                    /** @internal */
                    this._obj = null;
                    this._strategy = null;
                    this._ref = _ref;
                }
                AsyncPipe.prototype.ngOnDestroy = function () {
                    if (lang_3.isPresent(this._subscription)) {
                        this._dispose();
                    }
                };
                AsyncPipe.prototype.transform = function (obj, args) {
                    if (lang_3.isBlank(this._obj)) {
                        if (lang_3.isPresent(obj)) {
                            this._subscribe(obj);
                        }
                        this._latestReturnedValue = this._latestValue;
                        return this._latestValue;
                    }
                    if (obj !== this._obj) {
                        this._dispose();
                        return this.transform(obj);
                    }
                    if (this._latestValue === this._latestReturnedValue) {
                        return this._latestReturnedValue;
                    }
                    else {
                        this._latestReturnedValue = this._latestValue;
                        return core_42.WrappedValue.wrap(this._latestValue);
                    }
                };
                /** @internal */
                AsyncPipe.prototype._subscribe = function (obj) {
                    var _this = this;
                    this._obj = obj;
                    this._strategy = this._selectStrategy(obj);
                    this._subscription = this._strategy.createSubscription(obj, function (value) { return _this._updateLatestValue(obj, value); });
                };
                /** @internal */
                AsyncPipe.prototype._selectStrategy = function (obj) {
                    if (lang_3.isPromise(obj)) {
                        return _promiseStrategy;
                    }
                    else if (async_1.ObservableWrapper.isObservable(obj)) {
                        return _observableStrategy;
                    }
                    else {
                        throw new invalid_pipe_argument_exception_1.InvalidPipeArgumentException(AsyncPipe, obj);
                    }
                };
                /** @internal */
                AsyncPipe.prototype._dispose = function () {
                    this._strategy.dispose(this._subscription);
                    this._latestValue = null;
                    this._latestReturnedValue = null;
                    this._subscription = null;
                    this._obj = null;
                };
                /** @internal */
                AsyncPipe.prototype._updateLatestValue = function (async, value) {
                    if (async === this._obj) {
                        this._latestValue = value;
                        this._ref.markForCheck();
                    }
                };
                AsyncPipe = __decorate([
                    // avoid unused import when Promise union types are erased
                    core_42.Pipe({ name: 'async', pure: false }),
                    core_42.Injectable(), 
                    __metadata('design:paramtypes', [core_42.ChangeDetectorRef])
                ], AsyncPipe);
                return AsyncPipe;
            }());
            exports_55("AsyncPipe", AsyncPipe);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/common/pipes/date_pipe", ['angular2/src/facade/lang', 'angular2/src/facade/intl', 'angular2/core', 'angular2/src/facade/collection', "test/node_modules/angular2/ts/src/common/pipes/invalid_pipe_argument_exception"], function(exports_56, context_56) {
    "use strict";
    var __moduleName = context_56 && context_56.id;
    var lang_4, intl_1, core_43, collection_2, invalid_pipe_argument_exception_2;
    var defaultLocale, DatePipe;
    return {
        setters:[
            function (lang_4_1) {
                lang_4 = lang_4_1;
            },
            function (intl_1_1) {
                intl_1 = intl_1_1;
            },
            function (core_43_1) {
                core_43 = core_43_1;
            },
            function (collection_2_1) {
                collection_2 = collection_2_1;
            },
            function (invalid_pipe_argument_exception_2_1) {
                invalid_pipe_argument_exception_2 = invalid_pipe_argument_exception_2_1;
            }],
        execute: function() {
            // TODO: move to a global configurable location along with other i18n components.
            defaultLocale = 'en-US';
            /**
             * Formats a date value to a string based on the requested format.
             *
             * WARNINGS:
             * - this pipe is marked as pure hence it will not be re-evaluated when the input is mutated.
             *   Instead users should treat the date as an immutable object and change the reference when the
             *   pipe needs to re-run (this is to avoid reformatting the date on every change detection run
             *   which would be an expensive operation).
             * - this pipe uses the Internationalization API. Therefore it is only reliable in Chrome and Opera
             *   browsers.
             *
             * ## Usage
             *
             *     expression | date[:format]
             *
             * where `expression` is a date object or a number (milliseconds since UTC epoch) and
             * `format` indicates which date/time components to include:
             *
             *  | Component | Symbol | Short Form   | Long Form         | Numeric   | 2-digit   |
             *  |-----------|:------:|--------------|-------------------|-----------|-----------|
             *  | era       |   G    | G (AD)       | GGGG (Anno Domini)| -         | -         |
             *  | year      |   y    | -            | -                 | y (2015)  | yy (15)   |
             *  | month     |   M    | MMM (Sep)    | MMMM (September)  | M (9)     | MM (09)   |
             *  | day       |   d    | -            | -                 | d (3)     | dd (03)   |
             *  | weekday   |   E    | EEE (Sun)    | EEEE (Sunday)     | -         | -         |
             *  | hour      |   j    | -            | -                 | j (13)    | jj (13)   |
             *  | hour12    |   h    | -            | -                 | h (1 PM)  | hh (01 PM)|
             *  | hour24    |   H    | -            | -                 | H (13)    | HH (13)   |
             *  | minute    |   m    | -            | -                 | m (5)     | mm (05)   |
             *  | second    |   s    | -            | -                 | s (9)     | ss (09)   |
             *  | timezone  |   z    | -            | z (Pacific Standard Time)| -  | -         |
             *  | timezone  |   Z    | Z (GMT-8:00) | -                 | -         | -         |
             *
             * In javascript, only the components specified will be respected (not the ordering,
             * punctuations, ...) and details of the formatting will be dependent on the locale.
             * On the other hand in Dart version, you can also include quoted text as well as some extra
             * date/time components such as quarter. For more information see:
             * https://api.dartlang.org/apidocs/channels/stable/dartdoc-viewer/intl/intl.DateFormat.
             *
             * `format` can also be one of the following predefined formats:
             *
             *  - `'medium'`: equivalent to `'yMMMdjms'` (e.g. Sep 3, 2010, 12:05:08 PM for en-US)
             *  - `'short'`: equivalent to `'yMdjm'` (e.g. 9/3/2010, 12:05 PM for en-US)
             *  - `'fullDate'`: equivalent to `'yMMMMEEEEd'` (e.g. Friday, September 3, 2010 for en-US)
             *  - `'longDate'`: equivalent to `'yMMMMd'` (e.g. September 3, 2010)
             *  - `'mediumDate'`: equivalent to `'yMMMd'` (e.g. Sep 3, 2010 for en-US)
             *  - `'shortDate'`: equivalent to `'yMd'` (e.g. 9/3/2010 for en-US)
             *  - `'mediumTime'`: equivalent to `'jms'` (e.g. 12:05:08 PM for en-US)
             *  - `'shortTime'`: equivalent to `'jm'` (e.g. 12:05 PM for en-US)
             *
             * Timezone of the formatted text will be the local system timezone of the end-users machine.
             *
             * ### Examples
             *
             * Assuming `dateObj` is (year: 2015, month: 6, day: 15, hour: 21, minute: 43, second: 11)
             * in the _local_ time and locale is 'en-US':
             *
             * ```
             *     {{ dateObj | date }}               // output is 'Jun 15, 2015'
             *     {{ dateObj | date:'medium' }}      // output is 'Jun 15, 2015, 9:43:11 PM'
             *     {{ dateObj | date:'shortTime' }}   // output is '9:43 PM'
             *     {{ dateObj | date:'mmss' }}        // output is '43:11'
             * ```
             *
             * {@example core/pipes/ts/date_pipe/date_pipe_example.ts region='DatePipe'}
             */
            DatePipe = (function () {
                function DatePipe() {
                }
                DatePipe.prototype.transform = function (value, args) {
                    if (lang_4.isBlank(value))
                        return null;
                    if (!this.supports(value)) {
                        throw new invalid_pipe_argument_exception_2.InvalidPipeArgumentException(DatePipe, value);
                    }
                    var pattern = lang_4.isPresent(args) && args.length > 0 ? args[0] : 'mediumDate';
                    if (lang_4.isNumber(value)) {
                        value = lang_4.DateWrapper.fromMillis(value);
                    }
                    if (collection_2.StringMapWrapper.contains(DatePipe._ALIASES, pattern)) {
                        pattern = collection_2.StringMapWrapper.get(DatePipe._ALIASES, pattern);
                    }
                    return intl_1.DateFormatter.format(value, defaultLocale, pattern);
                };
                DatePipe.prototype.supports = function (obj) { return lang_4.isDate(obj) || lang_4.isNumber(obj); };
                /** @internal */
                DatePipe._ALIASES = {
                    'medium': 'yMMMdjms',
                    'short': 'yMdjm',
                    'fullDate': 'yMMMMEEEEd',
                    'longDate': 'yMMMMd',
                    'mediumDate': 'yMMMd',
                    'shortDate': 'yMd',
                    'mediumTime': 'jms',
                    'shortTime': 'jm'
                };
                DatePipe = __decorate([
                    lang_4.CONST(),
                    core_43.Pipe({ name: 'date', pure: true }),
                    core_43.Injectable(), 
                    __metadata('design:paramtypes', [])
                ], DatePipe);
                return DatePipe;
            }());
            exports_56("DatePipe", DatePipe);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/common/pipes/json_pipe", ['angular2/src/facade/lang', 'angular2/core'], function(exports_57, context_57) {
    "use strict";
    var __moduleName = context_57 && context_57.id;
    var lang_5, core_44;
    var JsonPipe;
    return {
        setters:[
            function (lang_5_1) {
                lang_5 = lang_5_1;
            },
            function (core_44_1) {
                core_44 = core_44_1;
            }],
        execute: function() {
            /**
             * Transforms any input value using `JSON.stringify`. Useful for debugging.
             *
             * ### Example
             * {@example core/pipes/ts/json_pipe/json_pipe_example.ts region='JsonPipe'}
             */
            JsonPipe = (function () {
                function JsonPipe() {
                }
                JsonPipe.prototype.transform = function (value, args) {
                    if (args === void 0) { args = null; }
                    return lang_5.Json.stringify(value);
                };
                JsonPipe = __decorate([
                    lang_5.CONST(),
                    core_44.Pipe({ name: 'json', pure: false }),
                    core_44.Injectable(), 
                    __metadata('design:paramtypes', [])
                ], JsonPipe);
                return JsonPipe;
            }());
            exports_57("JsonPipe", JsonPipe);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/common/pipes/slice_pipe", ['angular2/src/facade/lang', 'angular2/src/facade/exceptions', 'angular2/src/facade/collection', 'angular2/core', "test/node_modules/angular2/ts/src/common/pipes/invalid_pipe_argument_exception"], function(exports_58, context_58) {
    "use strict";
    var __moduleName = context_58 && context_58.id;
    var lang_6, exceptions_2, collection_3, core_45, invalid_pipe_argument_exception_3;
    var SlicePipe;
    return {
        setters:[
            function (lang_6_1) {
                lang_6 = lang_6_1;
            },
            function (exceptions_2_1) {
                exceptions_2 = exceptions_2_1;
            },
            function (collection_3_1) {
                collection_3 = collection_3_1;
            },
            function (core_45_1) {
                core_45 = core_45_1;
            },
            function (invalid_pipe_argument_exception_3_1) {
                invalid_pipe_argument_exception_3 = invalid_pipe_argument_exception_3_1;
            }],
        execute: function() {
            /**
             * Creates a new List or String containing only a subset (slice) of the
             * elements.
             *
             * The starting index of the subset to return is specified by the `start` parameter.
             *
             * The ending index of the subset to return is specified by the optional `end` parameter.
             *
             * ### Usage
             *
             *     expression | slice:start[:end]
             *
             * All behavior is based on the expected behavior of the JavaScript API
             * Array.prototype.slice() and String.prototype.slice()
             *
             * Where the input expression is a [List] or [String], and `start` is:
             *
             * - **a positive integer**: return the item at _start_ index and all items after
             * in the list or string expression.
             * - **a negative integer**: return the item at _start_ index from the end and all items after
             * in the list or string expression.
             * - **`|start|` greater than the size of the expression**: return an empty list or string.
             * - **`|start|` negative greater than the size of the expression**: return entire list or
             * string expression.
             *
             * and where `end` is:
             *
             * - **omitted**: return all items until the end of the input
             * - **a positive integer**: return all items before _end_ index of the list or string
             * expression.
             * - **a negative integer**: return all items before _end_ index from the end of the list
             * or string expression.
             *
             * When operating on a [List], the returned list is always a copy even when all
             * the elements are being returned.
             *
             * ## List Example
             *
             * This `ngFor` example:
             *
             * {@example core/pipes/ts/slice_pipe/slice_pipe_example.ts region='SlicePipe_list'}
             *
             * produces the following:
             *
             *     <li>b</li>
             *     <li>c</li>
             *
             * ## String Examples
             *
             * {@example core/pipes/ts/slice_pipe/slice_pipe_example.ts region='SlicePipe_string'}
             */
            SlicePipe = (function () {
                function SlicePipe() {
                }
                SlicePipe.prototype.transform = function (value, args) {
                    if (args === void 0) { args = null; }
                    if (lang_6.isBlank(args) || args.length == 0) {
                        throw new exceptions_2.BaseException('Slice pipe requires one argument');
                    }
                    if (!this.supports(value)) {
                        throw new invalid_pipe_argument_exception_3.InvalidPipeArgumentException(SlicePipe, value);
                    }
                    if (lang_6.isBlank(value))
                        return value;
                    var start = args[0];
                    var end = args.length > 1 ? args[1] : null;
                    if (lang_6.isString(value)) {
                        return lang_6.StringWrapper.slice(value, start, end);
                    }
                    return collection_3.ListWrapper.slice(value, start, end);
                };
                SlicePipe.prototype.supports = function (obj) { return lang_6.isString(obj) || lang_6.isArray(obj); };
                SlicePipe = __decorate([
                    core_45.Pipe({ name: 'slice', pure: false }),
                    core_45.Injectable(), 
                    __metadata('design:paramtypes', [])
                ], SlicePipe);
                return SlicePipe;
            }());
            exports_58("SlicePipe", SlicePipe);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/common/pipes/lowercase_pipe", ['angular2/src/facade/lang', 'angular2/core', "test/node_modules/angular2/ts/src/common/pipes/invalid_pipe_argument_exception"], function(exports_59, context_59) {
    "use strict";
    var __moduleName = context_59 && context_59.id;
    var lang_7, core_46, invalid_pipe_argument_exception_4;
    var LowerCasePipe;
    return {
        setters:[
            function (lang_7_1) {
                lang_7 = lang_7_1;
            },
            function (core_46_1) {
                core_46 = core_46_1;
            },
            function (invalid_pipe_argument_exception_4_1) {
                invalid_pipe_argument_exception_4 = invalid_pipe_argument_exception_4_1;
            }],
        execute: function() {
            /**
             * Transforms text to lowercase.
             *
             * ### Example
             *
             * {@example core/pipes/ts/lowerupper_pipe/lowerupper_pipe_example.ts region='LowerUpperPipe'}
             */
            LowerCasePipe = (function () {
                function LowerCasePipe() {
                }
                LowerCasePipe.prototype.transform = function (value, args) {
                    if (args === void 0) { args = null; }
                    if (lang_7.isBlank(value))
                        return value;
                    if (!lang_7.isString(value)) {
                        throw new invalid_pipe_argument_exception_4.InvalidPipeArgumentException(LowerCasePipe, value);
                    }
                    return value.toLowerCase();
                };
                LowerCasePipe = __decorate([
                    lang_7.CONST(),
                    core_46.Pipe({ name: 'lowercase' }),
                    core_46.Injectable(), 
                    __metadata('design:paramtypes', [])
                ], LowerCasePipe);
                return LowerCasePipe;
            }());
            exports_59("LowerCasePipe", LowerCasePipe);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/common/pipes/number_pipe", ['angular2/src/facade/lang', 'angular2/src/facade/exceptions', 'angular2/src/facade/intl', 'angular2/core', 'angular2/src/facade/collection', "test/node_modules/angular2/ts/src/common/pipes/invalid_pipe_argument_exception"], function(exports_60, context_60) {
    "use strict";
    var __moduleName = context_60 && context_60.id;
    var lang_8, exceptions_3, intl_2, core_47, collection_4, invalid_pipe_argument_exception_5;
    var defaultLocale, _re, NumberPipe, DecimalPipe, PercentPipe, CurrencyPipe;
    return {
        setters:[
            function (lang_8_1) {
                lang_8 = lang_8_1;
            },
            function (exceptions_3_1) {
                exceptions_3 = exceptions_3_1;
            },
            function (intl_2_1) {
                intl_2 = intl_2_1;
            },
            function (core_47_1) {
                core_47 = core_47_1;
            },
            function (collection_4_1) {
                collection_4 = collection_4_1;
            },
            function (invalid_pipe_argument_exception_5_1) {
                invalid_pipe_argument_exception_5 = invalid_pipe_argument_exception_5_1;
            }],
        execute: function() {
            defaultLocale = 'en-US';
            _re = lang_8.RegExpWrapper.create('^(\\d+)?\\.((\\d+)(\\-(\\d+))?)?$');
            /**
             * Internal base class for numeric pipes.
             */
            NumberPipe = (function () {
                function NumberPipe() {
                }
                /** @internal */
                NumberPipe._format = function (value, style, digits, currency, currencyAsSymbol) {
                    if (currency === void 0) { currency = null; }
                    if (currencyAsSymbol === void 0) { currencyAsSymbol = false; }
                    if (lang_8.isBlank(value))
                        return null;
                    if (!lang_8.isNumber(value)) {
                        throw new invalid_pipe_argument_exception_5.InvalidPipeArgumentException(NumberPipe, value);
                    }
                    var minInt = 1, minFraction = 0, maxFraction = 3;
                    if (lang_8.isPresent(digits)) {
                        var parts = lang_8.RegExpWrapper.firstMatch(_re, digits);
                        if (lang_8.isBlank(parts)) {
                            throw new exceptions_3.BaseException(digits + " is not a valid digit info for number pipes");
                        }
                        if (lang_8.isPresent(parts[1])) {
                            minInt = lang_8.NumberWrapper.parseIntAutoRadix(parts[1]);
                        }
                        if (lang_8.isPresent(parts[3])) {
                            minFraction = lang_8.NumberWrapper.parseIntAutoRadix(parts[3]);
                        }
                        if (lang_8.isPresent(parts[5])) {
                            maxFraction = lang_8.NumberWrapper.parseIntAutoRadix(parts[5]);
                        }
                    }
                    return intl_2.NumberFormatter.format(value, defaultLocale, style, {
                        minimumIntegerDigits: minInt,
                        minimumFractionDigits: minFraction,
                        maximumFractionDigits: maxFraction,
                        currency: currency,
                        currencyAsSymbol: currencyAsSymbol
                    });
                };
                NumberPipe = __decorate([
                    lang_8.CONST(),
                    core_47.Injectable(), 
                    __metadata('design:paramtypes', [])
                ], NumberPipe);
                return NumberPipe;
            }());
            exports_60("NumberPipe", NumberPipe);
            /**
             * WARNING: this pipe uses the Internationalization API.
             * Therefore it is only reliable in Chrome and Opera browsers.
             *
             * Formats a number as local text. i.e. group sizing and separator and other locale-specific
             * configurations are based on the active locale.
             *
             * ### Usage
             *
             *     expression | number[:digitInfo]
             *
             * where `expression` is a number and `digitInfo` has the following format:
             *
             *     {minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}
             *
             * - minIntegerDigits is the minimum number of integer digits to use. Defaults to 1.
             * - minFractionDigits is the minimum number of digits after fraction. Defaults to 0.
             * - maxFractionDigits is the maximum number of digits after fraction. Defaults to 3.
             *
             * For more information on the acceptable range for each of these numbers and other
             * details see your native internationalization library.
             *
             * ### Example
             *
             * {@example core/pipes/ts/number_pipe/number_pipe_example.ts region='NumberPipe'}
             */
            DecimalPipe = (function (_super) {
                __extends(DecimalPipe, _super);
                function DecimalPipe() {
                    _super.apply(this, arguments);
                }
                DecimalPipe.prototype.transform = function (value, args) {
                    var digits = collection_4.ListWrapper.first(args);
                    return NumberPipe._format(value, intl_2.NumberFormatStyle.Decimal, digits);
                };
                DecimalPipe = __decorate([
                    lang_8.CONST(),
                    core_47.Pipe({ name: 'number' }),
                    core_47.Injectable(), 
                    __metadata('design:paramtypes', [])
                ], DecimalPipe);
                return DecimalPipe;
            }(NumberPipe));
            exports_60("DecimalPipe", DecimalPipe);
            /**
             * WARNING: this pipe uses the Internationalization API.
             * Therefore it is only reliable in Chrome and Opera browsers.
             *
             * Formats a number as local percent.
             *
             * ### Usage
             *
             *     expression | percent[:digitInfo]
             *
             * For more information about `digitInfo` see {@link DecimalPipe}
             *
             * ### Example
             *
             * {@example core/pipes/ts/number_pipe/number_pipe_example.ts region='PercentPipe'}
             */
            PercentPipe = (function (_super) {
                __extends(PercentPipe, _super);
                function PercentPipe() {
                    _super.apply(this, arguments);
                }
                PercentPipe.prototype.transform = function (value, args) {
                    var digits = collection_4.ListWrapper.first(args);
                    return NumberPipe._format(value, intl_2.NumberFormatStyle.Percent, digits);
                };
                PercentPipe = __decorate([
                    lang_8.CONST(),
                    core_47.Pipe({ name: 'percent' }),
                    core_47.Injectable(), 
                    __metadata('design:paramtypes', [])
                ], PercentPipe);
                return PercentPipe;
            }(NumberPipe));
            exports_60("PercentPipe", PercentPipe);
            /**
             * WARNING: this pipe uses the Internationalization API.
             * Therefore it is only reliable in Chrome and Opera browsers.
             *
             * Formats a number as local currency.
             *
             * ### Usage
             *
             *     expression | currency[:currencyCode[:symbolDisplay[:digitInfo]]]
             *
             * where `currencyCode` is the ISO 4217 currency code, such as "USD" for the US dollar and
             * "EUR" for the euro. `symbolDisplay` is a boolean indicating whether to use the currency
             * symbol (e.g. $) or the currency code (e.g. USD) in the output. The default for this value
             * is `false`.
             * For more information about `digitInfo` see {@link DecimalPipe}
             *
             * ### Example
             *
             * {@example core/pipes/ts/number_pipe/number_pipe_example.ts region='CurrencyPipe'}
             */
            CurrencyPipe = (function (_super) {
                __extends(CurrencyPipe, _super);
                function CurrencyPipe() {
                    _super.apply(this, arguments);
                }
                CurrencyPipe.prototype.transform = function (value, args) {
                    var currencyCode = lang_8.isPresent(args) && args.length > 0 ? args[0] : 'USD';
                    var symbolDisplay = lang_8.isPresent(args) && args.length > 1 ? args[1] : false;
                    var digits = lang_8.isPresent(args) && args.length > 2 ? args[2] : null;
                    return NumberPipe._format(value, intl_2.NumberFormatStyle.Currency, digits, currencyCode, symbolDisplay);
                };
                CurrencyPipe = __decorate([
                    lang_8.CONST(),
                    core_47.Pipe({ name: 'currency' }),
                    core_47.Injectable(), 
                    __metadata('design:paramtypes', [])
                ], CurrencyPipe);
                return CurrencyPipe;
            }(NumberPipe));
            exports_60("CurrencyPipe", CurrencyPipe);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/common/pipes/uppercase_pipe", ['angular2/src/facade/lang', 'angular2/core', "test/node_modules/angular2/ts/src/common/pipes/invalid_pipe_argument_exception"], function(exports_61, context_61) {
    "use strict";
    var __moduleName = context_61 && context_61.id;
    var lang_9, core_48, invalid_pipe_argument_exception_6;
    var UpperCasePipe;
    return {
        setters:[
            function (lang_9_1) {
                lang_9 = lang_9_1;
            },
            function (core_48_1) {
                core_48 = core_48_1;
            },
            function (invalid_pipe_argument_exception_6_1) {
                invalid_pipe_argument_exception_6 = invalid_pipe_argument_exception_6_1;
            }],
        execute: function() {
            /**
             * Implements uppercase transforms to text.
             *
             * ### Example
             *
             * {@example core/pipes/ts/lowerupper_pipe/lowerupper_pipe_example.ts region='LowerUpperPipe'}
             */
            UpperCasePipe = (function () {
                function UpperCasePipe() {
                }
                UpperCasePipe.prototype.transform = function (value, args) {
                    if (args === void 0) { args = null; }
                    if (lang_9.isBlank(value))
                        return value;
                    if (!lang_9.isString(value)) {
                        throw new invalid_pipe_argument_exception_6.InvalidPipeArgumentException(UpperCasePipe, value);
                    }
                    return value.toUpperCase();
                };
                UpperCasePipe = __decorate([
                    lang_9.CONST(),
                    core_48.Pipe({ name: 'uppercase' }),
                    core_48.Injectable(), 
                    __metadata('design:paramtypes', [])
                ], UpperCasePipe);
                return UpperCasePipe;
            }());
            exports_61("UpperCasePipe", UpperCasePipe);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/common/pipes/replace_pipe", ['angular2/src/facade/lang', 'angular2/src/facade/exceptions', 'angular2/core', "test/node_modules/angular2/ts/src/common/pipes/invalid_pipe_argument_exception"], function(exports_62, context_62) {
    "use strict";
    var __moduleName = context_62 && context_62.id;
    var lang_10, exceptions_4, core_49, invalid_pipe_argument_exception_7;
    var ReplacePipe;
    return {
        setters:[
            function (lang_10_1) {
                lang_10 = lang_10_1;
            },
            function (exceptions_4_1) {
                exceptions_4 = exceptions_4_1;
            },
            function (core_49_1) {
                core_49 = core_49_1;
            },
            function (invalid_pipe_argument_exception_7_1) {
                invalid_pipe_argument_exception_7 = invalid_pipe_argument_exception_7_1;
            }],
        execute: function() {
            /**
             * Creates a new String with some or all of the matches of a pattern replaced by
             * a replacement.
             *
             * The pattern to be matched is specified by the 'pattern' parameter.
             *
             * The replacement to be set is specified by the 'replacement' parameter.
             *
             * An optional 'flags' parameter can be set.
             *
             * ### Usage
             *
             *     expression | replace:pattern:replacement
             *
             * All behavior is based on the expected behavior of the JavaScript API
             * String.prototype.replace() function.
             *
             * Where the input expression is a [String] or [Number] (to be treated as a string),
             * the `pattern` is a [String] or [RegExp],
             * the 'replacement' is a [String] or [Function].
             *
             * --Note--: The 'pattern' parameter will be converted to a RegExp instance. Make sure to escape the
             * string properly if you are matching for regular expression special characters like parenthesis,
             * brackets etc.
             */
            ReplacePipe = (function () {
                function ReplacePipe() {
                }
                ReplacePipe.prototype.transform = function (value, args) {
                    if (lang_10.isBlank(args) || args.length !== 2) {
                        throw new exceptions_4.BaseException('ReplacePipe requires two arguments');
                    }
                    if (lang_10.isBlank(value)) {
                        return value;
                    }
                    if (!this._supportedInput(value)) {
                        throw new invalid_pipe_argument_exception_7.InvalidPipeArgumentException(ReplacePipe, value);
                    }
                    var input = value.toString();
                    var pattern = args[0];
                    var replacement = args[1];
                    if (!this._supportedPattern(pattern)) {
                        throw new invalid_pipe_argument_exception_7.InvalidPipeArgumentException(ReplacePipe, pattern);
                    }
                    if (!this._supportedReplacement(replacement)) {
                        throw new invalid_pipe_argument_exception_7.InvalidPipeArgumentException(ReplacePipe, replacement);
                    }
                    // template fails with literal RegExp e.g /pattern/igm
                    // var rgx = pattern instanceof RegExp ? pattern : RegExpWrapper.create(pattern);
                    if (lang_10.isFunction(replacement)) {
                        var rgxPattern = lang_10.isString(pattern) ? lang_10.RegExpWrapper.create(pattern) : pattern;
                        return lang_10.StringWrapper.replaceAllMapped(input, rgxPattern, replacement);
                    }
                    if (pattern instanceof RegExp) {
                        // use the replaceAll variant
                        return lang_10.StringWrapper.replaceAll(input, pattern, replacement);
                    }
                    return lang_10.StringWrapper.replace(input, pattern, replacement);
                };
                ReplacePipe.prototype._supportedInput = function (input) { return lang_10.isString(input) || lang_10.isNumber(input); };
                ReplacePipe.prototype._supportedPattern = function (pattern) {
                    return lang_10.isString(pattern) || pattern instanceof RegExp;
                };
                ReplacePipe.prototype._supportedReplacement = function (replacement) {
                    return lang_10.isString(replacement) || lang_10.isFunction(replacement);
                };
                ReplacePipe = __decorate([
                    core_49.Pipe({ name: 'replace' }),
                    core_49.Injectable(), 
                    __metadata('design:paramtypes', [])
                ], ReplacePipe);
                return ReplacePipe;
            }());
            exports_62("ReplacePipe", ReplacePipe);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/common/pipes/i18n_plural_pipe", ['angular2/src/facade/lang', 'angular2/core', "test/node_modules/angular2/ts/src/common/pipes/invalid_pipe_argument_exception"], function(exports_63, context_63) {
    "use strict";
    var __moduleName = context_63 && context_63.id;
    var lang_11, core_50, invalid_pipe_argument_exception_8;
    var interpolationExp, I18nPluralPipe;
    return {
        setters:[
            function (lang_11_1) {
                lang_11 = lang_11_1;
            },
            function (core_50_1) {
                core_50 = core_50_1;
            },
            function (invalid_pipe_argument_exception_8_1) {
                invalid_pipe_argument_exception_8 = invalid_pipe_argument_exception_8_1;
            }],
        execute: function() {
            interpolationExp = lang_11.RegExpWrapper.create('#');
            /**
             *
             *  Maps a value to a string that pluralizes the value properly.
             *
             *  ## Usage
             *
             *  expression | i18nPlural:mapping
             *
             *  where `expression` is a number and `mapping` is an object that indicates the proper text for
             *  when the `expression` evaluates to 0, 1, or some other number.  You can interpolate the actual
             *  value into the text using the `#` sign.
             *
             *  ## Example
             *
             *  ```
             *  <div>
             *    {{ messages.length | i18nPlural: messageMapping }}
             *  </div>
             *
             *  class MyApp {
             *    messages: any[];
             *    messageMapping: any = {
             *      '=0': 'No messages.',
             *      '=1': 'One message.',
             *      'other': '# messages.'
             *    }
             *    ...
             *  }
             *  ```
             *
             */
            I18nPluralPipe = (function () {
                function I18nPluralPipe() {
                }
                I18nPluralPipe.prototype.transform = function (value, args) {
                    if (args === void 0) { args = null; }
                    var key;
                    var valueStr;
                    var pluralMap = (args[0]);
                    if (!lang_11.isStringMap(pluralMap)) {
                        throw new invalid_pipe_argument_exception_8.InvalidPipeArgumentException(I18nPluralPipe, pluralMap);
                    }
                    key = value === 0 || value === 1 ? "=" + value : 'other';
                    valueStr = lang_11.isPresent(value) ? value.toString() : '';
                    return lang_11.StringWrapper.replaceAll(pluralMap[key], interpolationExp, valueStr);
                };
                I18nPluralPipe = __decorate([
                    lang_11.CONST(),
                    core_50.Pipe({ name: 'i18nPlural', pure: true }),
                    core_50.Injectable(), 
                    __metadata('design:paramtypes', [])
                ], I18nPluralPipe);
                return I18nPluralPipe;
            }());
            exports_63("I18nPluralPipe", I18nPluralPipe);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/common/pipes/i18n_select_pipe", ['angular2/src/facade/lang', 'angular2/src/facade/collection', 'angular2/core', "test/node_modules/angular2/ts/src/common/pipes/invalid_pipe_argument_exception"], function(exports_64, context_64) {
    "use strict";
    var __moduleName = context_64 && context_64.id;
    var lang_12, collection_5, core_51, invalid_pipe_argument_exception_9;
    var I18nSelectPipe;
    return {
        setters:[
            function (lang_12_1) {
                lang_12 = lang_12_1;
            },
            function (collection_5_1) {
                collection_5 = collection_5_1;
            },
            function (core_51_1) {
                core_51 = core_51_1;
            },
            function (invalid_pipe_argument_exception_9_1) {
                invalid_pipe_argument_exception_9 = invalid_pipe_argument_exception_9_1;
            }],
        execute: function() {
            /**
             *
             *  Generic selector that displays the string that matches the current value.
             *
             *  ## Usage
             *
             *  expression | i18nSelect:mapping
             *
             *  where `mapping` is an object that indicates the text that should be displayed
             *  for different values of the provided `expression`.
             *
             *  ## Example
             *
             *  ```
             *  <div>
             *    {{ gender | i18nSelect: inviteMap }}
             *  </div>
             *
             *  class MyApp {
             *    gender: string = 'male';
             *    inviteMap: any = {
             *      'male': 'Invite her.',
             *      'female': 'Invite him.',
             *      'other': 'Invite them.'
             *    }
             *    ...
             *  }
             *  ```
             */
            I18nSelectPipe = (function () {
                function I18nSelectPipe() {
                }
                I18nSelectPipe.prototype.transform = function (value, args) {
                    if (args === void 0) { args = null; }
                    var mapping = (args[0]);
                    if (!lang_12.isStringMap(mapping)) {
                        throw new invalid_pipe_argument_exception_9.InvalidPipeArgumentException(I18nSelectPipe, mapping);
                    }
                    return collection_5.StringMapWrapper.contains(mapping, value) ? mapping[value] : mapping['other'];
                };
                I18nSelectPipe = __decorate([
                    lang_12.CONST(),
                    core_51.Pipe({ name: 'i18nSelect', pure: true }),
                    core_51.Injectable(), 
                    __metadata('design:paramtypes', [])
                ], I18nSelectPipe);
                return I18nSelectPipe;
            }());
            exports_64("I18nSelectPipe", I18nSelectPipe);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/common/pipes/common_pipes", ["test/node_modules/angular2/ts/src/common/pipes/async_pipe", "test/node_modules/angular2/ts/src/common/pipes/uppercase_pipe", "test/node_modules/angular2/ts/src/common/pipes/lowercase_pipe", "test/node_modules/angular2/ts/src/common/pipes/json_pipe", "test/node_modules/angular2/ts/src/common/pipes/slice_pipe", "test/node_modules/angular2/ts/src/common/pipes/date_pipe", "test/node_modules/angular2/ts/src/common/pipes/number_pipe", "test/node_modules/angular2/ts/src/common/pipes/replace_pipe", "test/node_modules/angular2/ts/src/common/pipes/i18n_plural_pipe", "test/node_modules/angular2/ts/src/common/pipes/i18n_select_pipe", 'angular2/src/facade/lang'], function(exports_65, context_65) {
    "use strict";
    var __moduleName = context_65 && context_65.id;
    var async_pipe_1, uppercase_pipe_1, lowercase_pipe_1, json_pipe_1, slice_pipe_1, date_pipe_1, number_pipe_1, replace_pipe_1, i18n_plural_pipe_1, i18n_select_pipe_1, lang_13;
    var COMMON_PIPES;
    return {
        setters:[
            function (async_pipe_1_1) {
                async_pipe_1 = async_pipe_1_1;
            },
            function (uppercase_pipe_1_1) {
                uppercase_pipe_1 = uppercase_pipe_1_1;
            },
            function (lowercase_pipe_1_1) {
                lowercase_pipe_1 = lowercase_pipe_1_1;
            },
            function (json_pipe_1_1) {
                json_pipe_1 = json_pipe_1_1;
            },
            function (slice_pipe_1_1) {
                slice_pipe_1 = slice_pipe_1_1;
            },
            function (date_pipe_1_1) {
                date_pipe_1 = date_pipe_1_1;
            },
            function (number_pipe_1_1) {
                number_pipe_1 = number_pipe_1_1;
            },
            function (replace_pipe_1_1) {
                replace_pipe_1 = replace_pipe_1_1;
            },
            function (i18n_plural_pipe_1_1) {
                i18n_plural_pipe_1 = i18n_plural_pipe_1_1;
            },
            function (i18n_select_pipe_1_1) {
                i18n_select_pipe_1 = i18n_select_pipe_1_1;
            },
            function (lang_13_1) {
                lang_13 = lang_13_1;
            }],
        execute: function() {
            /**
             * A collection of Angular core pipes that are likely to be used in each and every
             * application.
             *
             * This collection can be used to quickly enumerate all the built-in pipes in the `pipes`
             * property of the `@Component` decorator.
             */
            exports_65("COMMON_PIPES", COMMON_PIPES = lang_13.CONST_EXPR([
                async_pipe_1.AsyncPipe,
                uppercase_pipe_1.UpperCasePipe,
                lowercase_pipe_1.LowerCasePipe,
                json_pipe_1.JsonPipe,
                slice_pipe_1.SlicePipe,
                number_pipe_1.DecimalPipe,
                number_pipe_1.PercentPipe,
                number_pipe_1.CurrencyPipe,
                date_pipe_1.DatePipe,
                replace_pipe_1.ReplacePipe,
                i18n_plural_pipe_1.I18nPluralPipe,
                i18n_select_pipe_1.I18nSelectPipe
            ]));
        }
    }
});
/**
 * @module
 * @description
 * This module provides a set of common Pipes.
 */
System.register("test/node_modules/angular2/ts/src/common/pipes", ["test/node_modules/angular2/ts/src/common/pipes/async_pipe", "test/node_modules/angular2/ts/src/common/pipes/date_pipe", "test/node_modules/angular2/ts/src/common/pipes/json_pipe", "test/node_modules/angular2/ts/src/common/pipes/slice_pipe", "test/node_modules/angular2/ts/src/common/pipes/lowercase_pipe", "test/node_modules/angular2/ts/src/common/pipes/number_pipe", "test/node_modules/angular2/ts/src/common/pipes/uppercase_pipe", "test/node_modules/angular2/ts/src/common/pipes/replace_pipe", "test/node_modules/angular2/ts/src/common/pipes/i18n_plural_pipe", "test/node_modules/angular2/ts/src/common/pipes/i18n_select_pipe", "test/node_modules/angular2/ts/src/common/pipes/common_pipes"], function(exports_66, context_66) {
    "use strict";
    var __moduleName = context_66 && context_66.id;
    return {
        setters:[
            function (async_pipe_2_1) {
                exports_66({
                    "AsyncPipe": async_pipe_2_1["AsyncPipe"]
                });
            },
            function (date_pipe_2_1) {
                exports_66({
                    "DatePipe": date_pipe_2_1["DatePipe"]
                });
            },
            function (json_pipe_2_1) {
                exports_66({
                    "JsonPipe": json_pipe_2_1["JsonPipe"]
                });
            },
            function (slice_pipe_2_1) {
                exports_66({
                    "SlicePipe": slice_pipe_2_1["SlicePipe"]
                });
            },
            function (lowercase_pipe_2_1) {
                exports_66({
                    "LowerCasePipe": lowercase_pipe_2_1["LowerCasePipe"]
                });
            },
            function (number_pipe_2_1) {
                exports_66({
                    "NumberPipe": number_pipe_2_1["NumberPipe"],
                    "DecimalPipe": number_pipe_2_1["DecimalPipe"],
                    "PercentPipe": number_pipe_2_1["PercentPipe"],
                    "CurrencyPipe": number_pipe_2_1["CurrencyPipe"]
                });
            },
            function (uppercase_pipe_2_1) {
                exports_66({
                    "UpperCasePipe": uppercase_pipe_2_1["UpperCasePipe"]
                });
            },
            function (replace_pipe_2_1) {
                exports_66({
                    "ReplacePipe": replace_pipe_2_1["ReplacePipe"]
                });
            },
            function (i18n_plural_pipe_2_1) {
                exports_66({
                    "I18nPluralPipe": i18n_plural_pipe_2_1["I18nPluralPipe"]
                });
            },
            function (i18n_select_pipe_2_1) {
                exports_66({
                    "I18nSelectPipe": i18n_select_pipe_2_1["I18nSelectPipe"]
                });
            },
            function (common_pipes_1_1) {
                exports_66({
                    "COMMON_PIPES": common_pipes_1_1["COMMON_PIPES"]
                });
            }],
        execute: function() {
        }
    }
});
System.register("test/node_modules/angular2/ts/src/common/directives/ng_class", ['angular2/src/facade/lang', 'angular2/core', 'angular2/src/facade/collection'], function(exports_67, context_67) {
    "use strict";
    var __moduleName = context_67 && context_67.id;
    var lang_14, core_52, collection_6;
    var NgClass;
    return {
        setters:[
            function (lang_14_1) {
                lang_14 = lang_14_1;
            },
            function (core_52_1) {
                core_52 = core_52_1;
            },
            function (collection_6_1) {
                collection_6 = collection_6_1;
            }],
        execute: function() {
            /**
             * The `NgClass` directive conditionally adds and removes CSS classes on an HTML element based on
             * an expression's evaluation result.
             *
             * The result of an expression evaluation is interpreted differently depending on type of
             * the expression evaluation result:
             * - `string` - all the CSS classes listed in a string (space delimited) are added
             * - `Array` - all the CSS classes (Array elements) are added
             * - `Object` - each key corresponds to a CSS class name while values are interpreted as expressions
             * evaluating to `Boolean`. If a given expression evaluates to `true` a corresponding CSS class
             * is added - otherwise it is removed.
             *
             * While the `NgClass` directive can interpret expressions evaluating to `string`, `Array`
             * or `Object`, the `Object`-based version is the most often used and has an advantage of keeping
             * all the CSS class names in a template.
             *
             * ### Example ([live demo](http://plnkr.co/edit/a4YdtmWywhJ33uqfpPPn?p=preview)):
             *
             * ```
             * import {Component} from 'angular2/core';
             * import {NgClass} from 'angular2/common';
             *
             * @Component({
             *   selector: 'toggle-button',
             *   inputs: ['isDisabled'],
             *   template: `
             *      <div class="button" [ngClass]="{active: isOn, disabled: isDisabled}"
             *          (click)="toggle(!isOn)">
             *          Click me!
             *      </div>`,
             *   styles: [`
             *     .button {
             *       width: 120px;
             *       border: medium solid black;
             *     }
             *
             *     .active {
             *       background-color: red;
             *    }
             *
             *     .disabled {
             *       color: gray;
             *       border: medium solid gray;
             *     }
             *   `]
             *   directives: [NgClass]
             * })
             * class ToggleButton {
             *   isOn = false;
             *   isDisabled = false;
             *
             *   toggle(newState) {
             *     if (!this.isDisabled) {
             *       this.isOn = newState;
             *     }
             *   }
             * }
             * ```
             */
            NgClass = (function () {
                function NgClass(_iterableDiffers, _keyValueDiffers, _ngEl, _renderer) {
                    this._iterableDiffers = _iterableDiffers;
                    this._keyValueDiffers = _keyValueDiffers;
                    this._ngEl = _ngEl;
                    this._renderer = _renderer;
                    this._initialClasses = [];
                }
                Object.defineProperty(NgClass.prototype, "initialClasses", {
                    set: function (v) {
                        this._applyInitialClasses(true);
                        this._initialClasses = lang_14.isPresent(v) && lang_14.isString(v) ? v.split(' ') : [];
                        this._applyInitialClasses(false);
                        this._applyClasses(this._rawClass, false);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NgClass.prototype, "rawClass", {
                    set: function (v) {
                        this._cleanupClasses(this._rawClass);
                        if (lang_14.isString(v)) {
                            v = v.split(' ');
                        }
                        this._rawClass = v;
                        this._iterableDiffer = null;
                        this._keyValueDiffer = null;
                        if (lang_14.isPresent(v)) {
                            if (collection_6.isListLikeIterable(v)) {
                                this._iterableDiffer = this._iterableDiffers.find(v).create(null);
                            }
                            else {
                                this._keyValueDiffer = this._keyValueDiffers.find(v).create(null);
                            }
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                NgClass.prototype.ngDoCheck = function () {
                    if (lang_14.isPresent(this._iterableDiffer)) {
                        var changes = this._iterableDiffer.diff(this._rawClass);
                        if (lang_14.isPresent(changes)) {
                            this._applyIterableChanges(changes);
                        }
                    }
                    if (lang_14.isPresent(this._keyValueDiffer)) {
                        var changes = this._keyValueDiffer.diff(this._rawClass);
                        if (lang_14.isPresent(changes)) {
                            this._applyKeyValueChanges(changes);
                        }
                    }
                };
                NgClass.prototype.ngOnDestroy = function () { this._cleanupClasses(this._rawClass); };
                NgClass.prototype._cleanupClasses = function (rawClassVal) {
                    this._applyClasses(rawClassVal, true);
                    this._applyInitialClasses(false);
                };
                NgClass.prototype._applyKeyValueChanges = function (changes) {
                    var _this = this;
                    changes.forEachAddedItem(function (record) { _this._toggleClass(record.key, record.currentValue); });
                    changes.forEachChangedItem(function (record) { _this._toggleClass(record.key, record.currentValue); });
                    changes.forEachRemovedItem(function (record) {
                        if (record.previousValue) {
                            _this._toggleClass(record.key, false);
                        }
                    });
                };
                NgClass.prototype._applyIterableChanges = function (changes) {
                    var _this = this;
                    changes.forEachAddedItem(function (record) { _this._toggleClass(record.item, true); });
                    changes.forEachRemovedItem(function (record) { _this._toggleClass(record.item, false); });
                };
                NgClass.prototype._applyInitialClasses = function (isCleanup) {
                    var _this = this;
                    this._initialClasses.forEach(function (className) { return _this._toggleClass(className, !isCleanup); });
                };
                NgClass.prototype._applyClasses = function (rawClassVal, isCleanup) {
                    var _this = this;
                    if (lang_14.isPresent(rawClassVal)) {
                        if (lang_14.isArray(rawClassVal)) {
                            rawClassVal.forEach(function (className) { return _this._toggleClass(className, !isCleanup); });
                        }
                        else if (rawClassVal instanceof Set) {
                            rawClassVal.forEach(function (className) { return _this._toggleClass(className, !isCleanup); });
                        }
                        else {
                            collection_6.StringMapWrapper.forEach(rawClassVal, function (expVal, className) {
                                if (lang_14.isPresent(expVal))
                                    _this._toggleClass(className, !isCleanup);
                            });
                        }
                    }
                };
                NgClass.prototype._toggleClass = function (className, enabled) {
                    className = className.trim();
                    if (className.length > 0) {
                        if (className.indexOf(' ') > -1) {
                            var classes = className.split(/\s+/g);
                            for (var i = 0, len = classes.length; i < len; i++) {
                                this._renderer.setElementClass(this._ngEl.nativeElement, classes[i], enabled);
                            }
                        }
                        else {
                            this._renderer.setElementClass(this._ngEl.nativeElement, className, enabled);
                        }
                    }
                };
                NgClass = __decorate([
                    core_52.Directive({ selector: '[ngClass]', inputs: ['rawClass: ngClass', 'initialClasses: class'] }), 
                    __metadata('design:paramtypes', [core_52.IterableDiffers, core_52.KeyValueDiffers, core_52.ElementRef, core_52.Renderer])
                ], NgClass);
                return NgClass;
            }());
            exports_67("NgClass", NgClass);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/change_detection/parser/locals", ['angular2/src/facade/lang', 'angular2/src/facade/exceptions', 'angular2/src/facade/collection'], function(exports_68, context_68) {
    "use strict";
    var __moduleName = context_68 && context_68.id;
    var lang_15, exceptions_5, collection_7;
    var Locals;
    return {
        setters:[
            function (lang_15_1) {
                lang_15 = lang_15_1;
            },
            function (exceptions_5_1) {
                exceptions_5 = exceptions_5_1;
            },
            function (collection_7_1) {
                collection_7 = collection_7_1;
            }],
        execute: function() {
            Locals = (function () {
                function Locals(parent, current) {
                    this.parent = parent;
                    this.current = current;
                }
                Locals.prototype.contains = function (name) {
                    if (this.current.has(name)) {
                        return true;
                    }
                    if (lang_15.isPresent(this.parent)) {
                        return this.parent.contains(name);
                    }
                    return false;
                };
                Locals.prototype.get = function (name) {
                    if (this.current.has(name)) {
                        return this.current.get(name);
                    }
                    if (lang_15.isPresent(this.parent)) {
                        return this.parent.get(name);
                    }
                    throw new exceptions_5.BaseException("Cannot find '" + name + "'");
                };
                Locals.prototype.set = function (name, value) {
                    // TODO(rado): consider removing this check if we can guarantee this is not
                    // exposed to the public API.
                    // TODO: vsavkin maybe it should check only the local map
                    if (this.current.has(name)) {
                        this.current.set(name, value);
                    }
                    else {
                        throw new exceptions_5.BaseException("Setting of new keys post-construction is not supported. Key: " + name + ".");
                    }
                };
                Locals.prototype.clearLocalValues = function () { collection_7.MapWrapper.clearValues(this.current); };
                return Locals;
            }());
            exports_68("Locals", Locals);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/change_detection/parser/ast", ["angular2/src/facade/collection"], function(exports_69, context_69) {
    "use strict";
    var __moduleName = context_69 && context_69.id;
    var collection_8;
    var AST, Quote, EmptyExpr, ImplicitReceiver, Chain, Conditional, PropertyRead, PropertyWrite, SafePropertyRead, KeyedRead, KeyedWrite, BindingPipe, LiteralPrimitive, LiteralArray, LiteralMap, Interpolation, Binary, PrefixNot, MethodCall, SafeMethodCall, FunctionCall, ASTWithSource, TemplateBinding, RecursiveAstVisitor, AstTransformer;
    return {
        setters:[
            function (collection_8_1) {
                collection_8 = collection_8_1;
            }],
        execute: function() {
            AST = (function () {
                function AST() {
                }
                AST.prototype.visit = function (visitor) { return null; };
                AST.prototype.toString = function () { return "AST"; };
                return AST;
            }());
            exports_69("AST", AST);
            /**
             * Represents a quoted expression of the form:
             *
             * quote = prefix `:` uninterpretedExpression
             * prefix = identifier
             * uninterpretedExpression = arbitrary string
             *
             * A quoted expression is meant to be pre-processed by an AST transformer that
             * converts it into another AST that no longer contains quoted expressions.
             * It is meant to allow third-party developers to extend Angular template
             * expression language. The `uninterpretedExpression` part of the quote is
             * therefore not interpreted by the Angular's own expression parser.
             */
            Quote = (function (_super) {
                __extends(Quote, _super);
                function Quote(prefix, uninterpretedExpression, location) {
                    _super.call(this);
                    this.prefix = prefix;
                    this.uninterpretedExpression = uninterpretedExpression;
                    this.location = location;
                }
                Quote.prototype.visit = function (visitor) { return visitor.visitQuote(this); };
                Quote.prototype.toString = function () { return "Quote"; };
                return Quote;
            }(AST));
            exports_69("Quote", Quote);
            EmptyExpr = (function (_super) {
                __extends(EmptyExpr, _super);
                function EmptyExpr() {
                    _super.apply(this, arguments);
                }
                EmptyExpr.prototype.visit = function (visitor) {
                    // do nothing
                };
                return EmptyExpr;
            }(AST));
            exports_69("EmptyExpr", EmptyExpr);
            ImplicitReceiver = (function (_super) {
                __extends(ImplicitReceiver, _super);
                function ImplicitReceiver() {
                    _super.apply(this, arguments);
                }
                ImplicitReceiver.prototype.visit = function (visitor) { return visitor.visitImplicitReceiver(this); };
                return ImplicitReceiver;
            }(AST));
            exports_69("ImplicitReceiver", ImplicitReceiver);
            /**
             * Multiple expressions separated by a semicolon.
             */
            Chain = (function (_super) {
                __extends(Chain, _super);
                function Chain(expressions) {
                    _super.call(this);
                    this.expressions = expressions;
                }
                Chain.prototype.visit = function (visitor) { return visitor.visitChain(this); };
                return Chain;
            }(AST));
            exports_69("Chain", Chain);
            Conditional = (function (_super) {
                __extends(Conditional, _super);
                function Conditional(condition, trueExp, falseExp) {
                    _super.call(this);
                    this.condition = condition;
                    this.trueExp = trueExp;
                    this.falseExp = falseExp;
                }
                Conditional.prototype.visit = function (visitor) { return visitor.visitConditional(this); };
                return Conditional;
            }(AST));
            exports_69("Conditional", Conditional);
            PropertyRead = (function (_super) {
                __extends(PropertyRead, _super);
                function PropertyRead(receiver, name, getter) {
                    _super.call(this);
                    this.receiver = receiver;
                    this.name = name;
                    this.getter = getter;
                }
                PropertyRead.prototype.visit = function (visitor) { return visitor.visitPropertyRead(this); };
                return PropertyRead;
            }(AST));
            exports_69("PropertyRead", PropertyRead);
            PropertyWrite = (function (_super) {
                __extends(PropertyWrite, _super);
                function PropertyWrite(receiver, name, setter, value) {
                    _super.call(this);
                    this.receiver = receiver;
                    this.name = name;
                    this.setter = setter;
                    this.value = value;
                }
                PropertyWrite.prototype.visit = function (visitor) { return visitor.visitPropertyWrite(this); };
                return PropertyWrite;
            }(AST));
            exports_69("PropertyWrite", PropertyWrite);
            SafePropertyRead = (function (_super) {
                __extends(SafePropertyRead, _super);
                function SafePropertyRead(receiver, name, getter) {
                    _super.call(this);
                    this.receiver = receiver;
                    this.name = name;
                    this.getter = getter;
                }
                SafePropertyRead.prototype.visit = function (visitor) { return visitor.visitSafePropertyRead(this); };
                return SafePropertyRead;
            }(AST));
            exports_69("SafePropertyRead", SafePropertyRead);
            KeyedRead = (function (_super) {
                __extends(KeyedRead, _super);
                function KeyedRead(obj, key) {
                    _super.call(this);
                    this.obj = obj;
                    this.key = key;
                }
                KeyedRead.prototype.visit = function (visitor) { return visitor.visitKeyedRead(this); };
                return KeyedRead;
            }(AST));
            exports_69("KeyedRead", KeyedRead);
            KeyedWrite = (function (_super) {
                __extends(KeyedWrite, _super);
                function KeyedWrite(obj, key, value) {
                    _super.call(this);
                    this.obj = obj;
                    this.key = key;
                    this.value = value;
                }
                KeyedWrite.prototype.visit = function (visitor) { return visitor.visitKeyedWrite(this); };
                return KeyedWrite;
            }(AST));
            exports_69("KeyedWrite", KeyedWrite);
            BindingPipe = (function (_super) {
                __extends(BindingPipe, _super);
                function BindingPipe(exp, name, args) {
                    _super.call(this);
                    this.exp = exp;
                    this.name = name;
                    this.args = args;
                }
                BindingPipe.prototype.visit = function (visitor) { return visitor.visitPipe(this); };
                return BindingPipe;
            }(AST));
            exports_69("BindingPipe", BindingPipe);
            LiteralPrimitive = (function (_super) {
                __extends(LiteralPrimitive, _super);
                function LiteralPrimitive(value) {
                    _super.call(this);
                    this.value = value;
                }
                LiteralPrimitive.prototype.visit = function (visitor) { return visitor.visitLiteralPrimitive(this); };
                return LiteralPrimitive;
            }(AST));
            exports_69("LiteralPrimitive", LiteralPrimitive);
            LiteralArray = (function (_super) {
                __extends(LiteralArray, _super);
                function LiteralArray(expressions) {
                    _super.call(this);
                    this.expressions = expressions;
                }
                LiteralArray.prototype.visit = function (visitor) { return visitor.visitLiteralArray(this); };
                return LiteralArray;
            }(AST));
            exports_69("LiteralArray", LiteralArray);
            LiteralMap = (function (_super) {
                __extends(LiteralMap, _super);
                function LiteralMap(keys, values) {
                    _super.call(this);
                    this.keys = keys;
                    this.values = values;
                }
                LiteralMap.prototype.visit = function (visitor) { return visitor.visitLiteralMap(this); };
                return LiteralMap;
            }(AST));
            exports_69("LiteralMap", LiteralMap);
            Interpolation = (function (_super) {
                __extends(Interpolation, _super);
                function Interpolation(strings, expressions) {
                    _super.call(this);
                    this.strings = strings;
                    this.expressions = expressions;
                }
                Interpolation.prototype.visit = function (visitor) { return visitor.visitInterpolation(this); };
                return Interpolation;
            }(AST));
            exports_69("Interpolation", Interpolation);
            Binary = (function (_super) {
                __extends(Binary, _super);
                function Binary(operation, left, right) {
                    _super.call(this);
                    this.operation = operation;
                    this.left = left;
                    this.right = right;
                }
                Binary.prototype.visit = function (visitor) { return visitor.visitBinary(this); };
                return Binary;
            }(AST));
            exports_69("Binary", Binary);
            PrefixNot = (function (_super) {
                __extends(PrefixNot, _super);
                function PrefixNot(expression) {
                    _super.call(this);
                    this.expression = expression;
                }
                PrefixNot.prototype.visit = function (visitor) { return visitor.visitPrefixNot(this); };
                return PrefixNot;
            }(AST));
            exports_69("PrefixNot", PrefixNot);
            MethodCall = (function (_super) {
                __extends(MethodCall, _super);
                function MethodCall(receiver, name, fn, args) {
                    _super.call(this);
                    this.receiver = receiver;
                    this.name = name;
                    this.fn = fn;
                    this.args = args;
                }
                MethodCall.prototype.visit = function (visitor) { return visitor.visitMethodCall(this); };
                return MethodCall;
            }(AST));
            exports_69("MethodCall", MethodCall);
            SafeMethodCall = (function (_super) {
                __extends(SafeMethodCall, _super);
                function SafeMethodCall(receiver, name, fn, args) {
                    _super.call(this);
                    this.receiver = receiver;
                    this.name = name;
                    this.fn = fn;
                    this.args = args;
                }
                SafeMethodCall.prototype.visit = function (visitor) { return visitor.visitSafeMethodCall(this); };
                return SafeMethodCall;
            }(AST));
            exports_69("SafeMethodCall", SafeMethodCall);
            FunctionCall = (function (_super) {
                __extends(FunctionCall, _super);
                function FunctionCall(target, args) {
                    _super.call(this);
                    this.target = target;
                    this.args = args;
                }
                FunctionCall.prototype.visit = function (visitor) { return visitor.visitFunctionCall(this); };
                return FunctionCall;
            }(AST));
            exports_69("FunctionCall", FunctionCall);
            ASTWithSource = (function (_super) {
                __extends(ASTWithSource, _super);
                function ASTWithSource(ast, source, location) {
                    _super.call(this);
                    this.ast = ast;
                    this.source = source;
                    this.location = location;
                }
                ASTWithSource.prototype.visit = function (visitor) { return this.ast.visit(visitor); };
                ASTWithSource.prototype.toString = function () { return this.source + " in " + this.location; };
                return ASTWithSource;
            }(AST));
            exports_69("ASTWithSource", ASTWithSource);
            TemplateBinding = (function () {
                function TemplateBinding(key, keyIsVar, name, expression) {
                    this.key = key;
                    this.keyIsVar = keyIsVar;
                    this.name = name;
                    this.expression = expression;
                }
                return TemplateBinding;
            }());
            exports_69("TemplateBinding", TemplateBinding);
            RecursiveAstVisitor = (function () {
                function RecursiveAstVisitor() {
                }
                RecursiveAstVisitor.prototype.visitBinary = function (ast) {
                    ast.left.visit(this);
                    ast.right.visit(this);
                    return null;
                };
                RecursiveAstVisitor.prototype.visitChain = function (ast) { return this.visitAll(ast.expressions); };
                RecursiveAstVisitor.prototype.visitConditional = function (ast) {
                    ast.condition.visit(this);
                    ast.trueExp.visit(this);
                    ast.falseExp.visit(this);
                    return null;
                };
                RecursiveAstVisitor.prototype.visitPipe = function (ast) {
                    ast.exp.visit(this);
                    this.visitAll(ast.args);
                    return null;
                };
                RecursiveAstVisitor.prototype.visitFunctionCall = function (ast) {
                    ast.target.visit(this);
                    this.visitAll(ast.args);
                    return null;
                };
                RecursiveAstVisitor.prototype.visitImplicitReceiver = function (ast) { return null; };
                RecursiveAstVisitor.prototype.visitInterpolation = function (ast) { return this.visitAll(ast.expressions); };
                RecursiveAstVisitor.prototype.visitKeyedRead = function (ast) {
                    ast.obj.visit(this);
                    ast.key.visit(this);
                    return null;
                };
                RecursiveAstVisitor.prototype.visitKeyedWrite = function (ast) {
                    ast.obj.visit(this);
                    ast.key.visit(this);
                    ast.value.visit(this);
                    return null;
                };
                RecursiveAstVisitor.prototype.visitLiteralArray = function (ast) { return this.visitAll(ast.expressions); };
                RecursiveAstVisitor.prototype.visitLiteralMap = function (ast) { return this.visitAll(ast.values); };
                RecursiveAstVisitor.prototype.visitLiteralPrimitive = function (ast) { return null; };
                RecursiveAstVisitor.prototype.visitMethodCall = function (ast) {
                    ast.receiver.visit(this);
                    return this.visitAll(ast.args);
                };
                RecursiveAstVisitor.prototype.visitPrefixNot = function (ast) {
                    ast.expression.visit(this);
                    return null;
                };
                RecursiveAstVisitor.prototype.visitPropertyRead = function (ast) {
                    ast.receiver.visit(this);
                    return null;
                };
                RecursiveAstVisitor.prototype.visitPropertyWrite = function (ast) {
                    ast.receiver.visit(this);
                    ast.value.visit(this);
                    return null;
                };
                RecursiveAstVisitor.prototype.visitSafePropertyRead = function (ast) {
                    ast.receiver.visit(this);
                    return null;
                };
                RecursiveAstVisitor.prototype.visitSafeMethodCall = function (ast) {
                    ast.receiver.visit(this);
                    return this.visitAll(ast.args);
                };
                RecursiveAstVisitor.prototype.visitAll = function (asts) {
                    var _this = this;
                    asts.forEach(function (ast) { return ast.visit(_this); });
                    return null;
                };
                RecursiveAstVisitor.prototype.visitQuote = function (ast) { return null; };
                return RecursiveAstVisitor;
            }());
            exports_69("RecursiveAstVisitor", RecursiveAstVisitor);
            AstTransformer = (function () {
                function AstTransformer() {
                }
                AstTransformer.prototype.visitImplicitReceiver = function (ast) { return ast; };
                AstTransformer.prototype.visitInterpolation = function (ast) {
                    return new Interpolation(ast.strings, this.visitAll(ast.expressions));
                };
                AstTransformer.prototype.visitLiteralPrimitive = function (ast) { return new LiteralPrimitive(ast.value); };
                AstTransformer.prototype.visitPropertyRead = function (ast) {
                    return new PropertyRead(ast.receiver.visit(this), ast.name, ast.getter);
                };
                AstTransformer.prototype.visitPropertyWrite = function (ast) {
                    return new PropertyWrite(ast.receiver.visit(this), ast.name, ast.setter, ast.value);
                };
                AstTransformer.prototype.visitSafePropertyRead = function (ast) {
                    return new SafePropertyRead(ast.receiver.visit(this), ast.name, ast.getter);
                };
                AstTransformer.prototype.visitMethodCall = function (ast) {
                    return new MethodCall(ast.receiver.visit(this), ast.name, ast.fn, this.visitAll(ast.args));
                };
                AstTransformer.prototype.visitSafeMethodCall = function (ast) {
                    return new SafeMethodCall(ast.receiver.visit(this), ast.name, ast.fn, this.visitAll(ast.args));
                };
                AstTransformer.prototype.visitFunctionCall = function (ast) {
                    return new FunctionCall(ast.target.visit(this), this.visitAll(ast.args));
                };
                AstTransformer.prototype.visitLiteralArray = function (ast) {
                    return new LiteralArray(this.visitAll(ast.expressions));
                };
                AstTransformer.prototype.visitLiteralMap = function (ast) {
                    return new LiteralMap(ast.keys, this.visitAll(ast.values));
                };
                AstTransformer.prototype.visitBinary = function (ast) {
                    return new Binary(ast.operation, ast.left.visit(this), ast.right.visit(this));
                };
                AstTransformer.prototype.visitPrefixNot = function (ast) { return new PrefixNot(ast.expression.visit(this)); };
                AstTransformer.prototype.visitConditional = function (ast) {
                    return new Conditional(ast.condition.visit(this), ast.trueExp.visit(this), ast.falseExp.visit(this));
                };
                AstTransformer.prototype.visitPipe = function (ast) {
                    return new BindingPipe(ast.exp.visit(this), ast.name, this.visitAll(ast.args));
                };
                AstTransformer.prototype.visitKeyedRead = function (ast) {
                    return new KeyedRead(ast.obj.visit(this), ast.key.visit(this));
                };
                AstTransformer.prototype.visitKeyedWrite = function (ast) {
                    return new KeyedWrite(ast.obj.visit(this), ast.key.visit(this), ast.value.visit(this));
                };
                AstTransformer.prototype.visitAll = function (asts) {
                    var res = collection_8.ListWrapper.createFixedSize(asts.length);
                    for (var i = 0; i < asts.length; ++i) {
                        res[i] = asts[i].visit(this);
                    }
                    return res;
                };
                AstTransformer.prototype.visitChain = function (ast) { return new Chain(this.visitAll(ast.expressions)); };
                AstTransformer.prototype.visitQuote = function (ast) {
                    return new Quote(ast.prefix, ast.uninterpretedExpression, ast.location);
                };
                return AstTransformer;
            }());
            exports_69("AstTransformer", AstTransformer);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/change_detection/constants", ['angular2/src/facade/lang'], function(exports_70, context_70) {
    "use strict";
    var __moduleName = context_70 && context_70.id;
    var lang_16;
    var ChangeDetectorState, ChangeDetectionStrategy, CHANGE_DETECTION_STRATEGY_VALUES, CHANGE_DETECTOR_STATE_VALUES;
    function isDefaultChangeDetectionStrategy(changeDetectionStrategy) {
        return lang_16.isBlank(changeDetectionStrategy) ||
            changeDetectionStrategy === ChangeDetectionStrategy.Default;
    }
    exports_70("isDefaultChangeDetectionStrategy", isDefaultChangeDetectionStrategy);
    return {
        setters:[
            function (lang_16_1) {
                lang_16 = lang_16_1;
            }],
        execute: function() {
            /**
             * Describes the current state of the change detector.
             */
            (function (ChangeDetectorState) {
                /**
                 * `NeverChecked` means that the change detector has not been checked yet, and
                 * initialization methods should be called during detection.
                 */
                ChangeDetectorState[ChangeDetectorState["NeverChecked"] = 0] = "NeverChecked";
                /**
                 * `CheckedBefore` means that the change detector has successfully completed at least
                 * one detection previously.
                 */
                ChangeDetectorState[ChangeDetectorState["CheckedBefore"] = 1] = "CheckedBefore";
                /**
                 * `Errored` means that the change detector encountered an error checking a binding
                 * or calling a directive lifecycle method and is now in an inconsistent state. Change
                 * detectors in this state will no longer detect changes.
                 */
                ChangeDetectorState[ChangeDetectorState["Errored"] = 2] = "Errored";
            })(ChangeDetectorState || (ChangeDetectorState = {}));
            exports_70("ChangeDetectorState", ChangeDetectorState);
            /**
             * Describes within the change detector which strategy will be used the next time change
             * detection is triggered.
             */
            (function (ChangeDetectionStrategy) {
                /**
                 * `CheckedOnce` means that after calling detectChanges the mode of the change detector
                 * will become `Checked`.
                 */
                ChangeDetectionStrategy[ChangeDetectionStrategy["CheckOnce"] = 0] = "CheckOnce";
                /**
                 * `Checked` means that the change detector should be skipped until its mode changes to
                 * `CheckOnce`.
                 */
                ChangeDetectionStrategy[ChangeDetectionStrategy["Checked"] = 1] = "Checked";
                /**
                 * `CheckAlways` means that after calling detectChanges the mode of the change detector
                 * will remain `CheckAlways`.
                 */
                ChangeDetectionStrategy[ChangeDetectionStrategy["CheckAlways"] = 2] = "CheckAlways";
                /**
                 * `Detached` means that the change detector sub tree is not a part of the main tree and
                 * should be skipped.
                 */
                ChangeDetectionStrategy[ChangeDetectionStrategy["Detached"] = 3] = "Detached";
                /**
                 * `OnPush` means that the change detector's mode will be set to `CheckOnce` during hydration.
                 */
                ChangeDetectionStrategy[ChangeDetectionStrategy["OnPush"] = 4] = "OnPush";
                /**
                 * `Default` means that the change detector's mode will be set to `CheckAlways` during hydration.
                 */
                ChangeDetectionStrategy[ChangeDetectionStrategy["Default"] = 5] = "Default";
            })(ChangeDetectionStrategy || (ChangeDetectionStrategy = {}));
            exports_70("ChangeDetectionStrategy", ChangeDetectionStrategy);
            /**
             * List of possible {@link ChangeDetectionStrategy} values.
             */
            exports_70("CHANGE_DETECTION_STRATEGY_VALUES", CHANGE_DETECTION_STRATEGY_VALUES = [
                ChangeDetectionStrategy.CheckOnce,
                ChangeDetectionStrategy.Checked,
                ChangeDetectionStrategy.CheckAlways,
                ChangeDetectionStrategy.Detached,
                ChangeDetectionStrategy.OnPush,
                ChangeDetectionStrategy.Default
            ]);
            /**
             * List of possible {@link ChangeDetectorState} values.
             */
            exports_70("CHANGE_DETECTOR_STATE_VALUES", CHANGE_DETECTOR_STATE_VALUES = [
                ChangeDetectorState.NeverChecked,
                ChangeDetectorState.CheckedBefore,
                ChangeDetectorState.Errored
            ]);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/change_detection/directive_record", ['angular2/src/facade/lang', "test/node_modules/angular2/ts/src/core/change_detection/constants"], function(exports_71, context_71) {
    "use strict";
    var __moduleName = context_71 && context_71.id;
    var lang_17, constants_1;
    var DirectiveIndex, DirectiveRecord;
    return {
        setters:[
            function (lang_17_1) {
                lang_17 = lang_17_1;
            },
            function (constants_1_1) {
                constants_1 = constants_1_1;
            }],
        execute: function() {
            DirectiveIndex = (function () {
                function DirectiveIndex(elementIndex, directiveIndex) {
                    this.elementIndex = elementIndex;
                    this.directiveIndex = directiveIndex;
                }
                Object.defineProperty(DirectiveIndex.prototype, "name", {
                    get: function () { return this.elementIndex + "_" + this.directiveIndex; },
                    enumerable: true,
                    configurable: true
                });
                return DirectiveIndex;
            }());
            exports_71("DirectiveIndex", DirectiveIndex);
            DirectiveRecord = (function () {
                function DirectiveRecord(_a) {
                    var _b = _a === void 0 ? {} : _a, directiveIndex = _b.directiveIndex, callAfterContentInit = _b.callAfterContentInit, callAfterContentChecked = _b.callAfterContentChecked, callAfterViewInit = _b.callAfterViewInit, callAfterViewChecked = _b.callAfterViewChecked, callOnChanges = _b.callOnChanges, callDoCheck = _b.callDoCheck, callOnInit = _b.callOnInit, callOnDestroy = _b.callOnDestroy, changeDetection = _b.changeDetection, outputs = _b.outputs;
                    this.directiveIndex = directiveIndex;
                    this.callAfterContentInit = lang_17.normalizeBool(callAfterContentInit);
                    this.callAfterContentChecked = lang_17.normalizeBool(callAfterContentChecked);
                    this.callOnChanges = lang_17.normalizeBool(callOnChanges);
                    this.callAfterViewInit = lang_17.normalizeBool(callAfterViewInit);
                    this.callAfterViewChecked = lang_17.normalizeBool(callAfterViewChecked);
                    this.callDoCheck = lang_17.normalizeBool(callDoCheck);
                    this.callOnInit = lang_17.normalizeBool(callOnInit);
                    this.callOnDestroy = lang_17.normalizeBool(callOnDestroy);
                    this.changeDetection = changeDetection;
                    this.outputs = outputs;
                }
                DirectiveRecord.prototype.isDefaultChangeDetection = function () {
                    return constants_1.isDefaultChangeDetectionStrategy(this.changeDetection);
                };
                return DirectiveRecord;
            }());
            exports_71("DirectiveRecord", DirectiveRecord);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/change_detection/binding_record", ['angular2/src/facade/lang'], function(exports_72, context_72) {
    "use strict";
    var __moduleName = context_72 && context_72.id;
    var lang_18;
    var DIRECTIVE_LIFECYCLE, BINDING, DIRECTIVE, ELEMENT_PROPERTY, ELEMENT_ATTRIBUTE, ELEMENT_CLASS, ELEMENT_STYLE, TEXT_NODE, EVENT, HOST_EVENT, BindingTarget, BindingRecord;
    return {
        setters:[
            function (lang_18_1) {
                lang_18 = lang_18_1;
            }],
        execute: function() {
            DIRECTIVE_LIFECYCLE = "directiveLifecycle";
            BINDING = "native";
            DIRECTIVE = "directive";
            ELEMENT_PROPERTY = "elementProperty";
            ELEMENT_ATTRIBUTE = "elementAttribute";
            ELEMENT_CLASS = "elementClass";
            ELEMENT_STYLE = "elementStyle";
            TEXT_NODE = "textNode";
            EVENT = "event";
            HOST_EVENT = "hostEvent";
            BindingTarget = (function () {
                function BindingTarget(mode, elementIndex, name, unit, debug) {
                    this.mode = mode;
                    this.elementIndex = elementIndex;
                    this.name = name;
                    this.unit = unit;
                    this.debug = debug;
                }
                BindingTarget.prototype.isDirective = function () { return this.mode === DIRECTIVE; };
                BindingTarget.prototype.isElementProperty = function () { return this.mode === ELEMENT_PROPERTY; };
                BindingTarget.prototype.isElementAttribute = function () { return this.mode === ELEMENT_ATTRIBUTE; };
                BindingTarget.prototype.isElementClass = function () { return this.mode === ELEMENT_CLASS; };
                BindingTarget.prototype.isElementStyle = function () { return this.mode === ELEMENT_STYLE; };
                BindingTarget.prototype.isTextNode = function () { return this.mode === TEXT_NODE; };
                return BindingTarget;
            }());
            exports_72("BindingTarget", BindingTarget);
            BindingRecord = (function () {
                function BindingRecord(mode, target, implicitReceiver, ast, setter, lifecycleEvent, directiveRecord) {
                    this.mode = mode;
                    this.target = target;
                    this.implicitReceiver = implicitReceiver;
                    this.ast = ast;
                    this.setter = setter;
                    this.lifecycleEvent = lifecycleEvent;
                    this.directiveRecord = directiveRecord;
                }
                BindingRecord.prototype.isDirectiveLifecycle = function () { return this.mode === DIRECTIVE_LIFECYCLE; };
                BindingRecord.prototype.callOnChanges = function () {
                    return lang_18.isPresent(this.directiveRecord) && this.directiveRecord.callOnChanges;
                };
                BindingRecord.prototype.isDefaultChangeDetection = function () {
                    return lang_18.isBlank(this.directiveRecord) || this.directiveRecord.isDefaultChangeDetection();
                };
                BindingRecord.createDirectiveDoCheck = function (directiveRecord) {
                    return new BindingRecord(DIRECTIVE_LIFECYCLE, null, 0, null, null, "DoCheck", directiveRecord);
                };
                BindingRecord.createDirectiveOnInit = function (directiveRecord) {
                    return new BindingRecord(DIRECTIVE_LIFECYCLE, null, 0, null, null, "OnInit", directiveRecord);
                };
                BindingRecord.createDirectiveOnChanges = function (directiveRecord) {
                    return new BindingRecord(DIRECTIVE_LIFECYCLE, null, 0, null, null, "OnChanges", directiveRecord);
                };
                BindingRecord.createForDirective = function (ast, propertyName, setter, directiveRecord) {
                    var elementIndex = directiveRecord.directiveIndex.elementIndex;
                    var t = new BindingTarget(DIRECTIVE, elementIndex, propertyName, null, ast.toString());
                    return new BindingRecord(DIRECTIVE, t, 0, ast, setter, null, directiveRecord);
                };
                BindingRecord.createForElementProperty = function (ast, elementIndex, propertyName) {
                    var t = new BindingTarget(ELEMENT_PROPERTY, elementIndex, propertyName, null, ast.toString());
                    return new BindingRecord(BINDING, t, 0, ast, null, null, null);
                };
                BindingRecord.createForElementAttribute = function (ast, elementIndex, attributeName) {
                    var t = new BindingTarget(ELEMENT_ATTRIBUTE, elementIndex, attributeName, null, ast.toString());
                    return new BindingRecord(BINDING, t, 0, ast, null, null, null);
                };
                BindingRecord.createForElementClass = function (ast, elementIndex, className) {
                    var t = new BindingTarget(ELEMENT_CLASS, elementIndex, className, null, ast.toString());
                    return new BindingRecord(BINDING, t, 0, ast, null, null, null);
                };
                BindingRecord.createForElementStyle = function (ast, elementIndex, styleName, unit) {
                    var t = new BindingTarget(ELEMENT_STYLE, elementIndex, styleName, unit, ast.toString());
                    return new BindingRecord(BINDING, t, 0, ast, null, null, null);
                };
                BindingRecord.createForHostProperty = function (directiveIndex, ast, propertyName) {
                    var t = new BindingTarget(ELEMENT_PROPERTY, directiveIndex.elementIndex, propertyName, null, ast.toString());
                    return new BindingRecord(BINDING, t, directiveIndex, ast, null, null, null);
                };
                BindingRecord.createForHostAttribute = function (directiveIndex, ast, attributeName) {
                    var t = new BindingTarget(ELEMENT_ATTRIBUTE, directiveIndex.elementIndex, attributeName, null, ast.toString());
                    return new BindingRecord(BINDING, t, directiveIndex, ast, null, null, null);
                };
                BindingRecord.createForHostClass = function (directiveIndex, ast, className) {
                    var t = new BindingTarget(ELEMENT_CLASS, directiveIndex.elementIndex, className, null, ast.toString());
                    return new BindingRecord(BINDING, t, directiveIndex, ast, null, null, null);
                };
                BindingRecord.createForHostStyle = function (directiveIndex, ast, styleName, unit) {
                    var t = new BindingTarget(ELEMENT_STYLE, directiveIndex.elementIndex, styleName, unit, ast.toString());
                    return new BindingRecord(BINDING, t, directiveIndex, ast, null, null, null);
                };
                BindingRecord.createForTextNode = function (ast, elementIndex) {
                    var t = new BindingTarget(TEXT_NODE, elementIndex, null, null, ast.toString());
                    return new BindingRecord(BINDING, t, 0, ast, null, null, null);
                };
                BindingRecord.createForEvent = function (ast, eventName, elementIndex) {
                    var t = new BindingTarget(EVENT, elementIndex, eventName, null, ast.toString());
                    return new BindingRecord(EVENT, t, 0, ast, null, null, null);
                };
                BindingRecord.createForHostEvent = function (ast, eventName, directiveRecord) {
                    var directiveIndex = directiveRecord.directiveIndex;
                    var t = new BindingTarget(HOST_EVENT, directiveIndex.elementIndex, eventName, null, ast.toString());
                    return new BindingRecord(HOST_EVENT, t, directiveIndex, ast, null, null, directiveRecord);
                };
                return BindingRecord;
            }());
            exports_72("BindingRecord", BindingRecord);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/change_detection/interfaces", [], function(exports_73, context_73) {
    "use strict";
    var __moduleName = context_73 && context_73.id;
    var DebugContext, ChangeDetectorGenConfig, ChangeDetectorDefinition;
    return {
        setters:[],
        execute: function() {
            DebugContext = (function () {
                function DebugContext(element, componentElement, directive, context, locals, injector) {
                    this.element = element;
                    this.componentElement = componentElement;
                    this.directive = directive;
                    this.context = context;
                    this.locals = locals;
                    this.injector = injector;
                }
                return DebugContext;
            }());
            exports_73("DebugContext", DebugContext);
            ChangeDetectorGenConfig = (function () {
                function ChangeDetectorGenConfig(genDebugInfo, logBindingUpdate, useJit) {
                    this.genDebugInfo = genDebugInfo;
                    this.logBindingUpdate = logBindingUpdate;
                    this.useJit = useJit;
                }
                return ChangeDetectorGenConfig;
            }());
            exports_73("ChangeDetectorGenConfig", ChangeDetectorGenConfig);
            ChangeDetectorDefinition = (function () {
                function ChangeDetectorDefinition(id, strategy, variableNames, bindingRecords, eventRecords, directiveRecords, genConfig) {
                    this.id = id;
                    this.strategy = strategy;
                    this.variableNames = variableNames;
                    this.bindingRecords = bindingRecords;
                    this.eventRecords = eventRecords;
                    this.directiveRecords = directiveRecords;
                    this.genConfig = genConfig;
                }
                return ChangeDetectorDefinition;
            }());
            exports_73("ChangeDetectorDefinition", ChangeDetectorDefinition);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/change_detection/change_detector_ref", ["test/node_modules/angular2/ts/src/core/change_detection/constants"], function(exports_74, context_74) {
    "use strict";
    var __moduleName = context_74 && context_74.id;
    var constants_2;
    var ChangeDetectorRef, ChangeDetectorRef_;
    return {
        setters:[
            function (constants_2_1) {
                constants_2 = constants_2_1;
            }],
        execute: function() {
            ChangeDetectorRef = (function () {
                function ChangeDetectorRef() {
                }
                return ChangeDetectorRef;
            }());
            exports_74("ChangeDetectorRef", ChangeDetectorRef);
            ChangeDetectorRef_ = (function (_super) {
                __extends(ChangeDetectorRef_, _super);
                function ChangeDetectorRef_(_cd) {
                    _super.call(this);
                    this._cd = _cd;
                }
                ChangeDetectorRef_.prototype.markForCheck = function () { this._cd.markPathToRootAsCheckOnce(); };
                ChangeDetectorRef_.prototype.detach = function () { this._cd.mode = constants_2.ChangeDetectionStrategy.Detached; };
                ChangeDetectorRef_.prototype.detectChanges = function () { this._cd.detectChanges(); };
                ChangeDetectorRef_.prototype.checkNoChanges = function () { this._cd.checkNoChanges(); };
                ChangeDetectorRef_.prototype.reattach = function () {
                    this._cd.mode = constants_2.ChangeDetectionStrategy.CheckAlways;
                    this.markForCheck();
                };
                return ChangeDetectorRef_;
            }(ChangeDetectorRef));
            exports_74("ChangeDetectorRef_", ChangeDetectorRef_);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/change_detection/differs/iterable_differs", ['angular2/src/facade/lang', 'angular2/src/facade/exceptions', 'angular2/src/facade/collection', 'angular2/src/core/di'], function(exports_75, context_75) {
    "use strict";
    var __moduleName = context_75 && context_75.id;
    var lang_19, exceptions_6, collection_9, di_3;
    var IterableDiffers;
    return {
        setters:[
            function (lang_19_1) {
                lang_19 = lang_19_1;
            },
            function (exceptions_6_1) {
                exceptions_6 = exceptions_6_1;
            },
            function (collection_9_1) {
                collection_9 = collection_9_1;
            },
            function (di_3_1) {
                di_3 = di_3_1;
            }],
        execute: function() {
            /**
             * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.
             */
            IterableDiffers = (function () {
                function IterableDiffers(factories) {
                    this.factories = factories;
                }
                IterableDiffers.create = function (factories, parent) {
                    if (lang_19.isPresent(parent)) {
                        var copied = collection_9.ListWrapper.clone(parent.factories);
                        factories = factories.concat(copied);
                        return new IterableDiffers(factories);
                    }
                    else {
                        return new IterableDiffers(factories);
                    }
                };
                /**
                 * Takes an array of {@link IterableDifferFactory} and returns a provider used to extend the
                 * inherited {@link IterableDiffers} instance with the provided factories and return a new
                 * {@link IterableDiffers} instance.
                 *
                 * The following example shows how to extend an existing list of factories,
                       * which will only be applied to the injector for this component and its children.
                       * This step is all that's required to make a new {@link IterableDiffer} available.
                 *
                 * ### Example
                 *
                 * ```
                 * @Component({
                 *   viewProviders: [
                 *     IterableDiffers.extend([new ImmutableListDiffer()])
                 *   ]
                 * })
                 * ```
                 */
                IterableDiffers.extend = function (factories) {
                    return new di_3.Provider(IterableDiffers, {
                        useFactory: function (parent) {
                            if (lang_19.isBlank(parent)) {
                                // Typically would occur when calling IterableDiffers.extend inside of dependencies passed
                                // to
                                // bootstrap(), which would override default pipes instead of extending them.
                                throw new exceptions_6.BaseException('Cannot extend IterableDiffers without a parent injector');
                            }
                            return IterableDiffers.create(factories, parent);
                        },
                        // Dependency technically isn't optional, but we can provide a better error message this way.
                        deps: [[IterableDiffers, new di_3.SkipSelfMetadata(), new di_3.OptionalMetadata()]]
                    });
                };
                IterableDiffers.prototype.find = function (iterable) {
                    var factory = this.factories.find(function (f) { return f.supports(iterable); });
                    if (lang_19.isPresent(factory)) {
                        return factory;
                    }
                    else {
                        throw new exceptions_6.BaseException("Cannot find a differ supporting object '" + iterable + "'");
                    }
                };
                IterableDiffers = __decorate([
                    di_3.Injectable(),
                    lang_19.CONST(), 
                    __metadata('design:paramtypes', [Array])
                ], IterableDiffers);
                return IterableDiffers;
            }());
            exports_75("IterableDiffers", IterableDiffers);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/change_detection/differs/default_iterable_differ", ['angular2/src/facade/lang', 'angular2/src/facade/exceptions', 'angular2/src/facade/collection'], function(exports_76, context_76) {
    "use strict";
    var __moduleName = context_76 && context_76.id;
    var lang_20, exceptions_7, collection_10, lang_21;
    var DefaultIterableDifferFactory, trackByIdentity, DefaultIterableDiffer, CollectionChangeRecord, _DuplicateItemRecordList, _DuplicateMap;
    return {
        setters:[
            function (lang_20_1) {
                lang_20 = lang_20_1;
                lang_21 = lang_20_1;
            },
            function (exceptions_7_1) {
                exceptions_7 = exceptions_7_1;
            },
            function (collection_10_1) {
                collection_10 = collection_10_1;
            }],
        execute: function() {
            DefaultIterableDifferFactory = (function () {
                function DefaultIterableDifferFactory() {
                }
                DefaultIterableDifferFactory.prototype.supports = function (obj) { return collection_10.isListLikeIterable(obj); };
                DefaultIterableDifferFactory.prototype.create = function (cdRef, trackByFn) {
                    return new DefaultIterableDiffer(trackByFn);
                };
                DefaultIterableDifferFactory = __decorate([
                    lang_20.CONST(), 
                    __metadata('design:paramtypes', [])
                ], DefaultIterableDifferFactory);
                return DefaultIterableDifferFactory;
            }());
            exports_76("DefaultIterableDifferFactory", DefaultIterableDifferFactory);
            trackByIdentity = function (index, item) { return item; };
            DefaultIterableDiffer = (function () {
                function DefaultIterableDiffer(_trackByFn) {
                    this._trackByFn = _trackByFn;
                    this._length = null;
                    this._collection = null;
                    // Keeps track of the used records at any point in time (during & across `_check()` calls)
                    this._linkedRecords = null;
                    // Keeps track of the removed records at any point in time during `_check()` calls.
                    this._unlinkedRecords = null;
                    this._previousItHead = null;
                    this._itHead = null;
                    this._itTail = null;
                    this._additionsHead = null;
                    this._additionsTail = null;
                    this._movesHead = null;
                    this._movesTail = null;
                    this._removalsHead = null;
                    this._removalsTail = null;
                    // Keeps track of records where custom track by is the same, but item identity has changed
                    this._identityChangesHead = null;
                    this._identityChangesTail = null;
                    this._trackByFn = lang_21.isPresent(this._trackByFn) ? this._trackByFn : trackByIdentity;
                }
                Object.defineProperty(DefaultIterableDiffer.prototype, "collection", {
                    get: function () { return this._collection; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(DefaultIterableDiffer.prototype, "length", {
                    get: function () { return this._length; },
                    enumerable: true,
                    configurable: true
                });
                DefaultIterableDiffer.prototype.forEachItem = function (fn) {
                    var record;
                    for (record = this._itHead; record !== null; record = record._next) {
                        fn(record);
                    }
                };
                DefaultIterableDiffer.prototype.forEachPreviousItem = function (fn) {
                    var record;
                    for (record = this._previousItHead; record !== null; record = record._nextPrevious) {
                        fn(record);
                    }
                };
                DefaultIterableDiffer.prototype.forEachAddedItem = function (fn) {
                    var record;
                    for (record = this._additionsHead; record !== null; record = record._nextAdded) {
                        fn(record);
                    }
                };
                DefaultIterableDiffer.prototype.forEachMovedItem = function (fn) {
                    var record;
                    for (record = this._movesHead; record !== null; record = record._nextMoved) {
                        fn(record);
                    }
                };
                DefaultIterableDiffer.prototype.forEachRemovedItem = function (fn) {
                    var record;
                    for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
                        fn(record);
                    }
                };
                DefaultIterableDiffer.prototype.forEachIdentityChange = function (fn) {
                    var record;
                    for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {
                        fn(record);
                    }
                };
                DefaultIterableDiffer.prototype.diff = function (collection) {
                    if (lang_21.isBlank(collection))
                        collection = [];
                    if (!collection_10.isListLikeIterable(collection)) {
                        throw new exceptions_7.BaseException("Error trying to diff '" + collection + "'");
                    }
                    if (this.check(collection)) {
                        return this;
                    }
                    else {
                        return null;
                    }
                };
                DefaultIterableDiffer.prototype.onDestroy = function () { };
                DefaultIterableDiffer.prototype.check = function (collection) {
                    var _this = this;
                    this._reset();
                    var record = this._itHead;
                    var mayBeDirty = false;
                    var index;
                    var item;
                    var itemTrackBy;
                    if (lang_21.isArray(collection)) {
                        if (collection !== this._collection || !collection_10.ListWrapper.isImmutable(collection)) {
                            var list = collection;
                            this._length = collection.length;
                            for (index = 0; index < this._length; index++) {
                                item = list[index];
                                itemTrackBy = this._trackByFn(index, item);
                                if (record === null || !lang_21.looseIdentical(record.trackById, itemTrackBy)) {
                                    record = this._mismatch(record, item, itemTrackBy, index);
                                    mayBeDirty = true;
                                }
                                else {
                                    if (mayBeDirty) {
                                        // TODO(misko): can we limit this to duplicates only?
                                        record = this._verifyReinsertion(record, item, itemTrackBy, index);
                                    }
                                    if (!lang_21.looseIdentical(record.item, item))
                                        this._addIdentityChange(record, item);
                                }
                                record = record._next;
                            }
                            this._truncate(record);
                        }
                    }
                    else {
                        index = 0;
                        collection_10.iterateListLike(collection, function (item) {
                            itemTrackBy = _this._trackByFn(index, item);
                            if (record === null || !lang_21.looseIdentical(record.trackById, itemTrackBy)) {
                                record = _this._mismatch(record, item, itemTrackBy, index);
                                mayBeDirty = true;
                            }
                            else {
                                if (mayBeDirty) {
                                    // TODO(misko): can we limit this to duplicates only?
                                    record = _this._verifyReinsertion(record, item, itemTrackBy, index);
                                }
                                if (!lang_21.looseIdentical(record.item, item))
                                    _this._addIdentityChange(record, item);
                            }
                            record = record._next;
                            index++;
                        });
                        this._length = index;
                        this._truncate(record);
                    }
                    this._collection = collection;
                    return this.isDirty;
                };
                Object.defineProperty(DefaultIterableDiffer.prototype, "isDirty", {
                    /* CollectionChanges is considered dirty if it has any additions, moves, removals, or identity
                     * changes.
                     */
                    get: function () {
                        return this._additionsHead !== null || this._movesHead !== null ||
                            this._removalsHead !== null || this._identityChangesHead !== null;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Reset the state of the change objects to show no changes. This means set previousKey to
                 * currentKey, and clear all of the queues (additions, moves, removals).
                 * Set the previousIndexes of moved and added items to their currentIndexes
                 * Reset the list of additions, moves and removals
                 *
                 * @internal
                 */
                DefaultIterableDiffer.prototype._reset = function () {
                    if (this.isDirty) {
                        var record;
                        var nextRecord;
                        for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {
                            record._nextPrevious = record._next;
                        }
                        for (record = this._additionsHead; record !== null; record = record._nextAdded) {
                            record.previousIndex = record.currentIndex;
                        }
                        this._additionsHead = this._additionsTail = null;
                        for (record = this._movesHead; record !== null; record = nextRecord) {
                            record.previousIndex = record.currentIndex;
                            nextRecord = record._nextMoved;
                        }
                        this._movesHead = this._movesTail = null;
                        this._removalsHead = this._removalsTail = null;
                        this._identityChangesHead = this._identityChangesTail = null;
                    }
                };
                /**
                 * This is the core function which handles differences between collections.
                 *
                 * - `record` is the record which we saw at this position last time. If null then it is a new
                 *   item.
                 * - `item` is the current item in the collection
                 * - `index` is the position of the item in the collection
                 *
                 * @internal
                 */
                DefaultIterableDiffer.prototype._mismatch = function (record, item, itemTrackBy, index) {
                    // The previous record after which we will append the current one.
                    var previousRecord;
                    if (record === null) {
                        previousRecord = this._itTail;
                    }
                    else {
                        previousRecord = record._prev;
                        // Remove the record from the collection since we know it does not match the item.
                        this._remove(record);
                    }
                    // Attempt to see if we have seen the item before.
                    record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);
                    if (record !== null) {
                        // We have seen this before, we need to move it forward in the collection.
                        // But first we need to check if identity changed, so we can update in view if necessary
                        if (!lang_21.looseIdentical(record.item, item))
                            this._addIdentityChange(record, item);
                        this._moveAfter(record, previousRecord, index);
                    }
                    else {
                        // Never seen it, check evicted list.
                        record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy);
                        if (record !== null) {
                            // It is an item which we have evicted earlier: reinsert it back into the list.
                            // But first we need to check if identity changed, so we can update in view if necessary
                            if (!lang_21.looseIdentical(record.item, item))
                                this._addIdentityChange(record, item);
                            this._reinsertAfter(record, previousRecord, index);
                        }
                        else {
                            // It is a new item: add it.
                            record =
                                this._addAfter(new CollectionChangeRecord(item, itemTrackBy), previousRecord, index);
                        }
                    }
                    return record;
                };
                /**
                 * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)
                 *
                 * Use case: `[a, a]` => `[b, a, a]`
                 *
                 * If we did not have this check then the insertion of `b` would:
                 *   1) evict first `a`
                 *   2) insert `b` at `0` index.
                 *   3) leave `a` at index `1` as is. <-- this is wrong!
                 *   3) reinsert `a` at index 2. <-- this is wrong!
                 *
                 * The correct behavior is:
                 *   1) evict first `a`
                 *   2) insert `b` at `0` index.
                 *   3) reinsert `a` at index 1.
                 *   3) move `a` at from `1` to `2`.
                 *
                 *
                 * Double check that we have not evicted a duplicate item. We need to check if the item type may
                 * have already been removed:
                 * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted
                 * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a
                 * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'
                 * at the end.
                 *
                 * @internal
                 */
                DefaultIterableDiffer.prototype._verifyReinsertion = function (record, item, itemTrackBy, index) {
                    var reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy);
                    if (reinsertRecord !== null) {
                        record = this._reinsertAfter(reinsertRecord, record._prev, index);
                    }
                    else if (record.currentIndex != index) {
                        record.currentIndex = index;
                        this._addToMoves(record, index);
                    }
                    return record;
                };
                /**
                 * Get rid of any excess {@link CollectionChangeRecord}s from the previous collection
                 *
                 * - `record` The first excess {@link CollectionChangeRecord}.
                 *
                 * @internal
                 */
                DefaultIterableDiffer.prototype._truncate = function (record) {
                    // Anything after that needs to be removed;
                    while (record !== null) {
                        var nextRecord = record._next;
                        this._addToRemovals(this._unlink(record));
                        record = nextRecord;
                    }
                    if (this._unlinkedRecords !== null) {
                        this._unlinkedRecords.clear();
                    }
                    if (this._additionsTail !== null) {
                        this._additionsTail._nextAdded = null;
                    }
                    if (this._movesTail !== null) {
                        this._movesTail._nextMoved = null;
                    }
                    if (this._itTail !== null) {
                        this._itTail._next = null;
                    }
                    if (this._removalsTail !== null) {
                        this._removalsTail._nextRemoved = null;
                    }
                    if (this._identityChangesTail !== null) {
                        this._identityChangesTail._nextIdentityChange = null;
                    }
                };
                /** @internal */
                DefaultIterableDiffer.prototype._reinsertAfter = function (record, prevRecord, index) {
                    if (this._unlinkedRecords !== null) {
                        this._unlinkedRecords.remove(record);
                    }
                    var prev = record._prevRemoved;
                    var next = record._nextRemoved;
                    if (prev === null) {
                        this._removalsHead = next;
                    }
                    else {
                        prev._nextRemoved = next;
                    }
                    if (next === null) {
                        this._removalsTail = prev;
                    }
                    else {
                        next._prevRemoved = prev;
                    }
                    this._insertAfter(record, prevRecord, index);
                    this._addToMoves(record, index);
                    return record;
                };
                /** @internal */
                DefaultIterableDiffer.prototype._moveAfter = function (record, prevRecord, index) {
                    this._unlink(record);
                    this._insertAfter(record, prevRecord, index);
                    this._addToMoves(record, index);
                    return record;
                };
                /** @internal */
                DefaultIterableDiffer.prototype._addAfter = function (record, prevRecord, index) {
                    this._insertAfter(record, prevRecord, index);
                    if (this._additionsTail === null) {
                        // todo(vicb)
                        // assert(this._additionsHead === null);
                        this._additionsTail = this._additionsHead = record;
                    }
                    else {
                        // todo(vicb)
                        // assert(_additionsTail._nextAdded === null);
                        // assert(record._nextAdded === null);
                        this._additionsTail = this._additionsTail._nextAdded = record;
                    }
                    return record;
                };
                /** @internal */
                DefaultIterableDiffer.prototype._insertAfter = function (record, prevRecord, index) {
                    // todo(vicb)
                    // assert(record != prevRecord);
                    // assert(record._next === null);
                    // assert(record._prev === null);
                    var next = prevRecord === null ? this._itHead : prevRecord._next;
                    // todo(vicb)
                    // assert(next != record);
                    // assert(prevRecord != record);
                    record._next = next;
                    record._prev = prevRecord;
                    if (next === null) {
                        this._itTail = record;
                    }
                    else {
                        next._prev = record;
                    }
                    if (prevRecord === null) {
                        this._itHead = record;
                    }
                    else {
                        prevRecord._next = record;
                    }
                    if (this._linkedRecords === null) {
                        this._linkedRecords = new _DuplicateMap();
                    }
                    this._linkedRecords.put(record);
                    record.currentIndex = index;
                    return record;
                };
                /** @internal */
                DefaultIterableDiffer.prototype._remove = function (record) {
                    return this._addToRemovals(this._unlink(record));
                };
                /** @internal */
                DefaultIterableDiffer.prototype._unlink = function (record) {
                    if (this._linkedRecords !== null) {
                        this._linkedRecords.remove(record);
                    }
                    var prev = record._prev;
                    var next = record._next;
                    // todo(vicb)
                    // assert((record._prev = null) === null);
                    // assert((record._next = null) === null);
                    if (prev === null) {
                        this._itHead = next;
                    }
                    else {
                        prev._next = next;
                    }
                    if (next === null) {
                        this._itTail = prev;
                    }
                    else {
                        next._prev = prev;
                    }
                    return record;
                };
                /** @internal */
                DefaultIterableDiffer.prototype._addToMoves = function (record, toIndex) {
                    // todo(vicb)
                    // assert(record._nextMoved === null);
                    if (record.previousIndex === toIndex) {
                        return record;
                    }
                    if (this._movesTail === null) {
                        // todo(vicb)
                        // assert(_movesHead === null);
                        this._movesTail = this._movesHead = record;
                    }
                    else {
                        // todo(vicb)
                        // assert(_movesTail._nextMoved === null);
                        this._movesTail = this._movesTail._nextMoved = record;
                    }
                    return record;
                };
                /** @internal */
                DefaultIterableDiffer.prototype._addToRemovals = function (record) {
                    if (this._unlinkedRecords === null) {
                        this._unlinkedRecords = new _DuplicateMap();
                    }
                    this._unlinkedRecords.put(record);
                    record.currentIndex = null;
                    record._nextRemoved = null;
                    if (this._removalsTail === null) {
                        // todo(vicb)
                        // assert(_removalsHead === null);
                        this._removalsTail = this._removalsHead = record;
                        record._prevRemoved = null;
                    }
                    else {
                        // todo(vicb)
                        // assert(_removalsTail._nextRemoved === null);
                        // assert(record._nextRemoved === null);
                        record._prevRemoved = this._removalsTail;
                        this._removalsTail = this._removalsTail._nextRemoved = record;
                    }
                    return record;
                };
                /** @internal */
                DefaultIterableDiffer.prototype._addIdentityChange = function (record, item) {
                    record.item = item;
                    if (this._identityChangesTail === null) {
                        this._identityChangesTail = this._identityChangesHead = record;
                    }
                    else {
                        this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;
                    }
                    return record;
                };
                DefaultIterableDiffer.prototype.toString = function () {
                    var list = [];
                    this.forEachItem(function (record) { return list.push(record); });
                    var previous = [];
                    this.forEachPreviousItem(function (record) { return previous.push(record); });
                    var additions = [];
                    this.forEachAddedItem(function (record) { return additions.push(record); });
                    var moves = [];
                    this.forEachMovedItem(function (record) { return moves.push(record); });
                    var removals = [];
                    this.forEachRemovedItem(function (record) { return removals.push(record); });
                    var identityChanges = [];
                    this.forEachIdentityChange(function (record) { return identityChanges.push(record); });
                    return "collection: " + list.join(', ') + "\n" + "previous: " + previous.join(', ') + "\n" +
                        "additions: " + additions.join(', ') + "\n" + "moves: " + moves.join(', ') + "\n" +
                        "removals: " + removals.join(', ') + "\n" + "identityChanges: " +
                        identityChanges.join(', ') + "\n";
                };
                return DefaultIterableDiffer;
            }());
            exports_76("DefaultIterableDiffer", DefaultIterableDiffer);
            CollectionChangeRecord = (function () {
                function CollectionChangeRecord(item, trackById) {
                    this.item = item;
                    this.trackById = trackById;
                    this.currentIndex = null;
                    this.previousIndex = null;
                    /** @internal */
                    this._nextPrevious = null;
                    /** @internal */
                    this._prev = null;
                    /** @internal */
                    this._next = null;
                    /** @internal */
                    this._prevDup = null;
                    /** @internal */
                    this._nextDup = null;
                    /** @internal */
                    this._prevRemoved = null;
                    /** @internal */
                    this._nextRemoved = null;
                    /** @internal */
                    this._nextAdded = null;
                    /** @internal */
                    this._nextMoved = null;
                    /** @internal */
                    this._nextIdentityChange = null;
                }
                CollectionChangeRecord.prototype.toString = function () {
                    return this.previousIndex === this.currentIndex ?
                        lang_21.stringify(this.item) :
                        lang_21.stringify(this.item) + '[' + lang_21.stringify(this.previousIndex) + '->' +
                            lang_21.stringify(this.currentIndex) + ']';
                };
                return CollectionChangeRecord;
            }());
            exports_76("CollectionChangeRecord", CollectionChangeRecord);
            // A linked list of CollectionChangeRecords with the same CollectionChangeRecord.item
            _DuplicateItemRecordList = (function () {
                function _DuplicateItemRecordList() {
                    /** @internal */
                    this._head = null;
                    /** @internal */
                    this._tail = null;
                }
                /**
                 * Append the record to the list of duplicates.
                 *
                 * Note: by design all records in the list of duplicates hold the same value in record.item.
                 */
                _DuplicateItemRecordList.prototype.add = function (record) {
                    if (this._head === null) {
                        this._head = this._tail = record;
                        record._nextDup = null;
                        record._prevDup = null;
                    }
                    else {
                        // todo(vicb)
                        // assert(record.item ==  _head.item ||
                        //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);
                        this._tail._nextDup = record;
                        record._prevDup = this._tail;
                        record._nextDup = null;
                        this._tail = record;
                    }
                };
                // Returns a CollectionChangeRecord having CollectionChangeRecord.trackById == trackById and
                // CollectionChangeRecord.currentIndex >= afterIndex
                _DuplicateItemRecordList.prototype.get = function (trackById, afterIndex) {
                    var record;
                    for (record = this._head; record !== null; record = record._nextDup) {
                        if ((afterIndex === null || afterIndex < record.currentIndex) &&
                            lang_21.looseIdentical(record.trackById, trackById)) {
                            return record;
                        }
                    }
                    return null;
                };
                /**
                 * Remove one {@link CollectionChangeRecord} from the list of duplicates.
                 *
                 * Returns whether the list of duplicates is empty.
                 */
                _DuplicateItemRecordList.prototype.remove = function (record) {
                    // todo(vicb)
                    // assert(() {
                    //  // verify that the record being removed is in the list.
                    //  for (CollectionChangeRecord cursor = _head; cursor != null; cursor = cursor._nextDup) {
                    //    if (identical(cursor, record)) return true;
                    //  }
                    //  return false;
                    //});
                    var prev = record._prevDup;
                    var next = record._nextDup;
                    if (prev === null) {
                        this._head = next;
                    }
                    else {
                        prev._nextDup = next;
                    }
                    if (next === null) {
                        this._tail = prev;
                    }
                    else {
                        next._prevDup = prev;
                    }
                    return this._head === null;
                };
                return _DuplicateItemRecordList;
            }());
            _DuplicateMap = (function () {
                function _DuplicateMap() {
                    this.map = new Map();
                }
                _DuplicateMap.prototype.put = function (record) {
                    // todo(vicb) handle corner cases
                    var key = lang_21.getMapKey(record.trackById);
                    var duplicates = this.map.get(key);
                    if (!lang_21.isPresent(duplicates)) {
                        duplicates = new _DuplicateItemRecordList();
                        this.map.set(key, duplicates);
                    }
                    duplicates.add(record);
                };
                /**
                 * Retrieve the `value` using key. Because the CollectionChangeRecord value may be one which we
                 * have already iterated over, we use the afterIndex to pretend it is not there.
                 *
                 * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we
                 * have any more `a`s needs to return the last `a` not the first or second.
                 */
                _DuplicateMap.prototype.get = function (trackById, afterIndex) {
                    if (afterIndex === void 0) { afterIndex = null; }
                    var key = lang_21.getMapKey(trackById);
                    var recordList = this.map.get(key);
                    return lang_21.isBlank(recordList) ? null : recordList.get(trackById, afterIndex);
                };
                /**
                 * Removes a {@link CollectionChangeRecord} from the list of duplicates.
                 *
                 * The list of duplicates also is removed from the map if it gets empty.
                 */
                _DuplicateMap.prototype.remove = function (record) {
                    var key = lang_21.getMapKey(record.trackById);
                    // todo(vicb)
                    // assert(this.map.containsKey(key));
                    var recordList = this.map.get(key);
                    // Remove the list of duplicates when it gets empty
                    if (recordList.remove(record)) {
                        this.map.delete(key);
                    }
                    return record;
                };
                Object.defineProperty(_DuplicateMap.prototype, "isEmpty", {
                    get: function () { return this.map.size === 0; },
                    enumerable: true,
                    configurable: true
                });
                _DuplicateMap.prototype.clear = function () { this.map.clear(); };
                _DuplicateMap.prototype.toString = function () { return '_DuplicateMap(' + lang_21.stringify(this.map) + ')'; };
                return _DuplicateMap;
            }());
        }
    }
});
System.register("test/node_modules/angular2/ts/src/common/directives/ng_for", ['angular2/core', 'angular2/src/facade/lang'], function(exports_77, context_77) {
    "use strict";
    var __moduleName = context_77 && context_77.id;
    var core_53, lang_22;
    var NgFor, RecordViewTuple;
    return {
        setters:[
            function (core_53_1) {
                core_53 = core_53_1;
            },
            function (lang_22_1) {
                lang_22 = lang_22_1;
            }],
        execute: function() {
            /**
             * The `NgFor` directive instantiates a template once per item from an iterable. The context for
             * each instantiated template inherits from the outer context with the given loop variable set
             * to the current item from the iterable.
             *
             * # Local Variables
             *
             * `NgFor` provides several exported values that can be aliased to local variables:
             *
             * * `index` will be set to the current loop iteration for each template context.
             * * `last` will be set to a boolean value indicating whether the item is the last one in the
             *   iteration.
             * * `even` will be set to a boolean value indicating whether this item has an even index.
             * * `odd` will be set to a boolean value indicating whether this item has an odd index.
             *
             * # Change Propagation
             *
             * When the contents of the iterator changes, `NgFor` makes the corresponding changes to the DOM:
             *
             * * When an item is added, a new instance of the template is added to the DOM.
             * * When an item is removed, its template instance is removed from the DOM.
             * * When items are reordered, their respective templates are reordered in the DOM.
             * * Otherwise, the DOM element for that item will remain the same.
             *
             * Angular uses object identity to track insertions and deletions within the iterator and reproduce
             * those changes in the DOM. This has important implications for animations and any stateful
             * controls
             * (such as `<input>` elements which accept user input) that are present. Inserted rows can be
             * animated in, deleted rows can be animated out, and unchanged rows retain any unsaved state such
             * as user input.
             *
             * It is possible for the identities of elements in the iterator to change while the data does not.
             * This can happen, for example, if the iterator produced from an RPC to the server, and that
             * RPC is re-run. Even if the data hasn't changed, the second response will produce objects with
             * different identities, and Angular will tear down the entire DOM and rebuild it (as if all old
             * elements were deleted and all new elements inserted). This is an expensive operation and should
             * be avoided if possible.
             *
             * # Syntax
             *
             * - `<li *ngFor="#item of items; #i = index">...</li>`
             * - `<li template="ngFor #item of items; #i = index">...</li>`
             * - `<template ngFor #item [ngForOf]="items" #i="index"><li>...</li></template>`
             *
             * ### Example
             *
             * See a [live demo](http://plnkr.co/edit/KVuXxDp0qinGDyo307QW?p=preview) for a more detailed
             * example.
             */
            NgFor = (function () {
                function NgFor(_viewContainer, _templateRef, _iterableDiffers, _cdr) {
                    this._viewContainer = _viewContainer;
                    this._templateRef = _templateRef;
                    this._iterableDiffers = _iterableDiffers;
                    this._cdr = _cdr;
                }
                Object.defineProperty(NgFor.prototype, "ngForOf", {
                    set: function (value) {
                        this._ngForOf = value;
                        if (lang_22.isBlank(this._differ) && lang_22.isPresent(value)) {
                            this._differ = this._iterableDiffers.find(value).create(this._cdr, this._ngForTrackBy);
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NgFor.prototype, "ngForTemplate", {
                    set: function (value) {
                        if (lang_22.isPresent(value)) {
                            this._templateRef = value;
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NgFor.prototype, "ngForTrackBy", {
                    set: function (value) { this._ngForTrackBy = value; },
                    enumerable: true,
                    configurable: true
                });
                NgFor.prototype.ngDoCheck = function () {
                    if (lang_22.isPresent(this._differ)) {
                        var changes = this._differ.diff(this._ngForOf);
                        if (lang_22.isPresent(changes))
                            this._applyChanges(changes);
                    }
                };
                NgFor.prototype._applyChanges = function (changes) {
                    var _this = this;
                    // TODO(rado): check if change detection can produce a change record that is
                    // easier to consume than current.
                    var recordViewTuples = [];
                    changes.forEachRemovedItem(function (removedRecord) {
                        return recordViewTuples.push(new RecordViewTuple(removedRecord, null));
                    });
                    changes.forEachMovedItem(function (movedRecord) {
                        return recordViewTuples.push(new RecordViewTuple(movedRecord, null));
                    });
                    var insertTuples = this._bulkRemove(recordViewTuples);
                    changes.forEachAddedItem(function (addedRecord) {
                        return insertTuples.push(new RecordViewTuple(addedRecord, null));
                    });
                    this._bulkInsert(insertTuples);
                    for (var i = 0; i < insertTuples.length; i++) {
                        this._perViewChange(insertTuples[i].view, insertTuples[i].record);
                    }
                    for (var i = 0, ilen = this._viewContainer.length; i < ilen; i++) {
                        var viewRef = this._viewContainer.get(i);
                        viewRef.setLocal('last', i === ilen - 1);
                    }
                    changes.forEachIdentityChange(function (record) {
                        var viewRef = _this._viewContainer.get(record.currentIndex);
                        viewRef.setLocal('\$implicit', record.item);
                    });
                };
                NgFor.prototype._perViewChange = function (view, record) {
                    view.setLocal('\$implicit', record.item);
                    view.setLocal('index', record.currentIndex);
                    view.setLocal('even', (record.currentIndex % 2 == 0));
                    view.setLocal('odd', (record.currentIndex % 2 == 1));
                };
                NgFor.prototype._bulkRemove = function (tuples) {
                    tuples.sort(function (a, b) {
                        return a.record.previousIndex - b.record.previousIndex;
                    });
                    var movedTuples = [];
                    for (var i = tuples.length - 1; i >= 0; i--) {
                        var tuple = tuples[i];
                        // separate moved views from removed views.
                        if (lang_22.isPresent(tuple.record.currentIndex)) {
                            tuple.view = this._viewContainer.detach(tuple.record.previousIndex);
                            movedTuples.push(tuple);
                        }
                        else {
                            this._viewContainer.remove(tuple.record.previousIndex);
                        }
                    }
                    return movedTuples;
                };
                NgFor.prototype._bulkInsert = function (tuples) {
                    tuples.sort(function (a, b) { return a.record.currentIndex - b.record.currentIndex; });
                    for (var i = 0; i < tuples.length; i++) {
                        var tuple = tuples[i];
                        if (lang_22.isPresent(tuple.view)) {
                            this._viewContainer.insert(tuple.view, tuple.record.currentIndex);
                        }
                        else {
                            tuple.view =
                                this._viewContainer.createEmbeddedView(this._templateRef, tuple.record.currentIndex);
                        }
                    }
                    return tuples;
                };
                NgFor = __decorate([
                    core_53.Directive({ selector: '[ngFor][ngForOf]', inputs: ['ngForTrackBy', 'ngForOf', 'ngForTemplate'] }), 
                    __metadata('design:paramtypes', [core_53.ViewContainerRef, core_53.TemplateRef, core_53.IterableDiffers, core_53.ChangeDetectorRef])
                ], NgFor);
                return NgFor;
            }());
            exports_77("NgFor", NgFor);
            RecordViewTuple = (function () {
                function RecordViewTuple(record, view) {
                    this.record = record;
                    this.view = view;
                }
                return RecordViewTuple;
            }());
        }
    }
});
System.register("test/node_modules/angular2/ts/src/common/directives/ng_if", ['angular2/core', 'angular2/src/facade/lang'], function(exports_78, context_78) {
    "use strict";
    var __moduleName = context_78 && context_78.id;
    var core_54, lang_23;
    var NgIf;
    return {
        setters:[
            function (core_54_1) {
                core_54 = core_54_1;
            },
            function (lang_23_1) {
                lang_23 = lang_23_1;
            }],
        execute: function() {
            /**
             * Removes or recreates a portion of the DOM tree based on an {expression}.
             *
             * If the expression assigned to `ngIf` evaluates to a false value then the element
             * is removed from the DOM, otherwise a clone of the element is reinserted into the DOM.
             *
             * ### Example ([live demo](http://plnkr.co/edit/fe0kgemFBtmQOY31b4tw?p=preview)):
             *
             * ```
             * <div *ngIf="errorCount > 0" class="error">
             *   <!-- Error message displayed when the errorCount property on the current context is greater
             * than 0. -->
             *   {{errorCount}} errors detected
             * </div>
             * ```
             *
             * ### Syntax
             *
             * - `<div *ngIf="condition">...</div>`
             * - `<div template="ngIf condition">...</div>`
             * - `<template [ngIf]="condition"><div>...</div></template>`
             */
            NgIf = (function () {
                function NgIf(_viewContainer, _templateRef) {
                    this._viewContainer = _viewContainer;
                    this._templateRef = _templateRef;
                    this._prevCondition = null;
                }
                Object.defineProperty(NgIf.prototype, "ngIf", {
                    set: function (newCondition /* boolean */) {
                        if (newCondition && (lang_23.isBlank(this._prevCondition) || !this._prevCondition)) {
                            this._prevCondition = true;
                            this._viewContainer.createEmbeddedView(this._templateRef);
                        }
                        else if (!newCondition && (lang_23.isBlank(this._prevCondition) || this._prevCondition)) {
                            this._prevCondition = false;
                            this._viewContainer.clear();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                NgIf = __decorate([
                    core_54.Directive({ selector: '[ngIf]', inputs: ['ngIf'] }), 
                    __metadata('design:paramtypes', [core_54.ViewContainerRef, core_54.TemplateRef])
                ], NgIf);
                return NgIf;
            }());
            exports_78("NgIf", NgIf);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/change_detection/differs/keyvalue_differs", ['angular2/src/facade/lang', 'angular2/src/facade/exceptions', 'angular2/src/facade/collection', 'angular2/src/core/di'], function(exports_79, context_79) {
    "use strict";
    var __moduleName = context_79 && context_79.id;
    var lang_24, exceptions_8, collection_11, di_4;
    var KeyValueDiffers;
    return {
        setters:[
            function (lang_24_1) {
                lang_24 = lang_24_1;
            },
            function (exceptions_8_1) {
                exceptions_8 = exceptions_8_1;
            },
            function (collection_11_1) {
                collection_11 = collection_11_1;
            },
            function (di_4_1) {
                di_4 = di_4_1;
            }],
        execute: function() {
            /**
             * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.
             */
            KeyValueDiffers = (function () {
                function KeyValueDiffers(factories) {
                    this.factories = factories;
                }
                KeyValueDiffers.create = function (factories, parent) {
                    if (lang_24.isPresent(parent)) {
                        var copied = collection_11.ListWrapper.clone(parent.factories);
                        factories = factories.concat(copied);
                        return new KeyValueDiffers(factories);
                    }
                    else {
                        return new KeyValueDiffers(factories);
                    }
                };
                /**
                 * Takes an array of {@link KeyValueDifferFactory} and returns a provider used to extend the
                 * inherited {@link KeyValueDiffers} instance with the provided factories and return a new
                 * {@link KeyValueDiffers} instance.
                 *
                 * The following example shows how to extend an existing list of factories,
                       * which will only be applied to the injector for this component and its children.
                       * This step is all that's required to make a new {@link KeyValueDiffer} available.
                 *
                 * ### Example
                 *
                 * ```
                 * @Component({
                 *   viewProviders: [
                 *     KeyValueDiffers.extend([new ImmutableMapDiffer()])
                 *   ]
                 * })
                 * ```
                 */
                KeyValueDiffers.extend = function (factories) {
                    return new di_4.Provider(KeyValueDiffers, {
                        useFactory: function (parent) {
                            if (lang_24.isBlank(parent)) {
                                // Typically would occur when calling KeyValueDiffers.extend inside of dependencies passed
                                // to
                                // bootstrap(), which would override default pipes instead of extending them.
                                throw new exceptions_8.BaseException('Cannot extend KeyValueDiffers without a parent injector');
                            }
                            return KeyValueDiffers.create(factories, parent);
                        },
                        // Dependency technically isn't optional, but we can provide a better error message this way.
                        deps: [[KeyValueDiffers, new di_4.SkipSelfMetadata(), new di_4.OptionalMetadata()]]
                    });
                };
                KeyValueDiffers.prototype.find = function (kv) {
                    var factory = this.factories.find(function (f) { return f.supports(kv); });
                    if (lang_24.isPresent(factory)) {
                        return factory;
                    }
                    else {
                        throw new exceptions_8.BaseException("Cannot find a differ supporting object '" + kv + "'");
                    }
                };
                KeyValueDiffers = __decorate([
                    di_4.Injectable(),
                    lang_24.CONST(), 
                    __metadata('design:paramtypes', [Array])
                ], KeyValueDiffers);
                return KeyValueDiffers;
            }());
            exports_79("KeyValueDiffers", KeyValueDiffers);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/change_detection/differs/default_keyvalue_differ", ['angular2/src/facade/collection', 'angular2/src/facade/lang', 'angular2/src/facade/exceptions'], function(exports_80, context_80) {
    "use strict";
    var __moduleName = context_80 && context_80.id;
    var collection_12, lang_25, exceptions_9;
    var DefaultKeyValueDifferFactory, DefaultKeyValueDiffer, KeyValueChangeRecord;
    return {
        setters:[
            function (collection_12_1) {
                collection_12 = collection_12_1;
            },
            function (lang_25_1) {
                lang_25 = lang_25_1;
            },
            function (exceptions_9_1) {
                exceptions_9 = exceptions_9_1;
            }],
        execute: function() {
            DefaultKeyValueDifferFactory = (function () {
                function DefaultKeyValueDifferFactory() {
                }
                DefaultKeyValueDifferFactory.prototype.supports = function (obj) { return obj instanceof Map || lang_25.isJsObject(obj); };
                DefaultKeyValueDifferFactory.prototype.create = function (cdRef) { return new DefaultKeyValueDiffer(); };
                DefaultKeyValueDifferFactory = __decorate([
                    lang_25.CONST(), 
                    __metadata('design:paramtypes', [])
                ], DefaultKeyValueDifferFactory);
                return DefaultKeyValueDifferFactory;
            }());
            exports_80("DefaultKeyValueDifferFactory", DefaultKeyValueDifferFactory);
            DefaultKeyValueDiffer = (function () {
                function DefaultKeyValueDiffer() {
                    this._records = new Map();
                    this._mapHead = null;
                    this._previousMapHead = null;
                    this._changesHead = null;
                    this._changesTail = null;
                    this._additionsHead = null;
                    this._additionsTail = null;
                    this._removalsHead = null;
                    this._removalsTail = null;
                }
                Object.defineProperty(DefaultKeyValueDiffer.prototype, "isDirty", {
                    get: function () {
                        return this._additionsHead !== null || this._changesHead !== null ||
                            this._removalsHead !== null;
                    },
                    enumerable: true,
                    configurable: true
                });
                DefaultKeyValueDiffer.prototype.forEachItem = function (fn) {
                    var record;
                    for (record = this._mapHead; record !== null; record = record._next) {
                        fn(record);
                    }
                };
                DefaultKeyValueDiffer.prototype.forEachPreviousItem = function (fn) {
                    var record;
                    for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
                        fn(record);
                    }
                };
                DefaultKeyValueDiffer.prototype.forEachChangedItem = function (fn) {
                    var record;
                    for (record = this._changesHead; record !== null; record = record._nextChanged) {
                        fn(record);
                    }
                };
                DefaultKeyValueDiffer.prototype.forEachAddedItem = function (fn) {
                    var record;
                    for (record = this._additionsHead; record !== null; record = record._nextAdded) {
                        fn(record);
                    }
                };
                DefaultKeyValueDiffer.prototype.forEachRemovedItem = function (fn) {
                    var record;
                    for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
                        fn(record);
                    }
                };
                DefaultKeyValueDiffer.prototype.diff = function (map) {
                    if (lang_25.isBlank(map))
                        map = collection_12.MapWrapper.createFromPairs([]);
                    if (!(map instanceof Map || lang_25.isJsObject(map))) {
                        throw new exceptions_9.BaseException("Error trying to diff '" + map + "'");
                    }
                    if (this.check(map)) {
                        return this;
                    }
                    else {
                        return null;
                    }
                };
                DefaultKeyValueDiffer.prototype.onDestroy = function () { };
                DefaultKeyValueDiffer.prototype.check = function (map) {
                    var _this = this;
                    this._reset();
                    var records = this._records;
                    var oldSeqRecord = this._mapHead;
                    var lastOldSeqRecord = null;
                    var lastNewSeqRecord = null;
                    var seqChanged = false;
                    this._forEach(map, function (value, key) {
                        var newSeqRecord;
                        if (oldSeqRecord !== null && key === oldSeqRecord.key) {
                            newSeqRecord = oldSeqRecord;
                            if (!lang_25.looseIdentical(value, oldSeqRecord.currentValue)) {
                                oldSeqRecord.previousValue = oldSeqRecord.currentValue;
                                oldSeqRecord.currentValue = value;
                                _this._addToChanges(oldSeqRecord);
                            }
                        }
                        else {
                            seqChanged = true;
                            if (oldSeqRecord !== null) {
                                oldSeqRecord._next = null;
                                _this._removeFromSeq(lastOldSeqRecord, oldSeqRecord);
                                _this._addToRemovals(oldSeqRecord);
                            }
                            if (records.has(key)) {
                                newSeqRecord = records.get(key);
                            }
                            else {
                                newSeqRecord = new KeyValueChangeRecord(key);
                                records.set(key, newSeqRecord);
                                newSeqRecord.currentValue = value;
                                _this._addToAdditions(newSeqRecord);
                            }
                        }
                        if (seqChanged) {
                            if (_this._isInRemovals(newSeqRecord)) {
                                _this._removeFromRemovals(newSeqRecord);
                            }
                            if (lastNewSeqRecord == null) {
                                _this._mapHead = newSeqRecord;
                            }
                            else {
                                lastNewSeqRecord._next = newSeqRecord;
                            }
                        }
                        lastOldSeqRecord = oldSeqRecord;
                        lastNewSeqRecord = newSeqRecord;
                        oldSeqRecord = oldSeqRecord === null ? null : oldSeqRecord._next;
                    });
                    this._truncate(lastOldSeqRecord, oldSeqRecord);
                    return this.isDirty;
                };
                /** @internal */
                DefaultKeyValueDiffer.prototype._reset = function () {
                    if (this.isDirty) {
                        var record;
                        // Record the state of the mapping
                        for (record = this._previousMapHead = this._mapHead; record !== null; record = record._next) {
                            record._nextPrevious = record._next;
                        }
                        for (record = this._changesHead; record !== null; record = record._nextChanged) {
                            record.previousValue = record.currentValue;
                        }
                        for (record = this._additionsHead; record != null; record = record._nextAdded) {
                            record.previousValue = record.currentValue;
                        }
                        // todo(vicb) once assert is supported
                        // assert(() {
                        //  var r = _changesHead;
                        //  while (r != null) {
                        //    var nextRecord = r._nextChanged;
                        //    r._nextChanged = null;
                        //    r = nextRecord;
                        //  }
                        //
                        //  r = _additionsHead;
                        //  while (r != null) {
                        //    var nextRecord = r._nextAdded;
                        //    r._nextAdded = null;
                        //    r = nextRecord;
                        //  }
                        //
                        //  r = _removalsHead;
                        //  while (r != null) {
                        //    var nextRecord = r._nextRemoved;
                        //    r._nextRemoved = null;
                        //    r = nextRecord;
                        //  }
                        //
                        //  return true;
                        //});
                        this._changesHead = this._changesTail = null;
                        this._additionsHead = this._additionsTail = null;
                        this._removalsHead = this._removalsTail = null;
                    }
                };
                /** @internal */
                DefaultKeyValueDiffer.prototype._truncate = function (lastRecord, record) {
                    while (record !== null) {
                        if (lastRecord === null) {
                            this._mapHead = null;
                        }
                        else {
                            lastRecord._next = null;
                        }
                        var nextRecord = record._next;
                        // todo(vicb) assert
                        // assert((() {
                        //  record._next = null;
                        //  return true;
                        //}));
                        this._addToRemovals(record);
                        lastRecord = record;
                        record = nextRecord;
                    }
                    for (var rec = this._removalsHead; rec !== null; rec = rec._nextRemoved) {
                        rec.previousValue = rec.currentValue;
                        rec.currentValue = null;
                        this._records.delete(rec.key);
                    }
                };
                /** @internal */
                DefaultKeyValueDiffer.prototype._isInRemovals = function (record) {
                    return record === this._removalsHead || record._nextRemoved !== null ||
                        record._prevRemoved !== null;
                };
                /** @internal */
                DefaultKeyValueDiffer.prototype._addToRemovals = function (record) {
                    // todo(vicb) assert
                    // assert(record._next == null);
                    // assert(record._nextAdded == null);
                    // assert(record._nextChanged == null);
                    // assert(record._nextRemoved == null);
                    // assert(record._prevRemoved == null);
                    if (this._removalsHead === null) {
                        this._removalsHead = this._removalsTail = record;
                    }
                    else {
                        this._removalsTail._nextRemoved = record;
                        record._prevRemoved = this._removalsTail;
                        this._removalsTail = record;
                    }
                };
                /** @internal */
                DefaultKeyValueDiffer.prototype._removeFromSeq = function (prev, record) {
                    var next = record._next;
                    if (prev === null) {
                        this._mapHead = next;
                    }
                    else {
                        prev._next = next;
                    }
                    // todo(vicb) assert
                    // assert((() {
                    //  record._next = null;
                    //  return true;
                    //})());
                };
                /** @internal */
                DefaultKeyValueDiffer.prototype._removeFromRemovals = function (record) {
                    // todo(vicb) assert
                    // assert(record._next == null);
                    // assert(record._nextAdded == null);
                    // assert(record._nextChanged == null);
                    var prev = record._prevRemoved;
                    var next = record._nextRemoved;
                    if (prev === null) {
                        this._removalsHead = next;
                    }
                    else {
                        prev._nextRemoved = next;
                    }
                    if (next === null) {
                        this._removalsTail = prev;
                    }
                    else {
                        next._prevRemoved = prev;
                    }
                    record._prevRemoved = record._nextRemoved = null;
                };
                /** @internal */
                DefaultKeyValueDiffer.prototype._addToAdditions = function (record) {
                    // todo(vicb): assert
                    // assert(record._next == null);
                    // assert(record._nextAdded == null);
                    // assert(record._nextChanged == null);
                    // assert(record._nextRemoved == null);
                    // assert(record._prevRemoved == null);
                    if (this._additionsHead === null) {
                        this._additionsHead = this._additionsTail = record;
                    }
                    else {
                        this._additionsTail._nextAdded = record;
                        this._additionsTail = record;
                    }
                };
                /** @internal */
                DefaultKeyValueDiffer.prototype._addToChanges = function (record) {
                    // todo(vicb) assert
                    // assert(record._nextAdded == null);
                    // assert(record._nextChanged == null);
                    // assert(record._nextRemoved == null);
                    // assert(record._prevRemoved == null);
                    if (this._changesHead === null) {
                        this._changesHead = this._changesTail = record;
                    }
                    else {
                        this._changesTail._nextChanged = record;
                        this._changesTail = record;
                    }
                };
                DefaultKeyValueDiffer.prototype.toString = function () {
                    var items = [];
                    var previous = [];
                    var changes = [];
                    var additions = [];
                    var removals = [];
                    var record;
                    for (record = this._mapHead; record !== null; record = record._next) {
                        items.push(lang_25.stringify(record));
                    }
                    for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
                        previous.push(lang_25.stringify(record));
                    }
                    for (record = this._changesHead; record !== null; record = record._nextChanged) {
                        changes.push(lang_25.stringify(record));
                    }
                    for (record = this._additionsHead; record !== null; record = record._nextAdded) {
                        additions.push(lang_25.stringify(record));
                    }
                    for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
                        removals.push(lang_25.stringify(record));
                    }
                    return "map: " + items.join(', ') + "\n" + "previous: " + previous.join(', ') + "\n" +
                        "additions: " + additions.join(', ') + "\n" + "changes: " + changes.join(', ') + "\n" +
                        "removals: " + removals.join(', ') + "\n";
                };
                /** @internal */
                DefaultKeyValueDiffer.prototype._forEach = function (obj, fn) {
                    if (obj instanceof Map) {
                        obj.forEach(fn);
                    }
                    else {
                        collection_12.StringMapWrapper.forEach(obj, fn);
                    }
                };
                return DefaultKeyValueDiffer;
            }());
            exports_80("DefaultKeyValueDiffer", DefaultKeyValueDiffer);
            KeyValueChangeRecord = (function () {
                function KeyValueChangeRecord(key) {
                    this.key = key;
                    this.previousValue = null;
                    this.currentValue = null;
                    /** @internal */
                    this._nextPrevious = null;
                    /** @internal */
                    this._next = null;
                    /** @internal */
                    this._nextAdded = null;
                    /** @internal */
                    this._nextRemoved = null;
                    /** @internal */
                    this._prevRemoved = null;
                    /** @internal */
                    this._nextChanged = null;
                }
                KeyValueChangeRecord.prototype.toString = function () {
                    return lang_25.looseIdentical(this.previousValue, this.currentValue) ?
                        lang_25.stringify(this.key) :
                        (lang_25.stringify(this.key) + '[' + lang_25.stringify(this.previousValue) + '->' +
                            lang_25.stringify(this.currentValue) + ']');
                };
                return KeyValueChangeRecord;
            }());
            exports_80("KeyValueChangeRecord", KeyValueChangeRecord);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/common/directives/ng_style", ['angular2/core', 'angular2/src/facade/lang'], function(exports_81, context_81) {
    "use strict";
    var __moduleName = context_81 && context_81.id;
    var core_55, lang_26;
    var NgStyle;
    return {
        setters:[
            function (core_55_1) {
                core_55 = core_55_1;
            },
            function (lang_26_1) {
                lang_26 = lang_26_1;
            }],
        execute: function() {
            /**
             * The `NgStyle` directive changes styles based on a result of expression evaluation.
             *
             * An expression assigned to the `ngStyle` property must evaluate to an object and the
             * corresponding element styles are updated based on changes to this object. Style names to update
             * are taken from the object's keys, and values - from the corresponding object's values.
             *
             * ### Syntax
             *
             * - `<div [ngStyle]="{'font-style': style}"></div>`
             * - `<div [ngStyle]="styleExp"></div>` - here the `styleExp` must evaluate to an object
             *
             * ### Example ([live demo](http://plnkr.co/edit/YamGS6GkUh9GqWNQhCyM?p=preview)):
             *
             * ```
             * import {Component} from 'angular2/core';
             * import {NgStyle} from 'angular2/common';
             *
             * @Component({
             *  selector: 'ngStyle-example',
             *  template: `
             *    <h1 [ngStyle]="{'font-style': style, 'font-size': size, 'font-weight': weight}">
             *      Change style of this text!
             *    </h1>
             *
             *    <hr>
             *
             *    <label>Italic: <input type="checkbox" (change)="changeStyle($event)"></label>
             *    <label>Bold: <input type="checkbox" (change)="changeWeight($event)"></label>
             *    <label>Size: <input type="text" [value]="size" (change)="size = $event.target.value"></label>
             *  `,
             *  directives: [NgStyle]
             * })
             * export class NgStyleExample {
             *    style = 'normal';
             *    weight = 'normal';
             *    size = '20px';
             *
             *    changeStyle($event: any) {
             *      this.style = $event.target.checked ? 'italic' : 'normal';
             *    }
             *
             *    changeWeight($event: any) {
             *      this.weight = $event.target.checked ? 'bold' : 'normal';
             *    }
             * }
             * ```
             *
             * In this example the `font-style`, `font-size` and `font-weight` styles will be updated
             * based on the `style` property's value changes.
             */
            NgStyle = (function () {
                function NgStyle(_differs, _ngEl, _renderer) {
                    this._differs = _differs;
                    this._ngEl = _ngEl;
                    this._renderer = _renderer;
                }
                Object.defineProperty(NgStyle.prototype, "rawStyle", {
                    set: function (v) {
                        this._rawStyle = v;
                        if (lang_26.isBlank(this._differ) && lang_26.isPresent(v)) {
                            this._differ = this._differs.find(this._rawStyle).create(null);
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                NgStyle.prototype.ngDoCheck = function () {
                    if (lang_26.isPresent(this._differ)) {
                        var changes = this._differ.diff(this._rawStyle);
                        if (lang_26.isPresent(changes)) {
                            this._applyChanges(changes);
                        }
                    }
                };
                NgStyle.prototype._applyChanges = function (changes) {
                    var _this = this;
                    changes.forEachAddedItem(function (record) { _this._setStyle(record.key, record.currentValue); });
                    changes.forEachChangedItem(function (record) { _this._setStyle(record.key, record.currentValue); });
                    changes.forEachRemovedItem(function (record) { _this._setStyle(record.key, null); });
                };
                NgStyle.prototype._setStyle = function (name, val) {
                    this._renderer.setElementStyle(this._ngEl.nativeElement, name, val);
                };
                NgStyle = __decorate([
                    core_55.Directive({ selector: '[ngStyle]', inputs: ['rawStyle: ngStyle'] }), 
                    __metadata('design:paramtypes', [core_55.KeyValueDiffers, core_55.ElementRef, core_55.Renderer])
                ], NgStyle);
                return NgStyle;
            }());
            exports_81("NgStyle", NgStyle);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/common/directives/ng_switch", ['angular2/core', 'angular2/src/facade/lang', 'angular2/src/facade/collection'], function(exports_82, context_82) {
    "use strict";
    var __moduleName = context_82 && context_82.id;
    var core_56, lang_27, collection_13;
    var _WHEN_DEFAULT, SwitchView, NgSwitch, NgSwitchWhen, NgSwitchDefault;
    return {
        setters:[
            function (core_56_1) {
                core_56 = core_56_1;
            },
            function (lang_27_1) {
                lang_27 = lang_27_1;
            },
            function (collection_13_1) {
                collection_13 = collection_13_1;
            }],
        execute: function() {
            _WHEN_DEFAULT = lang_27.CONST_EXPR(new Object());
            SwitchView = (function () {
                function SwitchView(_viewContainerRef, _templateRef) {
                    this._viewContainerRef = _viewContainerRef;
                    this._templateRef = _templateRef;
                }
                SwitchView.prototype.create = function () { this._viewContainerRef.createEmbeddedView(this._templateRef); };
                SwitchView.prototype.destroy = function () { this._viewContainerRef.clear(); };
                return SwitchView;
            }());
            exports_82("SwitchView", SwitchView);
            /**
             * Adds or removes DOM sub-trees when their match expressions match the switch expression.
             *
             * Elements within `NgSwitch` but without `NgSwitchWhen` or `NgSwitchDefault` directives will be
             * preserved at the location as specified in the template.
             *
             * `NgSwitch` simply inserts nested elements based on which match expression matches the value
             * obtained from the evaluated switch expression. In other words, you define a container element
             * (where you place the directive with a switch expression on the
             * **`[ngSwitch]="..."` attribute**), define any inner elements inside of the directive and
             * place a `[ngSwitchWhen]` attribute per element.
             *
             * The `ngSwitchWhen` property is used to inform `NgSwitch` which element to display when the
             * expression is evaluated. If a matching expression is not found via a `ngSwitchWhen` property
             * then an element with the `ngSwitchDefault` attribute is displayed.
             *
             * ### Example ([live demo](http://plnkr.co/edit/DQMTII95CbuqWrl3lYAs?p=preview))
             *
             * ```typescript
             * @Component({
             *   selector: 'app',
             *   template: `
             *     <p>Value = {{value}}</p>
             *     <button (click)="inc()">Increment</button>
             *
             *     <div [ngSwitch]="value">
             *       <p *ngSwitchWhen="'init'">increment to start</p>
             *       <p *ngSwitchWhen="0">0, increment again</p>
             *       <p *ngSwitchWhen="1">1, increment again</p>
             *       <p *ngSwitchWhen="2">2, stop incrementing</p>
             *       <p *ngSwitchDefault>&gt; 2, STOP!</p>
             *     </div>
             *
             *     <!-- alternate syntax -->
             *
             *     <p [ngSwitch]="value">
             *       <template ngSwitchWhen="init">increment to start</template>
             *       <template [ngSwitchWhen]="0">0, increment again</template>
             *       <template [ngSwitchWhen]="1">1, increment again</template>
             *       <template [ngSwitchWhen]="2">2, stop incrementing</template>
             *       <template ngSwitchDefault>&gt; 2, STOP!</template>
             *     </p>
             *   `,
             *   directives: [NgSwitch, NgSwitchWhen, NgSwitchDefault]
             * })
             * export class App {
             *   value = 'init';
             *
             *   inc() {
             *     this.value = this.value === 'init' ? 0 : this.value + 1;
             *   }
             * }
             *
             * bootstrap(App).catch(err => console.error(err));
             * ```
             */
            NgSwitch = (function () {
                function NgSwitch() {
                    this._useDefault = false;
                    this._valueViews = new collection_13.Map();
                    this._activeViews = [];
                }
                Object.defineProperty(NgSwitch.prototype, "ngSwitch", {
                    set: function (value) {
                        // Empty the currently active ViewContainers
                        this._emptyAllActiveViews();
                        // Add the ViewContainers matching the value (with a fallback to default)
                        this._useDefault = false;
                        var views = this._valueViews.get(value);
                        if (lang_27.isBlank(views)) {
                            this._useDefault = true;
                            views = lang_27.normalizeBlank(this._valueViews.get(_WHEN_DEFAULT));
                        }
                        this._activateViews(views);
                        this._switchValue = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                /** @internal */
                NgSwitch.prototype._onWhenValueChanged = function (oldWhen, newWhen, view) {
                    this._deregisterView(oldWhen, view);
                    this._registerView(newWhen, view);
                    if (oldWhen === this._switchValue) {
                        view.destroy();
                        collection_13.ListWrapper.remove(this._activeViews, view);
                    }
                    else if (newWhen === this._switchValue) {
                        if (this._useDefault) {
                            this._useDefault = false;
                            this._emptyAllActiveViews();
                        }
                        view.create();
                        this._activeViews.push(view);
                    }
                    // Switch to default when there is no more active ViewContainers
                    if (this._activeViews.length === 0 && !this._useDefault) {
                        this._useDefault = true;
                        this._activateViews(this._valueViews.get(_WHEN_DEFAULT));
                    }
                };
                /** @internal */
                NgSwitch.prototype._emptyAllActiveViews = function () {
                    var activeContainers = this._activeViews;
                    for (var i = 0; i < activeContainers.length; i++) {
                        activeContainers[i].destroy();
                    }
                    this._activeViews = [];
                };
                /** @internal */
                NgSwitch.prototype._activateViews = function (views) {
                    // TODO(vicb): assert(this._activeViews.length === 0);
                    if (lang_27.isPresent(views)) {
                        for (var i = 0; i < views.length; i++) {
                            views[i].create();
                        }
                        this._activeViews = views;
                    }
                };
                /** @internal */
                NgSwitch.prototype._registerView = function (value, view) {
                    var views = this._valueViews.get(value);
                    if (lang_27.isBlank(views)) {
                        views = [];
                        this._valueViews.set(value, views);
                    }
                    views.push(view);
                };
                /** @internal */
                NgSwitch.prototype._deregisterView = function (value, view) {
                    // `_WHEN_DEFAULT` is used a marker for non-registered whens
                    if (value === _WHEN_DEFAULT)
                        return;
                    var views = this._valueViews.get(value);
                    if (views.length == 1) {
                        this._valueViews.delete(value);
                    }
                    else {
                        collection_13.ListWrapper.remove(views, view);
                    }
                };
                NgSwitch = __decorate([
                    core_56.Directive({ selector: '[ngSwitch]', inputs: ['ngSwitch'] }), 
                    __metadata('design:paramtypes', [])
                ], NgSwitch);
                return NgSwitch;
            }());
            exports_82("NgSwitch", NgSwitch);
            /**
             * Insert the sub-tree when the `ngSwitchWhen` expression evaluates to the same value as the
             * enclosing switch expression.
             *
             * If multiple match expression match the switch expression value, all of them are displayed.
             *
             * See {@link NgSwitch} for more details and example.
             */
            NgSwitchWhen = (function () {
                function NgSwitchWhen(viewContainer, templateRef, ngSwitch) {
                    // `_WHEN_DEFAULT` is used as a marker for a not yet initialized value
                    /** @internal */
                    this._value = _WHEN_DEFAULT;
                    this._switch = ngSwitch;
                    this._view = new SwitchView(viewContainer, templateRef);
                }
                Object.defineProperty(NgSwitchWhen.prototype, "ngSwitchWhen", {
                    set: function (value) {
                        this._switch._onWhenValueChanged(this._value, value, this._view);
                        this._value = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                NgSwitchWhen = __decorate([
                    core_56.Directive({ selector: '[ngSwitchWhen]', inputs: ['ngSwitchWhen'] }),
                    __param(2, core_56.Host()), 
                    __metadata('design:paramtypes', [core_56.ViewContainerRef, core_56.TemplateRef, NgSwitch])
                ], NgSwitchWhen);
                return NgSwitchWhen;
            }());
            exports_82("NgSwitchWhen", NgSwitchWhen);
            /**
             * Default case statements are displayed when no match expression matches the switch expression
             * value.
             *
             * See {@link NgSwitch} for more details and example.
             */
            NgSwitchDefault = (function () {
                function NgSwitchDefault(viewContainer, templateRef, sswitch) {
                    sswitch._registerView(_WHEN_DEFAULT, new SwitchView(viewContainer, templateRef));
                }
                NgSwitchDefault = __decorate([
                    core_56.Directive({ selector: '[ngSwitchDefault]' }),
                    __param(2, core_56.Host()), 
                    __metadata('design:paramtypes', [core_56.ViewContainerRef, core_56.TemplateRef, NgSwitch])
                ], NgSwitchDefault);
                return NgSwitchDefault;
            }());
            exports_82("NgSwitchDefault", NgSwitchDefault);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/common/directives/ng_plural", ['angular2/core', 'angular2/src/facade/lang', 'angular2/src/facade/collection', "test/node_modules/angular2/ts/src/common/directives/ng_switch"], function(exports_83, context_83) {
    "use strict";
    var __moduleName = context_83 && context_83.id;
    var core_57, lang_28, collection_14, ng_switch_1;
    var _CATEGORY_DEFAULT, NgLocalization, NgPluralCase, NgPlural;
    return {
        setters:[
            function (core_57_1) {
                core_57 = core_57_1;
            },
            function (lang_28_1) {
                lang_28 = lang_28_1;
            },
            function (collection_14_1) {
                collection_14 = collection_14_1;
            },
            function (ng_switch_1_1) {
                ng_switch_1 = ng_switch_1_1;
            }],
        execute: function() {
            _CATEGORY_DEFAULT = 'other';
            NgLocalization = (function () {
                function NgLocalization() {
                }
                return NgLocalization;
            }());
            exports_83("NgLocalization", NgLocalization);
            /**
             * `ngPlural` is an i18n directive that displays DOM sub-trees that match the switch expression
             * value, or failing that, DOM sub-trees that match the switch expression's pluralization category.
             *
             * To use this directive, you must provide an extension of `NgLocalization` that maps values to
             * category names. You then define a container element that sets the `[ngPlural]` attribute to a
             * switch expression.
             *    - Inner elements defined with an `[ngPluralCase]` attribute will display based on their
             * expression.
             *    - If `[ngPluralCase]` is set to a value starting with `=`, it will only display if the value
             * matches the switch expression exactly.
             *    - Otherwise, the view will be treated as a "category match", and will only display if exact
             * value matches aren't found and the value maps to its category using the `getPluralCategory`
             * function provided.
             *
             * If no matching views are found for a switch expression, inner elements marked
             * `[ngPluralCase]="other"` will be displayed.
             *
             * ```typescript
             * class MyLocalization extends NgLocalization {
             *    getPluralCategory(value: any) {
             *       if(value < 5) {
             *          return 'few';
             *       }
             *    }
             * }
             *
             * @Component({
             *    selector: 'app',
             *    providers: [provide(NgLocalization, {useClass: MyLocalization})]
             * })
             * @View({
             *   template: `
             *     <p>Value = {{value}}</p>
             *     <button (click)="inc()">Increment</button>
             *
             *     <div [ngPlural]="value">
             *       <template ngPluralCase="=0">there is nothing</template>
             *       <template ngPluralCase="=1">there is one</template>
             *       <template ngPluralCase="few">there are a few</template>
             *       <template ngPluralCase="other">there is some number</template>
             *     </div>
             *   `,
             *   directives: [NgPlural, NgPluralCase]
             * })
             * export class App {
             *   value = 'init';
             *
             *   inc() {
             *     this.value = this.value === 'init' ? 0 : this.value + 1;
             *   }
             * }
             *
             * ```
             */
            NgPluralCase = (function () {
                function NgPluralCase(value, template, viewContainer) {
                    this.value = value;
                    this._view = new ng_switch_1.SwitchView(viewContainer, template);
                }
                NgPluralCase = __decorate([
                    core_57.Directive({ selector: '[ngPluralCase]' }),
                    __param(0, core_57.Attribute('ngPluralCase')), 
                    __metadata('design:paramtypes', [String, core_57.TemplateRef, core_57.ViewContainerRef])
                ], NgPluralCase);
                return NgPluralCase;
            }());
            exports_83("NgPluralCase", NgPluralCase);
            NgPlural = (function () {
                function NgPlural(_localization) {
                    this._localization = _localization;
                    this._caseViews = new collection_14.Map();
                    this.cases = null;
                }
                Object.defineProperty(NgPlural.prototype, "ngPlural", {
                    set: function (value) {
                        this._switchValue = value;
                        this._updateView();
                    },
                    enumerable: true,
                    configurable: true
                });
                NgPlural.prototype.ngAfterContentInit = function () {
                    var _this = this;
                    this.cases.forEach(function (pluralCase) {
                        _this._caseViews.set(_this._formatValue(pluralCase), pluralCase._view);
                    });
                    this._updateView();
                };
                /** @internal */
                NgPlural.prototype._updateView = function () {
                    this._clearViews();
                    var view = this._caseViews.get(this._switchValue);
                    if (!lang_28.isPresent(view))
                        view = this._getCategoryView(this._switchValue);
                    this._activateView(view);
                };
                /** @internal */
                NgPlural.prototype._clearViews = function () {
                    if (lang_28.isPresent(this._activeView))
                        this._activeView.destroy();
                };
                /** @internal */
                NgPlural.prototype._activateView = function (view) {
                    if (!lang_28.isPresent(view))
                        return;
                    this._activeView = view;
                    this._activeView.create();
                };
                /** @internal */
                NgPlural.prototype._getCategoryView = function (value) {
                    var category = this._localization.getPluralCategory(value);
                    var categoryView = this._caseViews.get(category);
                    return lang_28.isPresent(categoryView) ? categoryView : this._caseViews.get(_CATEGORY_DEFAULT);
                };
                /** @internal */
                NgPlural.prototype._isValueView = function (pluralCase) { return pluralCase.value[0] === "="; };
                /** @internal */
                NgPlural.prototype._formatValue = function (pluralCase) {
                    return this._isValueView(pluralCase) ? this._stripValue(pluralCase.value) : pluralCase.value;
                };
                /** @internal */
                NgPlural.prototype._stripValue = function (value) { return lang_28.NumberWrapper.parseInt(value.substring(1), 10); };
                __decorate([
                    core_57.ContentChildren(NgPluralCase), 
                    __metadata('design:type', core_57.QueryList)
                ], NgPlural.prototype, "cases", void 0);
                __decorate([
                    core_57.Input(), 
                    __metadata('design:type', Number), 
                    __metadata('design:paramtypes', [Number])
                ], NgPlural.prototype, "ngPlural", null);
                NgPlural = __decorate([
                    core_57.Directive({ selector: '[ngPlural]' }), 
                    __metadata('design:paramtypes', [NgLocalization])
                ], NgPlural);
                return NgPlural;
            }());
            exports_83("NgPlural", NgPlural);
        }
    }
});
// TS does not have Observables
System.register("test/node_modules/angular2/ts/src/common/directives/observable_list_diff", [], function(exports_84, context_84) {
    "use strict";
    var __moduleName = context_84 && context_84.id;
    var workaround_empty_observable_list_diff;
    return {
        setters:[],
        execute: function() {
        }
    }
});
System.register("test/node_modules/angular2/ts/src/common/directives/core_directives", ['angular2/src/facade/lang', "test/node_modules/angular2/ts/src/common/directives/ng_class", "test/node_modules/angular2/ts/src/common/directives/ng_for", "test/node_modules/angular2/ts/src/common/directives/ng_if", "test/node_modules/angular2/ts/src/common/directives/ng_style", "test/node_modules/angular2/ts/src/common/directives/ng_switch", "test/node_modules/angular2/ts/src/common/directives/ng_plural"], function(exports_85, context_85) {
    "use strict";
    var __moduleName = context_85 && context_85.id;
    var lang_29, ng_class_1, ng_for_1, ng_if_1, ng_style_1, ng_switch_2, ng_plural_1;
    var CORE_DIRECTIVES;
    return {
        setters:[
            function (lang_29_1) {
                lang_29 = lang_29_1;
            },
            function (ng_class_1_1) {
                ng_class_1 = ng_class_1_1;
            },
            function (ng_for_1_1) {
                ng_for_1 = ng_for_1_1;
            },
            function (ng_if_1_1) {
                ng_if_1 = ng_if_1_1;
            },
            function (ng_style_1_1) {
                ng_style_1 = ng_style_1_1;
            },
            function (ng_switch_2_1) {
                ng_switch_2 = ng_switch_2_1;
            },
            function (ng_plural_1_1) {
                ng_plural_1 = ng_plural_1_1;
            }],
        execute: function() {
            /**
             * A collection of Angular core directives that are likely to be used in each and every Angular
             * application.
             *
             * This collection can be used to quickly enumerate all the built-in directives in the `directives`
             * property of the `@Component` annotation.
             *
             * ### Example ([live demo](http://plnkr.co/edit/yakGwpCdUkg0qfzX5m8g?p=preview))
             *
             * Instead of writing:
             *
             * ```typescript
             * import {NgClass, NgIf, NgFor, NgSwitch, NgSwitchWhen, NgSwitchDefault} from 'angular2/common';
             * import {OtherDirective} from './myDirectives';
             *
             * @Component({
             *   selector: 'my-component',
             *   templateUrl: 'myComponent.html',
             *   directives: [NgClass, NgIf, NgFor, NgSwitch, NgSwitchWhen, NgSwitchDefault, OtherDirective]
             * })
             * export class MyComponent {
             *   ...
             * }
             * ```
             * one could import all the core directives at once:
             *
             * ```typescript
             * import {CORE_DIRECTIVES} from 'angular2/common';
             * import {OtherDirective} from './myDirectives';
             *
             * @Component({
             *   selector: 'my-component',
             *   templateUrl: 'myComponent.html',
             *   directives: [CORE_DIRECTIVES, OtherDirective]
             * })
             * export class MyComponent {
             *   ...
             * }
             * ```
             */
            exports_85("CORE_DIRECTIVES", CORE_DIRECTIVES = lang_29.CONST_EXPR([
                ng_class_1.NgClass,
                ng_for_1.NgFor,
                ng_if_1.NgIf,
                ng_style_1.NgStyle,
                ng_switch_2.NgSwitch,
                ng_switch_2.NgSwitchWhen,
                ng_switch_2.NgSwitchDefault,
                ng_plural_1.NgPlural,
                ng_plural_1.NgPluralCase
            ]));
        }
    }
});
System.register("test/node_modules/angular2/ts/src/common/directives", ["test/node_modules/angular2/ts/src/common/directives/ng_class", "test/node_modules/angular2/ts/src/common/directives/ng_for", "test/node_modules/angular2/ts/src/common/directives/ng_if", "test/node_modules/angular2/ts/src/common/directives/ng_style", "test/node_modules/angular2/ts/src/common/directives/ng_switch", "test/node_modules/angular2/ts/src/common/directives/ng_plural", "test/node_modules/angular2/ts/src/common/directives/observable_list_diff", "test/node_modules/angular2/ts/src/common/directives/core_directives"], function(exports_86, context_86) {
    "use strict";
    var __moduleName = context_86 && context_86.id;
    var exportedNames_1 = {
        'NgClass': true,
        'NgFor': true,
        'NgIf': true,
        'NgStyle': true,
        'NgSwitch': true,
        'NgSwitchWhen': true,
        'NgSwitchDefault': true,
        'NgPlural': true,
        'NgPluralCase': true,
        'NgLocalization': true,
        'CORE_DIRECTIVES': true
    };
    function exportStar_1(m) {
        var exports = {};
        for(var n in m) {
            if (n !== "default"&& !exportedNames_1.hasOwnProperty(n)) exports[n] = m[n];
        }
        exports_86(exports);
    }
    return {
        setters:[
            function (ng_class_2_1) {
                exports_86({
                    "NgClass": ng_class_2_1["NgClass"]
                });
            },
            function (ng_for_2_1) {
                exports_86({
                    "NgFor": ng_for_2_1["NgFor"]
                });
            },
            function (ng_if_2_1) {
                exports_86({
                    "NgIf": ng_if_2_1["NgIf"]
                });
            },
            function (ng_style_2_1) {
                exports_86({
                    "NgStyle": ng_style_2_1["NgStyle"]
                });
            },
            function (ng_switch_3_1) {
                exports_86({
                    "NgSwitch": ng_switch_3_1["NgSwitch"],
                    "NgSwitchWhen": ng_switch_3_1["NgSwitchWhen"],
                    "NgSwitchDefault": ng_switch_3_1["NgSwitchDefault"]
                });
            },
            function (ng_plural_2_1) {
                exports_86({
                    "NgPlural": ng_plural_2_1["NgPlural"],
                    "NgPluralCase": ng_plural_2_1["NgPluralCase"],
                    "NgLocalization": ng_plural_2_1["NgLocalization"]
                });
            },
            function (observable_list_diff_1_1) {
                exportStar_1(observable_list_diff_1_1);
            },
            function (core_directives_1_1) {
                exports_86({
                    "CORE_DIRECTIVES": core_directives_1_1["CORE_DIRECTIVES"]
                });
            }],
        execute: function() {
        }
    }
});
System.register("test/node_modules/angular2/ts/src/common/forms/validators", ['angular2/src/facade/lang', 'angular2/src/facade/promise', 'angular2/src/facade/async', 'angular2/src/facade/collection', 'angular2/core'], function(exports_87, context_87) {
    "use strict";
    var __moduleName = context_87 && context_87.id;
    var lang_30, promise_1, async_2, collection_15, core_58;
    var NG_VALIDATORS, NG_ASYNC_VALIDATORS, Validators;
    function _convertToPromise(obj) {
        return promise_1.PromiseWrapper.isPromise(obj) ? obj : async_2.ObservableWrapper.toPromise(obj);
    }
    function _executeValidators(control, validators) {
        return validators.map(function (v) { return v(control); });
    }
    function _executeAsyncValidators(control, validators) {
        return validators.map(function (v) { return v(control); });
    }
    function _mergeErrors(arrayOfErrors) {
        var res = arrayOfErrors.reduce(function (res, errors) {
            return lang_30.isPresent(errors) ? collection_15.StringMapWrapper.merge(res, errors) : res;
        }, {});
        return collection_15.StringMapWrapper.isEmpty(res) ? null : res;
    }
    return {
        setters:[
            function (lang_30_1) {
                lang_30 = lang_30_1;
            },
            function (promise_1_1) {
                promise_1 = promise_1_1;
            },
            function (async_2_1) {
                async_2 = async_2_1;
            },
            function (collection_15_1) {
                collection_15 = collection_15_1;
            },
            function (core_58_1) {
                core_58 = core_58_1;
            }],
        execute: function() {
            /**
             * Providers for validators to be used for {@link Control}s in a form.
             *
             * Provide this using `multi: true` to add validators.
             *
             * ### Example
             *
             * {@example core/forms/ts/ng_validators/ng_validators.ts region='ng_validators'}
             */
            exports_87("NG_VALIDATORS", NG_VALIDATORS = lang_30.CONST_EXPR(new core_58.OpaqueToken("NgValidators")));
            /**
             * Providers for asynchronous validators to be used for {@link Control}s
             * in a form.
             *
             * Provide this using `multi: true` to add validators.
             *
             * See {@link NG_VALIDATORS} for more details.
             */
            exports_87("NG_ASYNC_VALIDATORS", NG_ASYNC_VALIDATORS = lang_30.CONST_EXPR(new core_58.OpaqueToken("NgAsyncValidators")));
            /**
             * Provides a set of validators used by form controls.
             *
             * A validator is a function that processes a {@link Control} or collection of
             * controls and returns a map of errors. A null map means that validation has passed.
             *
             * ### Example
             *
             * ```typescript
             * var loginControl = new Control("", Validators.required)
             * ```
             */
            Validators = (function () {
                function Validators() {
                }
                /**
                 * Validator that requires controls to have a non-empty value.
                 */
                Validators.required = function (control) {
                    return lang_30.isBlank(control.value) || (lang_30.isString(control.value) && control.value == "") ?
                        { "required": true } :
                        null;
                };
                /**
                 * Validator that requires controls to have a value of a minimum length.
                 */
                Validators.minLength = function (minLength) {
                    return function (control) {
                        if (lang_30.isPresent(Validators.required(control)))
                            return null;
                        var v = control.value;
                        return v.length < minLength ?
                            { "minlength": { "requiredLength": minLength, "actualLength": v.length } } :
                            null;
                    };
                };
                /**
                 * Validator that requires controls to have a value of a maximum length.
                 */
                Validators.maxLength = function (maxLength) {
                    return function (control) {
                        if (lang_30.isPresent(Validators.required(control)))
                            return null;
                        var v = control.value;
                        return v.length > maxLength ?
                            { "maxlength": { "requiredLength": maxLength, "actualLength": v.length } } :
                            null;
                    };
                };
                /**
                 * Validator that requires a control to match a regex to its value.
                 */
                Validators.pattern = function (pattern) {
                    return function (control) {
                        if (lang_30.isPresent(Validators.required(control)))
                            return null;
                        var regex = new RegExp("^" + pattern + "$");
                        var v = control.value;
                        return regex.test(v) ? null :
                            { "pattern": { "requiredPattern": "^" + pattern + "$", "actualValue": v } };
                    };
                };
                /**
                 * No-op validator.
                 */
                Validators.nullValidator = function (c) { return null; };
                /**
                 * Compose multiple validators into a single function that returns the union
                 * of the individual error maps.
                 */
                Validators.compose = function (validators) {
                    if (lang_30.isBlank(validators))
                        return null;
                    var presentValidators = validators.filter(lang_30.isPresent);
                    if (presentValidators.length == 0)
                        return null;
                    return function (control) {
                        return _mergeErrors(_executeValidators(control, presentValidators));
                    };
                };
                Validators.composeAsync = function (validators) {
                    if (lang_30.isBlank(validators))
                        return null;
                    var presentValidators = validators.filter(lang_30.isPresent);
                    if (presentValidators.length == 0)
                        return null;
                    return function (control) {
                        var promises = _executeAsyncValidators(control, presentValidators).map(_convertToPromise);
                        return promise_1.PromiseWrapper.all(promises).then(_mergeErrors);
                    };
                };
                return Validators;
            }());
            exports_87("Validators", Validators);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/common/forms/directives/validators", ['angular2/core', 'angular2/src/facade/lang', "test/node_modules/angular2/ts/src/common/forms/validators"], function(exports_88, context_88) {
    "use strict";
    var __moduleName = context_88 && context_88.id;
    var core_59, lang_31, validators_1, lang_32;
    var REQUIRED_VALIDATOR, RequiredValidator, MIN_LENGTH_VALIDATOR, MinLengthValidator, MAX_LENGTH_VALIDATOR, MaxLengthValidator, PATTERN_VALIDATOR, PatternValidator;
    return {
        setters:[
            function (core_59_1) {
                core_59 = core_59_1;
            },
            function (lang_31_1) {
                lang_31 = lang_31_1;
                lang_32 = lang_31_1;
            },
            function (validators_1_1) {
                validators_1 = validators_1_1;
            }],
        execute: function() {
            REQUIRED_VALIDATOR = lang_31.CONST_EXPR(new core_59.Provider(validators_1.NG_VALIDATORS, { useValue: validators_1.Validators.required, multi: true }));
            /**
             * A Directive that adds the `required` validator to any controls marked with the
             * `required` attribute, via the {@link NG_VALIDATORS} binding.
             *
             * ### Example
             *
             * ```
             * <input ngControl="fullName" required>
             * ```
             */
            RequiredValidator = (function () {
                function RequiredValidator() {
                }
                RequiredValidator = __decorate([
                    core_59.Directive({
                        selector: '[required][ngControl],[required][ngFormControl],[required][ngModel]',
                        providers: [REQUIRED_VALIDATOR]
                    }), 
                    __metadata('design:paramtypes', [])
                ], RequiredValidator);
                return RequiredValidator;
            }());
            exports_88("RequiredValidator", RequiredValidator);
            /**
             * Provivder which adds {@link MinLengthValidator} to {@link NG_VALIDATORS}.
             *
             * ## Example:
             *
             * {@example common/forms/ts/validators/validators.ts region='min'}
             */
            MIN_LENGTH_VALIDATOR = lang_31.CONST_EXPR(new core_59.Provider(validators_1.NG_VALIDATORS, { useExisting: core_59.forwardRef(function () { return MinLengthValidator; }), multi: true }));
            /**
             * A directive which installs the {@link MinLengthValidator} for any `ngControl`,
             * `ngFormControl`, or control with `ngModel` that also has a `minlength` attribute.
             */
            MinLengthValidator = (function () {
                function MinLengthValidator(minLength) {
                    this._validator = validators_1.Validators.minLength(lang_32.NumberWrapper.parseInt(minLength, 10));
                }
                MinLengthValidator.prototype.validate = function (c) { return this._validator(c); };
                MinLengthValidator = __decorate([
                    core_59.Directive({
                        selector: '[minlength][ngControl],[minlength][ngFormControl],[minlength][ngModel]',
                        providers: [MIN_LENGTH_VALIDATOR]
                    }),
                    __param(0, core_59.Attribute("minlength")), 
                    __metadata('design:paramtypes', [String])
                ], MinLengthValidator);
                return MinLengthValidator;
            }());
            exports_88("MinLengthValidator", MinLengthValidator);
            /**
             * Provider which adds {@link MaxLengthValidator} to {@link NG_VALIDATORS}.
             *
             * ## Example:
             *
             * {@example common/forms/ts/validators/validators.ts region='max'}
             */
            MAX_LENGTH_VALIDATOR = lang_31.CONST_EXPR(new core_59.Provider(validators_1.NG_VALIDATORS, { useExisting: core_59.forwardRef(function () { return MaxLengthValidator; }), multi: true }));
            /**
             * A directive which installs the {@link MaxLengthValidator} for any `ngControl, `ngFormControl`,
             * or control with `ngModel` that also has a `maxlength` attribute.
             */
            MaxLengthValidator = (function () {
                function MaxLengthValidator(maxLength) {
                    this._validator = validators_1.Validators.maxLength(lang_32.NumberWrapper.parseInt(maxLength, 10));
                }
                MaxLengthValidator.prototype.validate = function (c) { return this._validator(c); };
                MaxLengthValidator = __decorate([
                    core_59.Directive({
                        selector: '[maxlength][ngControl],[maxlength][ngFormControl],[maxlength][ngModel]',
                        providers: [MAX_LENGTH_VALIDATOR]
                    }),
                    __param(0, core_59.Attribute("maxlength")), 
                    __metadata('design:paramtypes', [String])
                ], MaxLengthValidator);
                return MaxLengthValidator;
            }());
            exports_88("MaxLengthValidator", MaxLengthValidator);
            /**
             * A Directive that adds the `pattern` validator to any controls marked with the
             * `pattern` attribute, via the {@link NG_VALIDATORS} binding. Uses attribute value
             * as the regex to validate Control value against.  Follows pattern attribute
             * semantics; i.e. regex must match entire Control value.
             *
             * ### Example
             *
             * ```
             * <input [ngControl]="fullName" pattern="[a-zA-Z ]*">
             * ```
             */
            PATTERN_VALIDATOR = lang_31.CONST_EXPR(new core_59.Provider(validators_1.NG_VALIDATORS, { useExisting: core_59.forwardRef(function () { return PatternValidator; }), multi: true }));
            PatternValidator = (function () {
                function PatternValidator(pattern) {
                    this._validator = validators_1.Validators.pattern(pattern);
                }
                PatternValidator.prototype.validate = function (c) { return this._validator(c); };
                PatternValidator = __decorate([
                    core_59.Directive({
                        selector: '[pattern][ngControl],[pattern][ngFormControl],[pattern][ngModel]',
                        providers: [PATTERN_VALIDATOR]
                    }),
                    __param(0, core_59.Attribute("pattern")), 
                    __metadata('design:paramtypes', [String])
                ], PatternValidator);
                return PatternValidator;
            }());
            exports_88("PatternValidator", PatternValidator);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/common/forms/model", ['angular2/src/facade/lang', 'angular2/src/facade/async', 'angular2/src/facade/promise', 'angular2/src/facade/collection'], function(exports_89, context_89) {
    "use strict";
    var __moduleName = context_89 && context_89.id;
    var lang_33, async_3, promise_2, collection_16;
    var VALID, INVALID, PENDING, AbstractControl, Control, ControlGroup, ControlArray;
    function isControl(control) {
        return control instanceof AbstractControl;
    }
    exports_89("isControl", isControl);
    function _find(control, path) {
        if (lang_33.isBlank(path))
            return null;
        if (!(path instanceof Array)) {
            path = path.split("/");
        }
        if (path instanceof Array && collection_16.ListWrapper.isEmpty(path))
            return null;
        return path
            .reduce(function (v, name) {
            if (v instanceof ControlGroup) {
                return lang_33.isPresent(v.controls[name]) ? v.controls[name] : null;
            }
            else if (v instanceof ControlArray) {
                var index = name;
                return lang_33.isPresent(v.at(index)) ? v.at(index) : null;
            }
            else {
                return null;
            }
        }, control);
    }
    function toObservable(r) {
        return promise_2.PromiseWrapper.isPromise(r) ? async_3.ObservableWrapper.fromPromise(r) : r;
    }
    return {
        setters:[
            function (lang_33_1) {
                lang_33 = lang_33_1;
            },
            function (async_3_1) {
                async_3 = async_3_1;
            },
            function (promise_2_1) {
                promise_2 = promise_2_1;
            },
            function (collection_16_1) {
                collection_16 = collection_16_1;
            }],
        execute: function() {
            /**
             * Indicates that a Control is valid, i.e. that no errors exist in the input value.
             */
            exports_89("VALID", VALID = "VALID");
            /**
             * Indicates that a Control is invalid, i.e. that an error exists in the input value.
             */
            exports_89("INVALID", INVALID = "INVALID");
            /**
             * Indicates that a Control is pending, i.e. that async validation is occurring and
             * errors are not yet available for the input value.
             */
            exports_89("PENDING", PENDING = "PENDING");
            /**
             *
             */
            AbstractControl = (function () {
                function AbstractControl(validator, asyncValidator) {
                    this.validator = validator;
                    this.asyncValidator = asyncValidator;
                    this._pristine = true;
                    this._touched = false;
                }
                Object.defineProperty(AbstractControl.prototype, "value", {
                    get: function () { return this._value; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AbstractControl.prototype, "status", {
                    get: function () { return this._status; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AbstractControl.prototype, "valid", {
                    get: function () { return this._status === VALID; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AbstractControl.prototype, "errors", {
                    /**
                     * Returns the errors of this control.
                     */
                    get: function () { return this._errors; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AbstractControl.prototype, "pristine", {
                    get: function () { return this._pristine; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AbstractControl.prototype, "dirty", {
                    get: function () { return !this.pristine; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AbstractControl.prototype, "touched", {
                    get: function () { return this._touched; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AbstractControl.prototype, "untouched", {
                    get: function () { return !this._touched; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AbstractControl.prototype, "valueChanges", {
                    get: function () { return this._valueChanges; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AbstractControl.prototype, "statusChanges", {
                    get: function () { return this._statusChanges; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AbstractControl.prototype, "pending", {
                    get: function () { return this._status == PENDING; },
                    enumerable: true,
                    configurable: true
                });
                AbstractControl.prototype.markAsTouched = function () { this._touched = true; };
                AbstractControl.prototype.markAsDirty = function (_a) {
                    var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
                    onlySelf = lang_33.normalizeBool(onlySelf);
                    this._pristine = false;
                    if (lang_33.isPresent(this._parent) && !onlySelf) {
                        this._parent.markAsDirty({ onlySelf: onlySelf });
                    }
                };
                AbstractControl.prototype.markAsPending = function (_a) {
                    var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
                    onlySelf = lang_33.normalizeBool(onlySelf);
                    this._status = PENDING;
                    if (lang_33.isPresent(this._parent) && !onlySelf) {
                        this._parent.markAsPending({ onlySelf: onlySelf });
                    }
                };
                AbstractControl.prototype.setParent = function (parent) { this._parent = parent; };
                AbstractControl.prototype.updateValueAndValidity = function (_a) {
                    var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
                    onlySelf = lang_33.normalizeBool(onlySelf);
                    emitEvent = lang_33.isPresent(emitEvent) ? emitEvent : true;
                    this._updateValue();
                    this._errors = this._runValidator();
                    this._status = this._calculateStatus();
                    if (this._status == VALID || this._status == PENDING) {
                        this._runAsyncValidator(emitEvent);
                    }
                    if (emitEvent) {
                        async_3.ObservableWrapper.callEmit(this._valueChanges, this._value);
                        async_3.ObservableWrapper.callEmit(this._statusChanges, this._status);
                    }
                    if (lang_33.isPresent(this._parent) && !onlySelf) {
                        this._parent.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });
                    }
                };
                AbstractControl.prototype._runValidator = function () {
                    return lang_33.isPresent(this.validator) ? this.validator(this) : null;
                };
                AbstractControl.prototype._runAsyncValidator = function (emitEvent) {
                    var _this = this;
                    if (lang_33.isPresent(this.asyncValidator)) {
                        this._status = PENDING;
                        this._cancelExistingSubscription();
                        var obs = toObservable(this.asyncValidator(this));
                        this._asyncValidationSubscription = async_3.ObservableWrapper.subscribe(obs, function (res) { return _this.setErrors(res, { emitEvent: emitEvent }); });
                    }
                };
                AbstractControl.prototype._cancelExistingSubscription = function () {
                    if (lang_33.isPresent(this._asyncValidationSubscription)) {
                        async_3.ObservableWrapper.dispose(this._asyncValidationSubscription);
                    }
                };
                /**
                 * Sets errors on a control.
                 *
                 * This is used when validations are run not automatically, but manually by the user.
                 *
                 * Calling `setErrors` will also update the validity of the parent control.
                 *
                 * ## Usage
                 *
                 * ```
                 * var login = new Control("someLogin");
                 * login.setErrors({
                 *   "notUnique": true
                 * });
                 *
                 * expect(login.valid).toEqual(false);
                 * expect(login.errors).toEqual({"notUnique": true});
                 *
                 * login.updateValue("someOtherLogin");
                 *
                 * expect(login.valid).toEqual(true);
                 * ```
                 */
                AbstractControl.prototype.setErrors = function (errors, _a) {
                    var emitEvent = (_a === void 0 ? {} : _a).emitEvent;
                    emitEvent = lang_33.isPresent(emitEvent) ? emitEvent : true;
                    this._errors = errors;
                    this._status = this._calculateStatus();
                    if (emitEvent) {
                        async_3.ObservableWrapper.callEmit(this._statusChanges, this._status);
                    }
                    if (lang_33.isPresent(this._parent)) {
                        this._parent._updateControlsErrors();
                    }
                };
                AbstractControl.prototype.find = function (path) { return _find(this, path); };
                AbstractControl.prototype.getError = function (errorCode, path) {
                    if (path === void 0) { path = null; }
                    var control = lang_33.isPresent(path) && !collection_16.ListWrapper.isEmpty(path) ? this.find(path) : this;
                    if (lang_33.isPresent(control) && lang_33.isPresent(control._errors)) {
                        return collection_16.StringMapWrapper.get(control._errors, errorCode);
                    }
                    else {
                        return null;
                    }
                };
                AbstractControl.prototype.hasError = function (errorCode, path) {
                    if (path === void 0) { path = null; }
                    return lang_33.isPresent(this.getError(errorCode, path));
                };
                Object.defineProperty(AbstractControl.prototype, "root", {
                    get: function () {
                        var x = this;
                        while (lang_33.isPresent(x._parent)) {
                            x = x._parent;
                        }
                        return x;
                    },
                    enumerable: true,
                    configurable: true
                });
                /** @internal */
                AbstractControl.prototype._updateControlsErrors = function () {
                    this._status = this._calculateStatus();
                    if (lang_33.isPresent(this._parent)) {
                        this._parent._updateControlsErrors();
                    }
                };
                /** @internal */
                AbstractControl.prototype._initObservables = function () {
                    this._valueChanges = new async_3.EventEmitter();
                    this._statusChanges = new async_3.EventEmitter();
                };
                AbstractControl.prototype._calculateStatus = function () {
                    if (lang_33.isPresent(this._errors))
                        return INVALID;
                    if (this._anyControlsHaveStatus(PENDING))
                        return PENDING;
                    if (this._anyControlsHaveStatus(INVALID))
                        return INVALID;
                    return VALID;
                };
                return AbstractControl;
            }());
            exports_89("AbstractControl", AbstractControl);
            /**
             * Defines a part of a form that cannot be divided into other controls. `Control`s have values and
             * validation state, which is determined by an optional validation function.
             *
             * `Control` is one of the three fundamental building blocks used to define forms in Angular, along
             * with {@link ControlGroup} and {@link ControlArray}.
             *
             * ## Usage
             *
             * By default, a `Control` is created for every `<input>` or other form component.
             * With {@link NgFormControl} or {@link NgFormModel} an existing {@link Control} can be
             * bound to a DOM element instead. This `Control` can be configured with a custom
             * validation function.
             *
             * ### Example ([live demo](http://plnkr.co/edit/23DESOpbNnBpBHZt1BR4?p=preview))
             */
            Control = (function (_super) {
                __extends(Control, _super);
                function Control(value, validator, asyncValidator) {
                    if (value === void 0) { value = null; }
                    if (validator === void 0) { validator = null; }
                    if (asyncValidator === void 0) { asyncValidator = null; }
                    _super.call(this, validator, asyncValidator);
                    this._value = value;
                    this.updateValueAndValidity({ onlySelf: true, emitEvent: false });
                    this._initObservables();
                }
                /**
                 * Set the value of the control to `value`.
                 *
                 * If `onlySelf` is `true`, this change will only affect the validation of this `Control`
                 * and not its parent component. If `emitEvent` is `true`, this change will cause a
                 * `valueChanges` event on the `Control` to be emitted. Both of these options default to
                 * `false`.
                 *
                 * If `emitModelToViewChange` is `true`, the view will be notified about the new value
                 * via an `onChange` event. This is the default behavior if `emitModelToViewChange` is not
                 * specified.
                 */
                Control.prototype.updateValue = function (value, _a) {
                    var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent, emitModelToViewChange = _b.emitModelToViewChange;
                    emitModelToViewChange = lang_33.isPresent(emitModelToViewChange) ? emitModelToViewChange : true;
                    this._value = value;
                    if (lang_33.isPresent(this._onChange) && emitModelToViewChange)
                        this._onChange(this._value);
                    this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });
                };
                /**
                 * @internal
                 */
                Control.prototype._updateValue = function () { };
                /**
                 * @internal
                 */
                Control.prototype._anyControlsHaveStatus = function (status) { return false; };
                /**
                 * Register a listener for change events.
                 */
                Control.prototype.registerOnChange = function (fn) { this._onChange = fn; };
                return Control;
            }(AbstractControl));
            exports_89("Control", Control);
            /**
             * Defines a part of a form, of fixed length, that can contain other controls.
             *
             * A `ControlGroup` aggregates the values and errors of each {@link Control} in the group. Thus, if
             * one of the controls in a group is invalid, the entire group is invalid. Similarly, if a control
             * changes its value, the entire group changes as well.
             *
             * `ControlGroup` is one of the three fundamental building blocks used to define forms in Angular,
             * along with {@link Control} and {@link ControlArray}. {@link ControlArray} can also contain other
             * controls, but is of variable length.
             *
             * ### Example ([live demo](http://plnkr.co/edit/23DESOpbNnBpBHZt1BR4?p=preview))
             */
            ControlGroup = (function (_super) {
                __extends(ControlGroup, _super);
                function ControlGroup(controls, optionals, validator, asyncValidator) {
                    if (optionals === void 0) { optionals = null; }
                    if (validator === void 0) { validator = null; }
                    if (asyncValidator === void 0) { asyncValidator = null; }
                    _super.call(this, validator, asyncValidator);
                    this.controls = controls;
                    this._optionals = lang_33.isPresent(optionals) ? optionals : {};
                    this._initObservables();
                    this._setParentForControls();
                    this.updateValueAndValidity({ onlySelf: true, emitEvent: false });
                }
                /**
                 * Add a control to this group.
                 */
                ControlGroup.prototype.addControl = function (name, control) {
                    this.controls[name] = control;
                    control.setParent(this);
                };
                /**
                 * Remove a control from this group.
                 */
                ControlGroup.prototype.removeControl = function (name) { collection_16.StringMapWrapper.delete(this.controls, name); };
                /**
                 * Mark the named control as non-optional.
                 */
                ControlGroup.prototype.include = function (controlName) {
                    collection_16.StringMapWrapper.set(this._optionals, controlName, true);
                    this.updateValueAndValidity();
                };
                /**
                 * Mark the named control as optional.
                 */
                ControlGroup.prototype.exclude = function (controlName) {
                    collection_16.StringMapWrapper.set(this._optionals, controlName, false);
                    this.updateValueAndValidity();
                };
                /**
                 * Check whether there is a control with the given name in the group.
                 */
                ControlGroup.prototype.contains = function (controlName) {
                    var c = collection_16.StringMapWrapper.contains(this.controls, controlName);
                    return c && this._included(controlName);
                };
                /** @internal */
                ControlGroup.prototype._setParentForControls = function () {
                    var _this = this;
                    collection_16.StringMapWrapper.forEach(this.controls, function (control, name) { control.setParent(_this); });
                };
                /** @internal */
                ControlGroup.prototype._updateValue = function () { this._value = this._reduceValue(); };
                /** @internal */
                ControlGroup.prototype._anyControlsHaveStatus = function (status) {
                    var _this = this;
                    var res = false;
                    collection_16.StringMapWrapper.forEach(this.controls, function (control, name) {
                        res = res || (_this.contains(name) && control.status == status);
                    });
                    return res;
                };
                /** @internal */
                ControlGroup.prototype._reduceValue = function () {
                    return this._reduceChildren({}, function (acc, control, name) {
                        acc[name] = control.value;
                        return acc;
                    });
                };
                /** @internal */
                ControlGroup.prototype._reduceChildren = function (initValue, fn) {
                    var _this = this;
                    var res = initValue;
                    collection_16.StringMapWrapper.forEach(this.controls, function (control, name) {
                        if (_this._included(name)) {
                            res = fn(res, control, name);
                        }
                    });
                    return res;
                };
                /** @internal */
                ControlGroup.prototype._included = function (controlName) {
                    var isOptional = collection_16.StringMapWrapper.contains(this._optionals, controlName);
                    return !isOptional || collection_16.StringMapWrapper.get(this._optionals, controlName);
                };
                return ControlGroup;
            }(AbstractControl));
            exports_89("ControlGroup", ControlGroup);
            /**
             * Defines a part of a form, of variable length, that can contain other controls.
             *
             * A `ControlArray` aggregates the values and errors of each {@link Control} in the group. Thus, if
             * one of the controls in a group is invalid, the entire group is invalid. Similarly, if a control
             * changes its value, the entire group changes as well.
             *
             * `ControlArray` is one of the three fundamental building blocks used to define forms in Angular,
             * along with {@link Control} and {@link ControlGroup}. {@link ControlGroup} can also contain
             * other controls, but is of fixed length.
             *
             * ## Adding or removing controls
             *
             * To change the controls in the array, use the `push`, `insert`, or `removeAt` methods
             * in `ControlArray` itself. These methods ensure the controls are properly tracked in the
             * form's hierarchy. Do not modify the array of `AbstractControl`s used to instantiate
             * the `ControlArray` directly, as that will result in strange and unexpected behavior such
             * as broken change detection.
             *
             * ### Example ([live demo](http://plnkr.co/edit/23DESOpbNnBpBHZt1BR4?p=preview))
             */
            ControlArray = (function (_super) {
                __extends(ControlArray, _super);
                function ControlArray(controls, validator, asyncValidator) {
                    if (validator === void 0) { validator = null; }
                    if (asyncValidator === void 0) { asyncValidator = null; }
                    _super.call(this, validator, asyncValidator);
                    this.controls = controls;
                    this._initObservables();
                    this._setParentForControls();
                    this.updateValueAndValidity({ onlySelf: true, emitEvent: false });
                }
                /**
                 * Get the {@link AbstractControl} at the given `index` in the array.
                 */
                ControlArray.prototype.at = function (index) { return this.controls[index]; };
                /**
                 * Insert a new {@link AbstractControl} at the end of the array.
                 */
                ControlArray.prototype.push = function (control) {
                    this.controls.push(control);
                    control.setParent(this);
                    this.updateValueAndValidity();
                };
                /**
                 * Insert a new {@link AbstractControl} at the given `index` in the array.
                 */
                ControlArray.prototype.insert = function (index, control) {
                    collection_16.ListWrapper.insert(this.controls, index, control);
                    control.setParent(this);
                    this.updateValueAndValidity();
                };
                /**
                 * Remove the control at the given `index` in the array.
                 */
                ControlArray.prototype.removeAt = function (index) {
                    collection_16.ListWrapper.removeAt(this.controls, index);
                    this.updateValueAndValidity();
                };
                Object.defineProperty(ControlArray.prototype, "length", {
                    /**
                     * Length of the control array.
                     */
                    get: function () { return this.controls.length; },
                    enumerable: true,
                    configurable: true
                });
                /** @internal */
                ControlArray.prototype._updateValue = function () { this._value = this.controls.map(function (control) { return control.value; }); };
                /** @internal */
                ControlArray.prototype._anyControlsHaveStatus = function (status) {
                    return this.controls.some(function (c) { return c.status == status; });
                };
                /** @internal */
                ControlArray.prototype._setParentForControls = function () {
                    var _this = this;
                    this.controls.forEach(function (control) { control.setParent(_this); });
                };
                return ControlArray;
            }(AbstractControl));
            exports_89("ControlArray", ControlArray);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/common/forms/directives/abstract_control_directive", ['angular2/src/facade/lang', 'angular2/src/facade/exceptions'], function(exports_90, context_90) {
    "use strict";
    var __moduleName = context_90 && context_90.id;
    var lang_34, exceptions_10;
    var AbstractControlDirective;
    return {
        setters:[
            function (lang_34_1) {
                lang_34 = lang_34_1;
            },
            function (exceptions_10_1) {
                exceptions_10 = exceptions_10_1;
            }],
        execute: function() {
            /**
             * Base class for control directives.
             *
             * Only used internally in the forms module.
             */
            AbstractControlDirective = (function () {
                function AbstractControlDirective() {
                }
                Object.defineProperty(AbstractControlDirective.prototype, "control", {
                    get: function () { return exceptions_10.unimplemented(); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AbstractControlDirective.prototype, "value", {
                    get: function () { return lang_34.isPresent(this.control) ? this.control.value : null; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AbstractControlDirective.prototype, "valid", {
                    get: function () { return lang_34.isPresent(this.control) ? this.control.valid : null; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AbstractControlDirective.prototype, "errors", {
                    get: function () {
                        return lang_34.isPresent(this.control) ? this.control.errors : null;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AbstractControlDirective.prototype, "pristine", {
                    get: function () { return lang_34.isPresent(this.control) ? this.control.pristine : null; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AbstractControlDirective.prototype, "dirty", {
                    get: function () { return lang_34.isPresent(this.control) ? this.control.dirty : null; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AbstractControlDirective.prototype, "touched", {
                    get: function () { return lang_34.isPresent(this.control) ? this.control.touched : null; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AbstractControlDirective.prototype, "untouched", {
                    get: function () { return lang_34.isPresent(this.control) ? this.control.untouched : null; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AbstractControlDirective.prototype, "path", {
                    get: function () { return null; },
                    enumerable: true,
                    configurable: true
                });
                return AbstractControlDirective;
            }());
            exports_90("AbstractControlDirective", AbstractControlDirective);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/common/forms/directives/control_value_accessor", ['angular2/core', 'angular2/src/facade/lang'], function(exports_91, context_91) {
    "use strict";
    var __moduleName = context_91 && context_91.id;
    var core_60, lang_35;
    var NG_VALUE_ACCESSOR;
    return {
        setters:[
            function (core_60_1) {
                core_60 = core_60_1;
            },
            function (lang_35_1) {
                lang_35 = lang_35_1;
            }],
        execute: function() {
            /**
             * Used to provide a {@link ControlValueAccessor} for form controls.
             *
             * See {@link DefaultValueAccessor} for how to implement one.
             */
            exports_91("NG_VALUE_ACCESSOR", NG_VALUE_ACCESSOR = lang_35.CONST_EXPR(new core_60.OpaqueToken("NgValueAccessor")));
        }
    }
});
System.register("test/node_modules/angular2/ts/src/common/forms/directives/ng_control", ["test/node_modules/angular2/ts/src/common/forms/directives/abstract_control_directive", 'angular2/src/facade/exceptions'], function(exports_92, context_92) {
    "use strict";
    var __moduleName = context_92 && context_92.id;
    var abstract_control_directive_1, exceptions_11;
    var NgControl;
    return {
        setters:[
            function (abstract_control_directive_1_1) {
                abstract_control_directive_1 = abstract_control_directive_1_1;
            },
            function (exceptions_11_1) {
                exceptions_11 = exceptions_11_1;
            }],
        execute: function() {
            /**
             * A base class that all control directive extend.
             * It binds a {@link Control} object to a DOM element.
             *
             * Used internally by Angular forms.
             */
            NgControl = (function (_super) {
                __extends(NgControl, _super);
                function NgControl() {
                    _super.apply(this, arguments);
                    this.name = null;
                    this.valueAccessor = null;
                }
                Object.defineProperty(NgControl.prototype, "validator", {
                    get: function () { return exceptions_11.unimplemented(); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NgControl.prototype, "asyncValidator", {
                    get: function () { return exceptions_11.unimplemented(); },
                    enumerable: true,
                    configurable: true
                });
                return NgControl;
            }(abstract_control_directive_1.AbstractControlDirective));
            exports_92("NgControl", NgControl);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/common/forms/directives/control_container", ["test/node_modules/angular2/ts/src/common/forms/directives/abstract_control_directive"], function(exports_93, context_93) {
    "use strict";
    var __moduleName = context_93 && context_93.id;
    var abstract_control_directive_2;
    var ControlContainer;
    return {
        setters:[
            function (abstract_control_directive_2_1) {
                abstract_control_directive_2 = abstract_control_directive_2_1;
            }],
        execute: function() {
            /**
             * A directive that contains multiple {@link NgControl}s.
             *
             * Only used by the forms module.
             */
            ControlContainer = (function (_super) {
                __extends(ControlContainer, _super);
                function ControlContainer() {
                    _super.apply(this, arguments);
                }
                Object.defineProperty(ControlContainer.prototype, "formDirective", {
                    /**
                     * Get the form to which this container belongs.
                     */
                    get: function () { return null; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ControlContainer.prototype, "path", {
                    /**
                     * Get the path to this container.
                     */
                    get: function () { return null; },
                    enumerable: true,
                    configurable: true
                });
                return ControlContainer;
            }(abstract_control_directive_2.AbstractControlDirective));
            exports_93("ControlContainer", ControlContainer);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/common/forms/directives/default_value_accessor", ['angular2/core', "test/node_modules/angular2/ts/src/common/forms/directives/control_value_accessor", 'angular2/src/facade/lang'], function(exports_94, context_94) {
    "use strict";
    var __moduleName = context_94 && context_94.id;
    var core_61, control_value_accessor_1, lang_36;
    var DEFAULT_VALUE_ACCESSOR, DefaultValueAccessor;
    return {
        setters:[
            function (core_61_1) {
                core_61 = core_61_1;
            },
            function (control_value_accessor_1_1) {
                control_value_accessor_1 = control_value_accessor_1_1;
            },
            function (lang_36_1) {
                lang_36 = lang_36_1;
            }],
        execute: function() {
            DEFAULT_VALUE_ACCESSOR = lang_36.CONST_EXPR(new core_61.Provider(control_value_accessor_1.NG_VALUE_ACCESSOR, { useExisting: core_61.forwardRef(function () { return DefaultValueAccessor; }), multi: true }));
            /**
             * The default accessor for writing a value and listening to changes that is used by the
             * {@link NgModel}, {@link NgFormControl}, and {@link NgControlName} directives.
             *
             *  ### Example
             *  ```
             *  <input type="text" ngControl="searchQuery">
             *  ```
             */
            DefaultValueAccessor = (function () {
                function DefaultValueAccessor(_renderer, _elementRef) {
                    this._renderer = _renderer;
                    this._elementRef = _elementRef;
                    this.onChange = function (_) { };
                    this.onTouched = function () { };
                }
                DefaultValueAccessor.prototype.writeValue = function (value) {
                    var normalizedValue = lang_36.isBlank(value) ? '' : value;
                    this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);
                };
                DefaultValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };
                DefaultValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
                DefaultValueAccessor = __decorate([
                    core_61.Directive({
                        selector: 'input:not([type=checkbox])[ngControl],textarea[ngControl],input:not([type=checkbox])[ngFormControl],textarea[ngFormControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]',
                        // TODO: vsavkin replace the above selector with the one below it once
                        // https://github.com/angular/angular/issues/3011 is implemented
                        // selector: '[ngControl],[ngModel],[ngFormControl]',
                        host: { '(input)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },
                        bindings: [DEFAULT_VALUE_ACCESSOR]
                    }), 
                    __metadata('design:paramtypes', [core_61.Renderer, core_61.ElementRef])
                ], DefaultValueAccessor);
                return DefaultValueAccessor;
            }());
            exports_94("DefaultValueAccessor", DefaultValueAccessor);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/common/forms/directives/number_value_accessor", ['angular2/core', "test/node_modules/angular2/ts/src/common/forms/directives/control_value_accessor", 'angular2/src/facade/lang'], function(exports_95, context_95) {
    "use strict";
    var __moduleName = context_95 && context_95.id;
    var core_62, control_value_accessor_2, lang_37;
    var NUMBER_VALUE_ACCESSOR, NumberValueAccessor;
    return {
        setters:[
            function (core_62_1) {
                core_62 = core_62_1;
            },
            function (control_value_accessor_2_1) {
                control_value_accessor_2 = control_value_accessor_2_1;
            },
            function (lang_37_1) {
                lang_37 = lang_37_1;
            }],
        execute: function() {
            NUMBER_VALUE_ACCESSOR = lang_37.CONST_EXPR(new core_62.Provider(control_value_accessor_2.NG_VALUE_ACCESSOR, { useExisting: core_62.forwardRef(function () { return NumberValueAccessor; }), multi: true }));
            /**
             * The accessor for writing a number value and listening to changes that is used by the
             * {@link NgModel}, {@link NgFormControl}, and {@link NgControlName} directives.
             *
             *  ### Example
             *  ```
             *  <input type="number" [(ngModel)]="age">
             *  ```
             */
            NumberValueAccessor = (function () {
                function NumberValueAccessor(_renderer, _elementRef) {
                    this._renderer = _renderer;
                    this._elementRef = _elementRef;
                    this.onChange = function (_) { };
                    this.onTouched = function () { };
                }
                NumberValueAccessor.prototype.writeValue = function (value) {
                    this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', value);
                };
                NumberValueAccessor.prototype.registerOnChange = function (fn) {
                    this.onChange = function (value) { fn(lang_37.NumberWrapper.parseFloat(value)); };
                };
                NumberValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
                NumberValueAccessor = __decorate([
                    core_62.Directive({
                        selector: 'input[type=number][ngControl],input[type=number][ngFormControl],input[type=number][ngModel]',
                        host: {
                            '(change)': 'onChange($event.target.value)',
                            '(input)': 'onChange($event.target.value)',
                            '(blur)': 'onTouched()'
                        },
                        bindings: [NUMBER_VALUE_ACCESSOR]
                    }), 
                    __metadata('design:paramtypes', [core_62.Renderer, core_62.ElementRef])
                ], NumberValueAccessor);
                return NumberValueAccessor;
            }());
            exports_95("NumberValueAccessor", NumberValueAccessor);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/common/forms/directives/checkbox_value_accessor", ['angular2/core', "test/node_modules/angular2/ts/src/common/forms/directives/control_value_accessor", 'angular2/src/facade/lang'], function(exports_96, context_96) {
    "use strict";
    var __moduleName = context_96 && context_96.id;
    var core_63, control_value_accessor_3, lang_38;
    var CHECKBOX_VALUE_ACCESSOR, CheckboxControlValueAccessor;
    return {
        setters:[
            function (core_63_1) {
                core_63 = core_63_1;
            },
            function (control_value_accessor_3_1) {
                control_value_accessor_3 = control_value_accessor_3_1;
            },
            function (lang_38_1) {
                lang_38 = lang_38_1;
            }],
        execute: function() {
            CHECKBOX_VALUE_ACCESSOR = lang_38.CONST_EXPR(new core_63.Provider(control_value_accessor_3.NG_VALUE_ACCESSOR, { useExisting: core_63.forwardRef(function () { return CheckboxControlValueAccessor; }), multi: true }));
            /**
             * The accessor for writing a value and listening to changes on a checkbox input element.
             *
             *  ### Example
             *  ```
             *  <input type="checkbox" ngControl="rememberLogin">
             *  ```
             */
            CheckboxControlValueAccessor = (function () {
                function CheckboxControlValueAccessor(_renderer, _elementRef) {
                    this._renderer = _renderer;
                    this._elementRef = _elementRef;
                    this.onChange = function (_) { };
                    this.onTouched = function () { };
                }
                CheckboxControlValueAccessor.prototype.writeValue = function (value) {
                    this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', value);
                };
                CheckboxControlValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };
                CheckboxControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
                CheckboxControlValueAccessor = __decorate([
                    core_63.Directive({
                        selector: 'input[type=checkbox][ngControl],input[type=checkbox][ngFormControl],input[type=checkbox][ngModel]',
                        host: { '(change)': 'onChange($event.target.checked)', '(blur)': 'onTouched()' },
                        providers: [CHECKBOX_VALUE_ACCESSOR]
                    }), 
                    __metadata('design:paramtypes', [core_63.Renderer, core_63.ElementRef])
                ], CheckboxControlValueAccessor);
                return CheckboxControlValueAccessor;
            }());
            exports_96("CheckboxControlValueAccessor", CheckboxControlValueAccessor);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/common/forms/directives/select_control_value_accessor", ['angular2/core', 'angular2/src/facade/async', "test/node_modules/angular2/ts/src/common/forms/directives/control_value_accessor", 'angular2/src/facade/lang'], function(exports_97, context_97) {
    "use strict";
    var __moduleName = context_97 && context_97.id;
    var core_64, async_4, control_value_accessor_4, lang_39;
    var SELECT_VALUE_ACCESSOR, NgSelectOption, SelectControlValueAccessor;
    return {
        setters:[
            function (core_64_1) {
                core_64 = core_64_1;
            },
            function (async_4_1) {
                async_4 = async_4_1;
            },
            function (control_value_accessor_4_1) {
                control_value_accessor_4 = control_value_accessor_4_1;
            },
            function (lang_39_1) {
                lang_39 = lang_39_1;
            }],
        execute: function() {
            SELECT_VALUE_ACCESSOR = lang_39.CONST_EXPR(new core_64.Provider(control_value_accessor_4.NG_VALUE_ACCESSOR, { useExisting: core_64.forwardRef(function () { return SelectControlValueAccessor; }), multi: true }));
            /**
             * Marks `<option>` as dynamic, so Angular can be notified when options change.
             *
             * ### Example
             *
             * ```
             * <select ngControl="city">
             *   <option *ngFor="#c of cities" [value]="c"></option>
             * </select>
             * ```
             */
            NgSelectOption = (function () {
                function NgSelectOption() {
                }
                NgSelectOption = __decorate([
                    core_64.Directive({ selector: 'option' }), 
                    __metadata('design:paramtypes', [])
                ], NgSelectOption);
                return NgSelectOption;
            }());
            exports_97("NgSelectOption", NgSelectOption);
            /**
             * The accessor for writing a value and listening to changes on a select element.
             */
            SelectControlValueAccessor = (function () {
                function SelectControlValueAccessor(_renderer, _elementRef, query) {
                    this._renderer = _renderer;
                    this._elementRef = _elementRef;
                    this.onChange = function (_) { };
                    this.onTouched = function () { };
                    this._updateValueWhenListOfOptionsChanges(query);
                }
                SelectControlValueAccessor.prototype.writeValue = function (value) {
                    this.value = value;
                    this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', value);
                };
                SelectControlValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };
                SelectControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
                SelectControlValueAccessor.prototype._updateValueWhenListOfOptionsChanges = function (query) {
                    var _this = this;
                    async_4.ObservableWrapper.subscribe(query.changes, function (_) { return _this.writeValue(_this.value); });
                };
                SelectControlValueAccessor = __decorate([
                    core_64.Directive({
                        selector: 'select[ngControl],select[ngFormControl],select[ngModel]',
                        host: { '(input)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },
                        bindings: [SELECT_VALUE_ACCESSOR]
                    }),
                    __param(2, core_64.Query(NgSelectOption, { descendants: true })), 
                    __metadata('design:paramtypes', [core_64.Renderer, core_64.ElementRef, core_64.QueryList])
                ], SelectControlValueAccessor);
                return SelectControlValueAccessor;
            }());
            exports_97("SelectControlValueAccessor", SelectControlValueAccessor);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/common/forms/directives/radio_control_value_accessor", ['angular2/core', 'angular2/src/common/forms/directives/control_value_accessor', 'angular2/src/common/forms/directives/ng_control', 'angular2/src/facade/lang', 'angular2/src/facade/collection'], function(exports_98, context_98) {
    "use strict";
    var __moduleName = context_98 && context_98.id;
    var core_65, control_value_accessor_5, ng_control_1, lang_40, collection_17;
    var RADIO_VALUE_ACCESSOR, RadioControlRegistry, RadioButtonState, RadioControlValueAccessor;
    return {
        setters:[
            function (core_65_1) {
                core_65 = core_65_1;
            },
            function (control_value_accessor_5_1) {
                control_value_accessor_5 = control_value_accessor_5_1;
            },
            function (ng_control_1_1) {
                ng_control_1 = ng_control_1_1;
            },
            function (lang_40_1) {
                lang_40 = lang_40_1;
            },
            function (collection_17_1) {
                collection_17 = collection_17_1;
            }],
        execute: function() {
            RADIO_VALUE_ACCESSOR = lang_40.CONST_EXPR(new core_65.Provider(control_value_accessor_5.NG_VALUE_ACCESSOR, { useExisting: core_65.forwardRef(function () { return RadioControlValueAccessor; }), multi: true }));
            /**
             * Internal class used by Angular to uncheck radio buttons with the matching name.
             */
            RadioControlRegistry = (function () {
                function RadioControlRegistry() {
                    this._accessors = [];
                }
                RadioControlRegistry.prototype.add = function (control, accessor) {
                    this._accessors.push([control, accessor]);
                };
                RadioControlRegistry.prototype.remove = function (accessor) {
                    var indexToRemove = -1;
                    for (var i = 0; i < this._accessors.length; ++i) {
                        if (this._accessors[i][1] === accessor) {
                            indexToRemove = i;
                        }
                    }
                    collection_17.ListWrapper.removeAt(this._accessors, indexToRemove);
                };
                RadioControlRegistry.prototype.select = function (accessor) {
                    this._accessors.forEach(function (c) {
                        if (c[0].control.root === accessor._control.control.root && c[1] !== accessor) {
                            c[1].fireUncheck();
                        }
                    });
                };
                RadioControlRegistry = __decorate([
                    core_65.Injectable(), 
                    __metadata('design:paramtypes', [])
                ], RadioControlRegistry);
                return RadioControlRegistry;
            }());
            exports_98("RadioControlRegistry", RadioControlRegistry);
            /**
             * The value provided by the forms API for radio buttons.
             */
            RadioButtonState = (function () {
                function RadioButtonState(checked, value) {
                    this.checked = checked;
                    this.value = value;
                }
                return RadioButtonState;
            }());
            exports_98("RadioButtonState", RadioButtonState);
            /**
             * The accessor for writing a radio control value and listening to changes that is used by the
             * {@link NgModel}, {@link NgFormControl}, and {@link NgControlName} directives.
             *
             *  ### Example
             *  ```
             *  @Component({
             *    template: `
             *      <input type="radio" name="food" [(ngModel)]="foodChicken">
             *      <input type="radio" name="food" [(ngModel)]="foodFish">
             *    `
             *  })
             *  class FoodCmp {
             *    foodChicken = new RadioButtonState(true, "chicken");
             *    foodFish = new RadioButtonState(false, "fish");
             *  }
             *  ```
             */
            RadioControlValueAccessor = (function () {
                function RadioControlValueAccessor(_renderer, _elementRef, _registry, _injector) {
                    this._renderer = _renderer;
                    this._elementRef = _elementRef;
                    this._registry = _registry;
                    this._injector = _injector;
                    this.onChange = function () { };
                    this.onTouched = function () { };
                }
                RadioControlValueAccessor.prototype.ngOnInit = function () {
                    this._control = this._injector.get(ng_control_1.NgControl);
                    this._registry.add(this._control, this);
                };
                RadioControlValueAccessor.prototype.ngOnDestroy = function () { this._registry.remove(this); };
                RadioControlValueAccessor.prototype.writeValue = function (value) {
                    this._state = value;
                    if (lang_40.isPresent(value) && value.checked) {
                        this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', true);
                    }
                };
                RadioControlValueAccessor.prototype.registerOnChange = function (fn) {
                    var _this = this;
                    this._fn = fn;
                    this.onChange = function () {
                        fn(new RadioButtonState(true, _this._state.value));
                        _this._registry.select(_this);
                    };
                };
                RadioControlValueAccessor.prototype.fireUncheck = function () { this._fn(new RadioButtonState(false, this._state.value)); };
                RadioControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
                __decorate([
                    core_65.Input(), 
                    __metadata('design:type', String)
                ], RadioControlValueAccessor.prototype, "name", void 0);
                RadioControlValueAccessor = __decorate([
                    core_65.Directive({
                        selector: 'input[type=radio][ngControl],input[type=radio][ngFormControl],input[type=radio][ngModel]',
                        host: { '(change)': 'onChange()', '(blur)': 'onTouched()' },
                        providers: [RADIO_VALUE_ACCESSOR]
                    }), 
                    __metadata('design:paramtypes', [core_65.Renderer, core_65.ElementRef, RadioControlRegistry, core_65.Injector])
                ], RadioControlValueAccessor);
                return RadioControlValueAccessor;
            }());
            exports_98("RadioControlValueAccessor", RadioControlValueAccessor);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/common/forms/directives/normalize_validator", [], function(exports_99, context_99) {
    "use strict";
    var __moduleName = context_99 && context_99.id;
    function normalizeValidator(validator) {
        if (validator.validate !== undefined) {
            return function (c) { return validator.validate(c); };
        }
        else {
            return validator;
        }
    }
    exports_99("normalizeValidator", normalizeValidator);
    function normalizeAsyncValidator(validator) {
        if (validator.validate !== undefined) {
            return function (c) { return Promise.resolve(validator.validate(c)); };
        }
        else {
            return validator;
        }
    }
    exports_99("normalizeAsyncValidator", normalizeAsyncValidator);
    return {
        setters:[],
        execute: function() {
        }
    }
});
System.register("test/node_modules/angular2/ts/src/common/forms/directives/shared", ['angular2/src/facade/collection', 'angular2/src/facade/lang', 'angular2/src/facade/exceptions', "test/node_modules/angular2/ts/src/common/forms/validators", "test/node_modules/angular2/ts/src/common/forms/directives/default_value_accessor", "test/node_modules/angular2/ts/src/common/forms/directives/number_value_accessor", "test/node_modules/angular2/ts/src/common/forms/directives/checkbox_value_accessor", "test/node_modules/angular2/ts/src/common/forms/directives/select_control_value_accessor", "test/node_modules/angular2/ts/src/common/forms/directives/radio_control_value_accessor", "test/node_modules/angular2/ts/src/common/forms/directives/normalize_validator"], function(exports_100, context_100) {
    "use strict";
    var __moduleName = context_100 && context_100.id;
    var collection_18, lang_41, exceptions_12, validators_2, default_value_accessor_1, number_value_accessor_1, checkbox_value_accessor_1, select_control_value_accessor_1, radio_control_value_accessor_1, normalize_validator_1;
    function controlPath(name, parent) {
        var p = collection_18.ListWrapper.clone(parent.path);
        p.push(name);
        return p;
    }
    exports_100("controlPath", controlPath);
    function setUpControl(control, dir) {
        if (lang_41.isBlank(control))
            _throwError(dir, "Cannot find control");
        if (lang_41.isBlank(dir.valueAccessor))
            _throwError(dir, "No value accessor for");
        control.validator = validators_2.Validators.compose([control.validator, dir.validator]);
        control.asyncValidator = validators_2.Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);
        dir.valueAccessor.writeValue(control.value);
        // view -> model
        dir.valueAccessor.registerOnChange(function (newValue) {
            dir.viewToModelUpdate(newValue);
            control.updateValue(newValue, { emitModelToViewChange: false });
            control.markAsDirty();
        });
        // model -> view
        control.registerOnChange(function (newValue) { return dir.valueAccessor.writeValue(newValue); });
        // touched
        dir.valueAccessor.registerOnTouched(function () { return control.markAsTouched(); });
    }
    exports_100("setUpControl", setUpControl);
    function setUpControlGroup(control, dir) {
        if (lang_41.isBlank(control))
            _throwError(dir, "Cannot find control");
        control.validator = validators_2.Validators.compose([control.validator, dir.validator]);
        control.asyncValidator = validators_2.Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);
    }
    exports_100("setUpControlGroup", setUpControlGroup);
    function _throwError(dir, message) {
        var path = dir.path.join(" -> ");
        throw new exceptions_12.BaseException(message + " '" + path + "'");
    }
    function composeValidators(validators) {
        return lang_41.isPresent(validators) ? validators_2.Validators.compose(validators.map(normalize_validator_1.normalizeValidator)) : null;
    }
    exports_100("composeValidators", composeValidators);
    function composeAsyncValidators(validators) {
        return lang_41.isPresent(validators) ? validators_2.Validators.composeAsync(validators.map(normalize_validator_1.normalizeAsyncValidator)) :
            null;
    }
    exports_100("composeAsyncValidators", composeAsyncValidators);
    function isPropertyUpdated(changes, viewModel) {
        if (!collection_18.StringMapWrapper.contains(changes, "model"))
            return false;
        var change = changes["model"];
        if (change.isFirstChange())
            return true;
        return !lang_41.looseIdentical(viewModel, change.currentValue);
    }
    exports_100("isPropertyUpdated", isPropertyUpdated);
    // TODO: vsavkin remove it once https://github.com/angular/angular/issues/3011 is implemented
    function selectValueAccessor(dir, valueAccessors) {
        if (lang_41.isBlank(valueAccessors))
            return null;
        var defaultAccessor;
        var builtinAccessor;
        var customAccessor;
        valueAccessors.forEach(function (v) {
            if (lang_41.hasConstructor(v, default_value_accessor_1.DefaultValueAccessor)) {
                defaultAccessor = v;
            }
            else if (lang_41.hasConstructor(v, checkbox_value_accessor_1.CheckboxControlValueAccessor) ||
                lang_41.hasConstructor(v, number_value_accessor_1.NumberValueAccessor) ||
                lang_41.hasConstructor(v, select_control_value_accessor_1.SelectControlValueAccessor) ||
                lang_41.hasConstructor(v, radio_control_value_accessor_1.RadioControlValueAccessor)) {
                if (lang_41.isPresent(builtinAccessor))
                    _throwError(dir, "More than one built-in value accessor matches");
                builtinAccessor = v;
            }
            else {
                if (lang_41.isPresent(customAccessor))
                    _throwError(dir, "More than one custom value accessor matches");
                customAccessor = v;
            }
        });
        if (lang_41.isPresent(customAccessor))
            return customAccessor;
        if (lang_41.isPresent(builtinAccessor))
            return builtinAccessor;
        if (lang_41.isPresent(defaultAccessor))
            return defaultAccessor;
        _throwError(dir, "No valid value accessor for");
        return null;
    }
    exports_100("selectValueAccessor", selectValueAccessor);
    return {
        setters:[
            function (collection_18_1) {
                collection_18 = collection_18_1;
            },
            function (lang_41_1) {
                lang_41 = lang_41_1;
            },
            function (exceptions_12_1) {
                exceptions_12 = exceptions_12_1;
            },
            function (validators_2_1) {
                validators_2 = validators_2_1;
            },
            function (default_value_accessor_1_1) {
                default_value_accessor_1 = default_value_accessor_1_1;
            },
            function (number_value_accessor_1_1) {
                number_value_accessor_1 = number_value_accessor_1_1;
            },
            function (checkbox_value_accessor_1_1) {
                checkbox_value_accessor_1 = checkbox_value_accessor_1_1;
            },
            function (select_control_value_accessor_1_1) {
                select_control_value_accessor_1 = select_control_value_accessor_1_1;
            },
            function (radio_control_value_accessor_1_1) {
                radio_control_value_accessor_1 = radio_control_value_accessor_1_1;
            },
            function (normalize_validator_1_1) {
                normalize_validator_1 = normalize_validator_1_1;
            }],
        execute: function() {
        }
    }
});
System.register("test/node_modules/angular2/ts/src/common/forms/directives/ng_control_group", ['angular2/core', 'angular2/src/facade/lang', "test/node_modules/angular2/ts/src/common/forms/directives/control_container", "test/node_modules/angular2/ts/src/common/forms/directives/shared", "test/node_modules/angular2/ts/src/common/forms/validators"], function(exports_101, context_101) {
    "use strict";
    var __moduleName = context_101 && context_101.id;
    var core_66, lang_42, control_container_1, shared_1, validators_3;
    var controlGroupProvider, NgControlGroup;
    return {
        setters:[
            function (core_66_1) {
                core_66 = core_66_1;
            },
            function (lang_42_1) {
                lang_42 = lang_42_1;
            },
            function (control_container_1_1) {
                control_container_1 = control_container_1_1;
            },
            function (shared_1_1) {
                shared_1 = shared_1_1;
            },
            function (validators_3_1) {
                validators_3 = validators_3_1;
            }],
        execute: function() {
            controlGroupProvider = lang_42.CONST_EXPR(new core_66.Provider(control_container_1.ControlContainer, { useExisting: core_66.forwardRef(function () { return NgControlGroup; }) }));
            /**
             * Creates and binds a control group to a DOM element.
             *
             * This directive can only be used as a child of {@link NgForm} or {@link NgFormModel}.
             *
             * ### Example ([live demo](http://plnkr.co/edit/7EJ11uGeaggViYM6T5nq?p=preview))
             *
             * ```typescript
             * @Component({
             *   selector: 'my-app',
             *   directives: [FORM_DIRECTIVES],
             *   template: `
             *     <div>
             *       <h2>Angular2 Control &amp; ControlGroup Example</h2>
             *       <form #f="ngForm">
             *         <div ngControlGroup="name" #cg-name="form">
             *           <h3>Enter your name:</h3>
             *           <p>First: <input ngControl="first" required></p>
             *           <p>Middle: <input ngControl="middle"></p>
             *           <p>Last: <input ngControl="last" required></p>
             *         </div>
             *         <h3>Name value:</h3>
             *         <pre>{{valueOf(cgName)}}</pre>
             *         <p>Name is {{cgName?.control?.valid ? "valid" : "invalid"}}</p>
             *         <h3>What's your favorite food?</h3>
             *         <p><input ngControl="food"></p>
             *         <h3>Form value</h3>
             *         <pre>{{valueOf(f)}}</pre>
             *       </form>
             *     </div>
             *   `,
             *   directives: [FORM_DIRECTIVES]
             * })
             * export class App {
             *   valueOf(cg: NgControlGroup): string {
             *     if (cg.control == null) {
             *       return null;
             *     }
             *     return JSON.stringify(cg.control.value, null, 2);
             *   }
             * }
             * ```
             *
             * This example declares a control group for a user's name. The value and validation state of
             * this group can be accessed separately from the overall form.
             */
            NgControlGroup = (function (_super) {
                __extends(NgControlGroup, _super);
                function NgControlGroup(parent, _validators, _asyncValidators) {
                    _super.call(this);
                    this._validators = _validators;
                    this._asyncValidators = _asyncValidators;
                    this._parent = parent;
                }
                NgControlGroup.prototype.ngOnInit = function () { this.formDirective.addControlGroup(this); };
                NgControlGroup.prototype.ngOnDestroy = function () { this.formDirective.removeControlGroup(this); };
                Object.defineProperty(NgControlGroup.prototype, "control", {
                    /**
                     * Get the {@link ControlGroup} backing this binding.
                     */
                    get: function () { return this.formDirective.getControlGroup(this); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NgControlGroup.prototype, "path", {
                    /**
                     * Get the path to this control group.
                     */
                    get: function () { return shared_1.controlPath(this.name, this._parent); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NgControlGroup.prototype, "formDirective", {
                    /**
                     * Get the {@link Form} to which this group belongs.
                     */
                    get: function () { return this._parent.formDirective; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NgControlGroup.prototype, "validator", {
                    get: function () { return shared_1.composeValidators(this._validators); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NgControlGroup.prototype, "asyncValidator", {
                    get: function () { return shared_1.composeAsyncValidators(this._asyncValidators); },
                    enumerable: true,
                    configurable: true
                });
                NgControlGroup = __decorate([
                    core_66.Directive({
                        selector: '[ngControlGroup]',
                        providers: [controlGroupProvider],
                        inputs: ['name: ngControlGroup'],
                        exportAs: 'ngForm'
                    }),
                    __param(0, core_66.Host()),
                    __param(0, core_66.SkipSelf()),
                    __param(1, core_66.Optional()),
                    __param(1, core_66.Self()),
                    __param(1, core_66.Inject(validators_3.NG_VALIDATORS)),
                    __param(2, core_66.Optional()),
                    __param(2, core_66.Self()),
                    __param(2, core_66.Inject(validators_3.NG_ASYNC_VALIDATORS)), 
                    __metadata('design:paramtypes', [control_container_1.ControlContainer, Array, Array])
                ], NgControlGroup);
                return NgControlGroup;
            }(control_container_1.ControlContainer));
            exports_101("NgControlGroup", NgControlGroup);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/common/forms/directives/form_interface", [], function(exports_102, context_102) {
    "use strict";
    var __moduleName = context_102 && context_102.id;
    return {
        setters:[],
        execute: function() {
        }
    }
});
System.register("test/node_modules/angular2/ts/src/common/forms/directives/ng_control_name", ['angular2/src/facade/lang', 'angular2/src/facade/async', 'angular2/core', "test/node_modules/angular2/ts/src/common/forms/directives/control_container", "test/node_modules/angular2/ts/src/common/forms/directives/ng_control", "test/node_modules/angular2/ts/src/common/forms/directives/control_value_accessor", "test/node_modules/angular2/ts/src/common/forms/directives/shared", "test/node_modules/angular2/ts/src/common/forms/validators"], function(exports_103, context_103) {
    "use strict";
    var __moduleName = context_103 && context_103.id;
    var lang_43, async_5, core_67, control_container_2, ng_control_2, control_value_accessor_6, shared_2, validators_4;
    var controlNameBinding, NgControlName;
    return {
        setters:[
            function (lang_43_1) {
                lang_43 = lang_43_1;
            },
            function (async_5_1) {
                async_5 = async_5_1;
            },
            function (core_67_1) {
                core_67 = core_67_1;
            },
            function (control_container_2_1) {
                control_container_2 = control_container_2_1;
            },
            function (ng_control_2_1) {
                ng_control_2 = ng_control_2_1;
            },
            function (control_value_accessor_6_1) {
                control_value_accessor_6 = control_value_accessor_6_1;
            },
            function (shared_2_1) {
                shared_2 = shared_2_1;
            },
            function (validators_4_1) {
                validators_4 = validators_4_1;
            }],
        execute: function() {
            controlNameBinding = lang_43.CONST_EXPR(new core_67.Provider(ng_control_2.NgControl, { useExisting: core_67.forwardRef(function () { return NgControlName; }) }));
            /**
             * Creates and binds a control with a specified name to a DOM element.
             *
             * This directive can only be used as a child of {@link NgForm} or {@link NgFormModel}.
            
             * ### Example
             *
             * In this example, we create the login and password controls.
             * We can work with each control separately: check its validity, get its value, listen to its
             * changes.
             *
             *  ```
             * @Component({
             *      selector: "login-comp",
             *      directives: [FORM_DIRECTIVES],
             *      template: `
             *        <form #f="ngForm" (submit)='onLogIn(f.value)'>
             *          Login <input type='text' ngControl='login' #l="form">
             *          <div *ngIf="!l.valid">Login is invalid</div>
             *
             *          Password <input type='password' ngControl='password'>
             *          <button type='submit'>Log in!</button>
             *        </form>
             *      `})
             * class LoginComp {
             *  onLogIn(value): void {
             *    // value === {login: 'some login', password: 'some password'}
             *  }
             * }
             *  ```
             *
             * We can also use ngModel to bind a domain model to the form.
             *
             *  ```
             * @Component({
             *      selector: "login-comp",
             *      directives: [FORM_DIRECTIVES],
             *      template: `
             *        <form (submit)='onLogIn()'>
             *          Login <input type='text' ngControl='login' [(ngModel)]="credentials.login">
             *          Password <input type='password' ngControl='password'
             *                          [(ngModel)]="credentials.password">
             *          <button type='submit'>Log in!</button>
             *        </form>
             *      `})
             * class LoginComp {
             *  credentials: {login:string, password:string};
             *
             *  onLogIn(): void {
             *    // this.credentials.login === "some login"
             *    // this.credentials.password === "some password"
             *  }
             * }
             *  ```
             */
            NgControlName = (function (_super) {
                __extends(NgControlName, _super);
                function NgControlName(_parent, _validators, _asyncValidators, valueAccessors) {
                    _super.call(this);
                    this._parent = _parent;
                    this._validators = _validators;
                    this._asyncValidators = _asyncValidators;
                    /** @internal */
                    this.update = new async_5.EventEmitter();
                    this._added = false;
                    this.valueAccessor = shared_2.selectValueAccessor(this, valueAccessors);
                }
                NgControlName.prototype.ngOnChanges = function (changes) {
                    if (!this._added) {
                        this.formDirective.addControl(this);
                        this._added = true;
                    }
                    if (shared_2.isPropertyUpdated(changes, this.viewModel)) {
                        this.viewModel = this.model;
                        this.formDirective.updateModel(this, this.model);
                    }
                };
                NgControlName.prototype.ngOnDestroy = function () { this.formDirective.removeControl(this); };
                NgControlName.prototype.viewToModelUpdate = function (newValue) {
                    this.viewModel = newValue;
                    async_5.ObservableWrapper.callEmit(this.update, newValue);
                };
                Object.defineProperty(NgControlName.prototype, "path", {
                    get: function () { return shared_2.controlPath(this.name, this._parent); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NgControlName.prototype, "formDirective", {
                    get: function () { return this._parent.formDirective; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NgControlName.prototype, "validator", {
                    get: function () { return shared_2.composeValidators(this._validators); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NgControlName.prototype, "asyncValidator", {
                    get: function () { return shared_2.composeAsyncValidators(this._asyncValidators); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NgControlName.prototype, "control", {
                    get: function () { return this.formDirective.getControl(this); },
                    enumerable: true,
                    configurable: true
                });
                NgControlName = __decorate([
                    core_67.Directive({
                        selector: '[ngControl]',
                        bindings: [controlNameBinding],
                        inputs: ['name: ngControl', 'model: ngModel'],
                        outputs: ['update: ngModelChange'],
                        exportAs: 'ngForm'
                    }),
                    __param(0, core_67.Host()),
                    __param(0, core_67.SkipSelf()),
                    __param(1, core_67.Optional()),
                    __param(1, core_67.Self()),
                    __param(1, core_67.Inject(validators_4.NG_VALIDATORS)),
                    __param(2, core_67.Optional()),
                    __param(2, core_67.Self()),
                    __param(2, core_67.Inject(validators_4.NG_ASYNC_VALIDATORS)),
                    __param(3, core_67.Optional()),
                    __param(3, core_67.Self()),
                    __param(3, core_67.Inject(control_value_accessor_6.NG_VALUE_ACCESSOR)), 
                    __metadata('design:paramtypes', [control_container_2.ControlContainer, Array, Array, Array])
                ], NgControlName);
                return NgControlName;
            }(ng_control_2.NgControl));
            exports_103("NgControlName", NgControlName);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/common/forms/directives/ng_form_control", ['angular2/src/facade/lang', 'angular2/src/facade/collection', 'angular2/src/facade/async', 'angular2/core', "test/node_modules/angular2/ts/src/common/forms/directives/ng_control", "test/node_modules/angular2/ts/src/common/forms/validators", "test/node_modules/angular2/ts/src/common/forms/directives/control_value_accessor", "test/node_modules/angular2/ts/src/common/forms/directives/shared"], function(exports_104, context_104) {
    "use strict";
    var __moduleName = context_104 && context_104.id;
    var lang_44, collection_19, async_6, core_68, ng_control_3, validators_5, control_value_accessor_7, shared_3;
    var formControlBinding, NgFormControl;
    return {
        setters:[
            function (lang_44_1) {
                lang_44 = lang_44_1;
            },
            function (collection_19_1) {
                collection_19 = collection_19_1;
            },
            function (async_6_1) {
                async_6 = async_6_1;
            },
            function (core_68_1) {
                core_68 = core_68_1;
            },
            function (ng_control_3_1) {
                ng_control_3 = ng_control_3_1;
            },
            function (validators_5_1) {
                validators_5 = validators_5_1;
            },
            function (control_value_accessor_7_1) {
                control_value_accessor_7 = control_value_accessor_7_1;
            },
            function (shared_3_1) {
                shared_3 = shared_3_1;
            }],
        execute: function() {
            formControlBinding = lang_44.CONST_EXPR(new core_68.Provider(ng_control_3.NgControl, { useExisting: core_68.forwardRef(function () { return NgFormControl; }) }));
            /**
             * Binds an existing {@link Control} to a DOM element.
             *
             * ### Example ([live demo](http://plnkr.co/edit/jcQlZ2tTh22BZZ2ucNAT?p=preview))
             *
             * In this example, we bind the control to an input element. When the value of the input element
             * changes, the value of the control will reflect that change. Likewise, if the value of the
             * control changes, the input element reflects that change.
             *
             *  ```typescript
             * @Component({
             *   selector: 'my-app',
             *   template: `
             *     <div>
             *       <h2>NgFormControl Example</h2>
             *       <form>
             *         <p>Element with existing control: <input type="text"
             * [ngFormControl]="loginControl"></p>
             *         <p>Value of existing control: {{loginControl.value}}</p>
             *       </form>
             *     </div>
             *   `,
             *   directives: [CORE_DIRECTIVES, FORM_DIRECTIVES]
             * })
             * export class App {
             *   loginControl: Control = new Control('');
             * }
             *  ```
             *
             * ###ngModel
             *
             * We can also use `ngModel` to bind a domain model to the form.
             *
             * ### Example ([live demo](http://plnkr.co/edit/yHMLuHO7DNgT8XvtjTDH?p=preview))
             *
             *  ```typescript
             * @Component({
             *      selector: "login-comp",
             *      directives: [FORM_DIRECTIVES],
             *      template: "<input type='text' [ngFormControl]='loginControl' [(ngModel)]='login'>"
             *      })
             * class LoginComp {
             *  loginControl: Control = new Control('');
             *  login:string;
             * }
             *  ```
             */
            NgFormControl = (function (_super) {
                __extends(NgFormControl, _super);
                function NgFormControl(_validators, _asyncValidators, valueAccessors) {
                    _super.call(this);
                    this._validators = _validators;
                    this._asyncValidators = _asyncValidators;
                    this.update = new async_6.EventEmitter();
                    this.valueAccessor = shared_3.selectValueAccessor(this, valueAccessors);
                }
                NgFormControl.prototype.ngOnChanges = function (changes) {
                    if (this._isControlChanged(changes)) {
                        shared_3.setUpControl(this.form, this);
                        this.form.updateValueAndValidity({ emitEvent: false });
                    }
                    if (shared_3.isPropertyUpdated(changes, this.viewModel)) {
                        this.form.updateValue(this.model);
                        this.viewModel = this.model;
                    }
                };
                Object.defineProperty(NgFormControl.prototype, "path", {
                    get: function () { return []; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NgFormControl.prototype, "validator", {
                    get: function () { return shared_3.composeValidators(this._validators); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NgFormControl.prototype, "asyncValidator", {
                    get: function () { return shared_3.composeAsyncValidators(this._asyncValidators); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NgFormControl.prototype, "control", {
                    get: function () { return this.form; },
                    enumerable: true,
                    configurable: true
                });
                NgFormControl.prototype.viewToModelUpdate = function (newValue) {
                    this.viewModel = newValue;
                    async_6.ObservableWrapper.callEmit(this.update, newValue);
                };
                NgFormControl.prototype._isControlChanged = function (changes) {
                    return collection_19.StringMapWrapper.contains(changes, "form");
                };
                NgFormControl = __decorate([
                    core_68.Directive({
                        selector: '[ngFormControl]',
                        bindings: [formControlBinding],
                        inputs: ['form: ngFormControl', 'model: ngModel'],
                        outputs: ['update: ngModelChange'],
                        exportAs: 'ngForm'
                    }),
                    __param(0, core_68.Optional()),
                    __param(0, core_68.Self()),
                    __param(0, core_68.Inject(validators_5.NG_VALIDATORS)),
                    __param(1, core_68.Optional()),
                    __param(1, core_68.Self()),
                    __param(1, core_68.Inject(validators_5.NG_ASYNC_VALIDATORS)),
                    __param(2, core_68.Optional()),
                    __param(2, core_68.Self()),
                    __param(2, core_68.Inject(control_value_accessor_7.NG_VALUE_ACCESSOR)), 
                    __metadata('design:paramtypes', [Array, Array, Array])
                ], NgFormControl);
                return NgFormControl;
            }(ng_control_3.NgControl));
            exports_104("NgFormControl", NgFormControl);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/common/forms/directives/ng_model", ['angular2/src/facade/lang', 'angular2/src/facade/async', 'angular2/core', "test/node_modules/angular2/ts/src/common/forms/directives/control_value_accessor", "test/node_modules/angular2/ts/src/common/forms/directives/ng_control", "test/node_modules/angular2/ts/src/common/forms/model", "test/node_modules/angular2/ts/src/common/forms/validators", "test/node_modules/angular2/ts/src/common/forms/directives/shared"], function(exports_105, context_105) {
    "use strict";
    var __moduleName = context_105 && context_105.id;
    var lang_45, async_7, core_69, control_value_accessor_8, ng_control_4, model_1, validators_6, shared_4;
    var formControlBinding, NgModel;
    return {
        setters:[
            function (lang_45_1) {
                lang_45 = lang_45_1;
            },
            function (async_7_1) {
                async_7 = async_7_1;
            },
            function (core_69_1) {
                core_69 = core_69_1;
            },
            function (control_value_accessor_8_1) {
                control_value_accessor_8 = control_value_accessor_8_1;
            },
            function (ng_control_4_1) {
                ng_control_4 = ng_control_4_1;
            },
            function (model_1_1) {
                model_1 = model_1_1;
            },
            function (validators_6_1) {
                validators_6 = validators_6_1;
            },
            function (shared_4_1) {
                shared_4 = shared_4_1;
            }],
        execute: function() {
            formControlBinding = lang_45.CONST_EXPR(new core_69.Provider(ng_control_4.NgControl, { useExisting: core_69.forwardRef(function () { return NgModel; }) }));
            /**
             * Binds a domain model to a form control.
             *
             * ### Usage
             *
             * `ngModel` binds an existing domain model to a form control. For a
             * two-way binding, use `[(ngModel)]` to ensure the model updates in
             * both directions.
             *
             * ### Example ([live demo](http://plnkr.co/edit/R3UX5qDaUqFO2VYR0UzH?p=preview))
             *  ```typescript
             * @Component({
             *      selector: "search-comp",
             *      directives: [FORM_DIRECTIVES],
             *      template: `<input type='text' [(ngModel)]="searchQuery">`
             *      })
             * class SearchComp {
             *  searchQuery: string;
             * }
             *  ```
             */
            NgModel = (function (_super) {
                __extends(NgModel, _super);
                function NgModel(_validators, _asyncValidators, valueAccessors) {
                    _super.call(this);
                    this._validators = _validators;
                    this._asyncValidators = _asyncValidators;
                    /** @internal */
                    this._control = new model_1.Control();
                    /** @internal */
                    this._added = false;
                    this.update = new async_7.EventEmitter();
                    this.valueAccessor = shared_4.selectValueAccessor(this, valueAccessors);
                }
                NgModel.prototype.ngOnChanges = function (changes) {
                    if (!this._added) {
                        shared_4.setUpControl(this._control, this);
                        this._control.updateValueAndValidity({ emitEvent: false });
                        this._added = true;
                    }
                    if (shared_4.isPropertyUpdated(changes, this.viewModel)) {
                        this._control.updateValue(this.model);
                        this.viewModel = this.model;
                    }
                };
                Object.defineProperty(NgModel.prototype, "control", {
                    get: function () { return this._control; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NgModel.prototype, "path", {
                    get: function () { return []; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NgModel.prototype, "validator", {
                    get: function () { return shared_4.composeValidators(this._validators); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NgModel.prototype, "asyncValidator", {
                    get: function () { return shared_4.composeAsyncValidators(this._asyncValidators); },
                    enumerable: true,
                    configurable: true
                });
                NgModel.prototype.viewToModelUpdate = function (newValue) {
                    this.viewModel = newValue;
                    async_7.ObservableWrapper.callEmit(this.update, newValue);
                };
                NgModel = __decorate([
                    core_69.Directive({
                        selector: '[ngModel]:not([ngControl]):not([ngFormControl])',
                        bindings: [formControlBinding],
                        inputs: ['model: ngModel'],
                        outputs: ['update: ngModelChange'],
                        exportAs: 'ngForm'
                    }),
                    __param(0, core_69.Optional()),
                    __param(0, core_69.Self()),
                    __param(0, core_69.Inject(validators_6.NG_VALIDATORS)),
                    __param(1, core_69.Optional()),
                    __param(1, core_69.Self()),
                    __param(1, core_69.Inject(validators_6.NG_ASYNC_VALIDATORS)),
                    __param(2, core_69.Optional()),
                    __param(2, core_69.Self()),
                    __param(2, core_69.Inject(control_value_accessor_8.NG_VALUE_ACCESSOR)), 
                    __metadata('design:paramtypes', [Array, Array, Array])
                ], NgModel);
                return NgModel;
            }(ng_control_4.NgControl));
            exports_105("NgModel", NgModel);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/common/forms/directives/ng_form_model", ['angular2/src/facade/lang', 'angular2/src/facade/collection', 'angular2/src/facade/async', 'angular2/core', "test/node_modules/angular2/ts/src/common/forms/directives/control_container", "test/node_modules/angular2/ts/src/common/forms/directives/shared", "test/node_modules/angular2/ts/src/common/forms/validators"], function(exports_106, context_106) {
    "use strict";
    var __moduleName = context_106 && context_106.id;
    var lang_46, collection_20, async_8, core_70, control_container_3, shared_5, validators_7;
    var formDirectiveProvider, NgFormModel;
    return {
        setters:[
            function (lang_46_1) {
                lang_46 = lang_46_1;
            },
            function (collection_20_1) {
                collection_20 = collection_20_1;
            },
            function (async_8_1) {
                async_8 = async_8_1;
            },
            function (core_70_1) {
                core_70 = core_70_1;
            },
            function (control_container_3_1) {
                control_container_3 = control_container_3_1;
            },
            function (shared_5_1) {
                shared_5 = shared_5_1;
            },
            function (validators_7_1) {
                validators_7 = validators_7_1;
            }],
        execute: function() {
            formDirectiveProvider = lang_46.CONST_EXPR(new core_70.Provider(control_container_3.ControlContainer, { useExisting: core_70.forwardRef(function () { return NgFormModel; }) }));
            /**
             * Binds an existing control group to a DOM element.
             *
             * ### Example ([live demo](http://plnkr.co/edit/jqrVirudY8anJxTMUjTP?p=preview))
             *
             * In this example, we bind the control group to the form element, and we bind the login and
             * password controls to the login and password elements.
             *
             *  ```typescript
             * @Component({
             *   selector: 'my-app',
             *   template: `
             *     <div>
             *       <h2>NgFormModel Example</h2>
             *       <form [ngFormModel]="loginForm">
             *         <p>Login: <input type="text" ngControl="login"></p>
             *         <p>Password: <input type="password" ngControl="password"></p>
             *       </form>
             *       <p>Value:</p>
             *       <pre>{{value}}</pre>
             *     </div>
             *   `,
             *   directives: [FORM_DIRECTIVES]
             * })
             * export class App {
             *   loginForm: ControlGroup;
             *
             *   constructor() {
             *     this.loginForm = new ControlGroup({
             *       login: new Control(""),
             *       password: new Control("")
             *     });
             *   }
             *
             *   get value(): string {
             *     return JSON.stringify(this.loginForm.value, null, 2);
             *   }
             * }
             *  ```
             *
             * We can also use ngModel to bind a domain model to the form.
             *
             *  ```typescript
             * @Component({
             *      selector: "login-comp",
             *      directives: [FORM_DIRECTIVES],
             *      template: `
             *        <form [ngFormModel]='loginForm'>
             *          Login <input type='text' ngControl='login' [(ngModel)]='credentials.login'>
             *          Password <input type='password' ngControl='password'
             *                          [(ngModel)]='credentials.password'>
             *          <button (click)="onLogin()">Login</button>
             *        </form>`
             *      })
             * class LoginComp {
             *  credentials: {login: string, password: string};
             *  loginForm: ControlGroup;
             *
             *  constructor() {
             *    this.loginForm = new ControlGroup({
             *      login: new Control(""),
             *      password: new Control("")
             *    });
             *  }
             *
             *  onLogin(): void {
             *    // this.credentials.login === 'some login'
             *    // this.credentials.password === 'some password'
             *  }
             * }
             *  ```
             */
            NgFormModel = (function (_super) {
                __extends(NgFormModel, _super);
                function NgFormModel(_validators, _asyncValidators) {
                    _super.call(this);
                    this._validators = _validators;
                    this._asyncValidators = _asyncValidators;
                    this.form = null;
                    this.directives = [];
                    this.ngSubmit = new async_8.EventEmitter();
                }
                NgFormModel.prototype.ngOnChanges = function (changes) {
                    if (collection_20.StringMapWrapper.contains(changes, "form")) {
                        var sync = shared_5.composeValidators(this._validators);
                        this.form.validator = validators_7.Validators.compose([this.form.validator, sync]);
                        var async = shared_5.composeAsyncValidators(this._asyncValidators);
                        this.form.asyncValidator = validators_7.Validators.composeAsync([this.form.asyncValidator, async]);
                        this.form.updateValueAndValidity({ onlySelf: true, emitEvent: false });
                    }
                    this._updateDomValue();
                };
                Object.defineProperty(NgFormModel.prototype, "formDirective", {
                    get: function () { return this; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NgFormModel.prototype, "control", {
                    get: function () { return this.form; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NgFormModel.prototype, "path", {
                    get: function () { return []; },
                    enumerable: true,
                    configurable: true
                });
                NgFormModel.prototype.addControl = function (dir) {
                    var ctrl = this.form.find(dir.path);
                    shared_5.setUpControl(ctrl, dir);
                    ctrl.updateValueAndValidity({ emitEvent: false });
                    this.directives.push(dir);
                };
                NgFormModel.prototype.getControl = function (dir) { return this.form.find(dir.path); };
                NgFormModel.prototype.removeControl = function (dir) { collection_20.ListWrapper.remove(this.directives, dir); };
                NgFormModel.prototype.addControlGroup = function (dir) {
                    var ctrl = this.form.find(dir.path);
                    shared_5.setUpControlGroup(ctrl, dir);
                    ctrl.updateValueAndValidity({ emitEvent: false });
                };
                NgFormModel.prototype.removeControlGroup = function (dir) { };
                NgFormModel.prototype.getControlGroup = function (dir) {
                    return this.form.find(dir.path);
                };
                NgFormModel.prototype.updateModel = function (dir, value) {
                    var ctrl = this.form.find(dir.path);
                    ctrl.updateValue(value);
                };
                NgFormModel.prototype.onSubmit = function () {
                    async_8.ObservableWrapper.callEmit(this.ngSubmit, null);
                    return false;
                };
                /** @internal */
                NgFormModel.prototype._updateDomValue = function () {
                    var _this = this;
                    this.directives.forEach(function (dir) {
                        var ctrl = _this.form.find(dir.path);
                        dir.valueAccessor.writeValue(ctrl.value);
                    });
                };
                NgFormModel = __decorate([
                    core_70.Directive({
                        selector: '[ngFormModel]',
                        bindings: [formDirectiveProvider],
                        inputs: ['form: ngFormModel'],
                        host: { '(submit)': 'onSubmit()' },
                        outputs: ['ngSubmit'],
                        exportAs: 'ngForm'
                    }),
                    __param(0, core_70.Optional()),
                    __param(0, core_70.Self()),
                    __param(0, core_70.Inject(validators_7.NG_VALIDATORS)),
                    __param(1, core_70.Optional()),
                    __param(1, core_70.Self()),
                    __param(1, core_70.Inject(validators_7.NG_ASYNC_VALIDATORS)), 
                    __metadata('design:paramtypes', [Array, Array])
                ], NgFormModel);
                return NgFormModel;
            }(control_container_3.ControlContainer));
            exports_106("NgFormModel", NgFormModel);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/common/forms/directives/ng_form", ['angular2/src/facade/async', 'angular2/src/facade/collection', 'angular2/src/facade/lang', 'angular2/core', "test/node_modules/angular2/ts/src/common/forms/directives/control_container", "test/node_modules/angular2/ts/src/common/forms/model", "test/node_modules/angular2/ts/src/common/forms/directives/shared", "test/node_modules/angular2/ts/src/common/forms/validators"], function(exports_107, context_107) {
    "use strict";
    var __moduleName = context_107 && context_107.id;
    var async_9, collection_21, lang_47, core_71, control_container_4, model_2, shared_6, validators_8;
    var formDirectiveProvider, NgForm;
    return {
        setters:[
            function (async_9_1) {
                async_9 = async_9_1;
            },
            function (collection_21_1) {
                collection_21 = collection_21_1;
            },
            function (lang_47_1) {
                lang_47 = lang_47_1;
            },
            function (core_71_1) {
                core_71 = core_71_1;
            },
            function (control_container_4_1) {
                control_container_4 = control_container_4_1;
            },
            function (model_2_1) {
                model_2 = model_2_1;
            },
            function (shared_6_1) {
                shared_6 = shared_6_1;
            },
            function (validators_8_1) {
                validators_8 = validators_8_1;
            }],
        execute: function() {
            formDirectiveProvider = lang_47.CONST_EXPR(new core_71.Provider(control_container_4.ControlContainer, { useExisting: core_71.forwardRef(function () { return NgForm; }) }));
            /**
             * If `NgForm` is bound in a component, `<form>` elements in that component will be
             * upgraded to use the Angular form system.
             *
             * ### Typical Use
             *
             * Include `FORM_DIRECTIVES` in the `directives` section of a {@link View} annotation
             * to use `NgForm` and its associated controls.
             *
             * ### Structure
             *
             * An Angular form is a collection of `Control`s in some hierarchy.
             * `Control`s can be at the top level or can be organized in `ControlGroup`s
             * or `ControlArray`s. This hierarchy is reflected in the form's `value`, a
             * JSON object that mirrors the form structure.
             *
             * ### Submission
             *
             * The `ngSubmit` event signals when the user triggers a form submission.
             *
             * ### Example ([live demo](http://plnkr.co/edit/ltdgYj4P0iY64AR71EpL?p=preview))
             *
             *  ```typescript
             * @Component({
             *   selector: 'my-app',
             *   template: `
             *     <div>
             *       <p>Submit the form to see the data object Angular builds</p>
             *       <h2>NgForm demo</h2>
             *       <form #f="ngForm" (ngSubmit)="onSubmit(f.value)">
             *         <h3>Control group: credentials</h3>
             *         <div ngControlGroup="credentials">
             *           <p>Login: <input type="text" ngControl="login"></p>
             *           <p>Password: <input type="password" ngControl="password"></p>
             *         </div>
             *         <h3>Control group: person</h3>
             *         <div ngControlGroup="person">
             *           <p>First name: <input type="text" ngControl="firstName"></p>
             *           <p>Last name: <input type="text" ngControl="lastName"></p>
             *         </div>
             *         <button type="submit">Submit Form</button>
             *       <p>Form data submitted:</p>
             *       </form>
             *       <pre>{{data}}</pre>
             *     </div>
             * `,
             *   directives: [CORE_DIRECTIVES, FORM_DIRECTIVES]
             * })
             * export class App {
             *   constructor() {}
             *
             *   data: string;
             *
             *   onSubmit(data) {
             *     this.data = JSON.stringify(data, null, 2);
             *   }
             * }
             *  ```
             */
            NgForm = (function (_super) {
                __extends(NgForm, _super);
                function NgForm(validators, asyncValidators) {
                    _super.call(this);
                    this.ngSubmit = new async_9.EventEmitter();
                    this.form = new model_2.ControlGroup({}, null, shared_6.composeValidators(validators), shared_6.composeAsyncValidators(asyncValidators));
                }
                Object.defineProperty(NgForm.prototype, "formDirective", {
                    get: function () { return this; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NgForm.prototype, "control", {
                    get: function () { return this.form; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NgForm.prototype, "path", {
                    get: function () { return []; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NgForm.prototype, "controls", {
                    get: function () { return this.form.controls; },
                    enumerable: true,
                    configurable: true
                });
                NgForm.prototype.addControl = function (dir) {
                    var _this = this;
                    async_9.PromiseWrapper.scheduleMicrotask(function () {
                        var container = _this._findContainer(dir.path);
                        var ctrl = new model_2.Control();
                        shared_6.setUpControl(ctrl, dir);
                        container.addControl(dir.name, ctrl);
                        ctrl.updateValueAndValidity({ emitEvent: false });
                    });
                };
                NgForm.prototype.getControl = function (dir) { return this.form.find(dir.path); };
                NgForm.prototype.removeControl = function (dir) {
                    var _this = this;
                    async_9.PromiseWrapper.scheduleMicrotask(function () {
                        var container = _this._findContainer(dir.path);
                        if (lang_47.isPresent(container)) {
                            container.removeControl(dir.name);
                            container.updateValueAndValidity({ emitEvent: false });
                        }
                    });
                };
                NgForm.prototype.addControlGroup = function (dir) {
                    var _this = this;
                    async_9.PromiseWrapper.scheduleMicrotask(function () {
                        var container = _this._findContainer(dir.path);
                        var group = new model_2.ControlGroup({});
                        shared_6.setUpControlGroup(group, dir);
                        container.addControl(dir.name, group);
                        group.updateValueAndValidity({ emitEvent: false });
                    });
                };
                NgForm.prototype.removeControlGroup = function (dir) {
                    var _this = this;
                    async_9.PromiseWrapper.scheduleMicrotask(function () {
                        var container = _this._findContainer(dir.path);
                        if (lang_47.isPresent(container)) {
                            container.removeControl(dir.name);
                            container.updateValueAndValidity({ emitEvent: false });
                        }
                    });
                };
                NgForm.prototype.getControlGroup = function (dir) {
                    return this.form.find(dir.path);
                };
                NgForm.prototype.updateModel = function (dir, value) {
                    var _this = this;
                    async_9.PromiseWrapper.scheduleMicrotask(function () {
                        var ctrl = _this.form.find(dir.path);
                        ctrl.updateValue(value);
                    });
                };
                NgForm.prototype.onSubmit = function () {
                    async_9.ObservableWrapper.callEmit(this.ngSubmit, null);
                    return false;
                };
                /** @internal */
                NgForm.prototype._findContainer = function (path) {
                    path.pop();
                    return collection_21.ListWrapper.isEmpty(path) ? this.form : this.form.find(path);
                };
                NgForm = __decorate([
                    core_71.Directive({
                        selector: 'form:not([ngNoForm]):not([ngFormModel]),ngForm,[ngForm]',
                        bindings: [formDirectiveProvider],
                        host: {
                            '(submit)': 'onSubmit()',
                        },
                        outputs: ['ngSubmit'],
                        exportAs: 'ngForm'
                    }),
                    __param(0, core_71.Optional()),
                    __param(0, core_71.Self()),
                    __param(0, core_71.Inject(validators_8.NG_VALIDATORS)),
                    __param(1, core_71.Optional()),
                    __param(1, core_71.Self()),
                    __param(1, core_71.Inject(validators_8.NG_ASYNC_VALIDATORS)), 
                    __metadata('design:paramtypes', [Array, Array])
                ], NgForm);
                return NgForm;
            }(control_container_4.ControlContainer));
            exports_107("NgForm", NgForm);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/common/forms/directives/ng_control_status", ['angular2/core', "test/node_modules/angular2/ts/src/common/forms/directives/ng_control", 'angular2/src/facade/lang'], function(exports_108, context_108) {
    "use strict";
    var __moduleName = context_108 && context_108.id;
    var core_72, ng_control_5, lang_48;
    var NgControlStatus;
    return {
        setters:[
            function (core_72_1) {
                core_72 = core_72_1;
            },
            function (ng_control_5_1) {
                ng_control_5 = ng_control_5_1;
            },
            function (lang_48_1) {
                lang_48 = lang_48_1;
            }],
        execute: function() {
            /**
             * Directive automatically applied to Angular forms that sets CSS classes
             * based on control status (valid/invalid/dirty/etc).
             */
            NgControlStatus = (function () {
                function NgControlStatus(cd) {
                    this._cd = cd;
                }
                Object.defineProperty(NgControlStatus.prototype, "ngClassUntouched", {
                    get: function () {
                        return lang_48.isPresent(this._cd.control) ? this._cd.control.untouched : false;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NgControlStatus.prototype, "ngClassTouched", {
                    get: function () {
                        return lang_48.isPresent(this._cd.control) ? this._cd.control.touched : false;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NgControlStatus.prototype, "ngClassPristine", {
                    get: function () {
                        return lang_48.isPresent(this._cd.control) ? this._cd.control.pristine : false;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NgControlStatus.prototype, "ngClassDirty", {
                    get: function () {
                        return lang_48.isPresent(this._cd.control) ? this._cd.control.dirty : false;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NgControlStatus.prototype, "ngClassValid", {
                    get: function () {
                        return lang_48.isPresent(this._cd.control) ? this._cd.control.valid : false;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NgControlStatus.prototype, "ngClassInvalid", {
                    get: function () {
                        return lang_48.isPresent(this._cd.control) ? !this._cd.control.valid : false;
                    },
                    enumerable: true,
                    configurable: true
                });
                NgControlStatus = __decorate([
                    core_72.Directive({
                        selector: '[ngControl],[ngModel],[ngFormControl]',
                        host: {
                            '[class.ng-untouched]': 'ngClassUntouched',
                            '[class.ng-touched]': 'ngClassTouched',
                            '[class.ng-pristine]': 'ngClassPristine',
                            '[class.ng-dirty]': 'ngClassDirty',
                            '[class.ng-valid]': 'ngClassValid',
                            '[class.ng-invalid]': 'ngClassInvalid'
                        }
                    }),
                    __param(0, core_72.Self()), 
                    __metadata('design:paramtypes', [ng_control_5.NgControl])
                ], NgControlStatus);
                return NgControlStatus;
            }());
            exports_108("NgControlStatus", NgControlStatus);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/common/forms/directives", ['angular2/src/facade/lang', "test/node_modules/angular2/ts/src/common/forms/directives/ng_control_name", "test/node_modules/angular2/ts/src/common/forms/directives/ng_form_control", "test/node_modules/angular2/ts/src/common/forms/directives/ng_model", "test/node_modules/angular2/ts/src/common/forms/directives/ng_control_group", "test/node_modules/angular2/ts/src/common/forms/directives/ng_form_model", "test/node_modules/angular2/ts/src/common/forms/directives/ng_form", "test/node_modules/angular2/ts/src/common/forms/directives/default_value_accessor", "test/node_modules/angular2/ts/src/common/forms/directives/checkbox_value_accessor", "test/node_modules/angular2/ts/src/common/forms/directives/number_value_accessor", "test/node_modules/angular2/ts/src/common/forms/directives/radio_control_value_accessor", "test/node_modules/angular2/ts/src/common/forms/directives/ng_control_status", "test/node_modules/angular2/ts/src/common/forms/directives/select_control_value_accessor", "test/node_modules/angular2/ts/src/common/forms/directives/validators", "test/node_modules/angular2/ts/src/common/forms/directives/ng_control"], function(exports_109, context_109) {
    "use strict";
    var __moduleName = context_109 && context_109.id;
    var lang_49, ng_control_name_1, ng_form_control_1, ng_model_1, ng_control_group_1, ng_form_model_1, ng_form_1, default_value_accessor_2, checkbox_value_accessor_2, number_value_accessor_2, radio_control_value_accessor_2, ng_control_status_1, select_control_value_accessor_2, validators_9;
    var FORM_DIRECTIVES;
    return {
        setters:[
            function (lang_49_1) {
                lang_49 = lang_49_1;
            },
            function (ng_control_name_1_1) {
                ng_control_name_1 = ng_control_name_1_1;
                exports_109({
                    "NgControlName": ng_control_name_1_1["NgControlName"]
                });
            },
            function (ng_form_control_1_1) {
                ng_form_control_1 = ng_form_control_1_1;
                exports_109({
                    "NgFormControl": ng_form_control_1_1["NgFormControl"]
                });
            },
            function (ng_model_1_1) {
                ng_model_1 = ng_model_1_1;
                exports_109({
                    "NgModel": ng_model_1_1["NgModel"]
                });
            },
            function (ng_control_group_1_1) {
                ng_control_group_1 = ng_control_group_1_1;
                exports_109({
                    "NgControlGroup": ng_control_group_1_1["NgControlGroup"]
                });
            },
            function (ng_form_model_1_1) {
                ng_form_model_1 = ng_form_model_1_1;
                exports_109({
                    "NgFormModel": ng_form_model_1_1["NgFormModel"]
                });
            },
            function (ng_form_1_1) {
                ng_form_1 = ng_form_1_1;
                exports_109({
                    "NgForm": ng_form_1_1["NgForm"]
                });
            },
            function (default_value_accessor_2_1) {
                default_value_accessor_2 = default_value_accessor_2_1;
                exports_109({
                    "DefaultValueAccessor": default_value_accessor_2_1["DefaultValueAccessor"]
                });
            },
            function (checkbox_value_accessor_2_1) {
                checkbox_value_accessor_2 = checkbox_value_accessor_2_1;
                exports_109({
                    "CheckboxControlValueAccessor": checkbox_value_accessor_2_1["CheckboxControlValueAccessor"]
                });
            },
            function (number_value_accessor_2_1) {
                number_value_accessor_2 = number_value_accessor_2_1;
                exports_109({
                    "NumberValueAccessor": number_value_accessor_2_1["NumberValueAccessor"]
                });
            },
            function (radio_control_value_accessor_2_1) {
                radio_control_value_accessor_2 = radio_control_value_accessor_2_1;
                exports_109({
                    "RadioControlValueAccessor": radio_control_value_accessor_2_1["RadioControlValueAccessor"],
                    "RadioButtonState": radio_control_value_accessor_2_1["RadioButtonState"]
                });
            },
            function (ng_control_status_1_1) {
                ng_control_status_1 = ng_control_status_1_1;
                exports_109({
                    "NgControlStatus": ng_control_status_1_1["NgControlStatus"]
                });
            },
            function (select_control_value_accessor_2_1) {
                select_control_value_accessor_2 = select_control_value_accessor_2_1;
                exports_109({
                    "SelectControlValueAccessor": select_control_value_accessor_2_1["SelectControlValueAccessor"],
                    "NgSelectOption": select_control_value_accessor_2_1["NgSelectOption"]
                });
            },
            function (validators_9_1) {
                validators_9 = validators_9_1;
                exports_109({
                    "RequiredValidator": validators_9_1["RequiredValidator"],
                    "MinLengthValidator": validators_9_1["MinLengthValidator"],
                    "MaxLengthValidator": validators_9_1["MaxLengthValidator"],
                    "PatternValidator": validators_9_1["PatternValidator"]
                });
            },
            function (ng_control_6_1) {
                exports_109({
                    "NgControl": ng_control_6_1["NgControl"]
                });
            }],
        execute: function() {
            /**
             *
             * A list of all the form directives used as part of a `@Component` annotation.
             *
             *  This is a shorthand for importing them each individually.
             *
             * ### Example
             *
             * ```typescript
             * @Component({
             *   selector: 'my-app',
             *   directives: [FORM_DIRECTIVES]
             * })
             * class MyApp {}
             * ```
             */
            exports_109("FORM_DIRECTIVES", FORM_DIRECTIVES = lang_49.CONST_EXPR([
                ng_control_name_1.NgControlName,
                ng_control_group_1.NgControlGroup,
                ng_form_control_1.NgFormControl,
                ng_model_1.NgModel,
                ng_form_model_1.NgFormModel,
                ng_form_1.NgForm,
                select_control_value_accessor_2.NgSelectOption,
                default_value_accessor_2.DefaultValueAccessor,
                number_value_accessor_2.NumberValueAccessor,
                checkbox_value_accessor_2.CheckboxControlValueAccessor,
                select_control_value_accessor_2.SelectControlValueAccessor,
                radio_control_value_accessor_2.RadioControlValueAccessor,
                ng_control_status_1.NgControlStatus,
                validators_9.RequiredValidator,
                validators_9.MinLengthValidator,
                validators_9.MaxLengthValidator,
                validators_9.PatternValidator
            ]));
        }
    }
});
System.register("test/node_modules/angular2/ts/src/common/forms/form_builder", ['angular2/core', 'angular2/src/facade/collection', 'angular2/src/facade/lang', "test/node_modules/angular2/ts/src/common/forms/model"], function(exports_110, context_110) {
    "use strict";
    var __moduleName = context_110 && context_110.id;
    var core_73, collection_22, lang_50, modelModule;
    var FormBuilder;
    return {
        setters:[
            function (core_73_1) {
                core_73 = core_73_1;
            },
            function (collection_22_1) {
                collection_22 = collection_22_1;
            },
            function (lang_50_1) {
                lang_50 = lang_50_1;
            },
            function (modelModule_1) {
                modelModule = modelModule_1;
            }],
        execute: function() {
            /**
             * Creates a form object from a user-specified configuration.
             *
             * ### Example ([live demo](http://plnkr.co/edit/ENgZo8EuIECZNensZCVr?p=preview))
             *
             * ```typescript
             * @Component({
             *   selector: 'my-app',
             *   viewBindings: [FORM_BINDINGS]
             *   template: `
             *     <form [ngFormModel]="loginForm">
             *       <p>Login <input ngControl="login"></p>
             *       <div ngControlGroup="passwordRetry">
             *         <p>Password <input type="password" ngControl="password"></p>
             *         <p>Confirm password <input type="password" ngControl="passwordConfirmation"></p>
             *       </div>
             *     </form>
             *     <h3>Form value:</h3>
             *     <pre>{{value}}</pre>
             *   `,
             *   directives: [FORM_DIRECTIVES]
             * })
             * export class App {
             *   loginForm: ControlGroup;
             *
             *   constructor(builder: FormBuilder) {
             *     this.loginForm = builder.group({
             *       login: ["", Validators.required],
             *       passwordRetry: builder.group({
             *         password: ["", Validators.required],
             *         passwordConfirmation: ["", Validators.required, asyncValidator]
             *       })
             *     });
             *   }
             *
             *   get value(): string {
             *     return JSON.stringify(this.loginForm.value, null, 2);
             *   }
             * }
             * ```
             */
            FormBuilder = (function () {
                function FormBuilder() {
                }
                /**
                 * Construct a new {@link ControlGroup} with the given map of configuration.
                 * Valid keys for the `extra` parameter map are `optionals` and `validator`.
                 *
                 * See the {@link ControlGroup} constructor for more details.
                 */
                FormBuilder.prototype.group = function (controlsConfig, extra) {
                    if (extra === void 0) { extra = null; }
                    var controls = this._reduceControls(controlsConfig);
                    var optionals = (lang_50.isPresent(extra) ? collection_22.StringMapWrapper.get(extra, "optionals") : null);
                    var validator = lang_50.isPresent(extra) ? collection_22.StringMapWrapper.get(extra, "validator") : null;
                    var asyncValidator = lang_50.isPresent(extra) ? collection_22.StringMapWrapper.get(extra, "asyncValidator") : null;
                    return new modelModule.ControlGroup(controls, optionals, validator, asyncValidator);
                };
                /**
                 * Construct a new {@link Control} with the given `value`,`validator`, and `asyncValidator`.
                 */
                FormBuilder.prototype.control = function (value, validator, asyncValidator) {
                    if (validator === void 0) { validator = null; }
                    if (asyncValidator === void 0) { asyncValidator = null; }
                    return new modelModule.Control(value, validator, asyncValidator);
                };
                /**
                 * Construct an array of {@link Control}s from the given `controlsConfig` array of
                 * configuration, with the given optional `validator` and `asyncValidator`.
                 */
                FormBuilder.prototype.array = function (controlsConfig, validator, asyncValidator) {
                    var _this = this;
                    if (validator === void 0) { validator = null; }
                    if (asyncValidator === void 0) { asyncValidator = null; }
                    var controls = controlsConfig.map(function (c) { return _this._createControl(c); });
                    return new modelModule.ControlArray(controls, validator, asyncValidator);
                };
                /** @internal */
                FormBuilder.prototype._reduceControls = function (controlsConfig) {
                    var _this = this;
                    var controls = {};
                    collection_22.StringMapWrapper.forEach(controlsConfig, function (controlConfig, controlName) {
                        controls[controlName] = _this._createControl(controlConfig);
                    });
                    return controls;
                };
                /** @internal */
                FormBuilder.prototype._createControl = function (controlConfig) {
                    if (controlConfig instanceof modelModule.Control ||
                        controlConfig instanceof modelModule.ControlGroup ||
                        controlConfig instanceof modelModule.ControlArray) {
                        return controlConfig;
                    }
                    else if (lang_50.isArray(controlConfig)) {
                        var value = controlConfig[0];
                        var validator = controlConfig.length > 1 ? controlConfig[1] : null;
                        var asyncValidator = controlConfig.length > 2 ? controlConfig[2] : null;
                        return this.control(value, validator, asyncValidator);
                    }
                    else {
                        return this.control(controlConfig);
                    }
                };
                FormBuilder = __decorate([
                    core_73.Injectable(), 
                    __metadata('design:paramtypes', [])
                ], FormBuilder);
                return FormBuilder;
            }());
            exports_110("FormBuilder", FormBuilder);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/common/forms", ["test/node_modules/angular2/ts/src/common/forms/model", "test/node_modules/angular2/ts/src/common/forms/directives/abstract_control_directive", "test/node_modules/angular2/ts/src/common/forms/directives/control_container", "test/node_modules/angular2/ts/src/common/forms/directives/ng_control_name", "test/node_modules/angular2/ts/src/common/forms/directives/ng_form_control", "test/node_modules/angular2/ts/src/common/forms/directives/ng_model", "test/node_modules/angular2/ts/src/common/forms/directives/ng_control", "test/node_modules/angular2/ts/src/common/forms/directives/ng_control_group", "test/node_modules/angular2/ts/src/common/forms/directives/ng_form_model", "test/node_modules/angular2/ts/src/common/forms/directives/ng_form", "test/node_modules/angular2/ts/src/common/forms/directives/control_value_accessor", "test/node_modules/angular2/ts/src/common/forms/directives/default_value_accessor", "test/node_modules/angular2/ts/src/common/forms/directives/ng_control_status", "test/node_modules/angular2/ts/src/common/forms/directives/checkbox_value_accessor", "test/node_modules/angular2/ts/src/common/forms/directives/select_control_value_accessor", "test/node_modules/angular2/ts/src/common/forms/directives", "test/node_modules/angular2/ts/src/common/forms/validators", "test/node_modules/angular2/ts/src/common/forms/directives/validators", "test/node_modules/angular2/ts/src/common/forms/form_builder", "test/node_modules/angular2/ts/src/common/forms/directives/radio_control_value_accessor", 'angular2/src/facade/lang'], function(exports_111, context_111) {
    "use strict";
    var __moduleName = context_111 && context_111.id;
    var form_builder_1, radio_control_value_accessor_4, lang_51;
    var FORM_PROVIDERS, FORM_BINDINGS;
    return {
        setters:[
            function (model_3_1) {
                exports_111({
                    "AbstractControl": model_3_1["AbstractControl"],
                    "Control": model_3_1["Control"],
                    "ControlGroup": model_3_1["ControlGroup"],
                    "ControlArray": model_3_1["ControlArray"]
                });
            },
            function (abstract_control_directive_3_1) {
                exports_111({
                    "AbstractControlDirective": abstract_control_directive_3_1["AbstractControlDirective"]
                });
            },
            function (control_container_5_1) {
                exports_111({
                    "ControlContainer": control_container_5_1["ControlContainer"]
                });
            },
            function (ng_control_name_3_1) {
                exports_111({
                    "NgControlName": ng_control_name_3_1["NgControlName"]
                });
            },
            function (ng_form_control_3_1) {
                exports_111({
                    "NgFormControl": ng_form_control_3_1["NgFormControl"]
                });
            },
            function (ng_model_3_1) {
                exports_111({
                    "NgModel": ng_model_3_1["NgModel"]
                });
            },
            function (ng_control_7_1) {
                exports_111({
                    "NgControl": ng_control_7_1["NgControl"]
                });
            },
            function (ng_control_group_3_1) {
                exports_111({
                    "NgControlGroup": ng_control_group_3_1["NgControlGroup"]
                });
            },
            function (ng_form_model_3_1) {
                exports_111({
                    "NgFormModel": ng_form_model_3_1["NgFormModel"]
                });
            },
            function (ng_form_3_1) {
                exports_111({
                    "NgForm": ng_form_3_1["NgForm"]
                });
            },
            function (control_value_accessor_9_1) {
                exports_111({
                    "ControlValueAccessor": control_value_accessor_9_1["ControlValueAccessor"],
                    "NG_VALUE_ACCESSOR": control_value_accessor_9_1["NG_VALUE_ACCESSOR"]
                });
            },
            function (default_value_accessor_4_1) {
                exports_111({
                    "DefaultValueAccessor": default_value_accessor_4_1["DefaultValueAccessor"]
                });
            },
            function (ng_control_status_3_1) {
                exports_111({
                    "NgControlStatus": ng_control_status_3_1["NgControlStatus"]
                });
            },
            function (checkbox_value_accessor_4_1) {
                exports_111({
                    "CheckboxControlValueAccessor": checkbox_value_accessor_4_1["CheckboxControlValueAccessor"]
                });
            },
            function (select_control_value_accessor_4_1) {
                exports_111({
                    "NgSelectOption": select_control_value_accessor_4_1["NgSelectOption"],
                    "SelectControlValueAccessor": select_control_value_accessor_4_1["SelectControlValueAccessor"]
                });
            },
            function (directives_1_1) {
                exports_111({
                    "FORM_DIRECTIVES": directives_1_1["FORM_DIRECTIVES"],
                    "RadioButtonState": directives_1_1["RadioButtonState"]
                });
            },
            function (validators_11_1) {
                exports_111({
                    "NG_VALIDATORS": validators_11_1["NG_VALIDATORS"],
                    "NG_ASYNC_VALIDATORS": validators_11_1["NG_ASYNC_VALIDATORS"],
                    "Validators": validators_11_1["Validators"]
                });
            },
            function (validators_12_1) {
                exports_111({
                    "RequiredValidator": validators_12_1["RequiredValidator"],
                    "MinLengthValidator": validators_12_1["MinLengthValidator"],
                    "MaxLengthValidator": validators_12_1["MaxLengthValidator"],
                    "PatternValidator": validators_12_1["PatternValidator"],
                    "Validator": validators_12_1["Validator"]
                });
            },
            function (form_builder_2_1) {
                exports_111({
                    "FormBuilder": form_builder_2_1["FormBuilder"]
                });
                form_builder_1 = form_builder_2_1;
            },
            function (radio_control_value_accessor_4_1) {
                radio_control_value_accessor_4 = radio_control_value_accessor_4_1;
            },
            function (lang_51_1) {
                lang_51 = lang_51_1;
            }],
        execute: function() {
            /**
             * Shorthand set of providers used for building Angular forms.
             *
             * ### Example
             *
             * ```typescript
             * bootstrap(MyApp, [FORM_PROVIDERS]);
             * ```
             */
            exports_111("FORM_PROVIDERS", FORM_PROVIDERS = lang_51.CONST_EXPR([form_builder_1.FormBuilder, radio_control_value_accessor_4.RadioControlRegistry]));
            /**
             * See {@link FORM_PROVIDERS} instead.
             *
             * @deprecated
             */
            exports_111("FORM_BINDINGS", FORM_BINDINGS = FORM_PROVIDERS);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/common/common_directives", ['angular2/src/facade/lang', "test/node_modules/angular2/ts/src/common/forms", "test/node_modules/angular2/ts/src/common/directives"], function(exports_112, context_112) {
    "use strict";
    var __moduleName = context_112 && context_112.id;
    var lang_52, forms_1, directives_2;
    var COMMON_DIRECTIVES;
    return {
        setters:[
            function (lang_52_1) {
                lang_52 = lang_52_1;
            },
            function (forms_1_1) {
                forms_1 = forms_1_1;
            },
            function (directives_2_1) {
                directives_2 = directives_2_1;
            }],
        execute: function() {
            /**
             * A collection of Angular core directives that are likely to be used in each and every Angular
             * application. This includes core directives (e.g., NgIf and NgFor), and forms directives (e.g.,
             * NgModel).
             *
             * This collection can be used to quickly enumerate all the built-in directives in the `directives`
             * property of the `@Component` decorator.
             *
             * ### Example
             *
             * Instead of writing:
             *
             * ```typescript
             * import {NgClass, NgIf, NgFor, NgSwitch, NgSwitchWhen, NgSwitchDefault, NgModel, NgForm} from
             * 'angular2/common';
             * import {OtherDirective} from './myDirectives';
             *
             * @Component({
             *   selector: 'my-component',
             *   templateUrl: 'myComponent.html',
             *   directives: [NgClass, NgIf, NgFor, NgSwitch, NgSwitchWhen, NgSwitchDefault, NgModel, NgForm,
             * OtherDirective]
             * })
             * export class MyComponent {
             *   ...
             * }
             * ```
             * one could import all the common directives at once:
             *
             * ```typescript
             * import {COMMON_DIRECTIVES} from 'angular2/common';
             * import {OtherDirective} from './myDirectives';
             *
             * @Component({
             *   selector: 'my-component',
             *   templateUrl: 'myComponent.html',
             *   directives: [COMMON_DIRECTIVES, OtherDirective]
             * })
             * export class MyComponent {
             *   ...
             * }
             * ```
             */
            exports_112("COMMON_DIRECTIVES", COMMON_DIRECTIVES = lang_52.CONST_EXPR([directives_2.CORE_DIRECTIVES, forms_1.FORM_DIRECTIVES]));
        }
    }
});
System.register("test/node_modules/angular2/ts/common", ["test/node_modules/angular2/ts/src/common/pipes", "test/node_modules/angular2/ts/src/common/directives", "test/node_modules/angular2/ts/src/common/forms", "test/node_modules/angular2/ts/src/common/common_directives"], function(exports_113, context_113) {
    "use strict";
    var __moduleName = context_113 && context_113.id;
    function exportStar_2(m) {
        var exports = {};
        for(var n in m) {
            if (n !== "default") exports[n] = m[n];
        }
        exports_113(exports);
    }
    return {
        setters:[
            function (pipes_1_1) {
                exportStar_2(pipes_1_1);
            },
            function (directives_3_1) {
                exportStar_2(directives_3_1);
            },
            function (forms_2_1) {
                exportStar_2(forms_2_1);
            },
            function (common_directives_1_1) {
                exportStar_2(common_directives_1_1);
            }],
        execute: function() {
        }
    }
});
System.register("test/node_modules/angular2/ts/src/compiler/url_resolver", ['angular2/src/core/di', 'angular2/src/facade/lang', 'angular2/src/core/application_tokens'], function(exports_114, context_114) {
    "use strict";
    var __moduleName = context_114 && context_114.id;
    var di_5, lang_53, application_tokens_1, di_6;
    var DEFAULT_PACKAGE_URL_PROVIDER, UrlResolver, _splitRe, _ComponentIndex;
    /**
     * Create a {@link UrlResolver} with no package prefix.
     */
    function createWithoutPackagePrefix() {
        return new UrlResolver();
    }
    exports_114("createWithoutPackagePrefix", createWithoutPackagePrefix);
    /**
     * Extract the scheme of a URL.
     */
    function getUrlScheme(url) {
        var match = _split(url);
        return (match && match[_ComponentIndex.Scheme]) || "";
    }
    exports_114("getUrlScheme", getUrlScheme);
    // The code below is adapted from Traceur:
    // https://github.com/google/traceur-compiler/blob/9511c1dafa972bf0de1202a8a863bad02f0f95a8/src/runtime/url.js
    /**
     * Builds a URI string from already-encoded parts.
     *
     * No encoding is performed.  Any component may be omitted as either null or
     * undefined.
     *
     * @param {?string=} opt_scheme The scheme such as 'http'.
     * @param {?string=} opt_userInfo The user name before the '@'.
     * @param {?string=} opt_domain The domain such as 'www.google.com', already
     *     URI-encoded.
     * @param {(string|null)=} opt_port The port number.
     * @param {?string=} opt_path The path, already URI-encoded.  If it is not
     *     empty, it must begin with a slash.
     * @param {?string=} opt_queryData The URI-encoded query data.
     * @param {?string=} opt_fragment The URI-encoded fragment identifier.
     * @return {string} The fully combined URI.
     */
    function _buildFromEncodedParts(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
        var out = [];
        if (lang_53.isPresent(opt_scheme)) {
            out.push(opt_scheme + ':');
        }
        if (lang_53.isPresent(opt_domain)) {
            out.push('//');
            if (lang_53.isPresent(opt_userInfo)) {
                out.push(opt_userInfo + '@');
            }
            out.push(opt_domain);
            if (lang_53.isPresent(opt_port)) {
                out.push(':' + opt_port);
            }
        }
        if (lang_53.isPresent(opt_path)) {
            out.push(opt_path);
        }
        if (lang_53.isPresent(opt_queryData)) {
            out.push('?' + opt_queryData);
        }
        if (lang_53.isPresent(opt_fragment)) {
            out.push('#' + opt_fragment);
        }
        return out.join('');
    }
    /**
     * Splits a URI into its component parts.
     *
     * Each component can be accessed via the component indices; for example:
     * <pre>
     * goog.uri.utils.split(someStr)[goog.uri.utils.CompontentIndex.QUERY_DATA];
     * </pre>
     *
     * @param {string} uri The URI string to examine.
     * @return {!Array.<string|undefined>} Each component still URI-encoded.
     *     Each component that is present will contain the encoded value, whereas
     *     components that are not present will be undefined or empty, depending
     *     on the browser's regular expression implementation.  Never null, since
     *     arbitrary strings may still look like path names.
     */
    function _split(uri) {
        return lang_53.RegExpWrapper.firstMatch(_splitRe, uri);
    }
    /**
      * Removes dot segments in given path component, as described in
      * RFC 3986, section 5.2.4.
      *
      * @param {string} path A non-empty path component.
      * @return {string} Path component with removed dot segments.
      */
    function _removeDotSegments(path) {
        if (path == '/')
            return '/';
        var leadingSlash = path[0] == '/' ? '/' : '';
        var trailingSlash = path[path.length - 1] === '/' ? '/' : '';
        var segments = path.split('/');
        var out = [];
        var up = 0;
        for (var pos = 0; pos < segments.length; pos++) {
            var segment = segments[pos];
            switch (segment) {
                case '':
                case '.':
                    break;
                case '..':
                    if (out.length > 0) {
                        out.pop();
                    }
                    else {
                        up++;
                    }
                    break;
                default:
                    out.push(segment);
            }
        }
        if (leadingSlash == '') {
            while (up-- > 0) {
                out.unshift('..');
            }
            if (out.length === 0)
                out.push('.');
        }
        return leadingSlash + out.join('/') + trailingSlash;
    }
    /**
     * Takes an array of the parts from split and canonicalizes the path part
     * and then joins all the parts.
     * @param {Array.<string?>} parts
     * @return {string}
     */
    function _joinAndCanonicalizePath(parts) {
        var path = parts[_ComponentIndex.Path];
        path = lang_53.isBlank(path) ? '' : _removeDotSegments(path);
        parts[_ComponentIndex.Path] = path;
        return _buildFromEncodedParts(parts[_ComponentIndex.Scheme], parts[_ComponentIndex.UserInfo], parts[_ComponentIndex.Domain], parts[_ComponentIndex.Port], path, parts[_ComponentIndex.QueryData], parts[_ComponentIndex.Fragment]);
    }
    /**
     * Resolves a URL.
     * @param {string} base The URL acting as the base URL.
     * @param {string} to The URL to resolve.
     * @return {string}
     */
    function _resolveUrl(base, url) {
        var parts = _split(encodeURI(url));
        var baseParts = _split(base);
        if (lang_53.isPresent(parts[_ComponentIndex.Scheme])) {
            return _joinAndCanonicalizePath(parts);
        }
        else {
            parts[_ComponentIndex.Scheme] = baseParts[_ComponentIndex.Scheme];
        }
        for (var i = _ComponentIndex.Scheme; i <= _ComponentIndex.Port; i++) {
            if (lang_53.isBlank(parts[i])) {
                parts[i] = baseParts[i];
            }
        }
        if (parts[_ComponentIndex.Path][0] == '/') {
            return _joinAndCanonicalizePath(parts);
        }
        var path = baseParts[_ComponentIndex.Path];
        if (lang_53.isBlank(path))
            path = '/';
        var index = path.lastIndexOf('/');
        path = path.substring(0, index + 1) + parts[_ComponentIndex.Path];
        parts[_ComponentIndex.Path] = path;
        return _joinAndCanonicalizePath(parts);
    }
    return {
        setters:[
            function (di_5_1) {
                di_5 = di_5_1;
                di_6 = di_5_1;
            },
            function (lang_53_1) {
                lang_53 = lang_53_1;
            },
            function (application_tokens_1_1) {
                application_tokens_1 = application_tokens_1_1;
            }],
        execute: function() {
            /**
             * A default provider for {@link PACKAGE_ROOT_URL} that maps to '/'.
             */
            exports_114("DEFAULT_PACKAGE_URL_PROVIDER", DEFAULT_PACKAGE_URL_PROVIDER = new di_6.Provider(application_tokens_1.PACKAGE_ROOT_URL, { useValue: "/" }));
            /**
             * Used by the {@link Compiler} when resolving HTML and CSS template URLs.
             *
             * This class can be overridden by the application developer to create custom behavior.
             *
             * See {@link Compiler}
             *
             * ## Example
             *
             * {@example compiler/ts/url_resolver/url_resolver.ts region='url_resolver'}
             */
            UrlResolver = (function () {
                function UrlResolver(packagePrefix) {
                    if (packagePrefix === void 0) { packagePrefix = null; }
                    if (lang_53.isPresent(packagePrefix)) {
                        this._packagePrefix = lang_53.StringWrapper.stripRight(packagePrefix, "/") + "/";
                    }
                }
                /**
                 * Resolves the `url` given the `baseUrl`:
                 * - when the `url` is null, the `baseUrl` is returned,
                 * - if `url` is relative ('path/to/here', './path/to/here'), the resolved url is a combination of
                 * `baseUrl` and `url`,
                 * - if `url` is absolute (it has a scheme: 'http://', 'https://' or start with '/'), the `url` is
                 * returned as is (ignoring the `baseUrl`)
                 *
                 * @param {string} baseUrl
                 * @param {string} url
                 * @returns {string} the resolved URL
                 */
                UrlResolver.prototype.resolve = function (baseUrl, url) {
                    var resolvedUrl = url;
                    if (lang_53.isPresent(baseUrl) && baseUrl.length > 0) {
                        resolvedUrl = _resolveUrl(baseUrl, resolvedUrl);
                    }
                    if (lang_53.isPresent(this._packagePrefix) && getUrlScheme(resolvedUrl) == "package") {
                        resolvedUrl = resolvedUrl.replace("package:", this._packagePrefix);
                    }
                    return resolvedUrl;
                };
                UrlResolver = __decorate([
                    di_5.Injectable(),
                    __param(0, di_5.Inject(application_tokens_1.PACKAGE_ROOT_URL)), 
                    __metadata('design:paramtypes', [String])
                ], UrlResolver);
                return UrlResolver;
            }());
            exports_114("UrlResolver", UrlResolver);
            /**
             * A regular expression for breaking a URI into its component parts.
             *
             * {@link http://www.gbiv.com/protocols/uri/rfc/rfc3986.html#RFC2234} says
             * As the "first-match-wins" algorithm is identical to the "greedy"
             * disambiguation method used by POSIX regular expressions, it is natural and
             * commonplace to use a regular expression for parsing the potential five
             * components of a URI reference.
             *
             * The following line is the regular expression for breaking-down a
             * well-formed URI reference into its components.
             *
             * <pre>
             * ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?
             *  12            3  4          5       6  7        8 9
             * </pre>
             *
             * The numbers in the second line above are only to assist readability; they
             * indicate the reference points for each subexpression (i.e., each paired
             * parenthesis). We refer to the value matched for subexpression <n> as $<n>.
             * For example, matching the above expression to
             * <pre>
             *     http://www.ics.uci.edu/pub/ietf/uri/#Related
             * </pre>
             * results in the following subexpression matches:
             * <pre>
             *    $1 = http:
             *    $2 = http
             *    $3 = //www.ics.uci.edu
             *    $4 = www.ics.uci.edu
             *    $5 = /pub/ietf/uri/
             *    $6 = <undefined>
             *    $7 = <undefined>
             *    $8 = #Related
             *    $9 = Related
             * </pre>
             * where <undefined> indicates that the component is not present, as is the
             * case for the query component in the above example. Therefore, we can
             * determine the value of the five components as
             * <pre>
             *    scheme    = $2
             *    authority = $4
             *    path      = $5
             *    query     = $7
             *    fragment  = $9
             * </pre>
             *
             * The regular expression has been modified slightly to expose the
             * userInfo, domain, and port separately from the authority.
             * The modified version yields
             * <pre>
             *    $1 = http              scheme
             *    $2 = <undefined>       userInfo -\
             *    $3 = www.ics.uci.edu   domain     | authority
             *    $4 = <undefined>       port     -/
             *    $5 = /pub/ietf/uri/    path
             *    $6 = <undefined>       query without ?
             *    $7 = Related           fragment without #
             * </pre>
             * @type {!RegExp}
             * @internal
             */
            _splitRe = lang_53.RegExpWrapper.create('^' +
                '(?:' +
                '([^:/?#.]+)' +
                // used by other URL parts such as :,
                // ?, /, #, and .
                ':)?' +
                '(?://' +
                '(?:([^/?#]*)@)?' +
                '([\\w\\d\\-\\u0100-\\uffff.%]*)' +
                // digits, dashes, dots, percent
                // escapes, and unicode characters.
                '(?::([0-9]+))?' +
                ')?' +
                '([^?#]+)?' +
                '(?:\\?([^#]*))?' +
                '(?:#(.*))?' +
                '$');
            /**
             * The index of each URI component in the return value of goog.uri.utils.split.
             * @enum {number}
             */
            (function (_ComponentIndex) {
                _ComponentIndex[_ComponentIndex["Scheme"] = 1] = "Scheme";
                _ComponentIndex[_ComponentIndex["UserInfo"] = 2] = "UserInfo";
                _ComponentIndex[_ComponentIndex["Domain"] = 3] = "Domain";
                _ComponentIndex[_ComponentIndex["Port"] = 4] = "Port";
                _ComponentIndex[_ComponentIndex["Path"] = 5] = "Path";
                _ComponentIndex[_ComponentIndex["QueryData"] = 6] = "QueryData";
                _ComponentIndex[_ComponentIndex["Fragment"] = 7] = "Fragment";
            })(_ComponentIndex || (_ComponentIndex = {}));
        }
    }
});
System.register("test/node_modules/angular2/ts/src/compiler/xhr", [], function(exports_115, context_115) {
    "use strict";
    var __moduleName = context_115 && context_115.id;
    var XHR;
    return {
        setters:[],
        execute: function() {
            XHR = (function () {
                function XHR() {
                }
                XHR.prototype.get = function (url) { return null; };
                return XHR;
            }());
            exports_115("XHR", XHR);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/compiler/util", ['angular2/src/facade/lang'], function(exports_116, context_116) {
    "use strict";
    var __moduleName = context_116 && context_116.id;
    var lang_54;
    var CAMEL_CASE_REGEXP, DASH_CASE_REGEXP, SINGLE_QUOTE_ESCAPE_STRING_RE, DOUBLE_QUOTE_ESCAPE_STRING_RE, MODULE_SUFFIX, CONST_VAR, Statement, Expression;
    function camelCaseToDashCase(input) {
        return lang_54.StringWrapper.replaceAllMapped(input, CAMEL_CASE_REGEXP, function (m) { return '-' + m[1].toLowerCase(); });
    }
    exports_116("camelCaseToDashCase", camelCaseToDashCase);
    function dashCaseToCamelCase(input) {
        return lang_54.StringWrapper.replaceAllMapped(input, DASH_CASE_REGEXP, function (m) { return m[1].toUpperCase(); });
    }
    exports_116("dashCaseToCamelCase", dashCaseToCamelCase);
    function escapeSingleQuoteString(input) {
        if (lang_54.isBlank(input)) {
            return null;
        }
        return "'" + escapeString(input, SINGLE_QUOTE_ESCAPE_STRING_RE) + "'";
    }
    exports_116("escapeSingleQuoteString", escapeSingleQuoteString);
    function escapeDoubleQuoteString(input) {
        if (lang_54.isBlank(input)) {
            return null;
        }
        return "\"" + escapeString(input, DOUBLE_QUOTE_ESCAPE_STRING_RE) + "\"";
    }
    exports_116("escapeDoubleQuoteString", escapeDoubleQuoteString);
    function escapeString(input, re) {
        return lang_54.StringWrapper.replaceAllMapped(input, re, function (match) {
            if (match[0] == '$') {
                return lang_54.IS_DART ? '\\$' : '$';
            }
            else if (match[0] == '\n') {
                return '\\n';
            }
            else if (match[0] == '\r') {
                return '\\r';
            }
            else {
                return "\\" + match[0];
            }
        });
    }
    function codeGenExportVariable(name) {
        if (lang_54.IS_DART) {
            return "const " + name + " = ";
        }
        else {
            return "var " + name + " = exports['" + name + "'] = ";
        }
    }
    exports_116("codeGenExportVariable", codeGenExportVariable);
    function codeGenConstConstructorCall(name) {
        if (lang_54.IS_DART) {
            return "const " + name;
        }
        else {
            return "new " + name;
        }
    }
    exports_116("codeGenConstConstructorCall", codeGenConstConstructorCall);
    function codeGenValueFn(params, value, fnName) {
        if (fnName === void 0) { fnName = ''; }
        if (lang_54.IS_DART) {
            return codeGenFnHeader(params, fnName) + " => " + value;
        }
        else {
            return codeGenFnHeader(params, fnName) + " { return " + value + "; }";
        }
    }
    exports_116("codeGenValueFn", codeGenValueFn);
    function codeGenFnHeader(params, fnName) {
        if (fnName === void 0) { fnName = ''; }
        if (lang_54.IS_DART) {
            return fnName + "(" + params.join(',') + ")";
        }
        else {
            return "function " + fnName + "(" + params.join(',') + ")";
        }
    }
    exports_116("codeGenFnHeader", codeGenFnHeader);
    function codeGenToString(expr) {
        if (lang_54.IS_DART) {
            return "'${" + expr + "}'";
        }
        else {
            // JS automatically converts to string...
            return expr;
        }
    }
    exports_116("codeGenToString", codeGenToString);
    function splitAtColon(input, defaultValues) {
        var parts = lang_54.StringWrapper.split(input.trim(), /\s*:\s*/g);
        if (parts.length > 1) {
            return parts;
        }
        else {
            return defaultValues;
        }
    }
    exports_116("splitAtColon", splitAtColon);
    function escapeValue(value) {
        if (value instanceof Expression) {
            return value.expression;
        }
        else if (lang_54.isString(value)) {
            return escapeSingleQuoteString(value);
        }
        else if (lang_54.isBlank(value)) {
            return 'null';
        }
        else {
            return "" + value;
        }
    }
    exports_116("escapeValue", escapeValue);
    function codeGenArray(data) {
        return "[" + data.map(escapeValue).join(',') + "]";
    }
    exports_116("codeGenArray", codeGenArray);
    function codeGenFlatArray(values) {
        var result = '([';
        var isFirstArrayEntry = true;
        var concatFn = lang_54.IS_DART ? '.addAll' : 'concat';
        for (var i = 0; i < values.length; i++) {
            var value = values[i];
            if (value instanceof Expression && value.isArray) {
                result += "])." + concatFn + "(" + value.expression + ")." + concatFn + "([";
                isFirstArrayEntry = true;
            }
            else {
                if (!isFirstArrayEntry) {
                    result += ',';
                }
                isFirstArrayEntry = false;
                result += escapeValue(value);
            }
        }
        result += '])';
        return result;
    }
    exports_116("codeGenFlatArray", codeGenFlatArray);
    function codeGenStringMap(keyValueArray) {
        return "{" + keyValueArray.map(codeGenKeyValue).join(',') + "}";
    }
    exports_116("codeGenStringMap", codeGenStringMap);
    function codeGenKeyValue(keyValue) {
        return escapeValue(keyValue[0]) + ":" + escapeValue(keyValue[1]);
    }
    function addAll(source, target) {
        for (var i = 0; i < source.length; i++) {
            target.push(source[i]);
        }
    }
    exports_116("addAll", addAll);
    function flattenArray(source, target) {
        if (lang_54.isPresent(source)) {
            for (var i = 0; i < source.length; i++) {
                var item = source[i];
                if (lang_54.isArray(item)) {
                    flattenArray(item, target);
                }
                else {
                    target.push(item);
                }
            }
        }
        return target;
    }
    exports_116("flattenArray", flattenArray);
    return {
        setters:[
            function (lang_54_1) {
                lang_54 = lang_54_1;
            }],
        execute: function() {
            CAMEL_CASE_REGEXP = /([A-Z])/g;
            DASH_CASE_REGEXP = /-([a-z])/g;
            SINGLE_QUOTE_ESCAPE_STRING_RE = /'|\\|\n|\r|\$/g;
            DOUBLE_QUOTE_ESCAPE_STRING_RE = /"|\\|\n|\r|\$/g;
            exports_116("MODULE_SUFFIX", MODULE_SUFFIX = lang_54.IS_DART ? '.dart' : '.js');
            exports_116("CONST_VAR", CONST_VAR = lang_54.IS_DART ? 'const' : 'var');
            Statement = (function () {
                function Statement(statement) {
                    this.statement = statement;
                }
                return Statement;
            }());
            exports_116("Statement", Statement);
            Expression = (function () {
                function Expression(expression, isArray) {
                    if (isArray === void 0) { isArray = false; }
                    this.expression = expression;
                    this.isArray = isArray;
                }
                return Expression;
            }());
            exports_116("Expression", Expression);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/compiler/directive_metadata", ['angular2/src/facade/lang', 'angular2/src/facade/exceptions', 'angular2/src/facade/collection', 'angular2/src/core/change_detection/change_detection', 'angular2/src/core/metadata/view', 'angular2/src/compiler/selector', "test/node_modules/angular2/ts/src/compiler/util", 'angular2/src/core/linker/interfaces'], function(exports_117, context_117) {
    "use strict";
    var __moduleName = context_117 && context_117.id;
    var lang_55, exceptions_13, collection_23, change_detection_1, view_1, selector_1, util_2, interfaces_1;
    var HOST_REG_EXP, CompileMetadataWithIdentifier, CompileMetadataWithType, CompileIdentifierMetadata, CompileDiDependencyMetadata, CompileProviderMetadata, CompileFactoryMetadata, CompileTypeMetadata, CompileQueryMetadata, CompileTemplateMetadata, CompileDirectiveMetadata, CompilePipeMetadata, _COMPILE_METADATA_FROM_JSON;
    /**
     * Construct {@link CompileDirectiveMetadata} from {@link ComponentTypeMetadata} and a selector.
     */
    function createHostComponentMeta(componentType, componentSelector) {
        var template = selector_1.CssSelector.parse(componentSelector)[0].getMatchingElementTemplate();
        return CompileDirectiveMetadata.create({
            type: new CompileTypeMetadata({
                runtime: Object,
                name: "Host" + componentType.name,
                moduleUrl: componentType.moduleUrl,
                isHost: true
            }),
            template: new CompileTemplateMetadata({ template: template, templateUrl: '', styles: [], styleUrls: [], ngContentSelectors: [] }),
            changeDetection: change_detection_1.ChangeDetectionStrategy.Default,
            inputs: [],
            outputs: [],
            host: {},
            lifecycleHooks: [],
            isComponent: true,
            dynamicLoadable: false,
            selector: '*',
            providers: [],
            viewProviders: [],
            queries: [],
            viewQueries: []
        });
    }
    exports_117("createHostComponentMeta", createHostComponentMeta);
    function arrayFromJson(obj, fn) {
        return lang_55.isBlank(obj) ? null : obj.map(function (o) { return objFromJson(o, fn); });
    }
    function arrayToJson(obj) {
        return lang_55.isBlank(obj) ? null : obj.map(objToJson);
    }
    function objFromJson(obj, fn) {
        return (lang_55.isString(obj) || lang_55.isBlank(obj)) ? obj : fn(obj);
    }
    function objToJson(obj) {
        return (lang_55.isString(obj) || lang_55.isBlank(obj)) ? obj : obj.toJson();
    }
    return {
        setters:[
            function (lang_55_1) {
                lang_55 = lang_55_1;
            },
            function (exceptions_13_1) {
                exceptions_13 = exceptions_13_1;
            },
            function (collection_23_1) {
                collection_23 = collection_23_1;
            },
            function (change_detection_1_1) {
                change_detection_1 = change_detection_1_1;
            },
            function (view_1_1) {
                view_1 = view_1_1;
            },
            function (selector_1_1) {
                selector_1 = selector_1_1;
            },
            function (util_2_1) {
                util_2 = util_2_1;
            },
            function (interfaces_1_1) {
                interfaces_1 = interfaces_1_1;
            }],
        execute: function() {
            // group 1: "property" from "[property]"
            // group 2: "event" from "(event)"
            HOST_REG_EXP = /^(?:(?:\[([^\]]+)\])|(?:\(([^\)]+)\)))$/g;
            CompileMetadataWithIdentifier = (function () {
                function CompileMetadataWithIdentifier() {
                }
                CompileMetadataWithIdentifier.fromJson = function (data) {
                    return _COMPILE_METADATA_FROM_JSON[data['class']](data);
                };
                Object.defineProperty(CompileMetadataWithIdentifier.prototype, "identifier", {
                    get: function () { return exceptions_13.unimplemented(); },
                    enumerable: true,
                    configurable: true
                });
                return CompileMetadataWithIdentifier;
            }());
            exports_117("CompileMetadataWithIdentifier", CompileMetadataWithIdentifier);
            CompileMetadataWithType = (function (_super) {
                __extends(CompileMetadataWithType, _super);
                function CompileMetadataWithType() {
                    _super.apply(this, arguments);
                }
                CompileMetadataWithType.fromJson = function (data) {
                    return _COMPILE_METADATA_FROM_JSON[data['class']](data);
                };
                Object.defineProperty(CompileMetadataWithType.prototype, "type", {
                    get: function () { return exceptions_13.unimplemented(); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CompileMetadataWithType.prototype, "identifier", {
                    get: function () { return exceptions_13.unimplemented(); },
                    enumerable: true,
                    configurable: true
                });
                return CompileMetadataWithType;
            }(CompileMetadataWithIdentifier));
            exports_117("CompileMetadataWithType", CompileMetadataWithType);
            CompileIdentifierMetadata = (function () {
                function CompileIdentifierMetadata(_a) {
                    var _b = _a === void 0 ? {} : _a, runtime = _b.runtime, name = _b.name, moduleUrl = _b.moduleUrl, prefix = _b.prefix, constConstructor = _b.constConstructor;
                    this.runtime = runtime;
                    this.name = name;
                    this.prefix = prefix;
                    this.moduleUrl = moduleUrl;
                    this.constConstructor = constConstructor;
                }
                CompileIdentifierMetadata.fromJson = function (data) {
                    return new CompileIdentifierMetadata({
                        name: data['name'],
                        prefix: data['prefix'],
                        moduleUrl: data['moduleUrl'],
                        constConstructor: data['constConstructor']
                    });
                };
                CompileIdentifierMetadata.prototype.toJson = function () {
                    return {
                        // Note: Runtime type can't be serialized...
                        'class': 'Identifier',
                        'name': this.name,
                        'moduleUrl': this.moduleUrl,
                        'prefix': this.prefix,
                        'constConstructor': this.constConstructor
                    };
                };
                Object.defineProperty(CompileIdentifierMetadata.prototype, "identifier", {
                    get: function () { return this; },
                    enumerable: true,
                    configurable: true
                });
                return CompileIdentifierMetadata;
            }());
            exports_117("CompileIdentifierMetadata", CompileIdentifierMetadata);
            CompileDiDependencyMetadata = (function () {
                function CompileDiDependencyMetadata(_a) {
                    var _b = _a === void 0 ? {} : _a, isAttribute = _b.isAttribute, isSelf = _b.isSelf, isHost = _b.isHost, isSkipSelf = _b.isSkipSelf, isOptional = _b.isOptional, query = _b.query, viewQuery = _b.viewQuery, token = _b.token;
                    this.isAttribute = lang_55.normalizeBool(isAttribute);
                    this.isSelf = lang_55.normalizeBool(isSelf);
                    this.isHost = lang_55.normalizeBool(isHost);
                    this.isSkipSelf = lang_55.normalizeBool(isSkipSelf);
                    this.isOptional = lang_55.normalizeBool(isOptional);
                    this.query = query;
                    this.viewQuery = viewQuery;
                    this.token = token;
                }
                CompileDiDependencyMetadata.fromJson = function (data) {
                    return new CompileDiDependencyMetadata({
                        token: objFromJson(data['token'], CompileIdentifierMetadata.fromJson),
                        query: objFromJson(data['query'], CompileQueryMetadata.fromJson),
                        viewQuery: objFromJson(data['viewQuery'], CompileQueryMetadata.fromJson),
                        isAttribute: data['isAttribute'],
                        isSelf: data['isSelf'],
                        isHost: data['isHost'],
                        isSkipSelf: data['isSkipSelf'],
                        isOptional: data['isOptional']
                    });
                };
                CompileDiDependencyMetadata.prototype.toJson = function () {
                    return {
                        // Note: Runtime type can't be serialized...
                        'token': objToJson(this.token),
                        'query': objToJson(this.query),
                        'viewQuery': objToJson(this.viewQuery),
                        'isAttribute': this.isAttribute,
                        'isSelf': this.isSelf,
                        'isHost': this.isHost,
                        'isSkipSelf': this.isSkipSelf,
                        'isOptional': this.isOptional
                    };
                };
                return CompileDiDependencyMetadata;
            }());
            exports_117("CompileDiDependencyMetadata", CompileDiDependencyMetadata);
            CompileProviderMetadata = (function () {
                function CompileProviderMetadata(_a) {
                    var token = _a.token, useClass = _a.useClass, useValue = _a.useValue, useExisting = _a.useExisting, useFactory = _a.useFactory, deps = _a.deps, multi = _a.multi;
                    this.token = token;
                    this.useClass = useClass;
                    this.useValue = useValue;
                    this.useExisting = useExisting;
                    this.useFactory = useFactory;
                    this.deps = deps;
                    this.multi = multi;
                }
                CompileProviderMetadata.fromJson = function (data) {
                    return new CompileProviderMetadata({
                        token: objFromJson(data['token'], CompileIdentifierMetadata.fromJson),
                        useClass: objFromJson(data['useClass'], CompileTypeMetadata.fromJson)
                    });
                };
                CompileProviderMetadata.prototype.toJson = function () {
                    return {
                        // Note: Runtime type can't be serialized...
                        'token': objToJson(this.token),
                        'useClass': objToJson(this.useClass)
                    };
                };
                return CompileProviderMetadata;
            }());
            exports_117("CompileProviderMetadata", CompileProviderMetadata);
            CompileFactoryMetadata = (function () {
                function CompileFactoryMetadata(_a) {
                    var runtime = _a.runtime, name = _a.name, moduleUrl = _a.moduleUrl, constConstructor = _a.constConstructor, diDeps = _a.diDeps;
                    this.runtime = runtime;
                    this.name = name;
                    this.moduleUrl = moduleUrl;
                    this.diDeps = diDeps;
                    this.constConstructor = constConstructor;
                }
                Object.defineProperty(CompileFactoryMetadata.prototype, "identifier", {
                    get: function () { return this; },
                    enumerable: true,
                    configurable: true
                });
                CompileFactoryMetadata.prototype.toJson = function () { return null; };
                return CompileFactoryMetadata;
            }());
            exports_117("CompileFactoryMetadata", CompileFactoryMetadata);
            /**
             * Metadata regarding compilation of a type.
             */
            CompileTypeMetadata = (function () {
                function CompileTypeMetadata(_a) {
                    var _b = _a === void 0 ? {} : _a, runtime = _b.runtime, name = _b.name, moduleUrl = _b.moduleUrl, prefix = _b.prefix, isHost = _b.isHost, constConstructor = _b.constConstructor, diDeps = _b.diDeps;
                    this.runtime = runtime;
                    this.name = name;
                    this.moduleUrl = moduleUrl;
                    this.prefix = prefix;
                    this.isHost = lang_55.normalizeBool(isHost);
                    this.constConstructor = constConstructor;
                    this.diDeps = lang_55.normalizeBlank(diDeps);
                }
                CompileTypeMetadata.fromJson = function (data) {
                    return new CompileTypeMetadata({
                        name: data['name'],
                        moduleUrl: data['moduleUrl'],
                        prefix: data['prefix'],
                        isHost: data['isHost'],
                        constConstructor: data['constConstructor'],
                        diDeps: arrayFromJson(data['diDeps'], CompileDiDependencyMetadata.fromJson)
                    });
                };
                Object.defineProperty(CompileTypeMetadata.prototype, "identifier", {
                    get: function () { return this; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CompileTypeMetadata.prototype, "type", {
                    get: function () { return this; },
                    enumerable: true,
                    configurable: true
                });
                CompileTypeMetadata.prototype.toJson = function () {
                    return {
                        // Note: Runtime type can't be serialized...
                        'class': 'Type',
                        'name': this.name,
                        'moduleUrl': this.moduleUrl,
                        'prefix': this.prefix,
                        'isHost': this.isHost,
                        'constConstructor': this.constConstructor,
                        'diDeps': arrayToJson(this.diDeps)
                    };
                };
                return CompileTypeMetadata;
            }());
            exports_117("CompileTypeMetadata", CompileTypeMetadata);
            CompileQueryMetadata = (function () {
                function CompileQueryMetadata(_a) {
                    var _b = _a === void 0 ? {} : _a, selectors = _b.selectors, descendants = _b.descendants, first = _b.first, propertyName = _b.propertyName;
                    this.selectors = selectors;
                    this.descendants = descendants;
                    this.first = lang_55.normalizeBool(first);
                    this.propertyName = propertyName;
                }
                CompileQueryMetadata.fromJson = function (data) {
                    return new CompileQueryMetadata({
                        selectors: arrayFromJson(data['selectors'], CompileIdentifierMetadata.fromJson),
                        descendants: data['descendants'],
                        first: data['first'],
                        propertyName: data['propertyName']
                    });
                };
                CompileQueryMetadata.prototype.toJson = function () {
                    return {
                        // Note: Runtime type can't be serialized...
                        'selectors': arrayToJson(this.selectors),
                        'descendants': this.descendants,
                        'first': this.first,
                        'propertyName': this.propertyName
                    };
                };
                return CompileQueryMetadata;
            }());
            exports_117("CompileQueryMetadata", CompileQueryMetadata);
            /**
             * Metadata regarding compilation of a template.
             */
            CompileTemplateMetadata = (function () {
                function CompileTemplateMetadata(_a) {
                    var _b = _a === void 0 ? {} : _a, encapsulation = _b.encapsulation, template = _b.template, templateUrl = _b.templateUrl, styles = _b.styles, styleUrls = _b.styleUrls, ngContentSelectors = _b.ngContentSelectors;
                    this.encapsulation = lang_55.isPresent(encapsulation) ? encapsulation : view_1.ViewEncapsulation.Emulated;
                    this.template = template;
                    this.templateUrl = templateUrl;
                    this.styles = lang_55.isPresent(styles) ? styles : [];
                    this.styleUrls = lang_55.isPresent(styleUrls) ? styleUrls : [];
                    this.ngContentSelectors = lang_55.isPresent(ngContentSelectors) ? ngContentSelectors : [];
                }
                CompileTemplateMetadata.fromJson = function (data) {
                    return new CompileTemplateMetadata({
                        encapsulation: lang_55.isPresent(data['encapsulation']) ?
                            view_1.VIEW_ENCAPSULATION_VALUES[data['encapsulation']] :
                            data['encapsulation'],
                        template: data['template'],
                        templateUrl: data['templateUrl'],
                        styles: data['styles'],
                        styleUrls: data['styleUrls'],
                        ngContentSelectors: data['ngContentSelectors']
                    });
                };
                CompileTemplateMetadata.prototype.toJson = function () {
                    return {
                        'encapsulation': lang_55.isPresent(this.encapsulation) ? lang_55.serializeEnum(this.encapsulation) : this.encapsulation,
                        'template': this.template,
                        'templateUrl': this.templateUrl,
                        'styles': this.styles,
                        'styleUrls': this.styleUrls,
                        'ngContentSelectors': this.ngContentSelectors
                    };
                };
                return CompileTemplateMetadata;
            }());
            exports_117("CompileTemplateMetadata", CompileTemplateMetadata);
            /**
             * Metadata regarding compilation of a directive.
             */
            CompileDirectiveMetadata = (function () {
                function CompileDirectiveMetadata(_a) {
                    var _b = _a === void 0 ? {} : _a, type = _b.type, isComponent = _b.isComponent, dynamicLoadable = _b.dynamicLoadable, selector = _b.selector, exportAs = _b.exportAs, changeDetection = _b.changeDetection, inputs = _b.inputs, outputs = _b.outputs, hostListeners = _b.hostListeners, hostProperties = _b.hostProperties, hostAttributes = _b.hostAttributes, lifecycleHooks = _b.lifecycleHooks, providers = _b.providers, viewProviders = _b.viewProviders, queries = _b.queries, viewQueries = _b.viewQueries, template = _b.template;
                    this.type = type;
                    this.isComponent = isComponent;
                    this.dynamicLoadable = dynamicLoadable;
                    this.selector = selector;
                    this.exportAs = exportAs;
                    this.changeDetection = changeDetection;
                    this.inputs = inputs;
                    this.outputs = outputs;
                    this.hostListeners = hostListeners;
                    this.hostProperties = hostProperties;
                    this.hostAttributes = hostAttributes;
                    this.lifecycleHooks = lifecycleHooks;
                    this.providers = lang_55.normalizeBlank(providers);
                    this.viewProviders = lang_55.normalizeBlank(viewProviders);
                    this.queries = queries;
                    this.viewQueries = viewQueries;
                    this.template = template;
                }
                CompileDirectiveMetadata.create = function (_a) {
                    var _b = _a === void 0 ? {} : _a, type = _b.type, isComponent = _b.isComponent, dynamicLoadable = _b.dynamicLoadable, selector = _b.selector, exportAs = _b.exportAs, changeDetection = _b.changeDetection, inputs = _b.inputs, outputs = _b.outputs, host = _b.host, lifecycleHooks = _b.lifecycleHooks, providers = _b.providers, viewProviders = _b.viewProviders, queries = _b.queries, viewQueries = _b.viewQueries, template = _b.template;
                    var hostListeners = {};
                    var hostProperties = {};
                    var hostAttributes = {};
                    if (lang_55.isPresent(host)) {
                        collection_23.StringMapWrapper.forEach(host, function (value, key) {
                            var matches = lang_55.RegExpWrapper.firstMatch(HOST_REG_EXP, key);
                            if (lang_55.isBlank(matches)) {
                                hostAttributes[key] = value;
                            }
                            else if (lang_55.isPresent(matches[1])) {
                                hostProperties[matches[1]] = value;
                            }
                            else if (lang_55.isPresent(matches[2])) {
                                hostListeners[matches[2]] = value;
                            }
                        });
                    }
                    var inputsMap = {};
                    if (lang_55.isPresent(inputs)) {
                        inputs.forEach(function (bindConfig) {
                            // canonical syntax: `dirProp: elProp`
                            // if there is no `:`, use dirProp = elProp
                            var parts = util_2.splitAtColon(bindConfig, [bindConfig, bindConfig]);
                            inputsMap[parts[0]] = parts[1];
                        });
                    }
                    var outputsMap = {};
                    if (lang_55.isPresent(outputs)) {
                        outputs.forEach(function (bindConfig) {
                            // canonical syntax: `dirProp: elProp`
                            // if there is no `:`, use dirProp = elProp
                            var parts = util_2.splitAtColon(bindConfig, [bindConfig, bindConfig]);
                            outputsMap[parts[0]] = parts[1];
                        });
                    }
                    return new CompileDirectiveMetadata({
                        type: type,
                        isComponent: lang_55.normalizeBool(isComponent),
                        dynamicLoadable: lang_55.normalizeBool(dynamicLoadable),
                        selector: selector,
                        exportAs: exportAs,
                        changeDetection: changeDetection,
                        inputs: inputsMap,
                        outputs: outputsMap,
                        hostListeners: hostListeners,
                        hostProperties: hostProperties,
                        hostAttributes: hostAttributes,
                        lifecycleHooks: lang_55.isPresent(lifecycleHooks) ? lifecycleHooks : [],
                        providers: providers,
                        viewProviders: viewProviders,
                        queries: queries,
                        viewQueries: viewQueries,
                        template: template
                    });
                };
                Object.defineProperty(CompileDirectiveMetadata.prototype, "identifier", {
                    get: function () { return this.type; },
                    enumerable: true,
                    configurable: true
                });
                CompileDirectiveMetadata.fromJson = function (data) {
                    return new CompileDirectiveMetadata({
                        isComponent: data['isComponent'],
                        dynamicLoadable: data['dynamicLoadable'],
                        selector: data['selector'],
                        exportAs: data['exportAs'],
                        type: lang_55.isPresent(data['type']) ? CompileTypeMetadata.fromJson(data['type']) : data['type'],
                        changeDetection: lang_55.isPresent(data['changeDetection']) ?
                            change_detection_1.CHANGE_DETECTION_STRATEGY_VALUES[data['changeDetection']] :
                            data['changeDetection'],
                        inputs: data['inputs'],
                        outputs: data['outputs'],
                        hostListeners: data['hostListeners'],
                        hostProperties: data['hostProperties'],
                        hostAttributes: data['hostAttributes'],
                        lifecycleHooks: data['lifecycleHooks'].map(function (hookValue) { return interfaces_1.LIFECYCLE_HOOKS_VALUES[hookValue]; }),
                        template: lang_55.isPresent(data['template']) ? CompileTemplateMetadata.fromJson(data['template']) :
                            data['template'],
                        providers: arrayFromJson(data['providers'], CompileProviderMetadata.fromJson)
                    });
                };
                CompileDirectiveMetadata.prototype.toJson = function () {
                    return {
                        'class': 'Directive',
                        'isComponent': this.isComponent,
                        'dynamicLoadable': this.dynamicLoadable,
                        'selector': this.selector,
                        'exportAs': this.exportAs,
                        'type': lang_55.isPresent(this.type) ? this.type.toJson() : this.type,
                        'changeDetection': lang_55.isPresent(this.changeDetection) ? lang_55.serializeEnum(this.changeDetection) :
                            this.changeDetection,
                        'inputs': this.inputs,
                        'outputs': this.outputs,
                        'hostListeners': this.hostListeners,
                        'hostProperties': this.hostProperties,
                        'hostAttributes': this.hostAttributes,
                        'lifecycleHooks': this.lifecycleHooks.map(function (hook) { return lang_55.serializeEnum(hook); }),
                        'template': lang_55.isPresent(this.template) ? this.template.toJson() : this.template,
                        'providers': arrayToJson(this.providers)
                    };
                };
                return CompileDirectiveMetadata;
            }());
            exports_117("CompileDirectiveMetadata", CompileDirectiveMetadata);
            CompilePipeMetadata = (function () {
                function CompilePipeMetadata(_a) {
                    var _b = _a === void 0 ? {} : _a, type = _b.type, name = _b.name, pure = _b.pure;
                    this.type = type;
                    this.name = name;
                    this.pure = lang_55.normalizeBool(pure);
                }
                Object.defineProperty(CompilePipeMetadata.prototype, "identifier", {
                    get: function () { return this.type; },
                    enumerable: true,
                    configurable: true
                });
                CompilePipeMetadata.fromJson = function (data) {
                    return new CompilePipeMetadata({
                        type: lang_55.isPresent(data['type']) ? CompileTypeMetadata.fromJson(data['type']) : data['type'],
                        name: data['name'],
                        pure: data['pure']
                    });
                };
                CompilePipeMetadata.prototype.toJson = function () {
                    return {
                        'class': 'Pipe',
                        'type': lang_55.isPresent(this.type) ? this.type.toJson() : null,
                        'name': this.name,
                        'pure': this.pure
                    };
                };
                return CompilePipeMetadata;
            }());
            exports_117("CompilePipeMetadata", CompilePipeMetadata);
            _COMPILE_METADATA_FROM_JSON = {
                'Directive': CompileDirectiveMetadata.fromJson,
                'Pipe': CompilePipeMetadata.fromJson,
                'Type': CompileTypeMetadata.fromJson,
                'Identifier': CompileIdentifierMetadata.fromJson
            };
        }
    }
});
System.register("test/node_modules/angular2/ts/src/compiler/parse_util", [], function(exports_118, context_118) {
    "use strict";
    var __moduleName = context_118 && context_118.id;
    var ParseLocation, ParseSourceFile, ParseSourceSpan, ParseError;
    return {
        setters:[],
        execute: function() {
            ParseLocation = (function () {
                function ParseLocation(file, offset, line, col) {
                    this.file = file;
                    this.offset = offset;
                    this.line = line;
                    this.col = col;
                }
                ParseLocation.prototype.toString = function () { return this.file.url + "@" + this.line + ":" + this.col; };
                return ParseLocation;
            }());
            exports_118("ParseLocation", ParseLocation);
            ParseSourceFile = (function () {
                function ParseSourceFile(content, url) {
                    this.content = content;
                    this.url = url;
                }
                return ParseSourceFile;
            }());
            exports_118("ParseSourceFile", ParseSourceFile);
            ParseSourceSpan = (function () {
                function ParseSourceSpan(start, end) {
                    this.start = start;
                    this.end = end;
                }
                ParseSourceSpan.prototype.toString = function () {
                    return this.start.file.content.substring(this.start.offset, this.end.offset);
                };
                return ParseSourceSpan;
            }());
            exports_118("ParseSourceSpan", ParseSourceSpan);
            ParseError = (function () {
                function ParseError(span, msg) {
                    this.span = span;
                    this.msg = msg;
                }
                ParseError.prototype.toString = function () {
                    var source = this.span.start.file.content;
                    var ctxStart = this.span.start.offset;
                    if (ctxStart > source.length - 1) {
                        ctxStart = source.length - 1;
                    }
                    var ctxEnd = ctxStart;
                    var ctxLen = 0;
                    var ctxLines = 0;
                    while (ctxLen < 100 && ctxStart > 0) {
                        ctxStart--;
                        ctxLen++;
                        if (source[ctxStart] == "\n") {
                            if (++ctxLines == 3) {
                                break;
                            }
                        }
                    }
                    ctxLen = 0;
                    ctxLines = 0;
                    while (ctxLen < 100 && ctxEnd < source.length - 1) {
                        ctxEnd++;
                        ctxLen++;
                        if (source[ctxEnd] == "\n") {
                            if (++ctxLines == 3) {
                                break;
                            }
                        }
                    }
                    var context = source.substring(ctxStart, this.span.start.offset) + '[ERROR ->]' +
                        source.substring(this.span.start.offset, ctxEnd + 1);
                    return this.msg + " (\"" + context + "\"): " + this.span.start;
                };
                return ParseError;
            }());
            exports_118("ParseError", ParseError);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/compiler/template_ast", ['angular2/src/facade/lang'], function(exports_119, context_119) {
    "use strict";
    var __moduleName = context_119 && context_119.id;
    var lang_56;
    var TextAst, BoundTextAst, AttrAst, BoundElementPropertyAst, BoundEventAst, VariableAst, ElementAst, EmbeddedTemplateAst, BoundDirectivePropertyAst, DirectiveAst, NgContentAst, PropertyBindingType;
    /**
     * Visit every node in a list of {@link TemplateAst}s with the given {@link TemplateAstVisitor}.
     */
    function templateVisitAll(visitor, asts, context) {
        if (context === void 0) { context = null; }
        var result = [];
        asts.forEach(function (ast) {
            var astResult = ast.visit(visitor, context);
            if (lang_56.isPresent(astResult)) {
                result.push(astResult);
            }
        });
        return result;
    }
    exports_119("templateVisitAll", templateVisitAll);
    return {
        setters:[
            function (lang_56_1) {
                lang_56 = lang_56_1;
            }],
        execute: function() {
            /**
             * A segment of text within the template.
             */
            TextAst = (function () {
                function TextAst(value, ngContentIndex, sourceSpan) {
                    this.value = value;
                    this.ngContentIndex = ngContentIndex;
                    this.sourceSpan = sourceSpan;
                }
                TextAst.prototype.visit = function (visitor, context) { return visitor.visitText(this, context); };
                return TextAst;
            }());
            exports_119("TextAst", TextAst);
            /**
             * A bound expression within the text of a template.
             */
            BoundTextAst = (function () {
                function BoundTextAst(value, ngContentIndex, sourceSpan) {
                    this.value = value;
                    this.ngContentIndex = ngContentIndex;
                    this.sourceSpan = sourceSpan;
                }
                BoundTextAst.prototype.visit = function (visitor, context) {
                    return visitor.visitBoundText(this, context);
                };
                return BoundTextAst;
            }());
            exports_119("BoundTextAst", BoundTextAst);
            /**
             * A plain attribute on an element.
             */
            AttrAst = (function () {
                function AttrAst(name, value, sourceSpan) {
                    this.name = name;
                    this.value = value;
                    this.sourceSpan = sourceSpan;
                }
                AttrAst.prototype.visit = function (visitor, context) { return visitor.visitAttr(this, context); };
                return AttrAst;
            }());
            exports_119("AttrAst", AttrAst);
            /**
             * A binding for an element property (e.g. `[property]="expression"`).
             */
            BoundElementPropertyAst = (function () {
                function BoundElementPropertyAst(name, type, value, unit, sourceSpan) {
                    this.name = name;
                    this.type = type;
                    this.value = value;
                    this.unit = unit;
                    this.sourceSpan = sourceSpan;
                }
                BoundElementPropertyAst.prototype.visit = function (visitor, context) {
                    return visitor.visitElementProperty(this, context);
                };
                return BoundElementPropertyAst;
            }());
            exports_119("BoundElementPropertyAst", BoundElementPropertyAst);
            /**
             * A binding for an element event (e.g. `(event)="handler()"`).
             */
            BoundEventAst = (function () {
                function BoundEventAst(name, target, handler, sourceSpan) {
                    this.name = name;
                    this.target = target;
                    this.handler = handler;
                    this.sourceSpan = sourceSpan;
                }
                BoundEventAst.prototype.visit = function (visitor, context) {
                    return visitor.visitEvent(this, context);
                };
                Object.defineProperty(BoundEventAst.prototype, "fullName", {
                    get: function () {
                        if (lang_56.isPresent(this.target)) {
                            return this.target + ":" + this.name;
                        }
                        else {
                            return this.name;
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                return BoundEventAst;
            }());
            exports_119("BoundEventAst", BoundEventAst);
            /**
             * A variable declaration on an element (e.g. `#var="expression"`).
             */
            VariableAst = (function () {
                function VariableAst(name, value, sourceSpan) {
                    this.name = name;
                    this.value = value;
                    this.sourceSpan = sourceSpan;
                }
                VariableAst.prototype.visit = function (visitor, context) {
                    return visitor.visitVariable(this, context);
                };
                return VariableAst;
            }());
            exports_119("VariableAst", VariableAst);
            /**
             * An element declaration in a template.
             */
            ElementAst = (function () {
                function ElementAst(name, attrs, inputs, outputs, exportAsVars, directives, children, ngContentIndex, sourceSpan) {
                    this.name = name;
                    this.attrs = attrs;
                    this.inputs = inputs;
                    this.outputs = outputs;
                    this.exportAsVars = exportAsVars;
                    this.directives = directives;
                    this.children = children;
                    this.ngContentIndex = ngContentIndex;
                    this.sourceSpan = sourceSpan;
                }
                ElementAst.prototype.visit = function (visitor, context) {
                    return visitor.visitElement(this, context);
                };
                /**
                 * Whether the element has any active bindings (inputs, outputs, vars, or directives).
                 */
                ElementAst.prototype.isBound = function () {
                    return (this.inputs.length > 0 || this.outputs.length > 0 || this.exportAsVars.length > 0 ||
                        this.directives.length > 0);
                };
                /**
                 * Get the component associated with this element, if any.
                 */
                ElementAst.prototype.getComponent = function () {
                    return this.directives.length > 0 && this.directives[0].directive.isComponent ?
                        this.directives[0].directive :
                        null;
                };
                return ElementAst;
            }());
            exports_119("ElementAst", ElementAst);
            /**
             * A `<template>` element included in an Angular template.
             */
            EmbeddedTemplateAst = (function () {
                function EmbeddedTemplateAst(attrs, outputs, vars, directives, children, ngContentIndex, sourceSpan) {
                    this.attrs = attrs;
                    this.outputs = outputs;
                    this.vars = vars;
                    this.directives = directives;
                    this.children = children;
                    this.ngContentIndex = ngContentIndex;
                    this.sourceSpan = sourceSpan;
                }
                EmbeddedTemplateAst.prototype.visit = function (visitor, context) {
                    return visitor.visitEmbeddedTemplate(this, context);
                };
                return EmbeddedTemplateAst;
            }());
            exports_119("EmbeddedTemplateAst", EmbeddedTemplateAst);
            /**
             * A directive property with a bound value (e.g. `*ngIf="condition").
             */
            BoundDirectivePropertyAst = (function () {
                function BoundDirectivePropertyAst(directiveName, templateName, value, sourceSpan) {
                    this.directiveName = directiveName;
                    this.templateName = templateName;
                    this.value = value;
                    this.sourceSpan = sourceSpan;
                }
                BoundDirectivePropertyAst.prototype.visit = function (visitor, context) {
                    return visitor.visitDirectiveProperty(this, context);
                };
                return BoundDirectivePropertyAst;
            }());
            exports_119("BoundDirectivePropertyAst", BoundDirectivePropertyAst);
            /**
             * A directive declared on an element.
             */
            DirectiveAst = (function () {
                function DirectiveAst(directive, inputs, hostProperties, hostEvents, exportAsVars, sourceSpan) {
                    this.directive = directive;
                    this.inputs = inputs;
                    this.hostProperties = hostProperties;
                    this.hostEvents = hostEvents;
                    this.exportAsVars = exportAsVars;
                    this.sourceSpan = sourceSpan;
                }
                DirectiveAst.prototype.visit = function (visitor, context) {
                    return visitor.visitDirective(this, context);
                };
                return DirectiveAst;
            }());
            exports_119("DirectiveAst", DirectiveAst);
            /**
             * Position where content is to be projected (instance of `<ng-content>` in a template).
             */
            NgContentAst = (function () {
                function NgContentAst(index, ngContentIndex, sourceSpan) {
                    this.index = index;
                    this.ngContentIndex = ngContentIndex;
                    this.sourceSpan = sourceSpan;
                }
                NgContentAst.prototype.visit = function (visitor, context) {
                    return visitor.visitNgContent(this, context);
                };
                return NgContentAst;
            }());
            exports_119("NgContentAst", NgContentAst);
            /**
             * Enumeration of types of property bindings.
             */
            (function (PropertyBindingType) {
                /**
                 * A normal binding to a property (e.g. `[property]="expression"`).
                 */
                PropertyBindingType[PropertyBindingType["Property"] = 0] = "Property";
                /**
                 * A binding to an element attribute (e.g. `[attr.name]="expression"`).
                 */
                PropertyBindingType[PropertyBindingType["Attribute"] = 1] = "Attribute";
                /**
                 * A binding to a CSS class (e.g. `[class.name]="condition"`).
                 */
                PropertyBindingType[PropertyBindingType["Class"] = 2] = "Class";
                /**
                 * A binding to a style rule (e.g. `[style.rule]="expression"`).
                 */
                PropertyBindingType[PropertyBindingType["Style"] = 3] = "Style";
            })(PropertyBindingType || (PropertyBindingType = {}));
            exports_119("PropertyBindingType", PropertyBindingType);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/compiler/source_module", ['angular2/src/facade/lang'], function(exports_120, context_120) {
    "use strict";
    var __moduleName = context_120 && context_120.id;
    var lang_57;
    var MODULE_REGEXP, SourceModule, SourceExpression, SourceExpressions, SourceWithImports;
    function moduleRef(moduleUrl) {
        return "#MODULE[" + moduleUrl + "]";
    }
    exports_120("moduleRef", moduleRef);
    return {
        setters:[
            function (lang_57_1) {
                lang_57 = lang_57_1;
            }],
        execute: function() {
            MODULE_REGEXP = /#MODULE\[([^\]]*)\]/g;
            /**
             * Represents generated source code with module references. Internal to the Angular compiler.
             */
            SourceModule = (function () {
                function SourceModule(moduleUrl, sourceWithModuleRefs) {
                    this.moduleUrl = moduleUrl;
                    this.sourceWithModuleRefs = sourceWithModuleRefs;
                }
                SourceModule.getSourceWithoutImports = function (sourceWithModuleRefs) {
                    return lang_57.StringWrapper.replaceAllMapped(sourceWithModuleRefs, MODULE_REGEXP, function (match) { return ''; });
                };
                SourceModule.prototype.getSourceWithImports = function () {
                    var _this = this;
                    var moduleAliases = {};
                    var imports = [];
                    var newSource = lang_57.StringWrapper.replaceAllMapped(this.sourceWithModuleRefs, MODULE_REGEXP, function (match) {
                        var moduleUrl = match[1];
                        var alias = moduleAliases[moduleUrl];
                        if (lang_57.isBlank(alias)) {
                            if (moduleUrl == _this.moduleUrl) {
                                alias = '';
                            }
                            else {
                                alias = "import" + imports.length;
                                imports.push([moduleUrl, alias]);
                            }
                            moduleAliases[moduleUrl] = alias;
                        }
                        return alias.length > 0 ? alias + "." : '';
                    });
                    return new SourceWithImports(newSource, imports);
                };
                return SourceModule;
            }());
            exports_120("SourceModule", SourceModule);
            SourceExpression = (function () {
                function SourceExpression(declarations, expression) {
                    this.declarations = declarations;
                    this.expression = expression;
                }
                return SourceExpression;
            }());
            exports_120("SourceExpression", SourceExpression);
            SourceExpressions = (function () {
                function SourceExpressions(declarations, expressions) {
                    this.declarations = declarations;
                    this.expressions = expressions;
                }
                return SourceExpressions;
            }());
            exports_120("SourceExpressions", SourceExpressions);
            /**
             * Represents generated source code with imports. Internal to the Angular compiler.
             */
            SourceWithImports = (function () {
                function SourceWithImports(source, imports) {
                    this.source = source;
                    this.imports = imports;
                }
                return SourceWithImports;
            }());
            exports_120("SourceWithImports", SourceWithImports);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/compiler/change_definition_factory", ['angular2/src/facade/collection', 'angular2/src/facade/lang', 'angular2/src/core/reflection/reflection', 'angular2/src/core/change_detection/change_detection', "test/node_modules/angular2/ts/src/compiler/template_ast", 'angular2/src/core/linker/interfaces'], function(exports_121, context_121) {
    "use strict";
    var __moduleName = context_121 && context_121.id;
    var collection_24, lang_58, reflection_1, change_detection_2, template_ast_1, interfaces_2;
    var ProtoViewVisitor;
    function createChangeDetectorDefinitions(componentType, componentStrategy, genConfig, parsedTemplate) {
        var pvVisitors = [];
        var visitor = new ProtoViewVisitor(null, pvVisitors, componentStrategy);
        template_ast_1.templateVisitAll(visitor, parsedTemplate);
        return createChangeDefinitions(pvVisitors, componentType, genConfig);
    }
    exports_121("createChangeDetectorDefinitions", createChangeDetectorDefinitions);
    function createChangeDefinitions(pvVisitors, componentType, genConfig) {
        var pvVariableNames = _collectNestedProtoViewsVariableNames(pvVisitors);
        return pvVisitors.map(function (pvVisitor) {
            var id = componentType.name + "_" + pvVisitor.viewIndex;
            return new change_detection_2.ChangeDetectorDefinition(id, pvVisitor.strategy, pvVariableNames[pvVisitor.viewIndex], pvVisitor.bindingRecords, pvVisitor.eventRecords, pvVisitor.directiveRecords, genConfig);
        });
    }
    function _collectNestedProtoViewsVariableNames(pvVisitors) {
        var nestedPvVariableNames = collection_24.ListWrapper.createFixedSize(pvVisitors.length);
        pvVisitors.forEach(function (pv) {
            var parentVariableNames = lang_58.isPresent(pv.parent) ? nestedPvVariableNames[pv.parent.viewIndex] : [];
            nestedPvVariableNames[pv.viewIndex] = parentVariableNames.concat(pv.variableNames);
        });
        return nestedPvVariableNames;
    }
    return {
        setters:[
            function (collection_24_1) {
                collection_24 = collection_24_1;
            },
            function (lang_58_1) {
                lang_58 = lang_58_1;
            },
            function (reflection_1_1) {
                reflection_1 = reflection_1_1;
            },
            function (change_detection_2_1) {
                change_detection_2 = change_detection_2_1;
            },
            function (template_ast_1_1) {
                template_ast_1 = template_ast_1_1;
            },
            function (interfaces_2_1) {
                interfaces_2 = interfaces_2_1;
            }],
        execute: function() {
            ProtoViewVisitor = (function () {
                function ProtoViewVisitor(parent, allVisitors, strategy) {
                    this.parent = parent;
                    this.allVisitors = allVisitors;
                    this.strategy = strategy;
                    this.nodeCount = 0;
                    this.boundElementCount = 0;
                    this.variableNames = [];
                    this.bindingRecords = [];
                    this.eventRecords = [];
                    this.directiveRecords = [];
                    this.viewIndex = allVisitors.length;
                    allVisitors.push(this);
                }
                ProtoViewVisitor.prototype.visitEmbeddedTemplate = function (ast, context) {
                    this.nodeCount++;
                    this.boundElementCount++;
                    template_ast_1.templateVisitAll(this, ast.outputs);
                    for (var i = 0; i < ast.directives.length; i++) {
                        ast.directives[i].visit(this, i);
                    }
                    var childVisitor = new ProtoViewVisitor(this, this.allVisitors, change_detection_2.ChangeDetectionStrategy.Default);
                    // Attention: variables present on an embedded template count towards
                    // the embedded template and not the template anchor!
                    template_ast_1.templateVisitAll(childVisitor, ast.vars);
                    template_ast_1.templateVisitAll(childVisitor, ast.children);
                    return null;
                };
                ProtoViewVisitor.prototype.visitElement = function (ast, context) {
                    this.nodeCount++;
                    if (ast.isBound()) {
                        this.boundElementCount++;
                    }
                    template_ast_1.templateVisitAll(this, ast.inputs, null);
                    template_ast_1.templateVisitAll(this, ast.outputs);
                    template_ast_1.templateVisitAll(this, ast.exportAsVars);
                    for (var i = 0; i < ast.directives.length; i++) {
                        ast.directives[i].visit(this, i);
                    }
                    template_ast_1.templateVisitAll(this, ast.children);
                    return null;
                };
                ProtoViewVisitor.prototype.visitNgContent = function (ast, context) { return null; };
                ProtoViewVisitor.prototype.visitVariable = function (ast, context) {
                    this.variableNames.push(ast.name);
                    return null;
                };
                ProtoViewVisitor.prototype.visitEvent = function (ast, directiveRecord) {
                    var bindingRecord = lang_58.isPresent(directiveRecord) ?
                        change_detection_2.BindingRecord.createForHostEvent(ast.handler, ast.fullName, directiveRecord) :
                        change_detection_2.BindingRecord.createForEvent(ast.handler, ast.fullName, this.boundElementCount - 1);
                    this.eventRecords.push(bindingRecord);
                    return null;
                };
                ProtoViewVisitor.prototype.visitElementProperty = function (ast, directiveRecord) {
                    var boundElementIndex = this.boundElementCount - 1;
                    var dirIndex = lang_58.isPresent(directiveRecord) ? directiveRecord.directiveIndex : null;
                    var bindingRecord;
                    if (ast.type === template_ast_1.PropertyBindingType.Property) {
                        bindingRecord =
                            lang_58.isPresent(dirIndex) ?
                                change_detection_2.BindingRecord.createForHostProperty(dirIndex, ast.value, ast.name) :
                                change_detection_2.BindingRecord.createForElementProperty(ast.value, boundElementIndex, ast.name);
                    }
                    else if (ast.type === template_ast_1.PropertyBindingType.Attribute) {
                        bindingRecord =
                            lang_58.isPresent(dirIndex) ?
                                change_detection_2.BindingRecord.createForHostAttribute(dirIndex, ast.value, ast.name) :
                                change_detection_2.BindingRecord.createForElementAttribute(ast.value, boundElementIndex, ast.name);
                    }
                    else if (ast.type === template_ast_1.PropertyBindingType.Class) {
                        bindingRecord =
                            lang_58.isPresent(dirIndex) ?
                                change_detection_2.BindingRecord.createForHostClass(dirIndex, ast.value, ast.name) :
                                change_detection_2.BindingRecord.createForElementClass(ast.value, boundElementIndex, ast.name);
                    }
                    else if (ast.type === template_ast_1.PropertyBindingType.Style) {
                        bindingRecord =
                            lang_58.isPresent(dirIndex) ?
                                change_detection_2.BindingRecord.createForHostStyle(dirIndex, ast.value, ast.name, ast.unit) :
                                change_detection_2.BindingRecord.createForElementStyle(ast.value, boundElementIndex, ast.name, ast.unit);
                    }
                    this.bindingRecords.push(bindingRecord);
                    return null;
                };
                ProtoViewVisitor.prototype.visitAttr = function (ast, context) { return null; };
                ProtoViewVisitor.prototype.visitBoundText = function (ast, context) {
                    var nodeIndex = this.nodeCount++;
                    this.bindingRecords.push(change_detection_2.BindingRecord.createForTextNode(ast.value, nodeIndex));
                    return null;
                };
                ProtoViewVisitor.prototype.visitText = function (ast, context) {
                    this.nodeCount++;
                    return null;
                };
                ProtoViewVisitor.prototype.visitDirective = function (ast, directiveIndexAsNumber) {
                    var directiveIndex = new change_detection_2.DirectiveIndex(this.boundElementCount - 1, directiveIndexAsNumber);
                    var directiveMetadata = ast.directive;
                    var outputsArray = [];
                    collection_24.StringMapWrapper.forEach(ast.directive.outputs, function (eventName, dirProperty) { return outputsArray.push([dirProperty, eventName]); });
                    var directiveRecord = new change_detection_2.DirectiveRecord({
                        directiveIndex: directiveIndex,
                        callAfterContentInit: directiveMetadata.lifecycleHooks.indexOf(interfaces_2.LifecycleHooks.AfterContentInit) !== -1,
                        callAfterContentChecked: directiveMetadata.lifecycleHooks.indexOf(interfaces_2.LifecycleHooks.AfterContentChecked) !== -1,
                        callAfterViewInit: directiveMetadata.lifecycleHooks.indexOf(interfaces_2.LifecycleHooks.AfterViewInit) !== -1,
                        callAfterViewChecked: directiveMetadata.lifecycleHooks.indexOf(interfaces_2.LifecycleHooks.AfterViewChecked) !== -1,
                        callOnChanges: directiveMetadata.lifecycleHooks.indexOf(interfaces_2.LifecycleHooks.OnChanges) !== -1,
                        callDoCheck: directiveMetadata.lifecycleHooks.indexOf(interfaces_2.LifecycleHooks.DoCheck) !== -1,
                        callOnInit: directiveMetadata.lifecycleHooks.indexOf(interfaces_2.LifecycleHooks.OnInit) !== -1,
                        callOnDestroy: directiveMetadata.lifecycleHooks.indexOf(interfaces_2.LifecycleHooks.OnDestroy) !== -1,
                        changeDetection: directiveMetadata.changeDetection,
                        outputs: outputsArray
                    });
                    this.directiveRecords.push(directiveRecord);
                    template_ast_1.templateVisitAll(this, ast.inputs, directiveRecord);
                    var bindingRecords = this.bindingRecords;
                    if (directiveRecord.callOnChanges) {
                        bindingRecords.push(change_detection_2.BindingRecord.createDirectiveOnChanges(directiveRecord));
                    }
                    if (directiveRecord.callOnInit) {
                        bindingRecords.push(change_detection_2.BindingRecord.createDirectiveOnInit(directiveRecord));
                    }
                    if (directiveRecord.callDoCheck) {
                        bindingRecords.push(change_detection_2.BindingRecord.createDirectiveDoCheck(directiveRecord));
                    }
                    template_ast_1.templateVisitAll(this, ast.hostProperties, directiveRecord);
                    template_ast_1.templateVisitAll(this, ast.hostEvents, directiveRecord);
                    template_ast_1.templateVisitAll(this, ast.exportAsVars);
                    return null;
                };
                ProtoViewVisitor.prototype.visitDirectiveProperty = function (ast, directiveRecord) {
                    // TODO: these setters should eventually be created by change detection, to make
                    // it monomorphic!
                    var setter = reflection_1.reflector.setter(ast.directiveName);
                    this.bindingRecords.push(change_detection_2.BindingRecord.createForDirective(ast.value, ast.directiveName, setter, directiveRecord));
                    return null;
                };
                return ProtoViewVisitor;
            }());
        }
    }
});
System.register("test/node_modules/angular2/ts/src/compiler/change_detector_compiler", ["test/node_modules/angular2/ts/src/compiler/source_module", 'angular2/src/core/change_detection/change_detection_jit_generator', 'angular2/src/core/change_detection/abstract_change_detector', 'angular2/src/core/change_detection/change_detection_util', 'angular2/src/core/change_detection/constants', "test/node_modules/angular2/ts/src/compiler/change_definition_factory", 'angular2/src/facade/lang', 'angular2/src/core/change_detection/change_detection', 'angular2/src/transform/template_compiler/change_detector_codegen', "test/node_modules/angular2/ts/src/compiler/util", 'angular2/src/core/di'], function(exports_122, context_122) {
    "use strict";
    var __moduleName = context_122 && context_122.id;
    var source_module_1, change_detection_jit_generator_1, abstract_change_detector_1, change_detection_util_1, constants_3, change_definition_factory_1, lang_59, change_detection_3, change_detector_codegen_1, util_3, di_7;
    var ABSTRACT_CHANGE_DETECTOR, UTIL, CHANGE_DETECTOR_STATE, CHANGE_DETECTION_JIT_IMPORTS, ABSTRACT_CHANGE_DETECTOR_MODULE, UTIL_MODULE, PREGEN_PROTO_CHANGE_DETECTOR_MODULE, CONSTANTS_MODULE, ChangeDetectionCompiler;
    return {
        setters:[
            function (source_module_1_1) {
                source_module_1 = source_module_1_1;
            },
            function (change_detection_jit_generator_1_1) {
                change_detection_jit_generator_1 = change_detection_jit_generator_1_1;
            },
            function (abstract_change_detector_1_1) {
                abstract_change_detector_1 = abstract_change_detector_1_1;
            },
            function (change_detection_util_1_1) {
                change_detection_util_1 = change_detection_util_1_1;
            },
            function (constants_3_1) {
                constants_3 = constants_3_1;
            },
            function (change_definition_factory_1_1) {
                change_definition_factory_1 = change_definition_factory_1_1;
            },
            function (lang_59_1) {
                lang_59 = lang_59_1;
            },
            function (change_detection_3_1) {
                change_detection_3 = change_detection_3_1;
            },
            function (change_detector_codegen_1_1) {
                change_detector_codegen_1 = change_detector_codegen_1_1;
            },
            function (util_3_1) {
                util_3 = util_3_1;
            },
            function (di_7_1) {
                di_7 = di_7_1;
            }],
        execute: function() {
            ABSTRACT_CHANGE_DETECTOR = "AbstractChangeDetector";
            UTIL = "ChangeDetectionUtil";
            CHANGE_DETECTOR_STATE = "ChangeDetectorState";
            exports_122("CHANGE_DETECTION_JIT_IMPORTS", CHANGE_DETECTION_JIT_IMPORTS = lang_59.CONST_EXPR({
                'AbstractChangeDetector': abstract_change_detector_1.AbstractChangeDetector,
                'ChangeDetectionUtil': change_detection_util_1.ChangeDetectionUtil,
                'ChangeDetectorState': constants_3.ChangeDetectorState
            }));
            ABSTRACT_CHANGE_DETECTOR_MODULE = source_module_1.moduleRef("package:angular2/src/core/change_detection/abstract_change_detector" + util_3.MODULE_SUFFIX);
            UTIL_MODULE = source_module_1.moduleRef("package:angular2/src/core/change_detection/change_detection_util" + util_3.MODULE_SUFFIX);
            PREGEN_PROTO_CHANGE_DETECTOR_MODULE = source_module_1.moduleRef("package:angular2/src/core/change_detection/pregen_proto_change_detector" + util_3.MODULE_SUFFIX);
            CONSTANTS_MODULE = source_module_1.moduleRef("package:angular2/src/core/change_detection/constants" + util_3.MODULE_SUFFIX);
            ChangeDetectionCompiler = (function () {
                function ChangeDetectionCompiler(_genConfig) {
                    this._genConfig = _genConfig;
                }
                ChangeDetectionCompiler.prototype.compileComponentRuntime = function (componentType, strategy, parsedTemplate) {
                    var _this = this;
                    var changeDetectorDefinitions = change_definition_factory_1.createChangeDetectorDefinitions(componentType, strategy, this._genConfig, parsedTemplate);
                    return changeDetectorDefinitions.map(function (definition) {
                        return _this._createChangeDetectorFactory(definition);
                    });
                };
                ChangeDetectionCompiler.prototype._createChangeDetectorFactory = function (definition) {
                    var proto = new change_detection_3.DynamicProtoChangeDetector(definition);
                    return function () { return proto.instantiate(); };
                };
                ChangeDetectionCompiler.prototype.compileComponentCodeGen = function (componentType, strategy, parsedTemplate) {
                    var changeDetectorDefinitions = change_definition_factory_1.createChangeDetectorDefinitions(componentType, strategy, this._genConfig, parsedTemplate);
                    var factories = [];
                    var index = 0;
                    var sourceParts = changeDetectorDefinitions.map(function (definition) {
                        var codegen;
                        var sourcePart;
                        // TODO(tbosch): move the 2 code generators to the same place, one with .dart and one with .ts
                        // suffix
                        // and have the same API for calling them!
                        if (lang_59.IS_DART) {
                            codegen = new change_detector_codegen_1.Codegen(PREGEN_PROTO_CHANGE_DETECTOR_MODULE);
                            var className = "_" + definition.id;
                            var typeRef = (index === 0 && componentType.isHost) ?
                                'dynamic' :
                                "" + source_module_1.moduleRef(componentType.moduleUrl) + componentType.name;
                            codegen.generate(typeRef, className, definition);
                            factories.push(className + ".newChangeDetector");
                            sourcePart = codegen.toString();
                        }
                        else {
                            codegen = new change_detection_jit_generator_1.ChangeDetectorJITGenerator(definition, "" + UTIL_MODULE + UTIL, "" + ABSTRACT_CHANGE_DETECTOR_MODULE + ABSTRACT_CHANGE_DETECTOR, "" + CONSTANTS_MODULE + CHANGE_DETECTOR_STATE);
                            factories.push("function() { return new " + codegen.typeName + "(); }");
                            sourcePart = codegen.generateSource();
                        }
                        index++;
                        return sourcePart;
                    });
                    return new source_module_1.SourceExpressions(sourceParts, factories);
                };
                ChangeDetectionCompiler = __decorate([
                    di_7.Injectable(), 
                    __metadata('design:paramtypes', [change_detection_3.ChangeDetectorGenConfig])
                ], ChangeDetectionCompiler);
                return ChangeDetectionCompiler;
            }());
            exports_122("ChangeDetectionCompiler", ChangeDetectionCompiler);
        }
    }
});
// Some of the code comes from WebComponents.JS
// https://github.com/webcomponents/webcomponentsjs/blob/master/src/HTMLImports/path.js
System.register("test/node_modules/angular2/ts/src/compiler/style_url_resolver", ['angular2/src/facade/lang'], function(exports_123, context_123) {
    "use strict";
    var __moduleName = context_123 && context_123.id;
    var lang_60;
    var StyleWithImports, _cssImportRe, _urlWithSchemaRe;
    function isStyleUrlResolvable(url) {
        if (lang_60.isBlank(url) || url.length === 0 || url[0] == '/')
            return false;
        var schemeMatch = lang_60.RegExpWrapper.firstMatch(_urlWithSchemaRe, url);
        return lang_60.isBlank(schemeMatch) || schemeMatch[1] == 'package' || schemeMatch[1] == 'asset';
    }
    exports_123("isStyleUrlResolvable", isStyleUrlResolvable);
    /**
     * Rewrites stylesheets by resolving and removing the @import urls that
     * are either relative or don't have a `package:` scheme
     */
    function extractStyleUrls(resolver, baseUrl, cssText) {
        var foundUrls = [];
        var modifiedCssText = lang_60.StringWrapper.replaceAllMapped(cssText, _cssImportRe, function (m) {
            var url = lang_60.isPresent(m[1]) ? m[1] : m[2];
            if (!isStyleUrlResolvable(url)) {
                // Do not attempt to resolve non-package absolute URLs with URI scheme
                return m[0];
            }
            foundUrls.push(resolver.resolve(baseUrl, url));
            return '';
        });
        return new StyleWithImports(modifiedCssText, foundUrls);
    }
    exports_123("extractStyleUrls", extractStyleUrls);
    return {
        setters:[
            function (lang_60_1) {
                lang_60 = lang_60_1;
            }],
        execute: function() {
            StyleWithImports = (function () {
                function StyleWithImports(style, styleUrls) {
                    this.style = style;
                    this.styleUrls = styleUrls;
                }
                return StyleWithImports;
            }());
            exports_123("StyleWithImports", StyleWithImports);
            _cssImportRe = /@import\s+(?:url\()?\s*(?:(?:['"]([^'"]*))|([^;\)\s]*))[^;]*;?/g;
            // TODO: can't use /^[^:/?#.]+:/g due to clang-format bug:
            //       https://github.com/angular/angular/issues/4596
            _urlWithSchemaRe = /^([a-zA-Z\-\+\.]+):/g;
        }
    }
});
System.register("test/node_modules/angular2/ts/src/compiler/style_compiler", ["test/node_modules/angular2/ts/src/compiler/source_module", 'angular2/src/core/metadata/view', 'angular2/src/compiler/xhr', 'angular2/src/facade/lang', 'angular2/src/facade/async', 'angular2/src/compiler/shadow_css', 'angular2/src/compiler/url_resolver', "test/node_modules/angular2/ts/src/compiler/style_url_resolver", "test/node_modules/angular2/ts/src/compiler/util", 'angular2/src/core/di'], function(exports_124, context_124) {
    "use strict";
    var __moduleName = context_124 && context_124.id;
    var source_module_2, view_2, xhr_1, lang_61, async_10, shadow_css_1, url_resolver_1, style_url_resolver_1, util_4, di_8;
    var COMPONENT_VARIABLE, HOST_ATTR, CONTENT_ATTR, StyleCompiler;
    return {
        setters:[
            function (source_module_2_1) {
                source_module_2 = source_module_2_1;
            },
            function (view_2_1) {
                view_2 = view_2_1;
            },
            function (xhr_1_1) {
                xhr_1 = xhr_1_1;
            },
            function (lang_61_1) {
                lang_61 = lang_61_1;
            },
            function (async_10_1) {
                async_10 = async_10_1;
            },
            function (shadow_css_1_1) {
                shadow_css_1 = shadow_css_1_1;
            },
            function (url_resolver_1_1) {
                url_resolver_1 = url_resolver_1_1;
            },
            function (style_url_resolver_1_1) {
                style_url_resolver_1 = style_url_resolver_1_1;
            },
            function (util_4_1) {
                util_4 = util_4_1;
            },
            function (di_8_1) {
                di_8 = di_8_1;
            }],
        execute: function() {
            COMPONENT_VARIABLE = '%COMP%';
            HOST_ATTR = "_nghost-" + COMPONENT_VARIABLE;
            CONTENT_ATTR = "_ngcontent-" + COMPONENT_VARIABLE;
            StyleCompiler = (function () {
                function StyleCompiler(_xhr, _urlResolver) {
                    this._xhr = _xhr;
                    this._urlResolver = _urlResolver;
                    this._styleCache = new Map();
                    this._shadowCss = new shadow_css_1.ShadowCss();
                }
                StyleCompiler.prototype.compileComponentRuntime = function (template) {
                    var styles = template.styles;
                    var styleAbsUrls = template.styleUrls;
                    return this._loadStyles(styles, styleAbsUrls, template.encapsulation === view_2.ViewEncapsulation.Emulated);
                };
                StyleCompiler.prototype.compileComponentCodeGen = function (template) {
                    var shim = template.encapsulation === view_2.ViewEncapsulation.Emulated;
                    return this._styleCodeGen(template.styles, template.styleUrls, shim);
                };
                StyleCompiler.prototype.compileStylesheetCodeGen = function (stylesheetUrl, cssText) {
                    var styleWithImports = style_url_resolver_1.extractStyleUrls(this._urlResolver, stylesheetUrl, cssText);
                    return [
                        this._styleModule(stylesheetUrl, false, this._styleCodeGen([styleWithImports.style], styleWithImports.styleUrls, false)),
                        this._styleModule(stylesheetUrl, true, this._styleCodeGen([styleWithImports.style], styleWithImports.styleUrls, true))
                    ];
                };
                StyleCompiler.prototype.clearCache = function () { this._styleCache.clear(); };
                StyleCompiler.prototype._loadStyles = function (plainStyles, absUrls, encapsulate) {
                    var _this = this;
                    var promises = absUrls.map(function (absUrl) {
                        var cacheKey = "" + absUrl + (encapsulate ? '.shim' : '');
                        var result = _this._styleCache.get(cacheKey);
                        if (lang_61.isBlank(result)) {
                            result = _this._xhr.get(absUrl).then(function (style) {
                                var styleWithImports = style_url_resolver_1.extractStyleUrls(_this._urlResolver, absUrl, style);
                                return _this._loadStyles([styleWithImports.style], styleWithImports.styleUrls, encapsulate);
                            });
                            _this._styleCache.set(cacheKey, result);
                        }
                        return result;
                    });
                    return async_10.PromiseWrapper.all(promises).then(function (nestedStyles) {
                        var result = plainStyles.map(function (plainStyle) { return _this._shimIfNeeded(plainStyle, encapsulate); });
                        nestedStyles.forEach(function (styles) { return result.push(styles); });
                        return result;
                    });
                };
                StyleCompiler.prototype._styleCodeGen = function (plainStyles, absUrls, shim) {
                    var _this = this;
                    var arrayPrefix = lang_61.IS_DART ? "const" : '';
                    var styleExpressions = plainStyles.map(function (plainStyle) { return util_4.escapeSingleQuoteString(_this._shimIfNeeded(plainStyle, shim)); });
                    for (var i = 0; i < absUrls.length; i++) {
                        var moduleUrl = this._createModuleUrl(absUrls[i], shim);
                        styleExpressions.push(source_module_2.moduleRef(moduleUrl) + "STYLES");
                    }
                    var expressionSource = arrayPrefix + " [" + styleExpressions.join(',') + "]";
                    return new source_module_2.SourceExpression([], expressionSource);
                };
                StyleCompiler.prototype._styleModule = function (stylesheetUrl, shim, expression) {
                    var moduleSource = "\n      " + expression.declarations.join('\n') + "\n      " + util_4.codeGenExportVariable('STYLES') + expression.expression + ";\n    ";
                    return new source_module_2.SourceModule(this._createModuleUrl(stylesheetUrl, shim), moduleSource);
                };
                StyleCompiler.prototype._shimIfNeeded = function (style, shim) {
                    return shim ? this._shadowCss.shimCssText(style, CONTENT_ATTR, HOST_ATTR) : style;
                };
                StyleCompiler.prototype._createModuleUrl = function (stylesheetUrl, shim) {
                    return shim ? stylesheetUrl + ".shim" + util_4.MODULE_SUFFIX : "" + stylesheetUrl + util_4.MODULE_SUFFIX;
                };
                StyleCompiler = __decorate([
                    di_8.Injectable(), 
                    __metadata('design:paramtypes', [xhr_1.XHR, url_resolver_1.UrlResolver])
                ], StyleCompiler);
                return StyleCompiler;
            }());
            exports_124("StyleCompiler", StyleCompiler);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/compiler/proto_view_compiler", ['angular2/src/facade/lang', 'angular2/src/facade/collection', "test/node_modules/angular2/ts/src/compiler/template_ast", "test/node_modules/angular2/ts/src/compiler/source_module", 'angular2/src/core/linker/view', 'angular2/src/core/linker/view_type', 'angular2/src/core/linker/element', "test/node_modules/angular2/ts/src/compiler/util", 'angular2/src/core/di'], function(exports_125, context_125) {
    "use strict";
    var __moduleName = context_125 && context_125.id;
    var lang_62, collection_25, template_ast_2, source_module_3, view_3, view_type_1, element_1, util_5, di_9;
    var PROTO_VIEW_JIT_IMPORTS, APP_VIEW_MODULE_REF, VIEW_TYPE_MODULE_REF, APP_EL_MODULE_REF, METADATA_MODULE_REF, IMPLICIT_TEMPLATE_VAR, CLASS_ATTR, STYLE_ATTR, ProtoViewCompiler, CompileProtoViews, CompileProtoView, CompileProtoElement, ProtoViewFactory, CodeGenProtoViewFactory, RuntimeProtoViewFactory, ProtoViewBuilderVisitor, DirectiveContext;
    function visitAndReturnContext(visitor, asts, context) {
        template_ast_2.templateVisitAll(visitor, asts, context);
        return context;
    }
    function mapToKeyValueArray(data) {
        var entryArray = [];
        collection_25.StringMapWrapper.forEach(data, function (value, name) { entryArray.push([name, value]); });
        // We need to sort to get a defined output order
        // for tests and for caching generated artifacts...
        collection_25.ListWrapper.sort(entryArray, function (entry1, entry2) {
            return lang_62.StringWrapper.compare(entry1[0], entry2[0]);
        });
        var keyValueArray = [];
        entryArray.forEach(function (entry) { keyValueArray.push([entry[0], entry[1]]); });
        return keyValueArray;
    }
    function mergeAttributeValue(attrName, attrValue1, attrValue2) {
        if (attrName == CLASS_ATTR || attrName == STYLE_ATTR) {
            return attrValue1 + " " + attrValue2;
        }
        else {
            return attrValue2;
        }
    }
    function keyValueArrayToStringMap(keyValueArray) {
        var stringMap = {};
        for (var i = 0; i < keyValueArray.length; i++) {
            var entry = keyValueArray[i];
            stringMap[entry[0]] = entry[1];
        }
        return stringMap;
    }
    function codeGenDirectivesArray(directives) {
        var expressions = directives.map(function (directiveType) { return typeRef(directiveType.type); });
        return "[" + expressions.join(',') + "]";
    }
    function codeGenTypesArray(types) {
        var expressions = types.map(typeRef);
        return "[" + expressions.join(',') + "]";
    }
    function codeGenViewType(value) {
        if (lang_62.IS_DART) {
            return "" + VIEW_TYPE_MODULE_REF + value;
        }
        else {
            return "" + value;
        }
    }
    function typeRef(type) {
        return "" + source_module_3.moduleRef(type.moduleUrl) + type.name;
    }
    function getViewType(component, embeddedTemplateIndex) {
        if (embeddedTemplateIndex > 0) {
            return view_type_1.ViewType.EMBEDDED;
        }
        else if (component.type.isHost) {
            return view_type_1.ViewType.HOST;
        }
        else {
            return view_type_1.ViewType.COMPONENT;
        }
    }
    return {
        setters:[
            function (lang_62_1) {
                lang_62 = lang_62_1;
            },
            function (collection_25_1) {
                collection_25 = collection_25_1;
            },
            function (template_ast_2_1) {
                template_ast_2 = template_ast_2_1;
            },
            function (source_module_3_1) {
                source_module_3 = source_module_3_1;
            },
            function (view_3_1) {
                view_3 = view_3_1;
            },
            function (view_type_1_1) {
                view_type_1 = view_type_1_1;
            },
            function (element_1_1) {
                element_1 = element_1_1;
            },
            function (util_5_1) {
                util_5 = util_5_1;
            },
            function (di_9_1) {
                di_9 = di_9_1;
            }],
        execute: function() {
            exports_125("PROTO_VIEW_JIT_IMPORTS", PROTO_VIEW_JIT_IMPORTS = lang_62.CONST_EXPR({ 'AppProtoView': view_3.AppProtoView, 'AppProtoElement': element_1.AppProtoElement, 'ViewType': view_type_1.ViewType }));
            // TODO: have a single file that reexports everything needed for
            // codegen explicitly
            // - helps understanding what codegen works against
            // - less imports in codegen code
            exports_125("APP_VIEW_MODULE_REF", APP_VIEW_MODULE_REF = source_module_3.moduleRef('package:angular2/src/core/linker/view' + util_5.MODULE_SUFFIX));
            exports_125("VIEW_TYPE_MODULE_REF", VIEW_TYPE_MODULE_REF = source_module_3.moduleRef('package:angular2/src/core/linker/view_type' + util_5.MODULE_SUFFIX));
            exports_125("APP_EL_MODULE_REF", APP_EL_MODULE_REF = source_module_3.moduleRef('package:angular2/src/core/linker/element' + util_5.MODULE_SUFFIX));
            exports_125("METADATA_MODULE_REF", METADATA_MODULE_REF = source_module_3.moduleRef('package:angular2/src/core/metadata/view' + util_5.MODULE_SUFFIX));
            IMPLICIT_TEMPLATE_VAR = '\$implicit';
            CLASS_ATTR = 'class';
            STYLE_ATTR = 'style';
            ProtoViewCompiler = (function () {
                function ProtoViewCompiler() {
                }
                ProtoViewCompiler.prototype.compileProtoViewRuntime = function (metadataCache, component, template, pipes) {
                    var protoViewFactory = new RuntimeProtoViewFactory(metadataCache, component, pipes);
                    var allProtoViews = [];
                    protoViewFactory.createCompileProtoView(template, [], [], allProtoViews);
                    return new CompileProtoViews([], allProtoViews);
                };
                ProtoViewCompiler.prototype.compileProtoViewCodeGen = function (resolvedMetadataCacheExpr, component, template, pipes) {
                    var protoViewFactory = new CodeGenProtoViewFactory(resolvedMetadataCacheExpr, component, pipes);
                    var allProtoViews = [];
                    var allStatements = [];
                    protoViewFactory.createCompileProtoView(template, [], allStatements, allProtoViews);
                    return new CompileProtoViews(allStatements.map(function (stmt) { return stmt.statement; }), allProtoViews);
                };
                ProtoViewCompiler = __decorate([
                    di_9.Injectable(), 
                    __metadata('design:paramtypes', [])
                ], ProtoViewCompiler);
                return ProtoViewCompiler;
            }());
            exports_125("ProtoViewCompiler", ProtoViewCompiler);
            CompileProtoViews = (function () {
                function CompileProtoViews(declarations, protoViews) {
                    this.declarations = declarations;
                    this.protoViews = protoViews;
                }
                return CompileProtoViews;
            }());
            exports_125("CompileProtoViews", CompileProtoViews);
            CompileProtoView = (function () {
                function CompileProtoView(embeddedTemplateIndex, protoElements, protoView) {
                    this.embeddedTemplateIndex = embeddedTemplateIndex;
                    this.protoElements = protoElements;
                    this.protoView = protoView;
                }
                return CompileProtoView;
            }());
            exports_125("CompileProtoView", CompileProtoView);
            CompileProtoElement = (function () {
                function CompileProtoElement(boundElementIndex, attrNameAndValues, variableNameAndValues, renderEvents, directives, embeddedTemplateIndex, appProtoEl) {
                    this.boundElementIndex = boundElementIndex;
                    this.attrNameAndValues = attrNameAndValues;
                    this.variableNameAndValues = variableNameAndValues;
                    this.renderEvents = renderEvents;
                    this.directives = directives;
                    this.embeddedTemplateIndex = embeddedTemplateIndex;
                    this.appProtoEl = appProtoEl;
                }
                return CompileProtoElement;
            }());
            exports_125("CompileProtoElement", CompileProtoElement);
            ProtoViewFactory = (function () {
                function ProtoViewFactory(component) {
                    this.component = component;
                }
                ProtoViewFactory.prototype.createCompileProtoView = function (template, templateVariableBindings, targetStatements, targetProtoViews) {
                    var embeddedTemplateIndex = targetProtoViews.length;
                    // Note: targetProtoViews needs to be in depth first order.
                    // So we "reserve" a space here that we fill after the recursion is done
                    targetProtoViews.push(null);
                    var builder = new ProtoViewBuilderVisitor(this, targetStatements, targetProtoViews);
                    template_ast_2.templateVisitAll(builder, template);
                    var viewType = getViewType(this.component, embeddedTemplateIndex);
                    var appProtoView = this.createAppProtoView(embeddedTemplateIndex, viewType, templateVariableBindings, targetStatements);
                    var cpv = new CompileProtoView(embeddedTemplateIndex, builder.protoElements, appProtoView);
                    targetProtoViews[embeddedTemplateIndex] = cpv;
                    return cpv;
                };
                return ProtoViewFactory;
            }());
            CodeGenProtoViewFactory = (function (_super) {
                __extends(CodeGenProtoViewFactory, _super);
                function CodeGenProtoViewFactory(resolvedMetadataCacheExpr, component, pipes) {
                    _super.call(this, component);
                    this.resolvedMetadataCacheExpr = resolvedMetadataCacheExpr;
                    this.pipes = pipes;
                    this._nextVarId = 0;
                }
                CodeGenProtoViewFactory.prototype._nextProtoViewVar = function (embeddedTemplateIndex) {
                    return "appProtoView" + this._nextVarId++ + "_" + this.component.type.name + embeddedTemplateIndex;
                };
                CodeGenProtoViewFactory.prototype.createAppProtoView = function (embeddedTemplateIndex, viewType, templateVariableBindings, targetStatements) {
                    var protoViewVarName = this._nextProtoViewVar(embeddedTemplateIndex);
                    var viewTypeExpr = codeGenViewType(viewType);
                    var pipesExpr = embeddedTemplateIndex === 0 ?
                        codeGenTypesArray(this.pipes.map(function (pipeMeta) { return pipeMeta.type; })) :
                        null;
                    var statement = "var " + protoViewVarName + " = " + APP_VIEW_MODULE_REF + "AppProtoView.create(" + this.resolvedMetadataCacheExpr.expression + ", " + viewTypeExpr + ", " + pipesExpr + ", " + util_5.codeGenStringMap(templateVariableBindings) + ");";
                    targetStatements.push(new util_5.Statement(statement));
                    return new util_5.Expression(protoViewVarName);
                };
                CodeGenProtoViewFactory.prototype.createAppProtoElement = function (boundElementIndex, attrNameAndValues, variableNameAndValues, directives, targetStatements) {
                    var varName = "appProtoEl" + this._nextVarId++ + "_" + this.component.type.name;
                    var value = APP_EL_MODULE_REF + "AppProtoElement.create(\n        " + this.resolvedMetadataCacheExpr.expression + ",\n        " + boundElementIndex + ",\n        " + util_5.codeGenStringMap(attrNameAndValues) + ",\n        " + codeGenDirectivesArray(directives) + ",\n        " + util_5.codeGenStringMap(variableNameAndValues) + "\n      )";
                    var statement = "var " + varName + " = " + value + ";";
                    targetStatements.push(new util_5.Statement(statement));
                    return new util_5.Expression(varName);
                };
                return CodeGenProtoViewFactory;
            }(ProtoViewFactory));
            RuntimeProtoViewFactory = (function (_super) {
                __extends(RuntimeProtoViewFactory, _super);
                function RuntimeProtoViewFactory(metadataCache, component, pipes) {
                    _super.call(this, component);
                    this.metadataCache = metadataCache;
                    this.pipes = pipes;
                }
                RuntimeProtoViewFactory.prototype.createAppProtoView = function (embeddedTemplateIndex, viewType, templateVariableBindings, targetStatements) {
                    var pipes = embeddedTemplateIndex === 0 ? this.pipes.map(function (pipeMeta) { return pipeMeta.type.runtime; }) : [];
                    var templateVars = keyValueArrayToStringMap(templateVariableBindings);
                    return view_3.AppProtoView.create(this.metadataCache, viewType, pipes, templateVars);
                };
                RuntimeProtoViewFactory.prototype.createAppProtoElement = function (boundElementIndex, attrNameAndValues, variableNameAndValues, directives, targetStatements) {
                    var attrs = keyValueArrayToStringMap(attrNameAndValues);
                    return element_1.AppProtoElement.create(this.metadataCache, boundElementIndex, attrs, directives.map(function (dirMeta) { return dirMeta.type.runtime; }), keyValueArrayToStringMap(variableNameAndValues));
                };
                return RuntimeProtoViewFactory;
            }(ProtoViewFactory));
            ProtoViewBuilderVisitor = (function () {
                function ProtoViewBuilderVisitor(factory, allStatements, allProtoViews) {
                    this.factory = factory;
                    this.allStatements = allStatements;
                    this.allProtoViews = allProtoViews;
                    this.protoElements = [];
                    this.boundElementCount = 0;
                }
                ProtoViewBuilderVisitor.prototype._readAttrNameAndValues = function (directives, attrAsts) {
                    var attrs = visitAndReturnContext(this, attrAsts, {});
                    directives.forEach(function (directiveMeta) {
                        collection_25.StringMapWrapper.forEach(directiveMeta.hostAttributes, function (value, name) {
                            var prevValue = attrs[name];
                            attrs[name] = lang_62.isPresent(prevValue) ? mergeAttributeValue(name, prevValue, value) : value;
                        });
                    });
                    return mapToKeyValueArray(attrs);
                };
                ProtoViewBuilderVisitor.prototype.visitBoundText = function (ast, context) { return null; };
                ProtoViewBuilderVisitor.prototype.visitText = function (ast, context) { return null; };
                ProtoViewBuilderVisitor.prototype.visitNgContent = function (ast, context) { return null; };
                ProtoViewBuilderVisitor.prototype.visitElement = function (ast, context) {
                    var _this = this;
                    var boundElementIndex = null;
                    if (ast.isBound()) {
                        boundElementIndex = this.boundElementCount++;
                    }
                    var component = ast.getComponent();
                    var variableNameAndValues = [];
                    if (lang_62.isBlank(component)) {
                        ast.exportAsVars.forEach(function (varAst) { variableNameAndValues.push([varAst.name, null]); });
                    }
                    var directives = [];
                    var renderEvents = visitAndReturnContext(this, ast.outputs, new Map());
                    collection_25.ListWrapper.forEachWithIndex(ast.directives, function (directiveAst, index) {
                        directiveAst.visit(_this, new DirectiveContext(index, boundElementIndex, renderEvents, variableNameAndValues, directives));
                    });
                    var renderEventArray = [];
                    renderEvents.forEach(function (eventAst, _) { return renderEventArray.push(eventAst); });
                    var attrNameAndValues = this._readAttrNameAndValues(directives, ast.attrs);
                    this._addProtoElement(ast.isBound(), boundElementIndex, attrNameAndValues, variableNameAndValues, renderEventArray, directives, null);
                    template_ast_2.templateVisitAll(this, ast.children);
                    return null;
                };
                ProtoViewBuilderVisitor.prototype.visitEmbeddedTemplate = function (ast, context) {
                    var _this = this;
                    var boundElementIndex = this.boundElementCount++;
                    var directives = [];
                    collection_25.ListWrapper.forEachWithIndex(ast.directives, function (directiveAst, index) {
                        directiveAst.visit(_this, new DirectiveContext(index, boundElementIndex, new Map(), [], directives));
                    });
                    var attrNameAndValues = this._readAttrNameAndValues(directives, ast.attrs);
                    var templateVariableBindings = ast.vars.map(function (varAst) { return [varAst.value.length > 0 ? varAst.value : IMPLICIT_TEMPLATE_VAR, varAst.name]; });
                    var nestedProtoView = this.factory.createCompileProtoView(ast.children, templateVariableBindings, this.allStatements, this.allProtoViews);
                    this._addProtoElement(true, boundElementIndex, attrNameAndValues, [], [], directives, nestedProtoView.embeddedTemplateIndex);
                    return null;
                };
                ProtoViewBuilderVisitor.prototype._addProtoElement = function (isBound, boundElementIndex, attrNameAndValues, variableNameAndValues, renderEvents, directives, embeddedTemplateIndex) {
                    var appProtoEl = null;
                    if (isBound) {
                        appProtoEl =
                            this.factory.createAppProtoElement(boundElementIndex, attrNameAndValues, variableNameAndValues, directives, this.allStatements);
                    }
                    var compileProtoEl = new CompileProtoElement(boundElementIndex, attrNameAndValues, variableNameAndValues, renderEvents, directives, embeddedTemplateIndex, appProtoEl);
                    this.protoElements.push(compileProtoEl);
                };
                ProtoViewBuilderVisitor.prototype.visitVariable = function (ast, ctx) { return null; };
                ProtoViewBuilderVisitor.prototype.visitAttr = function (ast, attrNameAndValues) {
                    attrNameAndValues[ast.name] = ast.value;
                    return null;
                };
                ProtoViewBuilderVisitor.prototype.visitDirective = function (ast, ctx) {
                    ctx.targetDirectives.push(ast.directive);
                    template_ast_2.templateVisitAll(this, ast.hostEvents, ctx.hostEventTargetAndNames);
                    ast.exportAsVars.forEach(function (varAst) { ctx.targetVariableNameAndValues.push([varAst.name, ctx.index]); });
                    return null;
                };
                ProtoViewBuilderVisitor.prototype.visitEvent = function (ast, eventTargetAndNames) {
                    eventTargetAndNames.set(ast.fullName, ast);
                    return null;
                };
                ProtoViewBuilderVisitor.prototype.visitDirectiveProperty = function (ast, context) { return null; };
                ProtoViewBuilderVisitor.prototype.visitElementProperty = function (ast, context) { return null; };
                return ProtoViewBuilderVisitor;
            }());
            DirectiveContext = (function () {
                function DirectiveContext(index, boundElementIndex, hostEventTargetAndNames, targetVariableNameAndValues, targetDirectives) {
                    this.index = index;
                    this.boundElementIndex = boundElementIndex;
                    this.hostEventTargetAndNames = hostEventTargetAndNames;
                    this.targetVariableNameAndValues = targetVariableNameAndValues;
                    this.targetDirectives = targetDirectives;
                }
                return DirectiveContext;
            }());
        }
    }
});
System.register("test/node_modules/angular2/ts/src/compiler/view_compiler", ['angular2/src/facade/lang', 'angular2/src/facade/collection', "test/node_modules/angular2/ts/src/compiler/template_ast", "test/node_modules/angular2/ts/src/compiler/source_module", 'angular2/src/core/linker/view', 'angular2/src/core/linker/view_type', 'angular2/src/core/linker/element', 'angular2/src/core/metadata/view', "test/node_modules/angular2/ts/src/compiler/util", 'angular2/src/core/di', "test/node_modules/angular2/ts/src/compiler/proto_view_compiler"], function(exports_126, context_126) {
    "use strict";
    var __moduleName = context_126 && context_126.id;
    var lang_63, collection_26, template_ast_3, source_module_4, view_4, view_type_2, element_2, view_5, util_6, di_10, proto_view_compiler_1;
    var VIEW_JIT_IMPORTS, ViewCompiler, CodeGenViewFactory, RuntimeViewFactory, ParentElement, ViewBuilderVisitor;
    function codeGenEventHandler(view, boundElementIndex, eventName) {
        return util_6.codeGenValueFn(['event'], view.expression + ".triggerEventHandlers(" + util_6.escapeValue(eventName) + ", event, " + boundElementIndex + ")");
    }
    function codeGenViewFactoryName(component, embeddedTemplateIndex) {
        return "viewFactory_" + component.type.name + embeddedTemplateIndex;
    }
    function codeGenViewEncapsulation(value) {
        if (lang_63.IS_DART) {
            return "" + proto_view_compiler_1.METADATA_MODULE_REF + value;
        }
        else {
            return "" + value;
        }
    }
    return {
        setters:[
            function (lang_63_1) {
                lang_63 = lang_63_1;
            },
            function (collection_26_1) {
                collection_26 = collection_26_1;
            },
            function (template_ast_3_1) {
                template_ast_3 = template_ast_3_1;
            },
            function (source_module_4_1) {
                source_module_4 = source_module_4_1;
            },
            function (view_4_1) {
                view_4 = view_4_1;
            },
            function (view_type_2_1) {
                view_type_2 = view_type_2_1;
            },
            function (element_2_1) {
                element_2 = element_2_1;
            },
            function (view_5_1) {
                view_5 = view_5_1;
            },
            function (util_6_1) {
                util_6 = util_6_1;
            },
            function (di_10_1) {
                di_10 = di_10_1;
            },
            function (proto_view_compiler_1_1) {
                proto_view_compiler_1 = proto_view_compiler_1_1;
            }],
        execute: function() {
            exports_126("VIEW_JIT_IMPORTS", VIEW_JIT_IMPORTS = lang_63.CONST_EXPR({
                'AppView': view_4.AppView,
                'AppElement': element_2.AppElement,
                'flattenNestedViewRenderNodes': view_4.flattenNestedViewRenderNodes,
                'checkSlotCount': view_4.checkSlotCount
            }));
            ViewCompiler = (function () {
                function ViewCompiler() {
                }
                ViewCompiler.prototype.compileComponentRuntime = function (component, template, styles, protoViews, changeDetectorFactories, componentViewFactory) {
                    var viewFactory = new RuntimeViewFactory(component, styles, protoViews, changeDetectorFactories, componentViewFactory);
                    return viewFactory.createViewFactory(template, 0, []);
                };
                ViewCompiler.prototype.compileComponentCodeGen = function (component, template, styles, protoViews, changeDetectorFactoryExpressions, componentViewFactory) {
                    var viewFactory = new CodeGenViewFactory(component, styles, protoViews, changeDetectorFactoryExpressions, componentViewFactory);
                    var targetStatements = [];
                    var viewFactoryExpression = viewFactory.createViewFactory(template, 0, targetStatements);
                    return new source_module_4.SourceExpression(targetStatements.map(function (stmt) { return stmt.statement; }), viewFactoryExpression.expression);
                };
                ViewCompiler = __decorate([
                    di_10.Injectable(), 
                    __metadata('design:paramtypes', [])
                ], ViewCompiler);
                return ViewCompiler;
            }());
            exports_126("ViewCompiler", ViewCompiler);
            CodeGenViewFactory = (function () {
                function CodeGenViewFactory(component, styles, protoViews, changeDetectorExpressions, componentViewFactory) {
                    this.component = component;
                    this.styles = styles;
                    this.protoViews = protoViews;
                    this.changeDetectorExpressions = changeDetectorExpressions;
                    this.componentViewFactory = componentViewFactory;
                    this._nextVarId = 0;
                }
                CodeGenViewFactory.prototype._nextVar = function (prefix) {
                    return "" + prefix + this._nextVarId++ + "_" + this.component.type.name;
                };
                CodeGenViewFactory.prototype._nextRenderVar = function () { return this._nextVar('render'); };
                CodeGenViewFactory.prototype._nextAppVar = function () { return this._nextVar('app'); };
                CodeGenViewFactory.prototype._nextDisposableVar = function () {
                    return "disposable" + this._nextVarId++ + "_" + this.component.type.name;
                };
                CodeGenViewFactory.prototype.createText = function (renderer, parent, text, targetStatements) {
                    var varName = this._nextRenderVar();
                    var statement = "var " + varName + " = " + renderer.expression + ".createText(" + (lang_63.isPresent(parent) ? parent.expression : null) + ", " + util_6.escapeSingleQuoteString(text) + ");";
                    targetStatements.push(new util_6.Statement(statement));
                    return new util_6.Expression(varName);
                };
                CodeGenViewFactory.prototype.createElement = function (renderer, parentRenderNode, name, rootSelector, targetStatements) {
                    var varName = this._nextRenderVar();
                    var valueExpr;
                    if (lang_63.isPresent(rootSelector)) {
                        valueExpr = rootSelector.expression + " == null ?\n        " + renderer.expression + ".createElement(" + (lang_63.isPresent(parentRenderNode) ? parentRenderNode.expression : null) + ", " + util_6.escapeSingleQuoteString(name) + ") :\n        " + renderer.expression + ".selectRootElement(" + rootSelector.expression + ");";
                    }
                    else {
                        valueExpr =
                            renderer.expression + ".createElement(" + (lang_63.isPresent(parentRenderNode) ? parentRenderNode.expression : null) + ", " + util_6.escapeSingleQuoteString(name) + ")";
                    }
                    var statement = "var " + varName + " = " + valueExpr + ";";
                    targetStatements.push(new util_6.Statement(statement));
                    return new util_6.Expression(varName);
                };
                CodeGenViewFactory.prototype.createTemplateAnchor = function (renderer, parentRenderNode, targetStatements) {
                    var varName = this._nextRenderVar();
                    var valueExpr = renderer.expression + ".createTemplateAnchor(" + (lang_63.isPresent(parentRenderNode) ? parentRenderNode.expression : null) + ");";
                    targetStatements.push(new util_6.Statement("var " + varName + " = " + valueExpr));
                    return new util_6.Expression(varName);
                };
                CodeGenViewFactory.prototype.createGlobalEventListener = function (renderer, appView, boundElementIndex, eventAst, targetStatements) {
                    var disposableVar = this._nextDisposableVar();
                    var eventHandlerExpr = codeGenEventHandler(appView, boundElementIndex, eventAst.fullName);
                    targetStatements.push(new util_6.Statement("var " + disposableVar + " = " + renderer.expression + ".listenGlobal(" + util_6.escapeValue(eventAst.target) + ", " + util_6.escapeValue(eventAst.name) + ", " + eventHandlerExpr + ");"));
                    return new util_6.Expression(disposableVar);
                };
                CodeGenViewFactory.prototype.createElementEventListener = function (renderer, appView, boundElementIndex, renderNode, eventAst, targetStatements) {
                    var disposableVar = this._nextDisposableVar();
                    var eventHandlerExpr = codeGenEventHandler(appView, boundElementIndex, eventAst.fullName);
                    targetStatements.push(new util_6.Statement("var " + disposableVar + " = " + renderer.expression + ".listen(" + renderNode.expression + ", " + util_6.escapeValue(eventAst.name) + ", " + eventHandlerExpr + ");"));
                    return new util_6.Expression(disposableVar);
                };
                CodeGenViewFactory.prototype.setElementAttribute = function (renderer, renderNode, attrName, attrValue, targetStatements) {
                    targetStatements.push(new util_6.Statement(renderer.expression + ".setElementAttribute(" + renderNode.expression + ", " + util_6.escapeSingleQuoteString(attrName) + ", " + util_6.escapeSingleQuoteString(attrValue) + ");"));
                };
                CodeGenViewFactory.prototype.createAppElement = function (appProtoEl, appView, renderNode, parentAppEl, embeddedViewFactory, targetStatements) {
                    var appVar = this._nextAppVar();
                    var varValue = "new " + proto_view_compiler_1.APP_EL_MODULE_REF + "AppElement(" + appProtoEl.expression + ", " + appView.expression + ",\n      " + (lang_63.isPresent(parentAppEl) ? parentAppEl.expression : null) + ", " + renderNode.expression + ", " + (lang_63.isPresent(embeddedViewFactory) ? embeddedViewFactory.expression : null) + ")";
                    targetStatements.push(new util_6.Statement("var " + appVar + " = " + varValue + ";"));
                    return new util_6.Expression(appVar);
                };
                CodeGenViewFactory.prototype.createAndSetComponentView = function (renderer, viewManager, view, appEl, component, contentNodesByNgContentIndex, targetStatements) {
                    var codeGenContentNodes;
                    if (this.component.type.isHost) {
                        codeGenContentNodes = view.expression + ".projectableNodes";
                    }
                    else {
                        codeGenContentNodes =
                            "[" + contentNodesByNgContentIndex.map(function (nodes) { return util_6.codeGenFlatArray(nodes); }).join(',') + "]";
                    }
                    targetStatements.push(new util_6.Statement(this.componentViewFactory(component) + "(" + renderer.expression + ", " + viewManager.expression + ", " + appEl.expression + ", " + codeGenContentNodes + ", null, null, null);"));
                };
                CodeGenViewFactory.prototype.getProjectedNodes = function (projectableNodes, ngContentIndex) {
                    return new util_6.Expression(projectableNodes.expression + "[" + ngContentIndex + "]", true);
                };
                CodeGenViewFactory.prototype.appendProjectedNodes = function (renderer, parent, nodes, targetStatements) {
                    targetStatements.push(new util_6.Statement(renderer.expression + ".projectNodes(" + parent.expression + ", " + proto_view_compiler_1.APP_VIEW_MODULE_REF + "flattenNestedViewRenderNodes(" + nodes.expression + "));"));
                };
                CodeGenViewFactory.prototype.createViewFactory = function (asts, embeddedTemplateIndex, targetStatements) {
                    var compileProtoView = this.protoViews[embeddedTemplateIndex];
                    var isHostView = this.component.type.isHost;
                    var isComponentView = embeddedTemplateIndex === 0 && !isHostView;
                    var visitor = new ViewBuilderVisitor(new util_6.Expression('renderer'), new util_6.Expression('viewManager'), new util_6.Expression('projectableNodes'), isHostView ? new util_6.Expression('rootSelector') : null, new util_6.Expression('view'), compileProtoView, targetStatements, this);
                    template_ast_3.templateVisitAll(visitor, asts, new ParentElement(isComponentView ? new util_6.Expression('parentRenderNode') : null, null, null));
                    var appProtoView = compileProtoView.protoView.expression;
                    var viewFactoryName = codeGenViewFactoryName(this.component, embeddedTemplateIndex);
                    var changeDetectorFactory = this.changeDetectorExpressions.expressions[embeddedTemplateIndex];
                    var factoryArgs = [
                        'parentRenderer',
                        'viewManager',
                        'containerEl',
                        'projectableNodes',
                        'rootSelector',
                        'dynamicallyCreatedProviders',
                        'rootInjector'
                    ];
                    var initRendererStmts = [];
                    var rendererExpr = "parentRenderer";
                    if (embeddedTemplateIndex === 0) {
                        var renderCompTypeVar = this._nextVar('renderType');
                        targetStatements.push(new util_6.Statement("var " + renderCompTypeVar + " = null;"));
                        var stylesVar = this._nextVar('styles');
                        targetStatements.push(new util_6.Statement(util_6.CONST_VAR + " " + stylesVar + " = " + this.styles.expression + ";"));
                        var encapsulation = this.component.template.encapsulation;
                        initRendererStmts.push("if (" + renderCompTypeVar + " == null) {\n        " + renderCompTypeVar + " = viewManager.createRenderComponentType(" + codeGenViewEncapsulation(encapsulation) + ", " + stylesVar + ");\n      }");
                        rendererExpr = "parentRenderer.renderComponent(" + renderCompTypeVar + ")";
                    }
                    var statement = "\n" + util_6.codeGenFnHeader(factoryArgs, viewFactoryName) + "{\n  " + initRendererStmts.join('\n') + "\n  var renderer = " + rendererExpr + ";\n  var view = new " + proto_view_compiler_1.APP_VIEW_MODULE_REF + "AppView(\n    " + appProtoView + ", renderer, viewManager,\n    projectableNodes,\n    containerEl,\n    dynamicallyCreatedProviders, rootInjector,\n    " + changeDetectorFactory + "()\n  );\n  " + proto_view_compiler_1.APP_VIEW_MODULE_REF + "checkSlotCount(" + util_6.escapeValue(this.component.type.name) + ", " + this.component.template.ngContentSelectors.length + ", projectableNodes);\n  " + (isComponentView ? 'var parentRenderNode = renderer.createViewRoot(view.containerAppElement.nativeElement);' : '') + "\n  " + visitor.renderStmts.map(function (stmt) { return stmt.statement; }).join('\n') + "\n  " + visitor.appStmts.map(function (stmt) { return stmt.statement; }).join('\n') + "\n\n  view.init(" + util_6.codeGenFlatArray(visitor.rootNodesOrAppElements) + ", " + util_6.codeGenArray(visitor.renderNodes) + ", " + util_6.codeGenArray(visitor.appDisposables) + ",\n            " + util_6.codeGenArray(visitor.appElements) + ");\n  return view;\n}";
                    targetStatements.push(new util_6.Statement(statement));
                    return new util_6.Expression(viewFactoryName);
                };
                return CodeGenViewFactory;
            }());
            RuntimeViewFactory = (function () {
                function RuntimeViewFactory(component, styles, protoViews, changeDetectorFactories, componentViewFactory) {
                    this.component = component;
                    this.styles = styles;
                    this.protoViews = protoViews;
                    this.changeDetectorFactories = changeDetectorFactories;
                    this.componentViewFactory = componentViewFactory;
                }
                RuntimeViewFactory.prototype.createText = function (renderer, parent, text, targetStatements) {
                    return renderer.createText(parent, text);
                };
                RuntimeViewFactory.prototype.createElement = function (renderer, parent, name, rootSelector, targetStatements) {
                    var el;
                    if (lang_63.isPresent(rootSelector)) {
                        el = renderer.selectRootElement(rootSelector);
                    }
                    else {
                        el = renderer.createElement(parent, name);
                    }
                    return el;
                };
                RuntimeViewFactory.prototype.createTemplateAnchor = function (renderer, parent, targetStatements) {
                    return renderer.createTemplateAnchor(parent);
                };
                RuntimeViewFactory.prototype.createGlobalEventListener = function (renderer, appView, boundElementIndex, eventAst, targetStatements) {
                    return renderer.listenGlobal(eventAst.target, eventAst.name, function (event) { return appView.triggerEventHandlers(eventAst.fullName, event, boundElementIndex); });
                };
                RuntimeViewFactory.prototype.createElementEventListener = function (renderer, appView, boundElementIndex, renderNode, eventAst, targetStatements) {
                    return renderer.listen(renderNode, eventAst.name, function (event) { return appView.triggerEventHandlers(eventAst.fullName, event, boundElementIndex); });
                };
                RuntimeViewFactory.prototype.setElementAttribute = function (renderer, renderNode, attrName, attrValue, targetStatements) {
                    renderer.setElementAttribute(renderNode, attrName, attrValue);
                };
                RuntimeViewFactory.prototype.createAppElement = function (appProtoEl, appView, renderNode, parentAppEl, embeddedViewFactory, targetStatements) {
                    return new element_2.AppElement(appProtoEl, appView, parentAppEl, renderNode, embeddedViewFactory);
                };
                RuntimeViewFactory.prototype.createAndSetComponentView = function (renderer, viewManager, appView, appEl, component, contentNodesByNgContentIndex, targetStatements) {
                    var flattenedContentNodes;
                    if (this.component.type.isHost) {
                        flattenedContentNodes = appView.projectableNodes;
                    }
                    else {
                        flattenedContentNodes = collection_26.ListWrapper.createFixedSize(contentNodesByNgContentIndex.length);
                        for (var i = 0; i < contentNodesByNgContentIndex.length; i++) {
                            flattenedContentNodes[i] = util_6.flattenArray(contentNodesByNgContentIndex[i], []);
                        }
                    }
                    this.componentViewFactory(component)(renderer, viewManager, appEl, flattenedContentNodes);
                };
                RuntimeViewFactory.prototype.getProjectedNodes = function (projectableNodes, ngContentIndex) {
                    return projectableNodes[ngContentIndex];
                };
                RuntimeViewFactory.prototype.appendProjectedNodes = function (renderer, parent, nodes, targetStatements) {
                    renderer.projectNodes(parent, view_4.flattenNestedViewRenderNodes(nodes));
                };
                RuntimeViewFactory.prototype.createViewFactory = function (asts, embeddedTemplateIndex, targetStatements) {
                    var _this = this;
                    var compileProtoView = this.protoViews[embeddedTemplateIndex];
                    var isComponentView = compileProtoView.protoView.type === view_type_2.ViewType.COMPONENT;
                    var renderComponentType = null;
                    return function (parentRenderer, viewManager, containerEl, projectableNodes, rootSelector, dynamicallyCreatedProviders, rootInjector) {
                        if (rootSelector === void 0) { rootSelector = null; }
                        if (dynamicallyCreatedProviders === void 0) { dynamicallyCreatedProviders = null; }
                        if (rootInjector === void 0) { rootInjector = null; }
                        view_4.checkSlotCount(_this.component.type.name, _this.component.template.ngContentSelectors.length, projectableNodes);
                        var renderer;
                        if (embeddedTemplateIndex === 0) {
                            if (lang_63.isBlank(renderComponentType)) {
                                renderComponentType = viewManager.createRenderComponentType(_this.component.template.encapsulation, _this.styles);
                            }
                            renderer = parentRenderer.renderComponent(renderComponentType);
                        }
                        else {
                            renderer = parentRenderer;
                        }
                        var changeDetector = _this.changeDetectorFactories[embeddedTemplateIndex]();
                        var view = new view_4.AppView(compileProtoView.protoView, renderer, viewManager, projectableNodes, containerEl, dynamicallyCreatedProviders, rootInjector, changeDetector);
                        var visitor = new ViewBuilderVisitor(renderer, viewManager, projectableNodes, rootSelector, view, compileProtoView, [], _this);
                        var parentRenderNode = isComponentView ? renderer.createViewRoot(containerEl.nativeElement) : null;
                        template_ast_3.templateVisitAll(visitor, asts, new ParentElement(parentRenderNode, null, null));
                        view.init(util_6.flattenArray(visitor.rootNodesOrAppElements, []), visitor.renderNodes, visitor.appDisposables, visitor.appElements);
                        return view;
                    };
                };
                return RuntimeViewFactory;
            }());
            ParentElement = (function () {
                function ParentElement(renderNode, appEl, component) {
                    this.renderNode = renderNode;
                    this.appEl = appEl;
                    this.component = component;
                    if (lang_63.isPresent(component)) {
                        this.contentNodesByNgContentIndex =
                            collection_26.ListWrapper.createFixedSize(component.template.ngContentSelectors.length);
                        for (var i = 0; i < this.contentNodesByNgContentIndex.length; i++) {
                            this.contentNodesByNgContentIndex[i] = [];
                        }
                    }
                    else {
                        this.contentNodesByNgContentIndex = null;
                    }
                }
                ParentElement.prototype.addContentNode = function (ngContentIndex, nodeExpr) {
                    this.contentNodesByNgContentIndex[ngContentIndex].push(nodeExpr);
                };
                return ParentElement;
            }());
            ViewBuilderVisitor = (function () {
                function ViewBuilderVisitor(renderer, viewManager, projectableNodes, rootSelector, view, protoView, targetStatements, factory) {
                    this.renderer = renderer;
                    this.viewManager = viewManager;
                    this.projectableNodes = projectableNodes;
                    this.rootSelector = rootSelector;
                    this.view = view;
                    this.protoView = protoView;
                    this.targetStatements = targetStatements;
                    this.factory = factory;
                    this.renderStmts = [];
                    this.renderNodes = [];
                    this.appStmts = [];
                    this.appElements = [];
                    this.appDisposables = [];
                    this.rootNodesOrAppElements = [];
                    this.elementCount = 0;
                }
                ViewBuilderVisitor.prototype._addRenderNode = function (renderNode, appEl, ngContentIndex, parent) {
                    this.renderNodes.push(renderNode);
                    if (lang_63.isPresent(parent.component)) {
                        if (lang_63.isPresent(ngContentIndex)) {
                            parent.addContentNode(ngContentIndex, lang_63.isPresent(appEl) ? appEl : renderNode);
                        }
                    }
                    else if (lang_63.isBlank(parent.renderNode)) {
                        this.rootNodesOrAppElements.push(lang_63.isPresent(appEl) ? appEl : renderNode);
                    }
                };
                ViewBuilderVisitor.prototype._getParentRenderNode = function (ngContentIndex, parent) {
                    return lang_63.isPresent(parent.component) &&
                        parent.component.template.encapsulation !== view_5.ViewEncapsulation.Native ?
                        null :
                        parent.renderNode;
                };
                ViewBuilderVisitor.prototype.visitBoundText = function (ast, parent) {
                    return this._visitText('', ast.ngContentIndex, parent);
                };
                ViewBuilderVisitor.prototype.visitText = function (ast, parent) {
                    return this._visitText(ast.value, ast.ngContentIndex, parent);
                };
                ViewBuilderVisitor.prototype._visitText = function (value, ngContentIndex, parent) {
                    var renderNode = this.factory.createText(this.renderer, this._getParentRenderNode(ngContentIndex, parent), value, this.renderStmts);
                    this._addRenderNode(renderNode, null, ngContentIndex, parent);
                    return null;
                };
                ViewBuilderVisitor.prototype.visitNgContent = function (ast, parent) {
                    var nodesExpression = this.factory.getProjectedNodes(this.projectableNodes, ast.index);
                    if (lang_63.isPresent(parent.component)) {
                        if (lang_63.isPresent(ast.ngContentIndex)) {
                            parent.addContentNode(ast.ngContentIndex, nodesExpression);
                        }
                    }
                    else {
                        if (lang_63.isPresent(parent.renderNode)) {
                            this.factory.appendProjectedNodes(this.renderer, parent.renderNode, nodesExpression, this.renderStmts);
                        }
                        else {
                            this.rootNodesOrAppElements.push(nodesExpression);
                        }
                    }
                    return null;
                };
                ViewBuilderVisitor.prototype.visitElement = function (ast, parent) {
                    var _this = this;
                    var renderNode = this.factory.createElement(this.renderer, this._getParentRenderNode(ast.ngContentIndex, parent), ast.name, this.rootSelector, this.renderStmts);
                    var component = ast.getComponent();
                    var elementIndex = this.elementCount++;
                    var protoEl = this.protoView.protoElements[elementIndex];
                    protoEl.renderEvents.forEach(function (eventAst) {
                        var disposable;
                        if (lang_63.isPresent(eventAst.target)) {
                            disposable = _this.factory.createGlobalEventListener(_this.renderer, _this.view, protoEl.boundElementIndex, eventAst, _this.renderStmts);
                        }
                        else {
                            disposable = _this.factory.createElementEventListener(_this.renderer, _this.view, protoEl.boundElementIndex, renderNode, eventAst, _this.renderStmts);
                        }
                        _this.appDisposables.push(disposable);
                    });
                    for (var i = 0; i < protoEl.attrNameAndValues.length; i++) {
                        var attrName = protoEl.attrNameAndValues[i][0];
                        var attrValue = protoEl.attrNameAndValues[i][1];
                        this.factory.setElementAttribute(this.renderer, renderNode, attrName, attrValue, this.renderStmts);
                    }
                    var appEl = null;
                    if (lang_63.isPresent(protoEl.appProtoEl)) {
                        appEl = this.factory.createAppElement(protoEl.appProtoEl, this.view, renderNode, parent.appEl, null, this.appStmts);
                        this.appElements.push(appEl);
                    }
                    this._addRenderNode(renderNode, appEl, ast.ngContentIndex, parent);
                    var newParent = new ParentElement(renderNode, lang_63.isPresent(appEl) ? appEl : parent.appEl, component);
                    template_ast_3.templateVisitAll(this, ast.children, newParent);
                    if (lang_63.isPresent(appEl) && lang_63.isPresent(component)) {
                        this.factory.createAndSetComponentView(this.renderer, this.viewManager, this.view, appEl, component, newParent.contentNodesByNgContentIndex, this.appStmts);
                    }
                    return null;
                };
                ViewBuilderVisitor.prototype.visitEmbeddedTemplate = function (ast, parent) {
                    var renderNode = this.factory.createTemplateAnchor(this.renderer, this._getParentRenderNode(ast.ngContentIndex, parent), this.renderStmts);
                    var elementIndex = this.elementCount++;
                    var protoEl = this.protoView.protoElements[elementIndex];
                    var embeddedViewFactory = this.factory.createViewFactory(ast.children, protoEl.embeddedTemplateIndex, this.targetStatements);
                    var appEl = this.factory.createAppElement(protoEl.appProtoEl, this.view, renderNode, parent.appEl, embeddedViewFactory, this.appStmts);
                    this._addRenderNode(renderNode, appEl, ast.ngContentIndex, parent);
                    this.appElements.push(appEl);
                    return null;
                };
                ViewBuilderVisitor.prototype.visitVariable = function (ast, ctx) { return null; };
                ViewBuilderVisitor.prototype.visitAttr = function (ast, ctx) { return null; };
                ViewBuilderVisitor.prototype.visitDirective = function (ast, ctx) { return null; };
                ViewBuilderVisitor.prototype.visitEvent = function (ast, ctx) { return null; };
                ViewBuilderVisitor.prototype.visitDirectiveProperty = function (ast, context) { return null; };
                ViewBuilderVisitor.prototype.visitElementProperty = function (ast, context) { return null; };
                return ViewBuilderVisitor;
            }());
        }
    }
});
System.register("test/node_modules/angular2/ts/src/compiler/html_ast", ['angular2/src/facade/lang'], function(exports_127, context_127) {
    "use strict";
    var __moduleName = context_127 && context_127.id;
    var lang_64;
    var HtmlTextAst, HtmlAttrAst, HtmlElementAst, HtmlCommentAst;
    function htmlVisitAll(visitor, asts, context) {
        if (context === void 0) { context = null; }
        var result = [];
        asts.forEach(function (ast) {
            var astResult = ast.visit(visitor, context);
            if (lang_64.isPresent(astResult)) {
                result.push(astResult);
            }
        });
        return result;
    }
    exports_127("htmlVisitAll", htmlVisitAll);
    return {
        setters:[
            function (lang_64_1) {
                lang_64 = lang_64_1;
            }],
        execute: function() {
            HtmlTextAst = (function () {
                function HtmlTextAst(value, sourceSpan) {
                    this.value = value;
                    this.sourceSpan = sourceSpan;
                }
                HtmlTextAst.prototype.visit = function (visitor, context) { return visitor.visitText(this, context); };
                return HtmlTextAst;
            }());
            exports_127("HtmlTextAst", HtmlTextAst);
            HtmlAttrAst = (function () {
                function HtmlAttrAst(name, value, sourceSpan) {
                    this.name = name;
                    this.value = value;
                    this.sourceSpan = sourceSpan;
                }
                HtmlAttrAst.prototype.visit = function (visitor, context) { return visitor.visitAttr(this, context); };
                return HtmlAttrAst;
            }());
            exports_127("HtmlAttrAst", HtmlAttrAst);
            HtmlElementAst = (function () {
                function HtmlElementAst(name, attrs, children, sourceSpan) {
                    this.name = name;
                    this.attrs = attrs;
                    this.children = children;
                    this.sourceSpan = sourceSpan;
                }
                HtmlElementAst.prototype.visit = function (visitor, context) { return visitor.visitElement(this, context); };
                return HtmlElementAst;
            }());
            exports_127("HtmlElementAst", HtmlElementAst);
            HtmlCommentAst = (function () {
                function HtmlCommentAst(value, sourceSpan) {
                    this.value = value;
                    this.sourceSpan = sourceSpan;
                }
                HtmlCommentAst.prototype.visit = function (visitor, context) { return visitor.visitComment(this, context); };
                return HtmlCommentAst;
            }());
            exports_127("HtmlCommentAst", HtmlCommentAst);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/compiler/html_tags", ['angular2/src/facade/lang'], function(exports_128, context_128) {
    "use strict";
    var __moduleName = context_128 && context_128.id;
    var lang_65;
    var NAMED_ENTITIES, HtmlTagContentType, HtmlTagDefinition, TAG_DEFINITIONS, DEFAULT_TAG_DEFINITION, NS_PREFIX_RE;
    function getHtmlTagDefinition(tagName) {
        var result = TAG_DEFINITIONS[tagName.toLowerCase()];
        return lang_65.isPresent(result) ? result : DEFAULT_TAG_DEFINITION;
    }
    exports_128("getHtmlTagDefinition", getHtmlTagDefinition);
    function splitNsName(elementName) {
        if (elementName[0] != '@') {
            return [null, elementName];
        }
        var match = lang_65.RegExpWrapper.firstMatch(NS_PREFIX_RE, elementName);
        return [match[1], match[2]];
    }
    exports_128("splitNsName", splitNsName);
    function getNsPrefix(elementName) {
        return splitNsName(elementName)[0];
    }
    exports_128("getNsPrefix", getNsPrefix);
    function mergeNsAndName(prefix, localName) {
        return lang_65.isPresent(prefix) ? "@" + prefix + ":" + localName : localName;
    }
    exports_128("mergeNsAndName", mergeNsAndName);
    return {
        setters:[
            function (lang_65_1) {
                lang_65 = lang_65_1;
            }],
        execute: function() {
            // see http://www.w3.org/TR/html51/syntax.html#named-character-references
            // see https://html.spec.whatwg.org/multipage/entities.json
            // This list is not exhaustive to keep the compiler footprint low.
            // The `&#123;` / `&#x1ab;` syntax should be used when the named character reference does not exist.
            exports_128("NAMED_ENTITIES", NAMED_ENTITIES = lang_65.CONST_EXPR({
                'Aacute': '\u00C1',
                'aacute': '\u00E1',
                'Acirc': '\u00C2',
                'acirc': '\u00E2',
                'acute': '\u00B4',
                'AElig': '\u00C6',
                'aelig': '\u00E6',
                'Agrave': '\u00C0',
                'agrave': '\u00E0',
                'alefsym': '\u2135',
                'Alpha': '\u0391',
                'alpha': '\u03B1',
                'amp': '&',
                'and': '\u2227',
                'ang': '\u2220',
                'apos': '\u0027',
                'Aring': '\u00C5',
                'aring': '\u00E5',
                'asymp': '\u2248',
                'Atilde': '\u00C3',
                'atilde': '\u00E3',
                'Auml': '\u00C4',
                'auml': '\u00E4',
                'bdquo': '\u201E',
                'Beta': '\u0392',
                'beta': '\u03B2',
                'brvbar': '\u00A6',
                'bull': '\u2022',
                'cap': '\u2229',
                'Ccedil': '\u00C7',
                'ccedil': '\u00E7',
                'cedil': '\u00B8',
                'cent': '\u00A2',
                'Chi': '\u03A7',
                'chi': '\u03C7',
                'circ': '\u02C6',
                'clubs': '\u2663',
                'cong': '\u2245',
                'copy': '\u00A9',
                'crarr': '\u21B5',
                'cup': '\u222A',
                'curren': '\u00A4',
                'dagger': '\u2020',
                'Dagger': '\u2021',
                'darr': '\u2193',
                'dArr': '\u21D3',
                'deg': '\u00B0',
                'Delta': '\u0394',
                'delta': '\u03B4',
                'diams': '\u2666',
                'divide': '\u00F7',
                'Eacute': '\u00C9',
                'eacute': '\u00E9',
                'Ecirc': '\u00CA',
                'ecirc': '\u00EA',
                'Egrave': '\u00C8',
                'egrave': '\u00E8',
                'empty': '\u2205',
                'emsp': '\u2003',
                'ensp': '\u2002',
                'Epsilon': '\u0395',
                'epsilon': '\u03B5',
                'equiv': '\u2261',
                'Eta': '\u0397',
                'eta': '\u03B7',
                'ETH': '\u00D0',
                'eth': '\u00F0',
                'Euml': '\u00CB',
                'euml': '\u00EB',
                'euro': '\u20AC',
                'exist': '\u2203',
                'fnof': '\u0192',
                'forall': '\u2200',
                'frac12': '\u00BD',
                'frac14': '\u00BC',
                'frac34': '\u00BE',
                'frasl': '\u2044',
                'Gamma': '\u0393',
                'gamma': '\u03B3',
                'ge': '\u2265',
                'gt': '>',
                'harr': '\u2194',
                'hArr': '\u21D4',
                'hearts': '\u2665',
                'hellip': '\u2026',
                'Iacute': '\u00CD',
                'iacute': '\u00ED',
                'Icirc': '\u00CE',
                'icirc': '\u00EE',
                'iexcl': '\u00A1',
                'Igrave': '\u00CC',
                'igrave': '\u00EC',
                'image': '\u2111',
                'infin': '\u221E',
                'int': '\u222B',
                'Iota': '\u0399',
                'iota': '\u03B9',
                'iquest': '\u00BF',
                'isin': '\u2208',
                'Iuml': '\u00CF',
                'iuml': '\u00EF',
                'Kappa': '\u039A',
                'kappa': '\u03BA',
                'Lambda': '\u039B',
                'lambda': '\u03BB',
                'lang': '\u27E8',
                'laquo': '\u00AB',
                'larr': '\u2190',
                'lArr': '\u21D0',
                'lceil': '\u2308',
                'ldquo': '\u201C',
                'le': '\u2264',
                'lfloor': '\u230A',
                'lowast': '\u2217',
                'loz': '\u25CA',
                'lrm': '\u200E',
                'lsaquo': '\u2039',
                'lsquo': '\u2018',
                'lt': '<',
                'macr': '\u00AF',
                'mdash': '\u2014',
                'micro': '\u00B5',
                'middot': '\u00B7',
                'minus': '\u2212',
                'Mu': '\u039C',
                'mu': '\u03BC',
                'nabla': '\u2207',
                'nbsp': '\u00A0',
                'ndash': '\u2013',
                'ne': '\u2260',
                'ni': '\u220B',
                'not': '\u00AC',
                'notin': '\u2209',
                'nsub': '\u2284',
                'Ntilde': '\u00D1',
                'ntilde': '\u00F1',
                'Nu': '\u039D',
                'nu': '\u03BD',
                'Oacute': '\u00D3',
                'oacute': '\u00F3',
                'Ocirc': '\u00D4',
                'ocirc': '\u00F4',
                'OElig': '\u0152',
                'oelig': '\u0153',
                'Ograve': '\u00D2',
                'ograve': '\u00F2',
                'oline': '\u203E',
                'Omega': '\u03A9',
                'omega': '\u03C9',
                'Omicron': '\u039F',
                'omicron': '\u03BF',
                'oplus': '\u2295',
                'or': '\u2228',
                'ordf': '\u00AA',
                'ordm': '\u00BA',
                'Oslash': '\u00D8',
                'oslash': '\u00F8',
                'Otilde': '\u00D5',
                'otilde': '\u00F5',
                'otimes': '\u2297',
                'Ouml': '\u00D6',
                'ouml': '\u00F6',
                'para': '\u00B6',
                'permil': '\u2030',
                'perp': '\u22A5',
                'Phi': '\u03A6',
                'phi': '\u03C6',
                'Pi': '\u03A0',
                'pi': '\u03C0',
                'piv': '\u03D6',
                'plusmn': '\u00B1',
                'pound': '\u00A3',
                'prime': '\u2032',
                'Prime': '\u2033',
                'prod': '\u220F',
                'prop': '\u221D',
                'Psi': '\u03A8',
                'psi': '\u03C8',
                'quot': '\u0022',
                'radic': '\u221A',
                'rang': '\u27E9',
                'raquo': '\u00BB',
                'rarr': '\u2192',
                'rArr': '\u21D2',
                'rceil': '\u2309',
                'rdquo': '\u201D',
                'real': '\u211C',
                'reg': '\u00AE',
                'rfloor': '\u230B',
                'Rho': '\u03A1',
                'rho': '\u03C1',
                'rlm': '\u200F',
                'rsaquo': '\u203A',
                'rsquo': '\u2019',
                'sbquo': '\u201A',
                'Scaron': '\u0160',
                'scaron': '\u0161',
                'sdot': '\u22C5',
                'sect': '\u00A7',
                'shy': '\u00AD',
                'Sigma': '\u03A3',
                'sigma': '\u03C3',
                'sigmaf': '\u03C2',
                'sim': '\u223C',
                'spades': '\u2660',
                'sub': '\u2282',
                'sube': '\u2286',
                'sum': '\u2211',
                'sup': '\u2283',
                'sup1': '\u00B9',
                'sup2': '\u00B2',
                'sup3': '\u00B3',
                'supe': '\u2287',
                'szlig': '\u00DF',
                'Tau': '\u03A4',
                'tau': '\u03C4',
                'there4': '\u2234',
                'Theta': '\u0398',
                'theta': '\u03B8',
                'thetasym': '\u03D1',
                'thinsp': '\u2009',
                'THORN': '\u00DE',
                'thorn': '\u00FE',
                'tilde': '\u02DC',
                'times': '\u00D7',
                'trade': '\u2122',
                'Uacute': '\u00DA',
                'uacute': '\u00FA',
                'uarr': '\u2191',
                'uArr': '\u21D1',
                'Ucirc': '\u00DB',
                'ucirc': '\u00FB',
                'Ugrave': '\u00D9',
                'ugrave': '\u00F9',
                'uml': '\u00A8',
                'upsih': '\u03D2',
                'Upsilon': '\u03A5',
                'upsilon': '\u03C5',
                'Uuml': '\u00DC',
                'uuml': '\u00FC',
                'weierp': '\u2118',
                'Xi': '\u039E',
                'xi': '\u03BE',
                'Yacute': '\u00DD',
                'yacute': '\u00FD',
                'yen': '\u00A5',
                'yuml': '\u00FF',
                'Yuml': '\u0178',
                'Zeta': '\u0396',
                'zeta': '\u03B6',
                'zwj': '\u200D',
                'zwnj': '\u200C',
            }));
            (function (HtmlTagContentType) {
                HtmlTagContentType[HtmlTagContentType["RAW_TEXT"] = 0] = "RAW_TEXT";
                HtmlTagContentType[HtmlTagContentType["ESCAPABLE_RAW_TEXT"] = 1] = "ESCAPABLE_RAW_TEXT";
                HtmlTagContentType[HtmlTagContentType["PARSABLE_DATA"] = 2] = "PARSABLE_DATA";
            })(HtmlTagContentType || (HtmlTagContentType = {}));
            exports_128("HtmlTagContentType", HtmlTagContentType);
            HtmlTagDefinition = (function () {
                function HtmlTagDefinition(_a) {
                    var _this = this;
                    var _b = _a === void 0 ? {} : _a, closedByChildren = _b.closedByChildren, requiredParents = _b.requiredParents, implicitNamespacePrefix = _b.implicitNamespacePrefix, contentType = _b.contentType, closedByParent = _b.closedByParent, isVoid = _b.isVoid, ignoreFirstLf = _b.ignoreFirstLf;
                    this.closedByChildren = {};
                    this.closedByParent = false;
                    if (lang_65.isPresent(closedByChildren) && closedByChildren.length > 0) {
                        closedByChildren.forEach(function (tagName) { return _this.closedByChildren[tagName] = true; });
                    }
                    this.isVoid = lang_65.normalizeBool(isVoid);
                    this.closedByParent = lang_65.normalizeBool(closedByParent) || this.isVoid;
                    if (lang_65.isPresent(requiredParents) && requiredParents.length > 0) {
                        this.requiredParents = {};
                        this.parentToAdd = requiredParents[0];
                        requiredParents.forEach(function (tagName) { return _this.requiredParents[tagName] = true; });
                    }
                    this.implicitNamespacePrefix = implicitNamespacePrefix;
                    this.contentType = lang_65.isPresent(contentType) ? contentType : HtmlTagContentType.PARSABLE_DATA;
                    this.ignoreFirstLf = lang_65.normalizeBool(ignoreFirstLf);
                }
                HtmlTagDefinition.prototype.requireExtraParent = function (currentParent) {
                    if (lang_65.isBlank(this.requiredParents)) {
                        return false;
                    }
                    if (lang_65.isBlank(currentParent)) {
                        return true;
                    }
                    var lcParent = currentParent.toLowerCase();
                    return this.requiredParents[lcParent] != true && lcParent != 'template';
                };
                HtmlTagDefinition.prototype.isClosedByChild = function (name) {
                    return this.isVoid || lang_65.normalizeBool(this.closedByChildren[name.toLowerCase()]);
                };
                return HtmlTagDefinition;
            }());
            exports_128("HtmlTagDefinition", HtmlTagDefinition);
            // see http://www.w3.org/TR/html51/syntax.html#optional-tags
            // This implementation does not fully conform to the HTML5 spec.
            TAG_DEFINITIONS = {
                'base': new HtmlTagDefinition({ isVoid: true }),
                'meta': new HtmlTagDefinition({ isVoid: true }),
                'area': new HtmlTagDefinition({ isVoid: true }),
                'embed': new HtmlTagDefinition({ isVoid: true }),
                'link': new HtmlTagDefinition({ isVoid: true }),
                'img': new HtmlTagDefinition({ isVoid: true }),
                'input': new HtmlTagDefinition({ isVoid: true }),
                'param': new HtmlTagDefinition({ isVoid: true }),
                'hr': new HtmlTagDefinition({ isVoid: true }),
                'br': new HtmlTagDefinition({ isVoid: true }),
                'source': new HtmlTagDefinition({ isVoid: true }),
                'track': new HtmlTagDefinition({ isVoid: true }),
                'wbr': new HtmlTagDefinition({ isVoid: true }),
                'p': new HtmlTagDefinition({
                    closedByChildren: [
                        'address',
                        'article',
                        'aside',
                        'blockquote',
                        'div',
                        'dl',
                        'fieldset',
                        'footer',
                        'form',
                        'h1',
                        'h2',
                        'h3',
                        'h4',
                        'h5',
                        'h6',
                        'header',
                        'hgroup',
                        'hr',
                        'main',
                        'nav',
                        'ol',
                        'p',
                        'pre',
                        'section',
                        'table',
                        'ul'
                    ],
                    closedByParent: true
                }),
                'thead': new HtmlTagDefinition({ closedByChildren: ['tbody', 'tfoot'] }),
                'tbody': new HtmlTagDefinition({ closedByChildren: ['tbody', 'tfoot'], closedByParent: true }),
                'tfoot': new HtmlTagDefinition({ closedByChildren: ['tbody'], closedByParent: true }),
                'tr': new HtmlTagDefinition({
                    closedByChildren: ['tr'],
                    requiredParents: ['tbody', 'tfoot', 'thead'],
                    closedByParent: true
                }),
                'td': new HtmlTagDefinition({ closedByChildren: ['td', 'th'], closedByParent: true }),
                'th': new HtmlTagDefinition({ closedByChildren: ['td', 'th'], closedByParent: true }),
                'col': new HtmlTagDefinition({ requiredParents: ['colgroup'], isVoid: true }),
                'svg': new HtmlTagDefinition({ implicitNamespacePrefix: 'svg' }),
                'math': new HtmlTagDefinition({ implicitNamespacePrefix: 'math' }),
                'li': new HtmlTagDefinition({ closedByChildren: ['li'], closedByParent: true }),
                'dt': new HtmlTagDefinition({ closedByChildren: ['dt', 'dd'] }),
                'dd': new HtmlTagDefinition({ closedByChildren: ['dt', 'dd'], closedByParent: true }),
                'rb': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),
                'rt': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),
                'rtc': new HtmlTagDefinition({ closedByChildren: ['rb', 'rtc', 'rp'], closedByParent: true }),
                'rp': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),
                'optgroup': new HtmlTagDefinition({ closedByChildren: ['optgroup'], closedByParent: true }),
                'option': new HtmlTagDefinition({ closedByChildren: ['option', 'optgroup'], closedByParent: true }),
                'pre': new HtmlTagDefinition({ ignoreFirstLf: true }),
                'listing': new HtmlTagDefinition({ ignoreFirstLf: true }),
                'style': new HtmlTagDefinition({ contentType: HtmlTagContentType.RAW_TEXT }),
                'script': new HtmlTagDefinition({ contentType: HtmlTagContentType.RAW_TEXT }),
                'title': new HtmlTagDefinition({ contentType: HtmlTagContentType.ESCAPABLE_RAW_TEXT }),
                'textarea': new HtmlTagDefinition({ contentType: HtmlTagContentType.ESCAPABLE_RAW_TEXT, ignoreFirstLf: true }),
            };
            DEFAULT_TAG_DEFINITION = new HtmlTagDefinition();
            NS_PREFIX_RE = /^@([^:]+):(.+)/g;
        }
    }
});
System.register("test/node_modules/angular2/ts/src/compiler/html_lexer", ['angular2/src/facade/lang', 'angular2/src/facade/collection', "test/node_modules/angular2/ts/src/compiler/parse_util", "test/node_modules/angular2/ts/src/compiler/html_tags"], function(exports_129, context_129) {
    "use strict";
    var __moduleName = context_129 && context_129.id;
    var lang_66, collection_27, parse_util_1, html_tags_1;
    var HtmlTokenType, HtmlToken, HtmlTokenError, HtmlTokenizeResult, $EOF, $TAB, $LF, $FF, $CR, $SPACE, $BANG, $DQ, $HASH, $$, $AMPERSAND, $SQ, $MINUS, $SLASH, $0, $SEMICOLON, $9, $COLON, $LT, $EQ, $GT, $QUESTION, $LBRACKET, $RBRACKET, $A, $F, $X, $Z, $a, $f, $z, $x, $NBSP, CR_OR_CRLF_REGEXP, ControlFlowError, _HtmlTokenizer;
    function tokenizeHtml(sourceContent, sourceUrl) {
        return new _HtmlTokenizer(new parse_util_1.ParseSourceFile(sourceContent, sourceUrl)).tokenize();
    }
    exports_129("tokenizeHtml", tokenizeHtml);
    function unexpectedCharacterErrorMsg(charCode) {
        var char = charCode === $EOF ? 'EOF' : lang_66.StringWrapper.fromCharCode(charCode);
        return "Unexpected character \"" + char + "\"";
    }
    function unknownEntityErrorMsg(entitySrc) {
        return "Unknown entity \"" + entitySrc + "\" - use the \"&#<decimal>;\" or  \"&#x<hex>;\" syntax";
    }
    function isNotWhitespace(code) {
        return !isWhitespace(code) || code === $EOF;
    }
    function isWhitespace(code) {
        return (code >= $TAB && code <= $SPACE) || (code === $NBSP);
    }
    function isNameEnd(code) {
        return isWhitespace(code) || code === $GT || code === $SLASH || code === $SQ || code === $DQ ||
            code === $EQ;
    }
    function isPrefixEnd(code) {
        return (code < $a || $z < code) && (code < $A || $Z < code) && (code < $0 || code > $9);
    }
    function isDigitEntityEnd(code) {
        return code == $SEMICOLON || code == $EOF || !isAsciiHexDigit(code);
    }
    function isNamedEntityEnd(code) {
        return code == $SEMICOLON || code == $EOF || !isAsciiLetter(code);
    }
    function isTextEnd(code) {
        return code === $LT || code === $EOF;
    }
    function isAsciiLetter(code) {
        return code >= $a && code <= $z || code >= $A && code <= $Z;
    }
    function isAsciiHexDigit(code) {
        return code >= $a && code <= $f || code >= $A && code <= $F || code >= $0 && code <= $9;
    }
    function compareCharCodeCaseInsensitive(code1, code2) {
        return toUpperCaseCharCode(code1) == toUpperCaseCharCode(code2);
    }
    function toUpperCaseCharCode(code) {
        return code >= $a && code <= $z ? code - $a + $A : code;
    }
    function mergeTextTokens(srcTokens) {
        var dstTokens = [];
        var lastDstToken;
        for (var i = 0; i < srcTokens.length; i++) {
            var token = srcTokens[i];
            if (lang_66.isPresent(lastDstToken) && lastDstToken.type == HtmlTokenType.TEXT &&
                token.type == HtmlTokenType.TEXT) {
                lastDstToken.parts[0] += token.parts[0];
                lastDstToken.sourceSpan.end = token.sourceSpan.end;
            }
            else {
                lastDstToken = token;
                dstTokens.push(lastDstToken);
            }
        }
        return dstTokens;
    }
    return {
        setters:[
            function (lang_66_1) {
                lang_66 = lang_66_1;
            },
            function (collection_27_1) {
                collection_27 = collection_27_1;
            },
            function (parse_util_1_1) {
                parse_util_1 = parse_util_1_1;
            },
            function (html_tags_1_1) {
                html_tags_1 = html_tags_1_1;
            }],
        execute: function() {
            (function (HtmlTokenType) {
                HtmlTokenType[HtmlTokenType["TAG_OPEN_START"] = 0] = "TAG_OPEN_START";
                HtmlTokenType[HtmlTokenType["TAG_OPEN_END"] = 1] = "TAG_OPEN_END";
                HtmlTokenType[HtmlTokenType["TAG_OPEN_END_VOID"] = 2] = "TAG_OPEN_END_VOID";
                HtmlTokenType[HtmlTokenType["TAG_CLOSE"] = 3] = "TAG_CLOSE";
                HtmlTokenType[HtmlTokenType["TEXT"] = 4] = "TEXT";
                HtmlTokenType[HtmlTokenType["ESCAPABLE_RAW_TEXT"] = 5] = "ESCAPABLE_RAW_TEXT";
                HtmlTokenType[HtmlTokenType["RAW_TEXT"] = 6] = "RAW_TEXT";
                HtmlTokenType[HtmlTokenType["COMMENT_START"] = 7] = "COMMENT_START";
                HtmlTokenType[HtmlTokenType["COMMENT_END"] = 8] = "COMMENT_END";
                HtmlTokenType[HtmlTokenType["CDATA_START"] = 9] = "CDATA_START";
                HtmlTokenType[HtmlTokenType["CDATA_END"] = 10] = "CDATA_END";
                HtmlTokenType[HtmlTokenType["ATTR_NAME"] = 11] = "ATTR_NAME";
                HtmlTokenType[HtmlTokenType["ATTR_VALUE"] = 12] = "ATTR_VALUE";
                HtmlTokenType[HtmlTokenType["DOC_TYPE"] = 13] = "DOC_TYPE";
                HtmlTokenType[HtmlTokenType["EOF"] = 14] = "EOF";
            })(HtmlTokenType || (HtmlTokenType = {}));
            exports_129("HtmlTokenType", HtmlTokenType);
            HtmlToken = (function () {
                function HtmlToken(type, parts, sourceSpan) {
                    this.type = type;
                    this.parts = parts;
                    this.sourceSpan = sourceSpan;
                }
                return HtmlToken;
            }());
            exports_129("HtmlToken", HtmlToken);
            HtmlTokenError = (function (_super) {
                __extends(HtmlTokenError, _super);
                function HtmlTokenError(errorMsg, tokenType, span) {
                    _super.call(this, span, errorMsg);
                    this.tokenType = tokenType;
                }
                return HtmlTokenError;
            }(parse_util_1.ParseError));
            exports_129("HtmlTokenError", HtmlTokenError);
            HtmlTokenizeResult = (function () {
                function HtmlTokenizeResult(tokens, errors) {
                    this.tokens = tokens;
                    this.errors = errors;
                }
                return HtmlTokenizeResult;
            }());
            exports_129("HtmlTokenizeResult", HtmlTokenizeResult);
            $EOF = 0;
            $TAB = 9;
            $LF = 10;
            $FF = 12;
            $CR = 13;
            $SPACE = 32;
            $BANG = 33;
            $DQ = 34;
            $HASH = 35;
            $$ = 36;
            $AMPERSAND = 38;
            $SQ = 39;
            $MINUS = 45;
            $SLASH = 47;
            $0 = 48;
            $SEMICOLON = 59;
            $9 = 57;
            $COLON = 58;
            $LT = 60;
            $EQ = 61;
            $GT = 62;
            $QUESTION = 63;
            $LBRACKET = 91;
            $RBRACKET = 93;
            $A = 65;
            $F = 70;
            $X = 88;
            $Z = 90;
            $a = 97;
            $f = 102;
            $z = 122;
            $x = 120;
            $NBSP = 160;
            CR_OR_CRLF_REGEXP = /\r\n?/g;
            ControlFlowError = (function () {
                function ControlFlowError(error) {
                    this.error = error;
                }
                return ControlFlowError;
            }());
            // See http://www.w3.org/TR/html51/syntax.html#writing
            _HtmlTokenizer = (function () {
                function _HtmlTokenizer(file) {
                    this.file = file;
                    // Note: this is always lowercase!
                    this.peek = -1;
                    this.index = -1;
                    this.line = 0;
                    this.column = -1;
                    this.tokens = [];
                    this.errors = [];
                    this.input = file.content;
                    this.length = file.content.length;
                    this._advance();
                }
                _HtmlTokenizer.prototype._processCarriageReturns = function (content) {
                    // http://www.w3.org/TR/html5/syntax.html#preprocessing-the-input-stream
                    // In order to keep the original position in the source, we can not
                    // pre-process it.
                    // Instead CRs are processed right before instantiating the tokens.
                    return lang_66.StringWrapper.replaceAll(content, CR_OR_CRLF_REGEXP, '\n');
                };
                _HtmlTokenizer.prototype.tokenize = function () {
                    while (this.peek !== $EOF) {
                        var start = this._getLocation();
                        try {
                            if (this._attemptCharCode($LT)) {
                                if (this._attemptCharCode($BANG)) {
                                    if (this._attemptCharCode($LBRACKET)) {
                                        this._consumeCdata(start);
                                    }
                                    else if (this._attemptCharCode($MINUS)) {
                                        this._consumeComment(start);
                                    }
                                    else {
                                        this._consumeDocType(start);
                                    }
                                }
                                else if (this._attemptCharCode($SLASH)) {
                                    this._consumeTagClose(start);
                                }
                                else {
                                    this._consumeTagOpen(start);
                                }
                            }
                            else {
                                this._consumeText();
                            }
                        }
                        catch (e) {
                            if (e instanceof ControlFlowError) {
                                this.errors.push(e.error);
                            }
                            else {
                                throw e;
                            }
                        }
                    }
                    this._beginToken(HtmlTokenType.EOF);
                    this._endToken([]);
                    return new HtmlTokenizeResult(mergeTextTokens(this.tokens), this.errors);
                };
                _HtmlTokenizer.prototype._getLocation = function () {
                    return new parse_util_1.ParseLocation(this.file, this.index, this.line, this.column);
                };
                _HtmlTokenizer.prototype._getSpan = function (start, end) {
                    if (lang_66.isBlank(start)) {
                        start = this._getLocation();
                    }
                    if (lang_66.isBlank(end)) {
                        end = this._getLocation();
                    }
                    return new parse_util_1.ParseSourceSpan(start, end);
                };
                _HtmlTokenizer.prototype._beginToken = function (type, start) {
                    if (start === void 0) { start = null; }
                    if (lang_66.isBlank(start)) {
                        start = this._getLocation();
                    }
                    this.currentTokenStart = start;
                    this.currentTokenType = type;
                };
                _HtmlTokenizer.prototype._endToken = function (parts, end) {
                    if (end === void 0) { end = null; }
                    if (lang_66.isBlank(end)) {
                        end = this._getLocation();
                    }
                    var token = new HtmlToken(this.currentTokenType, parts, new parse_util_1.ParseSourceSpan(this.currentTokenStart, end));
                    this.tokens.push(token);
                    this.currentTokenStart = null;
                    this.currentTokenType = null;
                    return token;
                };
                _HtmlTokenizer.prototype._createError = function (msg, span) {
                    var error = new HtmlTokenError(msg, this.currentTokenType, span);
                    this.currentTokenStart = null;
                    this.currentTokenType = null;
                    return new ControlFlowError(error);
                };
                _HtmlTokenizer.prototype._advance = function () {
                    if (this.index >= this.length) {
                        throw this._createError(unexpectedCharacterErrorMsg($EOF), this._getSpan());
                    }
                    if (this.peek === $LF) {
                        this.line++;
                        this.column = 0;
                    }
                    else if (this.peek !== $LF && this.peek !== $CR) {
                        this.column++;
                    }
                    this.index++;
                    this.peek = this.index >= this.length ? $EOF : lang_66.StringWrapper.charCodeAt(this.input, this.index);
                };
                _HtmlTokenizer.prototype._attemptCharCode = function (charCode) {
                    if (this.peek === charCode) {
                        this._advance();
                        return true;
                    }
                    return false;
                };
                _HtmlTokenizer.prototype._attemptCharCodeCaseInsensitive = function (charCode) {
                    if (compareCharCodeCaseInsensitive(this.peek, charCode)) {
                        this._advance();
                        return true;
                    }
                    return false;
                };
                _HtmlTokenizer.prototype._requireCharCode = function (charCode) {
                    var location = this._getLocation();
                    if (!this._attemptCharCode(charCode)) {
                        throw this._createError(unexpectedCharacterErrorMsg(this.peek), this._getSpan(location, location));
                    }
                };
                _HtmlTokenizer.prototype._attemptStr = function (chars) {
                    for (var i = 0; i < chars.length; i++) {
                        if (!this._attemptCharCode(lang_66.StringWrapper.charCodeAt(chars, i))) {
                            return false;
                        }
                    }
                    return true;
                };
                _HtmlTokenizer.prototype._attemptStrCaseInsensitive = function (chars) {
                    for (var i = 0; i < chars.length; i++) {
                        if (!this._attemptCharCodeCaseInsensitive(lang_66.StringWrapper.charCodeAt(chars, i))) {
                            return false;
                        }
                    }
                    return true;
                };
                _HtmlTokenizer.prototype._requireStr = function (chars) {
                    var location = this._getLocation();
                    if (!this._attemptStr(chars)) {
                        throw this._createError(unexpectedCharacterErrorMsg(this.peek), this._getSpan(location));
                    }
                };
                _HtmlTokenizer.prototype._attemptCharCodeUntilFn = function (predicate) {
                    while (!predicate(this.peek)) {
                        this._advance();
                    }
                };
                _HtmlTokenizer.prototype._requireCharCodeUntilFn = function (predicate, len) {
                    var start = this._getLocation();
                    this._attemptCharCodeUntilFn(predicate);
                    if (this.index - start.offset < len) {
                        throw this._createError(unexpectedCharacterErrorMsg(this.peek), this._getSpan(start, start));
                    }
                };
                _HtmlTokenizer.prototype._attemptUntilChar = function (char) {
                    while (this.peek !== char) {
                        this._advance();
                    }
                };
                _HtmlTokenizer.prototype._readChar = function (decodeEntities) {
                    if (decodeEntities && this.peek === $AMPERSAND) {
                        return this._decodeEntity();
                    }
                    else {
                        var index = this.index;
                        this._advance();
                        return this.input[index];
                    }
                };
                _HtmlTokenizer.prototype._decodeEntity = function () {
                    var start = this._getLocation();
                    this._advance();
                    if (this._attemptCharCode($HASH)) {
                        var isHex = this._attemptCharCode($x) || this._attemptCharCode($X);
                        var numberStart = this._getLocation().offset;
                        this._attemptCharCodeUntilFn(isDigitEntityEnd);
                        if (this.peek != $SEMICOLON) {
                            throw this._createError(unexpectedCharacterErrorMsg(this.peek), this._getSpan());
                        }
                        this._advance();
                        var strNum = this.input.substring(numberStart, this.index - 1);
                        try {
                            var charCode = lang_66.NumberWrapper.parseInt(strNum, isHex ? 16 : 10);
                            return lang_66.StringWrapper.fromCharCode(charCode);
                        }
                        catch (e) {
                            var entity = this.input.substring(start.offset + 1, this.index - 1);
                            throw this._createError(unknownEntityErrorMsg(entity), this._getSpan(start));
                        }
                    }
                    else {
                        var startPosition = this._savePosition();
                        this._attemptCharCodeUntilFn(isNamedEntityEnd);
                        if (this.peek != $SEMICOLON) {
                            this._restorePosition(startPosition);
                            return '&';
                        }
                        this._advance();
                        var name_1 = this.input.substring(start.offset + 1, this.index - 1);
                        var char = html_tags_1.NAMED_ENTITIES[name_1];
                        if (lang_66.isBlank(char)) {
                            throw this._createError(unknownEntityErrorMsg(name_1), this._getSpan(start));
                        }
                        return char;
                    }
                };
                _HtmlTokenizer.prototype._consumeRawText = function (decodeEntities, firstCharOfEnd, attemptEndRest) {
                    var tagCloseStart;
                    var textStart = this._getLocation();
                    this._beginToken(decodeEntities ? HtmlTokenType.ESCAPABLE_RAW_TEXT : HtmlTokenType.RAW_TEXT, textStart);
                    var parts = [];
                    while (true) {
                        tagCloseStart = this._getLocation();
                        if (this._attemptCharCode(firstCharOfEnd) && attemptEndRest()) {
                            break;
                        }
                        if (this.index > tagCloseStart.offset) {
                            parts.push(this.input.substring(tagCloseStart.offset, this.index));
                        }
                        while (this.peek !== firstCharOfEnd) {
                            parts.push(this._readChar(decodeEntities));
                        }
                    }
                    return this._endToken([this._processCarriageReturns(parts.join(''))], tagCloseStart);
                };
                _HtmlTokenizer.prototype._consumeComment = function (start) {
                    var _this = this;
                    this._beginToken(HtmlTokenType.COMMENT_START, start);
                    this._requireCharCode($MINUS);
                    this._endToken([]);
                    var textToken = this._consumeRawText(false, $MINUS, function () { return _this._attemptStr('->'); });
                    this._beginToken(HtmlTokenType.COMMENT_END, textToken.sourceSpan.end);
                    this._endToken([]);
                };
                _HtmlTokenizer.prototype._consumeCdata = function (start) {
                    var _this = this;
                    this._beginToken(HtmlTokenType.CDATA_START, start);
                    this._requireStr('CDATA[');
                    this._endToken([]);
                    var textToken = this._consumeRawText(false, $RBRACKET, function () { return _this._attemptStr(']>'); });
                    this._beginToken(HtmlTokenType.CDATA_END, textToken.sourceSpan.end);
                    this._endToken([]);
                };
                _HtmlTokenizer.prototype._consumeDocType = function (start) {
                    this._beginToken(HtmlTokenType.DOC_TYPE, start);
                    this._attemptUntilChar($GT);
                    this._advance();
                    this._endToken([this.input.substring(start.offset + 2, this.index - 1)]);
                };
                _HtmlTokenizer.prototype._consumePrefixAndName = function () {
                    var nameOrPrefixStart = this.index;
                    var prefix = null;
                    while (this.peek !== $COLON && !isPrefixEnd(this.peek)) {
                        this._advance();
                    }
                    var nameStart;
                    if (this.peek === $COLON) {
                        this._advance();
                        prefix = this.input.substring(nameOrPrefixStart, this.index - 1);
                        nameStart = this.index;
                    }
                    else {
                        nameStart = nameOrPrefixStart;
                    }
                    this._requireCharCodeUntilFn(isNameEnd, this.index === nameStart ? 1 : 0);
                    var name = this.input.substring(nameStart, this.index);
                    return [prefix, name];
                };
                _HtmlTokenizer.prototype._consumeTagOpen = function (start) {
                    var savedPos = this._savePosition();
                    var lowercaseTagName;
                    try {
                        if (!isAsciiLetter(this.peek)) {
                            throw this._createError(unexpectedCharacterErrorMsg(this.peek), this._getSpan());
                        }
                        var nameStart = this.index;
                        this._consumeTagOpenStart(start);
                        lowercaseTagName = this.input.substring(nameStart, this.index).toLowerCase();
                        this._attemptCharCodeUntilFn(isNotWhitespace);
                        while (this.peek !== $SLASH && this.peek !== $GT) {
                            this._consumeAttributeName();
                            this._attemptCharCodeUntilFn(isNotWhitespace);
                            if (this._attemptCharCode($EQ)) {
                                this._attemptCharCodeUntilFn(isNotWhitespace);
                                this._consumeAttributeValue();
                            }
                            this._attemptCharCodeUntilFn(isNotWhitespace);
                        }
                        this._consumeTagOpenEnd();
                    }
                    catch (e) {
                        if (e instanceof ControlFlowError) {
                            // When the start tag is invalid, assume we want a "<"
                            this._restorePosition(savedPos);
                            // Back to back text tokens are merged at the end
                            this._beginToken(HtmlTokenType.TEXT, start);
                            this._endToken(['<']);
                            return;
                        }
                        throw e;
                    }
                    var contentTokenType = html_tags_1.getHtmlTagDefinition(lowercaseTagName).contentType;
                    if (contentTokenType === html_tags_1.HtmlTagContentType.RAW_TEXT) {
                        this._consumeRawTextWithTagClose(lowercaseTagName, false);
                    }
                    else if (contentTokenType === html_tags_1.HtmlTagContentType.ESCAPABLE_RAW_TEXT) {
                        this._consumeRawTextWithTagClose(lowercaseTagName, true);
                    }
                };
                _HtmlTokenizer.prototype._consumeRawTextWithTagClose = function (lowercaseTagName, decodeEntities) {
                    var _this = this;
                    var textToken = this._consumeRawText(decodeEntities, $LT, function () {
                        if (!_this._attemptCharCode($SLASH))
                            return false;
                        _this._attemptCharCodeUntilFn(isNotWhitespace);
                        if (!_this._attemptStrCaseInsensitive(lowercaseTagName))
                            return false;
                        _this._attemptCharCodeUntilFn(isNotWhitespace);
                        if (!_this._attemptCharCode($GT))
                            return false;
                        return true;
                    });
                    this._beginToken(HtmlTokenType.TAG_CLOSE, textToken.sourceSpan.end);
                    this._endToken([null, lowercaseTagName]);
                };
                _HtmlTokenizer.prototype._consumeTagOpenStart = function (start) {
                    this._beginToken(HtmlTokenType.TAG_OPEN_START, start);
                    var parts = this._consumePrefixAndName();
                    this._endToken(parts);
                };
                _HtmlTokenizer.prototype._consumeAttributeName = function () {
                    this._beginToken(HtmlTokenType.ATTR_NAME);
                    var prefixAndName = this._consumePrefixAndName();
                    this._endToken(prefixAndName);
                };
                _HtmlTokenizer.prototype._consumeAttributeValue = function () {
                    this._beginToken(HtmlTokenType.ATTR_VALUE);
                    var value;
                    if (this.peek === $SQ || this.peek === $DQ) {
                        var quoteChar = this.peek;
                        this._advance();
                        var parts = [];
                        while (this.peek !== quoteChar) {
                            parts.push(this._readChar(true));
                        }
                        value = parts.join('');
                        this._advance();
                    }
                    else {
                        var valueStart = this.index;
                        this._requireCharCodeUntilFn(isNameEnd, 1);
                        value = this.input.substring(valueStart, this.index);
                    }
                    this._endToken([this._processCarriageReturns(value)]);
                };
                _HtmlTokenizer.prototype._consumeTagOpenEnd = function () {
                    var tokenType = this._attemptCharCode($SLASH) ? HtmlTokenType.TAG_OPEN_END_VOID :
                        HtmlTokenType.TAG_OPEN_END;
                    this._beginToken(tokenType);
                    this._requireCharCode($GT);
                    this._endToken([]);
                };
                _HtmlTokenizer.prototype._consumeTagClose = function (start) {
                    this._beginToken(HtmlTokenType.TAG_CLOSE, start);
                    this._attemptCharCodeUntilFn(isNotWhitespace);
                    var prefixAndName;
                    prefixAndName = this._consumePrefixAndName();
                    this._attemptCharCodeUntilFn(isNotWhitespace);
                    this._requireCharCode($GT);
                    this._endToken(prefixAndName);
                };
                _HtmlTokenizer.prototype._consumeText = function () {
                    var start = this._getLocation();
                    this._beginToken(HtmlTokenType.TEXT, start);
                    var parts = [this._readChar(true)];
                    while (!isTextEnd(this.peek)) {
                        parts.push(this._readChar(true));
                    }
                    this._endToken([this._processCarriageReturns(parts.join(''))]);
                };
                _HtmlTokenizer.prototype._savePosition = function () {
                    return [this.peek, this.index, this.column, this.line, this.tokens.length];
                };
                _HtmlTokenizer.prototype._restorePosition = function (position) {
                    this.peek = position[0];
                    this.index = position[1];
                    this.column = position[2];
                    this.line = position[3];
                    var nbTokens = position[4];
                    if (nbTokens < this.tokens.length) {
                        // remove any extra tokens
                        this.tokens = collection_27.ListWrapper.slice(this.tokens, 0, nbTokens);
                    }
                };
                return _HtmlTokenizer;
            }());
        }
    }
});
System.register("test/node_modules/angular2/ts/src/compiler/html_parser", ['angular2/src/facade/lang', 'angular2/src/facade/collection', "test/node_modules/angular2/ts/src/compiler/html_ast", 'angular2/src/core/di', "test/node_modules/angular2/ts/src/compiler/html_lexer", "test/node_modules/angular2/ts/src/compiler/parse_util", "test/node_modules/angular2/ts/src/compiler/html_tags"], function(exports_130, context_130) {
    "use strict";
    var __moduleName = context_130 && context_130.id;
    var lang_67, collection_28, html_ast_1, di_11, html_lexer_1, parse_util_2, html_tags_2;
    var HtmlTreeError, HtmlParseTreeResult, HtmlParser, TreeBuilder;
    function getElementFullName(prefix, localName, parentElement) {
        if (lang_67.isBlank(prefix)) {
            prefix = html_tags_2.getHtmlTagDefinition(localName).implicitNamespacePrefix;
            if (lang_67.isBlank(prefix) && lang_67.isPresent(parentElement)) {
                prefix = html_tags_2.getNsPrefix(parentElement.name);
            }
        }
        return html_tags_2.mergeNsAndName(prefix, localName);
    }
    return {
        setters:[
            function (lang_67_1) {
                lang_67 = lang_67_1;
            },
            function (collection_28_1) {
                collection_28 = collection_28_1;
            },
            function (html_ast_1_1) {
                html_ast_1 = html_ast_1_1;
            },
            function (di_11_1) {
                di_11 = di_11_1;
            },
            function (html_lexer_1_1) {
                html_lexer_1 = html_lexer_1_1;
            },
            function (parse_util_2_1) {
                parse_util_2 = parse_util_2_1;
            },
            function (html_tags_2_1) {
                html_tags_2 = html_tags_2_1;
            }],
        execute: function() {
            HtmlTreeError = (function (_super) {
                __extends(HtmlTreeError, _super);
                function HtmlTreeError(elementName, span, msg) {
                    _super.call(this, span, msg);
                    this.elementName = elementName;
                }
                HtmlTreeError.create = function (elementName, span, msg) {
                    return new HtmlTreeError(elementName, span, msg);
                };
                return HtmlTreeError;
            }(parse_util_2.ParseError));
            exports_130("HtmlTreeError", HtmlTreeError);
            HtmlParseTreeResult = (function () {
                function HtmlParseTreeResult(rootNodes, errors) {
                    this.rootNodes = rootNodes;
                    this.errors = errors;
                }
                return HtmlParseTreeResult;
            }());
            exports_130("HtmlParseTreeResult", HtmlParseTreeResult);
            HtmlParser = (function () {
                function HtmlParser() {
                }
                HtmlParser.prototype.parse = function (sourceContent, sourceUrl) {
                    var tokensAndErrors = html_lexer_1.tokenizeHtml(sourceContent, sourceUrl);
                    var treeAndErrors = new TreeBuilder(tokensAndErrors.tokens).build();
                    return new HtmlParseTreeResult(treeAndErrors.rootNodes, tokensAndErrors.errors
                        .concat(treeAndErrors.errors));
                };
                HtmlParser = __decorate([
                    di_11.Injectable(), 
                    __metadata('design:paramtypes', [])
                ], HtmlParser);
                return HtmlParser;
            }());
            exports_130("HtmlParser", HtmlParser);
            TreeBuilder = (function () {
                function TreeBuilder(tokens) {
                    this.tokens = tokens;
                    this.index = -1;
                    this.rootNodes = [];
                    this.errors = [];
                    this.elementStack = [];
                    this._advance();
                }
                TreeBuilder.prototype.build = function () {
                    while (this.peek.type !== html_lexer_1.HtmlTokenType.EOF) {
                        if (this.peek.type === html_lexer_1.HtmlTokenType.TAG_OPEN_START) {
                            this._consumeStartTag(this._advance());
                        }
                        else if (this.peek.type === html_lexer_1.HtmlTokenType.TAG_CLOSE) {
                            this._consumeEndTag(this._advance());
                        }
                        else if (this.peek.type === html_lexer_1.HtmlTokenType.CDATA_START) {
                            this._closeVoidElement();
                            this._consumeCdata(this._advance());
                        }
                        else if (this.peek.type === html_lexer_1.HtmlTokenType.COMMENT_START) {
                            this._closeVoidElement();
                            this._consumeComment(this._advance());
                        }
                        else if (this.peek.type === html_lexer_1.HtmlTokenType.TEXT ||
                            this.peek.type === html_lexer_1.HtmlTokenType.RAW_TEXT ||
                            this.peek.type === html_lexer_1.HtmlTokenType.ESCAPABLE_RAW_TEXT) {
                            this._closeVoidElement();
                            this._consumeText(this._advance());
                        }
                        else {
                            // Skip all other tokens...
                            this._advance();
                        }
                    }
                    return new HtmlParseTreeResult(this.rootNodes, this.errors);
                };
                TreeBuilder.prototype._advance = function () {
                    var prev = this.peek;
                    if (this.index < this.tokens.length - 1) {
                        // Note: there is always an EOF token at the end
                        this.index++;
                    }
                    this.peek = this.tokens[this.index];
                    return prev;
                };
                TreeBuilder.prototype._advanceIf = function (type) {
                    if (this.peek.type === type) {
                        return this._advance();
                    }
                    return null;
                };
                TreeBuilder.prototype._consumeCdata = function (startToken) {
                    this._consumeText(this._advance());
                    this._advanceIf(html_lexer_1.HtmlTokenType.CDATA_END);
                };
                TreeBuilder.prototype._consumeComment = function (token) {
                    var text = this._advanceIf(html_lexer_1.HtmlTokenType.RAW_TEXT);
                    this._advanceIf(html_lexer_1.HtmlTokenType.COMMENT_END);
                    var value = lang_67.isPresent(text) ? text.parts[0].trim() : null;
                    this._addToParent(new html_ast_1.HtmlCommentAst(value, token.sourceSpan));
                };
                TreeBuilder.prototype._consumeText = function (token) {
                    var text = token.parts[0];
                    if (text.length > 0 && text[0] == '\n') {
                        var parent_1 = this._getParentElement();
                        if (lang_67.isPresent(parent_1) && parent_1.children.length == 0 &&
                            html_tags_2.getHtmlTagDefinition(parent_1.name).ignoreFirstLf) {
                            text = text.substring(1);
                        }
                    }
                    if (text.length > 0) {
                        this._addToParent(new html_ast_1.HtmlTextAst(text, token.sourceSpan));
                    }
                };
                TreeBuilder.prototype._closeVoidElement = function () {
                    if (this.elementStack.length > 0) {
                        var el = collection_28.ListWrapper.last(this.elementStack);
                        if (html_tags_2.getHtmlTagDefinition(el.name).isVoid) {
                            this.elementStack.pop();
                        }
                    }
                };
                TreeBuilder.prototype._consumeStartTag = function (startTagToken) {
                    var prefix = startTagToken.parts[0];
                    var name = startTagToken.parts[1];
                    var attrs = [];
                    while (this.peek.type === html_lexer_1.HtmlTokenType.ATTR_NAME) {
                        attrs.push(this._consumeAttr(this._advance()));
                    }
                    var fullName = getElementFullName(prefix, name, this._getParentElement());
                    var selfClosing = false;
                    // Note: There could have been a tokenizer error
                    // so that we don't get a token for the end tag...
                    if (this.peek.type === html_lexer_1.HtmlTokenType.TAG_OPEN_END_VOID) {
                        this._advance();
                        selfClosing = true;
                        if (html_tags_2.getNsPrefix(fullName) == null && !html_tags_2.getHtmlTagDefinition(fullName).isVoid) {
                            this.errors.push(HtmlTreeError.create(fullName, startTagToken.sourceSpan, "Only void and foreign elements can be self closed \"" + startTagToken.parts[1] + "\""));
                        }
                    }
                    else if (this.peek.type === html_lexer_1.HtmlTokenType.TAG_OPEN_END) {
                        this._advance();
                        selfClosing = false;
                    }
                    var end = this.peek.sourceSpan.start;
                    var el = new html_ast_1.HtmlElementAst(fullName, attrs, [], new parse_util_2.ParseSourceSpan(startTagToken.sourceSpan.start, end));
                    this._pushElement(el);
                    if (selfClosing) {
                        this._popElement(fullName);
                    }
                };
                TreeBuilder.prototype._pushElement = function (el) {
                    if (this.elementStack.length > 0) {
                        var parentEl = collection_28.ListWrapper.last(this.elementStack);
                        if (html_tags_2.getHtmlTagDefinition(parentEl.name).isClosedByChild(el.name)) {
                            this.elementStack.pop();
                        }
                    }
                    var tagDef = html_tags_2.getHtmlTagDefinition(el.name);
                    var parentEl = this._getParentElement();
                    if (tagDef.requireExtraParent(lang_67.isPresent(parentEl) ? parentEl.name : null)) {
                        var newParent = new html_ast_1.HtmlElementAst(tagDef.parentToAdd, [], [el], el.sourceSpan);
                        this._addToParent(newParent);
                        this.elementStack.push(newParent);
                        this.elementStack.push(el);
                    }
                    else {
                        this._addToParent(el);
                        this.elementStack.push(el);
                    }
                };
                TreeBuilder.prototype._consumeEndTag = function (endTagToken) {
                    var fullName = getElementFullName(endTagToken.parts[0], endTagToken.parts[1], this._getParentElement());
                    if (html_tags_2.getHtmlTagDefinition(fullName).isVoid) {
                        this.errors.push(HtmlTreeError.create(fullName, endTagToken.sourceSpan, "Void elements do not have end tags \"" + endTagToken.parts[1] + "\""));
                    }
                    else if (!this._popElement(fullName)) {
                        this.errors.push(HtmlTreeError.create(fullName, endTagToken.sourceSpan, "Unexpected closing tag \"" + endTagToken.parts[1] + "\""));
                    }
                };
                TreeBuilder.prototype._popElement = function (fullName) {
                    for (var stackIndex = this.elementStack.length - 1; stackIndex >= 0; stackIndex--) {
                        var el = this.elementStack[stackIndex];
                        if (el.name == fullName) {
                            collection_28.ListWrapper.splice(this.elementStack, stackIndex, this.elementStack.length - stackIndex);
                            return true;
                        }
                        if (!html_tags_2.getHtmlTagDefinition(el.name).closedByParent) {
                            return false;
                        }
                    }
                    return false;
                };
                TreeBuilder.prototype._consumeAttr = function (attrName) {
                    var fullName = html_tags_2.mergeNsAndName(attrName.parts[0], attrName.parts[1]);
                    var end = attrName.sourceSpan.end;
                    var value = '';
                    if (this.peek.type === html_lexer_1.HtmlTokenType.ATTR_VALUE) {
                        var valueToken = this._advance();
                        value = valueToken.parts[0];
                        end = valueToken.sourceSpan.end;
                    }
                    return new html_ast_1.HtmlAttrAst(fullName, value, new parse_util_2.ParseSourceSpan(attrName.sourceSpan.start, end));
                };
                TreeBuilder.prototype._getParentElement = function () {
                    return this.elementStack.length > 0 ? collection_28.ListWrapper.last(this.elementStack) : null;
                };
                TreeBuilder.prototype._addToParent = function (node) {
                    var parent = this._getParentElement();
                    if (lang_67.isPresent(parent)) {
                        parent.children.push(node);
                    }
                    else {
                        this.rootNodes.push(node);
                    }
                };
                return TreeBuilder;
            }());
        }
    }
});
System.register("test/node_modules/angular2/ts/src/compiler/template_preparser", ['angular2/src/facade/lang', "test/node_modules/angular2/ts/src/compiler/html_tags"], function(exports_131, context_131) {
    "use strict";
    var __moduleName = context_131 && context_131.id;
    var lang_68, html_tags_3;
    var NG_CONTENT_SELECT_ATTR, NG_CONTENT_ELEMENT, LINK_ELEMENT, LINK_STYLE_REL_ATTR, LINK_STYLE_HREF_ATTR, LINK_STYLE_REL_VALUE, STYLE_ELEMENT, SCRIPT_ELEMENT, NG_NON_BINDABLE_ATTR, PreparsedElementType, PreparsedElement;
    function preparseElement(ast) {
        var selectAttr = null;
        var hrefAttr = null;
        var relAttr = null;
        var nonBindable = false;
        ast.attrs.forEach(function (attr) {
            var lcAttrName = attr.name.toLowerCase();
            if (lcAttrName == NG_CONTENT_SELECT_ATTR) {
                selectAttr = attr.value;
            }
            else if (lcAttrName == LINK_STYLE_HREF_ATTR) {
                hrefAttr = attr.value;
            }
            else if (lcAttrName == LINK_STYLE_REL_ATTR) {
                relAttr = attr.value;
            }
            else if (attr.name == NG_NON_BINDABLE_ATTR) {
                nonBindable = true;
            }
        });
        selectAttr = normalizeNgContentSelect(selectAttr);
        var nodeName = ast.name.toLowerCase();
        var type = PreparsedElementType.OTHER;
        if (html_tags_3.splitNsName(nodeName)[1] == NG_CONTENT_ELEMENT) {
            type = PreparsedElementType.NG_CONTENT;
        }
        else if (nodeName == STYLE_ELEMENT) {
            type = PreparsedElementType.STYLE;
        }
        else if (nodeName == SCRIPT_ELEMENT) {
            type = PreparsedElementType.SCRIPT;
        }
        else if (nodeName == LINK_ELEMENT && relAttr == LINK_STYLE_REL_VALUE) {
            type = PreparsedElementType.STYLESHEET;
        }
        return new PreparsedElement(type, selectAttr, hrefAttr, nonBindable);
    }
    exports_131("preparseElement", preparseElement);
    function normalizeNgContentSelect(selectAttr) {
        if (lang_68.isBlank(selectAttr) || selectAttr.length === 0) {
            return '*';
        }
        return selectAttr;
    }
    return {
        setters:[
            function (lang_68_1) {
                lang_68 = lang_68_1;
            },
            function (html_tags_3_1) {
                html_tags_3 = html_tags_3_1;
            }],
        execute: function() {
            NG_CONTENT_SELECT_ATTR = 'select';
            NG_CONTENT_ELEMENT = 'ng-content';
            LINK_ELEMENT = 'link';
            LINK_STYLE_REL_ATTR = 'rel';
            LINK_STYLE_HREF_ATTR = 'href';
            LINK_STYLE_REL_VALUE = 'stylesheet';
            STYLE_ELEMENT = 'style';
            SCRIPT_ELEMENT = 'script';
            NG_NON_BINDABLE_ATTR = 'ngNonBindable';
            (function (PreparsedElementType) {
                PreparsedElementType[PreparsedElementType["NG_CONTENT"] = 0] = "NG_CONTENT";
                PreparsedElementType[PreparsedElementType["STYLE"] = 1] = "STYLE";
                PreparsedElementType[PreparsedElementType["STYLESHEET"] = 2] = "STYLESHEET";
                PreparsedElementType[PreparsedElementType["SCRIPT"] = 3] = "SCRIPT";
                PreparsedElementType[PreparsedElementType["OTHER"] = 4] = "OTHER";
            })(PreparsedElementType || (PreparsedElementType = {}));
            exports_131("PreparsedElementType", PreparsedElementType);
            PreparsedElement = (function () {
                function PreparsedElement(type, selectAttr, hrefAttr, nonBindable) {
                    this.type = type;
                    this.selectAttr = selectAttr;
                    this.hrefAttr = hrefAttr;
                    this.nonBindable = nonBindable;
                }
                return PreparsedElement;
            }());
            exports_131("PreparsedElement", PreparsedElement);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/compiler/template_parser", ['angular2/src/facade/collection', 'angular2/src/facade/lang', 'angular2/core', 'angular2/src/facade/exceptions', 'angular2/src/core/change_detection/change_detection', "test/node_modules/angular2/ts/src/compiler/html_parser", "test/node_modules/angular2/ts/src/compiler/html_tags", "test/node_modules/angular2/ts/src/compiler/parse_util", 'angular2/src/core/change_detection/parser/ast', "test/node_modules/angular2/ts/src/compiler/template_ast", 'angular2/src/compiler/selector', 'angular2/src/compiler/schema/element_schema_registry', "test/node_modules/angular2/ts/src/compiler/template_preparser", "test/node_modules/angular2/ts/src/compiler/style_url_resolver", "test/node_modules/angular2/ts/src/compiler/html_ast", "test/node_modules/angular2/ts/src/compiler/util"], function(exports_132, context_132) {
    "use strict";
    var __moduleName = context_132 && context_132.id;
    var collection_29, lang_69, core_74, lang_70, exceptions_14, change_detection_4, html_parser_1, html_tags_4, parse_util_3, ast_1, template_ast_4, selector_2, element_schema_registry_1, template_preparser_1, style_url_resolver_2, html_ast_2, util_7;
    var BIND_NAME_REGEXP, TEMPLATE_ELEMENT, TEMPLATE_ATTR, TEMPLATE_ATTR_PREFIX, CLASS_ATTR, PROPERTY_PARTS_SEPARATOR, ATTRIBUTE_PREFIX, CLASS_PREFIX, STYLE_PREFIX, TEXT_CSS_SELECTOR, TEMPLATE_TRANSFORMS, TemplateParseError, TemplateParser, TemplateParseVisitor, NonBindableVisitor, BoundElementOrDirectiveProperty, Component, EMPTY_COMPONENT, NON_BINDABLE_VISITOR, PipeCollector;
    function splitClasses(classAttrValue) {
        return lang_69.StringWrapper.split(classAttrValue.trim(), /\s+/g);
    }
    exports_132("splitClasses", splitClasses);
    function createElementCssSelector(elementName, matchableAttrs) {
        var cssSelector = new selector_2.CssSelector();
        var elNameNoNs = html_tags_4.splitNsName(elementName)[1];
        cssSelector.setElement(elNameNoNs);
        for (var i = 0; i < matchableAttrs.length; i++) {
            var attrName = matchableAttrs[i][0];
            var attrNameNoNs = html_tags_4.splitNsName(attrName)[1];
            var attrValue = matchableAttrs[i][1];
            cssSelector.addAttribute(attrNameNoNs, attrValue);
            if (attrName.toLowerCase() == CLASS_ATTR) {
                var classes = splitClasses(attrValue);
                classes.forEach(function (className) { return cssSelector.addClassName(className); });
            }
        }
        return cssSelector;
    }
    return {
        setters:[
            function (collection_29_1) {
                collection_29 = collection_29_1;
            },
            function (lang_69_1) {
                lang_69 = lang_69_1;
                lang_70 = lang_69_1;
            },
            function (core_74_1) {
                core_74 = core_74_1;
            },
            function (exceptions_14_1) {
                exceptions_14 = exceptions_14_1;
            },
            function (change_detection_4_1) {
                change_detection_4 = change_detection_4_1;
            },
            function (html_parser_1_1) {
                html_parser_1 = html_parser_1_1;
            },
            function (html_tags_4_1) {
                html_tags_4 = html_tags_4_1;
            },
            function (parse_util_3_1) {
                parse_util_3 = parse_util_3_1;
            },
            function (ast_1_1) {
                ast_1 = ast_1_1;
            },
            function (template_ast_4_1) {
                template_ast_4 = template_ast_4_1;
            },
            function (selector_2_1) {
                selector_2 = selector_2_1;
            },
            function (element_schema_registry_1_1) {
                element_schema_registry_1 = element_schema_registry_1_1;
            },
            function (template_preparser_1_1) {
                template_preparser_1 = template_preparser_1_1;
            },
            function (style_url_resolver_2_1) {
                style_url_resolver_2 = style_url_resolver_2_1;
            },
            function (html_ast_2_1) {
                html_ast_2 = html_ast_2_1;
            },
            function (util_7_1) {
                util_7 = util_7_1;
            }],
        execute: function() {
            // Group 1 = "bind-"
            // Group 2 = "var-" or "#"
            // Group 3 = "on-"
            // Group 4 = "bindon-"
            // Group 5 = the identifier after "bind-", "var-/#", or "on-"
            // Group 6 = identifier inside [()]
            // Group 7 = identifier inside []
            // Group 8 = identifier inside ()
            BIND_NAME_REGEXP = /^(?:(?:(?:(bind-)|(var-|#)|(on-)|(bindon-))(.+))|\[\(([^\)]+)\)\]|\[([^\]]+)\]|\(([^\)]+)\))$/g;
            TEMPLATE_ELEMENT = 'template';
            TEMPLATE_ATTR = 'template';
            TEMPLATE_ATTR_PREFIX = '*';
            CLASS_ATTR = 'class';
            PROPERTY_PARTS_SEPARATOR = '.';
            ATTRIBUTE_PREFIX = 'attr';
            CLASS_PREFIX = 'class';
            STYLE_PREFIX = 'style';
            TEXT_CSS_SELECTOR = selector_2.CssSelector.parse('*')[0];
            /**
             * Provides an array of {@link TemplateAstVisitor}s which will be used to transform
             * parsed templates before compilation is invoked, allowing custom expression syntax
             * and other advanced transformations.
             *
             * This is currently an internal-only feature and not meant for general use.
             */
            exports_132("TEMPLATE_TRANSFORMS", TEMPLATE_TRANSFORMS = lang_70.CONST_EXPR(new core_74.OpaqueToken('TemplateTransforms')));
            TemplateParseError = (function (_super) {
                __extends(TemplateParseError, _super);
                function TemplateParseError(message, span) {
                    _super.call(this, span, message);
                }
                return TemplateParseError;
            }(parse_util_3.ParseError));
            exports_132("TemplateParseError", TemplateParseError);
            TemplateParser = (function () {
                function TemplateParser(_exprParser, _schemaRegistry, _htmlParser, transforms) {
                    this._exprParser = _exprParser;
                    this._schemaRegistry = _schemaRegistry;
                    this._htmlParser = _htmlParser;
                    this.transforms = transforms;
                }
                TemplateParser.prototype.parse = function (template, directives, pipes, templateUrl) {
                    var parseVisitor = new TemplateParseVisitor(directives, pipes, this._exprParser, this._schemaRegistry);
                    var htmlAstWithErrors = this._htmlParser.parse(template, templateUrl);
                    var result = html_ast_2.htmlVisitAll(parseVisitor, htmlAstWithErrors.rootNodes, EMPTY_COMPONENT);
                    var errors = htmlAstWithErrors.errors.concat(parseVisitor.errors);
                    if (errors.length > 0) {
                        var errorString = errors.join('\n');
                        throw new exceptions_14.BaseException("Template parse errors:\n" + errorString);
                    }
                    if (lang_69.isPresent(this.transforms)) {
                        this.transforms.forEach(function (transform) { result = template_ast_4.templateVisitAll(transform, result); });
                    }
                    return result;
                };
                TemplateParser = __decorate([
                    core_74.Injectable(),
                    __param(3, core_74.Optional()),
                    __param(3, core_74.Inject(TEMPLATE_TRANSFORMS)), 
                    __metadata('design:paramtypes', [change_detection_4.Parser, element_schema_registry_1.ElementSchemaRegistry, html_parser_1.HtmlParser, Array])
                ], TemplateParser);
                return TemplateParser;
            }());
            exports_132("TemplateParser", TemplateParser);
            TemplateParseVisitor = (function () {
                function TemplateParseVisitor(directives, pipes, _exprParser, _schemaRegistry) {
                    var _this = this;
                    this._exprParser = _exprParser;
                    this._schemaRegistry = _schemaRegistry;
                    this.errors = [];
                    this.directivesIndex = new Map();
                    this.ngContentCount = 0;
                    this.selectorMatcher = new selector_2.SelectorMatcher();
                    collection_29.ListWrapper.forEachWithIndex(directives, function (directive, index) {
                        var selector = selector_2.CssSelector.parse(directive.selector);
                        _this.selectorMatcher.addSelectables(selector, directive);
                        _this.directivesIndex.set(directive, index);
                    });
                    this.pipesByName = new Map();
                    pipes.forEach(function (pipe) { return _this.pipesByName.set(pipe.name, pipe); });
                }
                TemplateParseVisitor.prototype._reportError = function (message, sourceSpan) {
                    this.errors.push(new TemplateParseError(message, sourceSpan));
                };
                TemplateParseVisitor.prototype._parseInterpolation = function (value, sourceSpan) {
                    var sourceInfo = sourceSpan.start.toString();
                    try {
                        var ast = this._exprParser.parseInterpolation(value, sourceInfo);
                        this._checkPipes(ast, sourceSpan);
                        return ast;
                    }
                    catch (e) {
                        this._reportError("" + e, sourceSpan);
                        return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
                    }
                };
                TemplateParseVisitor.prototype._parseAction = function (value, sourceSpan) {
                    var sourceInfo = sourceSpan.start.toString();
                    try {
                        var ast = this._exprParser.parseAction(value, sourceInfo);
                        this._checkPipes(ast, sourceSpan);
                        return ast;
                    }
                    catch (e) {
                        this._reportError("" + e, sourceSpan);
                        return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
                    }
                };
                TemplateParseVisitor.prototype._parseBinding = function (value, sourceSpan) {
                    var sourceInfo = sourceSpan.start.toString();
                    try {
                        var ast = this._exprParser.parseBinding(value, sourceInfo);
                        this._checkPipes(ast, sourceSpan);
                        return ast;
                    }
                    catch (e) {
                        this._reportError("" + e, sourceSpan);
                        return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
                    }
                };
                TemplateParseVisitor.prototype._parseTemplateBindings = function (value, sourceSpan) {
                    var _this = this;
                    var sourceInfo = sourceSpan.start.toString();
                    try {
                        var bindings = this._exprParser.parseTemplateBindings(value, sourceInfo);
                        bindings.forEach(function (binding) {
                            if (lang_69.isPresent(binding.expression)) {
                                _this._checkPipes(binding.expression, sourceSpan);
                            }
                        });
                        return bindings;
                    }
                    catch (e) {
                        this._reportError("" + e, sourceSpan);
                        return [];
                    }
                };
                TemplateParseVisitor.prototype._checkPipes = function (ast, sourceSpan) {
                    var _this = this;
                    if (lang_69.isPresent(ast)) {
                        var collector = new PipeCollector();
                        ast.visit(collector);
                        collector.pipes.forEach(function (pipeName) {
                            if (!_this.pipesByName.has(pipeName)) {
                                _this._reportError("The pipe '" + pipeName + "' could not be found", sourceSpan);
                            }
                        });
                    }
                };
                TemplateParseVisitor.prototype.visitText = function (ast, component) {
                    var ngContentIndex = component.findNgContentIndex(TEXT_CSS_SELECTOR);
                    var expr = this._parseInterpolation(ast.value, ast.sourceSpan);
                    if (lang_69.isPresent(expr)) {
                        return new template_ast_4.BoundTextAst(expr, ngContentIndex, ast.sourceSpan);
                    }
                    else {
                        return new template_ast_4.TextAst(ast.value, ngContentIndex, ast.sourceSpan);
                    }
                };
                TemplateParseVisitor.prototype.visitAttr = function (ast, contex) {
                    return new template_ast_4.AttrAst(ast.name, ast.value, ast.sourceSpan);
                };
                TemplateParseVisitor.prototype.visitComment = function (ast, context) { return null; };
                TemplateParseVisitor.prototype.visitElement = function (element, component) {
                    var _this = this;
                    var nodeName = element.name;
                    var preparsedElement = template_preparser_1.preparseElement(element);
                    if (preparsedElement.type === template_preparser_1.PreparsedElementType.SCRIPT ||
                        preparsedElement.type === template_preparser_1.PreparsedElementType.STYLE) {
                        // Skipping <script> for security reasons
                        // Skipping <style> as we already processed them
                        // in the StyleCompiler
                        return null;
                    }
                    if (preparsedElement.type === template_preparser_1.PreparsedElementType.STYLESHEET &&
                        style_url_resolver_2.isStyleUrlResolvable(preparsedElement.hrefAttr)) {
                        // Skipping stylesheets with either relative urls or package scheme as we already processed
                        // them in the StyleCompiler
                        return null;
                    }
                    var matchableAttrs = [];
                    var elementOrDirectiveProps = [];
                    var vars = [];
                    var events = [];
                    var templateElementOrDirectiveProps = [];
                    var templateVars = [];
                    var templateMatchableAttrs = [];
                    var hasInlineTemplates = false;
                    var attrs = [];
                    element.attrs.forEach(function (attr) {
                        var hasBinding = _this._parseAttr(attr, matchableAttrs, elementOrDirectiveProps, events, vars);
                        var hasTemplateBinding = _this._parseInlineTemplateBinding(attr, templateMatchableAttrs, templateElementOrDirectiveProps, templateVars);
                        if (!hasBinding && !hasTemplateBinding) {
                            // don't include the bindings as attributes as well in the AST
                            attrs.push(_this.visitAttr(attr, null));
                            matchableAttrs.push([attr.name, attr.value]);
                        }
                        if (hasTemplateBinding) {
                            hasInlineTemplates = true;
                        }
                    });
                    var lcElName = html_tags_4.splitNsName(nodeName.toLowerCase())[1];
                    var isTemplateElement = lcElName == TEMPLATE_ELEMENT;
                    var elementCssSelector = createElementCssSelector(nodeName, matchableAttrs);
                    var directives = this._createDirectiveAsts(element.name, this._parseDirectives(this.selectorMatcher, elementCssSelector), elementOrDirectiveProps, isTemplateElement ? [] : vars, element.sourceSpan);
                    var elementProps = this._createElementPropertyAsts(element.name, elementOrDirectiveProps, directives);
                    var children = html_ast_2.htmlVisitAll(preparsedElement.nonBindable ? NON_BINDABLE_VISITOR : this, element.children, Component.create(directives));
                    var elementNgContentIndex = hasInlineTemplates ? null : component.findNgContentIndex(elementCssSelector);
                    var parsedElement;
                    if (preparsedElement.type === template_preparser_1.PreparsedElementType.NG_CONTENT) {
                        if (lang_69.isPresent(element.children) && element.children.length > 0) {
                            this._reportError("<ng-content> element cannot have content. <ng-content> must be immediately followed by </ng-content>", element.sourceSpan);
                        }
                        parsedElement =
                            new template_ast_4.NgContentAst(this.ngContentCount++, elementNgContentIndex, element.sourceSpan);
                    }
                    else if (isTemplateElement) {
                        this._assertAllEventsPublishedByDirectives(directives, events);
                        this._assertNoComponentsNorElementBindingsOnTemplate(directives, elementProps, element.sourceSpan);
                        parsedElement = new template_ast_4.EmbeddedTemplateAst(attrs, events, vars, directives, children, elementNgContentIndex, element.sourceSpan);
                    }
                    else {
                        this._assertOnlyOneComponent(directives, element.sourceSpan);
                        var elementExportAsVars = vars.filter(function (varAst) { return varAst.value.length === 0; });
                        parsedElement =
                            new template_ast_4.ElementAst(nodeName, attrs, elementProps, events, elementExportAsVars, directives, children, elementNgContentIndex, element.sourceSpan);
                    }
                    if (hasInlineTemplates) {
                        var templateCssSelector = createElementCssSelector(TEMPLATE_ELEMENT, templateMatchableAttrs);
                        var templateDirectives = this._createDirectiveAsts(element.name, this._parseDirectives(this.selectorMatcher, templateCssSelector), templateElementOrDirectiveProps, [], element.sourceSpan);
                        var templateElementProps = this._createElementPropertyAsts(element.name, templateElementOrDirectiveProps, templateDirectives);
                        this._assertNoComponentsNorElementBindingsOnTemplate(templateDirectives, templateElementProps, element.sourceSpan);
                        parsedElement = new template_ast_4.EmbeddedTemplateAst([], [], templateVars, templateDirectives, [parsedElement], component.findNgContentIndex(templateCssSelector), element.sourceSpan);
                    }
                    return parsedElement;
                };
                TemplateParseVisitor.prototype._parseInlineTemplateBinding = function (attr, targetMatchableAttrs, targetProps, targetVars) {
                    var templateBindingsSource = null;
                    if (attr.name == TEMPLATE_ATTR) {
                        templateBindingsSource = attr.value;
                    }
                    else if (attr.name.startsWith(TEMPLATE_ATTR_PREFIX)) {
                        var key = attr.name.substring(TEMPLATE_ATTR_PREFIX.length); // remove the star
                        templateBindingsSource = (attr.value.length == 0) ? key : key + ' ' + attr.value;
                    }
                    if (lang_69.isPresent(templateBindingsSource)) {
                        var bindings = this._parseTemplateBindings(templateBindingsSource, attr.sourceSpan);
                        for (var i = 0; i < bindings.length; i++) {
                            var binding = bindings[i];
                            if (binding.keyIsVar) {
                                targetVars.push(new template_ast_4.VariableAst(binding.key, binding.name, attr.sourceSpan));
                                targetMatchableAttrs.push([binding.key, binding.name]);
                            }
                            else if (lang_69.isPresent(binding.expression)) {
                                this._parsePropertyAst(binding.key, binding.expression, attr.sourceSpan, targetMatchableAttrs, targetProps);
                            }
                            else {
                                targetMatchableAttrs.push([binding.key, '']);
                                this._parseLiteralAttr(binding.key, null, attr.sourceSpan, targetProps);
                            }
                        }
                        return true;
                    }
                    return false;
                };
                TemplateParseVisitor.prototype._parseAttr = function (attr, targetMatchableAttrs, targetProps, targetEvents, targetVars) {
                    var attrName = this._normalizeAttributeName(attr.name);
                    var attrValue = attr.value;
                    var bindParts = lang_69.RegExpWrapper.firstMatch(BIND_NAME_REGEXP, attrName);
                    var hasBinding = false;
                    if (lang_69.isPresent(bindParts)) {
                        hasBinding = true;
                        if (lang_69.isPresent(bindParts[1])) {
                            this._parseProperty(bindParts[5], attrValue, attr.sourceSpan, targetMatchableAttrs, targetProps);
                        }
                        else if (lang_69.isPresent(bindParts[2])) {
                            var identifier = bindParts[5];
                            this._parseVariable(identifier, attrValue, attr.sourceSpan, targetVars);
                        }
                        else if (lang_69.isPresent(bindParts[3])) {
                            this._parseEvent(bindParts[5], attrValue, attr.sourceSpan, targetMatchableAttrs, targetEvents);
                        }
                        else if (lang_69.isPresent(bindParts[4])) {
                            this._parseProperty(bindParts[5], attrValue, attr.sourceSpan, targetMatchableAttrs, targetProps);
                            this._parseAssignmentEvent(bindParts[5], attrValue, attr.sourceSpan, targetMatchableAttrs, targetEvents);
                        }
                        else if (lang_69.isPresent(bindParts[6])) {
                            this._parseProperty(bindParts[6], attrValue, attr.sourceSpan, targetMatchableAttrs, targetProps);
                            this._parseAssignmentEvent(bindParts[6], attrValue, attr.sourceSpan, targetMatchableAttrs, targetEvents);
                        }
                        else if (lang_69.isPresent(bindParts[7])) {
                            this._parseProperty(bindParts[7], attrValue, attr.sourceSpan, targetMatchableAttrs, targetProps);
                        }
                        else if (lang_69.isPresent(bindParts[8])) {
                            this._parseEvent(bindParts[8], attrValue, attr.sourceSpan, targetMatchableAttrs, targetEvents);
                        }
                    }
                    else {
                        hasBinding = this._parsePropertyInterpolation(attrName, attrValue, attr.sourceSpan, targetMatchableAttrs, targetProps);
                    }
                    if (!hasBinding) {
                        this._parseLiteralAttr(attrName, attrValue, attr.sourceSpan, targetProps);
                    }
                    return hasBinding;
                };
                TemplateParseVisitor.prototype._normalizeAttributeName = function (attrName) {
                    return attrName.toLowerCase().startsWith('data-') ? attrName.substring(5) : attrName;
                };
                TemplateParseVisitor.prototype._parseVariable = function (identifier, value, sourceSpan, targetVars) {
                    if (identifier.indexOf('-') > -1) {
                        this._reportError("\"-\" is not allowed in variable names", sourceSpan);
                    }
                    targetVars.push(new template_ast_4.VariableAst(identifier, value, sourceSpan));
                };
                TemplateParseVisitor.prototype._parseProperty = function (name, expression, sourceSpan, targetMatchableAttrs, targetProps) {
                    this._parsePropertyAst(name, this._parseBinding(expression, sourceSpan), sourceSpan, targetMatchableAttrs, targetProps);
                };
                TemplateParseVisitor.prototype._parsePropertyInterpolation = function (name, value, sourceSpan, targetMatchableAttrs, targetProps) {
                    var expr = this._parseInterpolation(value, sourceSpan);
                    if (lang_69.isPresent(expr)) {
                        this._parsePropertyAst(name, expr, sourceSpan, targetMatchableAttrs, targetProps);
                        return true;
                    }
                    return false;
                };
                TemplateParseVisitor.prototype._parsePropertyAst = function (name, ast, sourceSpan, targetMatchableAttrs, targetProps) {
                    targetMatchableAttrs.push([name, ast.source]);
                    targetProps.push(new BoundElementOrDirectiveProperty(name, ast, false, sourceSpan));
                };
                TemplateParseVisitor.prototype._parseAssignmentEvent = function (name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {
                    this._parseEvent(name + "Change", expression + "=$event", sourceSpan, targetMatchableAttrs, targetEvents);
                };
                TemplateParseVisitor.prototype._parseEvent = function (name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {
                    // long format: 'target: eventName'
                    var parts = util_7.splitAtColon(name, [null, name]);
                    var target = parts[0];
                    var eventName = parts[1];
                    var ast = this._parseAction(expression, sourceSpan);
                    targetMatchableAttrs.push([name, ast.source]);
                    targetEvents.push(new template_ast_4.BoundEventAst(eventName, target, ast, sourceSpan));
                    // Don't detect directives for event names for now,
                    // so don't add the event name to the matchableAttrs
                };
                TemplateParseVisitor.prototype._parseLiteralAttr = function (name, value, sourceSpan, targetProps) {
                    targetProps.push(new BoundElementOrDirectiveProperty(name, this._exprParser.wrapLiteralPrimitive(value, ''), true, sourceSpan));
                };
                TemplateParseVisitor.prototype._parseDirectives = function (selectorMatcher, elementCssSelector) {
                    var _this = this;
                    var directives = [];
                    selectorMatcher.match(elementCssSelector, function (selector, directive) { directives.push(directive); });
                    // Need to sort the directives so that we get consistent results throughout,
                    // as selectorMatcher uses Maps inside.
                    // Also need to make components the first directive in the array
                    collection_29.ListWrapper.sort(directives, function (dir1, dir2) {
                        var dir1Comp = dir1.isComponent;
                        var dir2Comp = dir2.isComponent;
                        if (dir1Comp && !dir2Comp) {
                            return -1;
                        }
                        else if (!dir1Comp && dir2Comp) {
                            return 1;
                        }
                        else {
                            return _this.directivesIndex.get(dir1) - _this.directivesIndex.get(dir2);
                        }
                    });
                    return directives;
                };
                TemplateParseVisitor.prototype._createDirectiveAsts = function (elementName, directives, props, possibleExportAsVars, sourceSpan) {
                    var _this = this;
                    var matchedVariables = new Set();
                    var directiveAsts = directives.map(function (directive) {
                        var hostProperties = [];
                        var hostEvents = [];
                        var directiveProperties = [];
                        _this._createDirectiveHostPropertyAsts(elementName, directive.hostProperties, sourceSpan, hostProperties);
                        _this._createDirectiveHostEventAsts(directive.hostListeners, sourceSpan, hostEvents);
                        _this._createDirectivePropertyAsts(directive.inputs, props, directiveProperties);
                        var exportAsVars = [];
                        possibleExportAsVars.forEach(function (varAst) {
                            if ((varAst.value.length === 0 && directive.isComponent) ||
                                (directive.exportAs == varAst.value)) {
                                exportAsVars.push(varAst);
                                matchedVariables.add(varAst.name);
                            }
                        });
                        return new template_ast_4.DirectiveAst(directive, directiveProperties, hostProperties, hostEvents, exportAsVars, sourceSpan);
                    });
                    possibleExportAsVars.forEach(function (varAst) {
                        if (varAst.value.length > 0 && !collection_29.SetWrapper.has(matchedVariables, varAst.name)) {
                            _this._reportError("There is no directive with \"exportAs\" set to \"" + varAst.value + "\"", varAst.sourceSpan);
                        }
                    });
                    return directiveAsts;
                };
                TemplateParseVisitor.prototype._createDirectiveHostPropertyAsts = function (elementName, hostProps, sourceSpan, targetPropertyAsts) {
                    var _this = this;
                    if (lang_69.isPresent(hostProps)) {
                        collection_29.StringMapWrapper.forEach(hostProps, function (expression, propName) {
                            var exprAst = _this._parseBinding(expression, sourceSpan);
                            targetPropertyAsts.push(_this._createElementPropertyAst(elementName, propName, exprAst, sourceSpan));
                        });
                    }
                };
                TemplateParseVisitor.prototype._createDirectiveHostEventAsts = function (hostListeners, sourceSpan, targetEventAsts) {
                    var _this = this;
                    if (lang_69.isPresent(hostListeners)) {
                        collection_29.StringMapWrapper.forEach(hostListeners, function (expression, propName) {
                            _this._parseEvent(propName, expression, sourceSpan, [], targetEventAsts);
                        });
                    }
                };
                TemplateParseVisitor.prototype._createDirectivePropertyAsts = function (directiveProperties, boundProps, targetBoundDirectiveProps) {
                    if (lang_69.isPresent(directiveProperties)) {
                        var boundPropsByName = new Map();
                        boundProps.forEach(function (boundProp) {
                            var prevValue = boundPropsByName.get(boundProp.name);
                            if (lang_69.isBlank(prevValue) || prevValue.isLiteral) {
                                // give [a]="b" a higher precedence than a="b" on the same element
                                boundPropsByName.set(boundProp.name, boundProp);
                            }
                        });
                        collection_29.StringMapWrapper.forEach(directiveProperties, function (elProp, dirProp) {
                            var boundProp = boundPropsByName.get(elProp);
                            // Bindings are optional, so this binding only needs to be set up if an expression is given.
                            if (lang_69.isPresent(boundProp)) {
                                targetBoundDirectiveProps.push(new template_ast_4.BoundDirectivePropertyAst(dirProp, boundProp.name, boundProp.expression, boundProp.sourceSpan));
                            }
                        });
                    }
                };
                TemplateParseVisitor.prototype._createElementPropertyAsts = function (elementName, props, directives) {
                    var _this = this;
                    var boundElementProps = [];
                    var boundDirectivePropsIndex = new Map();
                    directives.forEach(function (directive) {
                        directive.inputs.forEach(function (prop) {
                            boundDirectivePropsIndex.set(prop.templateName, prop);
                        });
                    });
                    props.forEach(function (prop) {
                        if (!prop.isLiteral && lang_69.isBlank(boundDirectivePropsIndex.get(prop.name))) {
                            boundElementProps.push(_this._createElementPropertyAst(elementName, prop.name, prop.expression, prop.sourceSpan));
                        }
                    });
                    return boundElementProps;
                };
                TemplateParseVisitor.prototype._createElementPropertyAst = function (elementName, name, ast, sourceSpan) {
                    var unit = null;
                    var bindingType;
                    var boundPropertyName;
                    var parts = name.split(PROPERTY_PARTS_SEPARATOR);
                    if (parts.length === 1) {
                        boundPropertyName = this._schemaRegistry.getMappedPropName(parts[0]);
                        bindingType = template_ast_4.PropertyBindingType.Property;
                        if (!this._schemaRegistry.hasProperty(elementName, boundPropertyName)) {
                            this._reportError("Can't bind to '" + boundPropertyName + "' since it isn't a known native property", sourceSpan);
                        }
                    }
                    else {
                        if (parts[0] == ATTRIBUTE_PREFIX) {
                            boundPropertyName = parts[1];
                            var nsSeparatorIdx = boundPropertyName.indexOf(':');
                            if (nsSeparatorIdx > -1) {
                                var ns = boundPropertyName.substring(0, nsSeparatorIdx);
                                var name_2 = boundPropertyName.substring(nsSeparatorIdx + 1);
                                boundPropertyName = html_tags_4.mergeNsAndName(ns, name_2);
                            }
                            bindingType = template_ast_4.PropertyBindingType.Attribute;
                        }
                        else if (parts[0] == CLASS_PREFIX) {
                            boundPropertyName = parts[1];
                            bindingType = template_ast_4.PropertyBindingType.Class;
                        }
                        else if (parts[0] == STYLE_PREFIX) {
                            unit = parts.length > 2 ? parts[2] : null;
                            boundPropertyName = parts[1];
                            bindingType = template_ast_4.PropertyBindingType.Style;
                        }
                        else {
                            this._reportError("Invalid property name '" + name + "'", sourceSpan);
                            bindingType = null;
                        }
                    }
                    return new template_ast_4.BoundElementPropertyAst(boundPropertyName, bindingType, ast, unit, sourceSpan);
                };
                TemplateParseVisitor.prototype._findComponentDirectiveNames = function (directives) {
                    var componentTypeNames = [];
                    directives.forEach(function (directive) {
                        var typeName = directive.directive.type.name;
                        if (directive.directive.isComponent) {
                            componentTypeNames.push(typeName);
                        }
                    });
                    return componentTypeNames;
                };
                TemplateParseVisitor.prototype._assertOnlyOneComponent = function (directives, sourceSpan) {
                    var componentTypeNames = this._findComponentDirectiveNames(directives);
                    if (componentTypeNames.length > 1) {
                        this._reportError("More than one component: " + componentTypeNames.join(','), sourceSpan);
                    }
                };
                TemplateParseVisitor.prototype._assertNoComponentsNorElementBindingsOnTemplate = function (directives, elementProps, sourceSpan) {
                    var _this = this;
                    var componentTypeNames = this._findComponentDirectiveNames(directives);
                    if (componentTypeNames.length > 0) {
                        this._reportError("Components on an embedded template: " + componentTypeNames.join(','), sourceSpan);
                    }
                    elementProps.forEach(function (prop) {
                        _this._reportError("Property binding " + prop.name + " not used by any directive on an embedded template", sourceSpan);
                    });
                };
                TemplateParseVisitor.prototype._assertAllEventsPublishedByDirectives = function (directives, events) {
                    var _this = this;
                    var allDirectiveEvents = new Set();
                    directives.forEach(function (directive) {
                        collection_29.StringMapWrapper.forEach(directive.directive.outputs, function (eventName, _) { allDirectiveEvents.add(eventName); });
                    });
                    events.forEach(function (event) {
                        if (lang_69.isPresent(event.target) || !collection_29.SetWrapper.has(allDirectiveEvents, event.name)) {
                            _this._reportError("Event binding " + event.fullName + " not emitted by any directive on an embedded template", event.sourceSpan);
                        }
                    });
                };
                return TemplateParseVisitor;
            }());
            NonBindableVisitor = (function () {
                function NonBindableVisitor() {
                }
                NonBindableVisitor.prototype.visitElement = function (ast, component) {
                    var preparsedElement = template_preparser_1.preparseElement(ast);
                    if (preparsedElement.type === template_preparser_1.PreparsedElementType.SCRIPT ||
                        preparsedElement.type === template_preparser_1.PreparsedElementType.STYLE ||
                        preparsedElement.type === template_preparser_1.PreparsedElementType.STYLESHEET) {
                        // Skipping <script> for security reasons
                        // Skipping <style> and stylesheets as we already processed them
                        // in the StyleCompiler
                        return null;
                    }
                    var attrNameAndValues = ast.attrs.map(function (attrAst) { return [attrAst.name, attrAst.value]; });
                    var selector = createElementCssSelector(ast.name, attrNameAndValues);
                    var ngContentIndex = component.findNgContentIndex(selector);
                    var children = html_ast_2.htmlVisitAll(this, ast.children, EMPTY_COMPONENT);
                    return new template_ast_4.ElementAst(ast.name, html_ast_2.htmlVisitAll(this, ast.attrs), [], [], [], [], children, ngContentIndex, ast.sourceSpan);
                };
                NonBindableVisitor.prototype.visitComment = function (ast, context) { return null; };
                NonBindableVisitor.prototype.visitAttr = function (ast, context) {
                    return new template_ast_4.AttrAst(ast.name, ast.value, ast.sourceSpan);
                };
                NonBindableVisitor.prototype.visitText = function (ast, component) {
                    var ngContentIndex = component.findNgContentIndex(TEXT_CSS_SELECTOR);
                    return new template_ast_4.TextAst(ast.value, ngContentIndex, ast.sourceSpan);
                };
                return NonBindableVisitor;
            }());
            BoundElementOrDirectiveProperty = (function () {
                function BoundElementOrDirectiveProperty(name, expression, isLiteral, sourceSpan) {
                    this.name = name;
                    this.expression = expression;
                    this.isLiteral = isLiteral;
                    this.sourceSpan = sourceSpan;
                }
                return BoundElementOrDirectiveProperty;
            }());
            Component = (function () {
                function Component(ngContentIndexMatcher, wildcardNgContentIndex) {
                    this.ngContentIndexMatcher = ngContentIndexMatcher;
                    this.wildcardNgContentIndex = wildcardNgContentIndex;
                }
                Component.create = function (directives) {
                    if (directives.length === 0 || !directives[0].directive.isComponent) {
                        return EMPTY_COMPONENT;
                    }
                    var matcher = new selector_2.SelectorMatcher();
                    var ngContentSelectors = directives[0].directive.template.ngContentSelectors;
                    var wildcardNgContentIndex = null;
                    for (var i = 0; i < ngContentSelectors.length; i++) {
                        var selector = ngContentSelectors[i];
                        if (lang_69.StringWrapper.equals(selector, '*')) {
                            wildcardNgContentIndex = i;
                        }
                        else {
                            matcher.addSelectables(selector_2.CssSelector.parse(ngContentSelectors[i]), i);
                        }
                    }
                    return new Component(matcher, wildcardNgContentIndex);
                };
                Component.prototype.findNgContentIndex = function (selector) {
                    var ngContentIndices = [];
                    this.ngContentIndexMatcher.match(selector, function (selector, ngContentIndex) { ngContentIndices.push(ngContentIndex); });
                    collection_29.ListWrapper.sort(ngContentIndices);
                    if (lang_69.isPresent(this.wildcardNgContentIndex)) {
                        ngContentIndices.push(this.wildcardNgContentIndex);
                    }
                    return ngContentIndices.length > 0 ? ngContentIndices[0] : null;
                };
                return Component;
            }());
            EMPTY_COMPONENT = new Component(new selector_2.SelectorMatcher(), null);
            NON_BINDABLE_VISITOR = new NonBindableVisitor();
            PipeCollector = (function (_super) {
                __extends(PipeCollector, _super);
                function PipeCollector() {
                    _super.apply(this, arguments);
                    this.pipes = new Set();
                }
                PipeCollector.prototype.visitPipe = function (ast) {
                    this.pipes.add(ast.name);
                    ast.exp.visit(this);
                    this.visitAll(ast.args);
                    return null;
                };
                return PipeCollector;
            }(ast_1.RecursiveAstVisitor));
            exports_132("PipeCollector", PipeCollector);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/compiler/template_normalizer", ["test/node_modules/angular2/ts/src/compiler/directive_metadata", 'angular2/src/facade/lang', 'angular2/src/facade/exceptions', 'angular2/src/facade/async', 'angular2/src/compiler/xhr', 'angular2/src/compiler/url_resolver', "test/node_modules/angular2/ts/src/compiler/style_url_resolver", 'angular2/src/core/di', 'angular2/src/core/metadata/view', "test/node_modules/angular2/ts/src/compiler/html_ast", "test/node_modules/angular2/ts/src/compiler/html_parser", "test/node_modules/angular2/ts/src/compiler/template_preparser"], function(exports_133, context_133) {
    "use strict";
    var __moduleName = context_133 && context_133.id;
    var directive_metadata_1, lang_71, exceptions_15, async_11, xhr_2, url_resolver_2, style_url_resolver_3, di_12, view_6, html_ast_3, html_parser_2, template_preparser_2;
    var TemplateNormalizer, TemplatePreparseVisitor;
    return {
        setters:[
            function (directive_metadata_1_1) {
                directive_metadata_1 = directive_metadata_1_1;
            },
            function (lang_71_1) {
                lang_71 = lang_71_1;
            },
            function (exceptions_15_1) {
                exceptions_15 = exceptions_15_1;
            },
            function (async_11_1) {
                async_11 = async_11_1;
            },
            function (xhr_2_1) {
                xhr_2 = xhr_2_1;
            },
            function (url_resolver_2_1) {
                url_resolver_2 = url_resolver_2_1;
            },
            function (style_url_resolver_3_1) {
                style_url_resolver_3 = style_url_resolver_3_1;
            },
            function (di_12_1) {
                di_12 = di_12_1;
            },
            function (view_6_1) {
                view_6 = view_6_1;
            },
            function (html_ast_3_1) {
                html_ast_3 = html_ast_3_1;
            },
            function (html_parser_2_1) {
                html_parser_2 = html_parser_2_1;
            },
            function (template_preparser_2_1) {
                template_preparser_2 = template_preparser_2_1;
            }],
        execute: function() {
            TemplateNormalizer = (function () {
                function TemplateNormalizer(_xhr, _urlResolver, _htmlParser) {
                    this._xhr = _xhr;
                    this._urlResolver = _urlResolver;
                    this._htmlParser = _htmlParser;
                }
                TemplateNormalizer.prototype.normalizeTemplate = function (directiveType, template) {
                    var _this = this;
                    if (lang_71.isPresent(template.template)) {
                        return async_11.PromiseWrapper.resolve(this.normalizeLoadedTemplate(directiveType, template, template.template, directiveType.moduleUrl));
                    }
                    else if (lang_71.isPresent(template.templateUrl)) {
                        var sourceAbsUrl = this._urlResolver.resolve(directiveType.moduleUrl, template.templateUrl);
                        return this._xhr.get(sourceAbsUrl)
                            .then(function (templateContent) { return _this.normalizeLoadedTemplate(directiveType, template, templateContent, sourceAbsUrl); });
                    }
                    else {
                        throw new exceptions_15.BaseException("No template specified for component " + directiveType.name);
                    }
                };
                TemplateNormalizer.prototype.normalizeLoadedTemplate = function (directiveType, templateMeta, template, templateAbsUrl) {
                    var _this = this;
                    var rootNodesAndErrors = this._htmlParser.parse(template, directiveType.name);
                    if (rootNodesAndErrors.errors.length > 0) {
                        var errorString = rootNodesAndErrors.errors.join('\n');
                        throw new exceptions_15.BaseException("Template parse errors:\n" + errorString);
                    }
                    var visitor = new TemplatePreparseVisitor();
                    html_ast_3.htmlVisitAll(visitor, rootNodesAndErrors.rootNodes);
                    var allStyles = templateMeta.styles.concat(visitor.styles);
                    var allStyleAbsUrls = visitor.styleUrls.filter(style_url_resolver_3.isStyleUrlResolvable)
                        .map(function (url) { return _this._urlResolver.resolve(templateAbsUrl, url); })
                        .concat(templateMeta.styleUrls.filter(style_url_resolver_3.isStyleUrlResolvable)
                        .map(function (url) { return _this._urlResolver.resolve(directiveType.moduleUrl, url); }));
                    var allResolvedStyles = allStyles.map(function (style) {
                        var styleWithImports = style_url_resolver_3.extractStyleUrls(_this._urlResolver, templateAbsUrl, style);
                        styleWithImports.styleUrls.forEach(function (styleUrl) { return allStyleAbsUrls.push(styleUrl); });
                        return styleWithImports.style;
                    });
                    var encapsulation = templateMeta.encapsulation;
                    if (encapsulation === view_6.ViewEncapsulation.Emulated && allResolvedStyles.length === 0 &&
                        allStyleAbsUrls.length === 0) {
                        encapsulation = view_6.ViewEncapsulation.None;
                    }
                    return new directive_metadata_1.CompileTemplateMetadata({
                        encapsulation: encapsulation,
                        template: template,
                        templateUrl: templateAbsUrl,
                        styles: allResolvedStyles,
                        styleUrls: allStyleAbsUrls,
                        ngContentSelectors: visitor.ngContentSelectors
                    });
                };
                TemplateNormalizer = __decorate([
                    di_12.Injectable(), 
                    __metadata('design:paramtypes', [xhr_2.XHR, url_resolver_2.UrlResolver, html_parser_2.HtmlParser])
                ], TemplateNormalizer);
                return TemplateNormalizer;
            }());
            exports_133("TemplateNormalizer", TemplateNormalizer);
            TemplatePreparseVisitor = (function () {
                function TemplatePreparseVisitor() {
                    this.ngContentSelectors = [];
                    this.styles = [];
                    this.styleUrls = [];
                    this.ngNonBindableStackCount = 0;
                }
                TemplatePreparseVisitor.prototype.visitElement = function (ast, context) {
                    var preparsedElement = template_preparser_2.preparseElement(ast);
                    switch (preparsedElement.type) {
                        case template_preparser_2.PreparsedElementType.NG_CONTENT:
                            if (this.ngNonBindableStackCount === 0) {
                                this.ngContentSelectors.push(preparsedElement.selectAttr);
                            }
                            break;
                        case template_preparser_2.PreparsedElementType.STYLE:
                            var textContent = '';
                            ast.children.forEach(function (child) {
                                if (child instanceof html_ast_3.HtmlTextAst) {
                                    textContent += child.value;
                                }
                            });
                            this.styles.push(textContent);
                            break;
                        case template_preparser_2.PreparsedElementType.STYLESHEET:
                            this.styleUrls.push(preparsedElement.hrefAttr);
                            break;
                        default:
                            // DDC reports this as error. See:
                            // https://github.com/dart-lang/dev_compiler/issues/428
                            break;
                    }
                    if (preparsedElement.nonBindable) {
                        this.ngNonBindableStackCount++;
                    }
                    html_ast_3.htmlVisitAll(this, ast.children);
                    if (preparsedElement.nonBindable) {
                        this.ngNonBindableStackCount--;
                    }
                    return null;
                };
                TemplatePreparseVisitor.prototype.visitComment = function (ast, context) { return null; };
                TemplatePreparseVisitor.prototype.visitAttr = function (ast, context) { return null; };
                TemplatePreparseVisitor.prototype.visitText = function (ast, context) { return null; };
                return TemplatePreparseVisitor;
            }());
        }
    }
});
System.register("test/node_modules/angular2/ts/src/compiler/runtime_metadata", ['angular2/src/core/di', 'angular2/src/facade/lang', 'angular2/src/facade/exceptions', "test/node_modules/angular2/ts/src/compiler/directive_metadata", 'angular2/src/core/metadata/directives', 'angular2/src/core/linker/directive_resolver', 'angular2/src/core/linker/pipe_resolver', 'angular2/src/core/linker/view_resolver', 'angular2/src/core/linker/directive_lifecycle_reflector', 'angular2/src/core/linker/interfaces', 'angular2/src/core/reflection/reflection', 'angular2/src/core/platform_directives_and_pipes', "test/node_modules/angular2/ts/src/compiler/util", 'angular2/src/compiler/url_resolver'], function(exports_134, context_134) {
    "use strict";
    var __moduleName = context_134 && context_134.id;
    var di_13, lang_72, exceptions_16, cpl, md, directive_resolver_1, pipe_resolver_1, view_resolver_1, directive_lifecycle_reflector_1, interfaces_3, reflection_2, di_14, platform_directives_and_pipes_1, util_8, url_resolver_3;
    var RuntimeMetadataResolver;
    function flattenDirectives(view, platformDirectives) {
        var directives = [];
        if (lang_72.isPresent(platformDirectives)) {
            flattenArray(platformDirectives, directives);
        }
        if (lang_72.isPresent(view.directives)) {
            flattenArray(view.directives, directives);
        }
        return directives;
    }
    function flattenPipes(view, platformPipes) {
        var pipes = [];
        if (lang_72.isPresent(platformPipes)) {
            flattenArray(platformPipes, pipes);
        }
        if (lang_72.isPresent(view.pipes)) {
            flattenArray(view.pipes, pipes);
        }
        return pipes;
    }
    function flattenArray(tree, out) {
        for (var i = 0; i < tree.length; i++) {
            var item = di_13.resolveForwardRef(tree[i]);
            if (lang_72.isArray(item)) {
                flattenArray(item, out);
            }
            else {
                out.push(item);
            }
        }
    }
    function isValidType(value) {
        return lang_72.isPresent(value) && (value instanceof lang_72.Type);
    }
    function calcModuleUrl(type, cmpMetadata) {
        var moduleId = cmpMetadata.moduleId;
        if (lang_72.isPresent(moduleId)) {
            var scheme = url_resolver_3.getUrlScheme(moduleId);
            return lang_72.isPresent(scheme) && scheme.length > 0 ? moduleId :
                "package:" + moduleId + util_8.MODULE_SUFFIX;
        }
        else {
            return reflection_2.reflector.importUri(type);
        }
    }
    return {
        setters:[
            function (di_13_1) {
                di_13 = di_13_1;
                di_14 = di_13_1;
            },
            function (lang_72_1) {
                lang_72 = lang_72_1;
            },
            function (exceptions_16_1) {
                exceptions_16 = exceptions_16_1;
            },
            function (cpl_1) {
                cpl = cpl_1;
            },
            function (md_1) {
                md = md_1;
            },
            function (directive_resolver_1_1) {
                directive_resolver_1 = directive_resolver_1_1;
            },
            function (pipe_resolver_1_1) {
                pipe_resolver_1 = pipe_resolver_1_1;
            },
            function (view_resolver_1_1) {
                view_resolver_1 = view_resolver_1_1;
            },
            function (directive_lifecycle_reflector_1_1) {
                directive_lifecycle_reflector_1 = directive_lifecycle_reflector_1_1;
            },
            function (interfaces_3_1) {
                interfaces_3 = interfaces_3_1;
            },
            function (reflection_2_1) {
                reflection_2 = reflection_2_1;
            },
            function (platform_directives_and_pipes_1_1) {
                platform_directives_and_pipes_1 = platform_directives_and_pipes_1_1;
            },
            function (util_8_1) {
                util_8 = util_8_1;
            },
            function (url_resolver_3_1) {
                url_resolver_3 = url_resolver_3_1;
            }],
        execute: function() {
            RuntimeMetadataResolver = (function () {
                function RuntimeMetadataResolver(_directiveResolver, _pipeResolver, _viewResolver, _platformDirectives, _platformPipes) {
                    this._directiveResolver = _directiveResolver;
                    this._pipeResolver = _pipeResolver;
                    this._viewResolver = _viewResolver;
                    this._platformDirectives = _platformDirectives;
                    this._platformPipes = _platformPipes;
                    this._directiveCache = new Map();
                    this._pipeCache = new Map();
                }
                RuntimeMetadataResolver.prototype.getDirectiveMetadata = function (directiveType) {
                    var meta = this._directiveCache.get(directiveType);
                    if (lang_72.isBlank(meta)) {
                        var dirMeta = this._directiveResolver.resolve(directiveType);
                        var moduleUrl = null;
                        var templateMeta = null;
                        var changeDetectionStrategy = null;
                        if (dirMeta instanceof md.ComponentMetadata) {
                            var cmpMeta = dirMeta;
                            moduleUrl = calcModuleUrl(directiveType, cmpMeta);
                            var viewMeta = this._viewResolver.resolve(directiveType);
                            templateMeta = new cpl.CompileTemplateMetadata({
                                encapsulation: viewMeta.encapsulation,
                                template: viewMeta.template,
                                templateUrl: viewMeta.templateUrl,
                                styles: viewMeta.styles,
                                styleUrls: viewMeta.styleUrls
                            });
                            changeDetectionStrategy = cmpMeta.changeDetection;
                        }
                        meta = cpl.CompileDirectiveMetadata.create({
                            selector: dirMeta.selector,
                            exportAs: dirMeta.exportAs,
                            isComponent: lang_72.isPresent(templateMeta),
                            dynamicLoadable: true,
                            type: new cpl.CompileTypeMetadata({ name: lang_72.stringify(directiveType), moduleUrl: moduleUrl, runtime: directiveType }),
                            template: templateMeta,
                            changeDetection: changeDetectionStrategy,
                            inputs: dirMeta.inputs,
                            outputs: dirMeta.outputs,
                            host: dirMeta.host,
                            lifecycleHooks: interfaces_3.LIFECYCLE_HOOKS_VALUES.filter(function (hook) { return directive_lifecycle_reflector_1.hasLifecycleHook(hook, directiveType); })
                        });
                        this._directiveCache.set(directiveType, meta);
                    }
                    return meta;
                };
                RuntimeMetadataResolver.prototype.getPipeMetadata = function (pipeType) {
                    var meta = this._pipeCache.get(pipeType);
                    if (lang_72.isBlank(meta)) {
                        var pipeMeta = this._pipeResolver.resolve(pipeType);
                        var moduleUrl = reflection_2.reflector.importUri(pipeType);
                        meta = new cpl.CompilePipeMetadata({
                            type: new cpl.CompileTypeMetadata({ name: lang_72.stringify(pipeType), moduleUrl: moduleUrl, runtime: pipeType }),
                            name: pipeMeta.name,
                            pure: pipeMeta.pure
                        });
                        this._pipeCache.set(pipeType, meta);
                    }
                    return meta;
                };
                RuntimeMetadataResolver.prototype.getViewDirectivesMetadata = function (component) {
                    var _this = this;
                    var view = this._viewResolver.resolve(component);
                    var directives = flattenDirectives(view, this._platformDirectives);
                    for (var i = 0; i < directives.length; i++) {
                        if (!isValidType(directives[i])) {
                            throw new exceptions_16.BaseException("Unexpected directive value '" + lang_72.stringify(directives[i]) + "' on the View of component '" + lang_72.stringify(component) + "'");
                        }
                    }
                    return directives.map(function (type) { return _this.getDirectiveMetadata(type); });
                };
                RuntimeMetadataResolver.prototype.getViewPipesMetadata = function (component) {
                    var _this = this;
                    var view = this._viewResolver.resolve(component);
                    var pipes = flattenPipes(view, this._platformPipes);
                    for (var i = 0; i < pipes.length; i++) {
                        if (!isValidType(pipes[i])) {
                            throw new exceptions_16.BaseException("Unexpected piped value '" + lang_72.stringify(pipes[i]) + "' on the View of component '" + lang_72.stringify(component) + "'");
                        }
                    }
                    return pipes.map(function (type) { return _this.getPipeMetadata(type); });
                };
                RuntimeMetadataResolver = __decorate([
                    di_14.Injectable(),
                    __param(3, di_14.Optional()),
                    __param(3, di_14.Inject(platform_directives_and_pipes_1.PLATFORM_DIRECTIVES)),
                    __param(4, di_14.Optional()),
                    __param(4, di_14.Inject(platform_directives_and_pipes_1.PLATFORM_PIPES)), 
                    __metadata('design:paramtypes', [directive_resolver_1.DirectiveResolver, pipe_resolver_1.PipeResolver, view_resolver_1.ViewResolver, Array, Array])
                ], RuntimeMetadataResolver);
                return RuntimeMetadataResolver;
            }());
            exports_134("RuntimeMetadataResolver", RuntimeMetadataResolver);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/compiler/template_compiler", ['angular2/src/facade/lang', 'angular2/src/facade/exceptions', 'angular2/src/facade/collection', 'angular2/src/facade/async', "test/node_modules/angular2/ts/src/compiler/directive_metadata", "test/node_modules/angular2/ts/src/compiler/template_ast", 'angular2/src/core/di', "test/node_modules/angular2/ts/src/compiler/source_module", "test/node_modules/angular2/ts/src/compiler/change_detector_compiler", "test/node_modules/angular2/ts/src/compiler/style_compiler", "test/node_modules/angular2/ts/src/compiler/view_compiler", "test/node_modules/angular2/ts/src/compiler/proto_view_compiler", "test/node_modules/angular2/ts/src/compiler/template_parser", "test/node_modules/angular2/ts/src/compiler/template_normalizer", "test/node_modules/angular2/ts/src/compiler/runtime_metadata", 'angular2/src/core/linker/view', 'angular2/src/core/change_detection/change_detection', 'angular2/src/core/linker/resolved_metadata_cache', "test/node_modules/angular2/ts/src/compiler/util"], function(exports_135, context_135) {
    "use strict";
    var __moduleName = context_135 && context_135.id;
    var lang_73, exceptions_17, collection_30, async_12, directive_metadata_2, template_ast_5, di_15, source_module_5, change_detector_compiler_1, style_compiler_1, view_compiler_1, proto_view_compiler_2, template_parser_1, template_normalizer_1, runtime_metadata_1, view_7, change_detection_5, resolved_metadata_cache_1, util_9;
    var METADATA_CACHE_MODULE_REF, TemplateCompiler, NormalizedComponentWithViewDirectives, CompiledTemplate, DirectiveCollector, PipeVisitor;
    function assertComponent(meta) {
        if (!meta.isComponent) {
            throw new exceptions_17.BaseException("Could not compile '" + meta.type.name + "' because it is not a component.");
        }
    }
    function templateModuleUrl(moduleUrl) {
        var urlWithoutSuffix = moduleUrl.substring(0, moduleUrl.length - util_9.MODULE_SUFFIX.length);
        return urlWithoutSuffix + ".template" + util_9.MODULE_SUFFIX;
    }
    function codeGenHostViewFactoryName(type) {
        return "hostViewFactory_" + type.name;
    }
    function codeGenComponentViewFactoryName(nestedCompType) {
        return source_module_5.moduleRef(templateModuleUrl(nestedCompType.type.moduleUrl)) + "viewFactory_" + nestedCompType.type.name + "0";
    }
    function mergeStringMaps(maps) {
        var result = {};
        maps.forEach(function (map) { collection_30.StringMapWrapper.forEach(map, function (value, key) { result[key] = value; }); });
        return result;
    }
    function removeDuplicates(items) {
        var res = [];
        items.forEach(function (item) {
            var hasMatch = res.filter(function (r) { return r.type.name == item.type.name && r.type.moduleUrl == item.type.moduleUrl &&
                r.type.runtime == item.type.runtime; })
                .length > 0;
            if (!hasMatch) {
                res.push(item);
            }
        });
        return res;
    }
    function filterPipes(template, allPipes) {
        var visitor = new PipeVisitor();
        template_ast_5.templateVisitAll(visitor, template);
        return allPipes.filter(function (pipeMeta) { return collection_30.SetWrapper.has(visitor.collector.pipes, pipeMeta.name); });
    }
    return {
        setters:[
            function (lang_73_1) {
                lang_73 = lang_73_1;
            },
            function (exceptions_17_1) {
                exceptions_17 = exceptions_17_1;
            },
            function (collection_30_1) {
                collection_30 = collection_30_1;
            },
            function (async_12_1) {
                async_12 = async_12_1;
            },
            function (directive_metadata_2_1) {
                directive_metadata_2 = directive_metadata_2_1;
            },
            function (template_ast_5_1) {
                template_ast_5 = template_ast_5_1;
            },
            function (di_15_1) {
                di_15 = di_15_1;
            },
            function (source_module_5_1) {
                source_module_5 = source_module_5_1;
            },
            function (change_detector_compiler_1_1) {
                change_detector_compiler_1 = change_detector_compiler_1_1;
            },
            function (style_compiler_1_1) {
                style_compiler_1 = style_compiler_1_1;
            },
            function (view_compiler_1_1) {
                view_compiler_1 = view_compiler_1_1;
            },
            function (proto_view_compiler_2_1) {
                proto_view_compiler_2 = proto_view_compiler_2_1;
            },
            function (template_parser_1_1) {
                template_parser_1 = template_parser_1_1;
            },
            function (template_normalizer_1_1) {
                template_normalizer_1 = template_normalizer_1_1;
            },
            function (runtime_metadata_1_1) {
                runtime_metadata_1 = runtime_metadata_1_1;
            },
            function (view_7_1) {
                view_7 = view_7_1;
            },
            function (change_detection_5_1) {
                change_detection_5 = change_detection_5_1;
            },
            function (resolved_metadata_cache_1_1) {
                resolved_metadata_cache_1 = resolved_metadata_cache_1_1;
            },
            function (util_9_1) {
                util_9 = util_9_1;
            }],
        execute: function() {
            exports_135("METADATA_CACHE_MODULE_REF", METADATA_CACHE_MODULE_REF = source_module_5.moduleRef('package:angular2/src/core/linker/resolved_metadata_cache' + util_9.MODULE_SUFFIX));
            /**
             * An internal module of the Angular compiler that begins with component types,
             * extracts templates, and eventually produces a compiled version of the component
             * ready for linking into an application.
             */
            TemplateCompiler = (function () {
                function TemplateCompiler(_runtimeMetadataResolver, _templateNormalizer, _templateParser, _styleCompiler, _cdCompiler, _protoViewCompiler, _viewCompiler, _resolvedMetadataCache, _genConfig) {
                    this._runtimeMetadataResolver = _runtimeMetadataResolver;
                    this._templateNormalizer = _templateNormalizer;
                    this._templateParser = _templateParser;
                    this._styleCompiler = _styleCompiler;
                    this._cdCompiler = _cdCompiler;
                    this._protoViewCompiler = _protoViewCompiler;
                    this._viewCompiler = _viewCompiler;
                    this._resolvedMetadataCache = _resolvedMetadataCache;
                    this._genConfig = _genConfig;
                    this._hostCacheKeys = new Map();
                    this._compiledTemplateCache = new Map();
                    this._compiledTemplateDone = new Map();
                }
                TemplateCompiler.prototype.normalizeDirectiveMetadata = function (directive) {
                    if (!directive.isComponent) {
                        // For non components there is nothing to be normalized yet.
                        return async_12.PromiseWrapper.resolve(directive);
                    }
                    return this._templateNormalizer.normalizeTemplate(directive.type, directive.template)
                        .then(function (normalizedTemplate) { return new directive_metadata_2.CompileDirectiveMetadata({
                        type: directive.type,
                        isComponent: directive.isComponent,
                        dynamicLoadable: directive.dynamicLoadable,
                        selector: directive.selector,
                        exportAs: directive.exportAs,
                        changeDetection: directive.changeDetection,
                        inputs: directive.inputs,
                        outputs: directive.outputs,
                        hostListeners: directive.hostListeners,
                        hostProperties: directive.hostProperties,
                        hostAttributes: directive.hostAttributes,
                        lifecycleHooks: directive.lifecycleHooks,
                        providers: directive.providers,
                        template: normalizedTemplate
                    }); });
                };
                TemplateCompiler.prototype.compileHostComponentRuntime = function (type) {
                    var compMeta = this._runtimeMetadataResolver.getDirectiveMetadata(type);
                    var hostCacheKey = this._hostCacheKeys.get(type);
                    if (lang_73.isBlank(hostCacheKey)) {
                        hostCacheKey = new Object();
                        this._hostCacheKeys.set(type, hostCacheKey);
                        assertComponent(compMeta);
                        var hostMeta = directive_metadata_2.createHostComponentMeta(compMeta.type, compMeta.selector);
                        this._compileComponentRuntime(hostCacheKey, hostMeta, [compMeta], [], []);
                    }
                    return this._compiledTemplateDone.get(hostCacheKey)
                        .then(function (compiledTemplate) {
                        return new view_7.HostViewFactory(compMeta.selector, compiledTemplate.viewFactory);
                    });
                };
                TemplateCompiler.prototype.clearCache = function () {
                    this._styleCompiler.clearCache();
                    this._compiledTemplateCache.clear();
                    this._compiledTemplateDone.clear();
                    this._hostCacheKeys.clear();
                };
                TemplateCompiler.prototype.compileTemplatesCodeGen = function (components) {
                    var _this = this;
                    if (components.length === 0) {
                        throw new exceptions_17.BaseException('No components given');
                    }
                    var declarations = [];
                    components.forEach(function (componentWithDirs) {
                        var compMeta = componentWithDirs.component;
                        assertComponent(compMeta);
                        _this._compileComponentCodeGen(compMeta, componentWithDirs.directives, componentWithDirs.pipes, declarations);
                        if (compMeta.dynamicLoadable) {
                            var hostMeta = directive_metadata_2.createHostComponentMeta(compMeta.type, compMeta.selector);
                            var viewFactoryExpression = _this._compileComponentCodeGen(hostMeta, [compMeta], [], declarations);
                            var constructionKeyword = lang_73.IS_DART ? 'const' : 'new';
                            var compiledTemplateExpr = constructionKeyword + " " + proto_view_compiler_2.APP_VIEW_MODULE_REF + "HostViewFactory('" + compMeta.selector + "'," + viewFactoryExpression + ")";
                            var varName = codeGenHostViewFactoryName(compMeta.type);
                            declarations.push("" + util_9.codeGenExportVariable(varName) + compiledTemplateExpr + ";");
                        }
                    });
                    var moduleUrl = components[0].component.type.moduleUrl;
                    return new source_module_5.SourceModule("" + templateModuleUrl(moduleUrl), declarations.join('\n'));
                };
                TemplateCompiler.prototype.compileStylesheetCodeGen = function (stylesheetUrl, cssText) {
                    return this._styleCompiler.compileStylesheetCodeGen(stylesheetUrl, cssText);
                };
                TemplateCompiler.prototype._compileComponentRuntime = function (cacheKey, compMeta, viewDirectives, pipes, compilingComponentsPath) {
                    var _this = this;
                    var uniqViewDirectives = removeDuplicates(viewDirectives);
                    var uniqViewPipes = removeDuplicates(pipes);
                    var compiledTemplate = this._compiledTemplateCache.get(cacheKey);
                    var done = this._compiledTemplateDone.get(cacheKey);
                    if (lang_73.isBlank(compiledTemplate)) {
                        compiledTemplate = new CompiledTemplate();
                        this._compiledTemplateCache.set(cacheKey, compiledTemplate);
                        done = async_12.PromiseWrapper
                            .all([this._styleCompiler.compileComponentRuntime(compMeta.template)].concat(uniqViewDirectives.map(function (dirMeta) { return _this.normalizeDirectiveMetadata(dirMeta); })))
                            .then(function (stylesAndNormalizedViewDirMetas) {
                            var normalizedViewDirMetas = stylesAndNormalizedViewDirMetas.slice(1);
                            var styles = stylesAndNormalizedViewDirMetas[0];
                            var parsedTemplate = _this._templateParser.parse(compMeta.template.template, normalizedViewDirMetas, uniqViewPipes, compMeta.type.name);
                            var childPromises = [];
                            var usedDirectives = DirectiveCollector.findUsedDirectives(parsedTemplate);
                            usedDirectives.components.forEach(function (component) { return _this._compileNestedComponentRuntime(component, compilingComponentsPath, childPromises); });
                            return async_12.PromiseWrapper.all(childPromises)
                                .then(function (_) {
                                var filteredPipes = filterPipes(parsedTemplate, uniqViewPipes);
                                compiledTemplate.init(_this._createViewFactoryRuntime(compMeta, parsedTemplate, usedDirectives.directives, styles, filteredPipes));
                                return compiledTemplate;
                            });
                        });
                        this._compiledTemplateDone.set(cacheKey, done);
                    }
                    return compiledTemplate;
                };
                TemplateCompiler.prototype._compileNestedComponentRuntime = function (childComponentDir, parentCompilingComponentsPath, childPromises) {
                    var compilingComponentsPath = collection_30.ListWrapper.clone(parentCompilingComponentsPath);
                    var childCacheKey = childComponentDir.type.runtime;
                    var childViewDirectives = this._runtimeMetadataResolver.getViewDirectivesMetadata(childComponentDir.type.runtime);
                    var childViewPipes = this._runtimeMetadataResolver.getViewPipesMetadata(childComponentDir.type.runtime);
                    var childIsRecursive = collection_30.ListWrapper.contains(compilingComponentsPath, childCacheKey);
                    compilingComponentsPath.push(childCacheKey);
                    this._compileComponentRuntime(childCacheKey, childComponentDir, childViewDirectives, childViewPipes, compilingComponentsPath);
                    if (!childIsRecursive) {
                        // Only wait for a child if it is not a cycle
                        childPromises.push(this._compiledTemplateDone.get(childCacheKey));
                    }
                };
                TemplateCompiler.prototype._createViewFactoryRuntime = function (compMeta, parsedTemplate, directives, styles, pipes) {
                    var _this = this;
                    if (lang_73.IS_DART || !this._genConfig.useJit) {
                        var changeDetectorFactories = this._cdCompiler.compileComponentRuntime(compMeta.type, compMeta.changeDetection, parsedTemplate);
                        var protoViews = this._protoViewCompiler.compileProtoViewRuntime(this._resolvedMetadataCache, compMeta, parsedTemplate, pipes);
                        return this._viewCompiler.compileComponentRuntime(compMeta, parsedTemplate, styles, protoViews.protoViews, changeDetectorFactories, function (compMeta) { return _this._getNestedComponentViewFactory(compMeta); });
                    }
                    else {
                        var declarations = [];
                        var viewFactoryExpr = this._createViewFactoryCodeGen('resolvedMetadataCache', compMeta, new source_module_5.SourceExpression([], 'styles'), parsedTemplate, pipes, declarations);
                        var vars = { 'exports': {}, 'styles': styles, 'resolvedMetadataCache': this._resolvedMetadataCache };
                        directives.forEach(function (dirMeta) {
                            vars[dirMeta.type.name] = dirMeta.type.runtime;
                            if (dirMeta.isComponent && dirMeta.type.runtime !== compMeta.type.runtime) {
                                vars[("viewFactory_" + dirMeta.type.name + "0")] = _this._getNestedComponentViewFactory(dirMeta);
                            }
                        });
                        pipes.forEach(function (pipeMeta) { return vars[pipeMeta.type.name] = pipeMeta.type.runtime; });
                        var declarationsWithoutImports = source_module_5.SourceModule.getSourceWithoutImports(declarations.join('\n'));
                        return lang_73.evalExpression("viewFactory_" + compMeta.type.name, viewFactoryExpr, declarationsWithoutImports, mergeStringMaps([vars, change_detector_compiler_1.CHANGE_DETECTION_JIT_IMPORTS, proto_view_compiler_2.PROTO_VIEW_JIT_IMPORTS, view_compiler_1.VIEW_JIT_IMPORTS]));
                    }
                };
                TemplateCompiler.prototype._getNestedComponentViewFactory = function (compMeta) {
                    return this._compiledTemplateCache.get(compMeta.type.runtime).viewFactory;
                };
                TemplateCompiler.prototype._compileComponentCodeGen = function (compMeta, directives, pipes, targetDeclarations) {
                    var uniqueDirectives = removeDuplicates(directives);
                    var uniqPipes = removeDuplicates(pipes);
                    var styleExpr = this._styleCompiler.compileComponentCodeGen(compMeta.template);
                    var parsedTemplate = this._templateParser.parse(compMeta.template.template, uniqueDirectives, uniqPipes, compMeta.type.name);
                    var filteredPipes = filterPipes(parsedTemplate, uniqPipes);
                    return this._createViewFactoryCodeGen(METADATA_CACHE_MODULE_REF + "CODEGEN_RESOLVED_METADATA_CACHE", compMeta, styleExpr, parsedTemplate, filteredPipes, targetDeclarations);
                };
                TemplateCompiler.prototype._createViewFactoryCodeGen = function (resolvedMetadataCacheExpr, compMeta, styleExpr, parsedTemplate, pipes, targetDeclarations) {
                    var changeDetectorsExprs = this._cdCompiler.compileComponentCodeGen(compMeta.type, compMeta.changeDetection, parsedTemplate);
                    var protoViewExprs = this._protoViewCompiler.compileProtoViewCodeGen(new util_9.Expression(resolvedMetadataCacheExpr), compMeta, parsedTemplate, pipes);
                    var viewFactoryExpr = this._viewCompiler.compileComponentCodeGen(compMeta, parsedTemplate, styleExpr, protoViewExprs.protoViews, changeDetectorsExprs, codeGenComponentViewFactoryName);
                    util_9.addAll(changeDetectorsExprs.declarations, targetDeclarations);
                    util_9.addAll(protoViewExprs.declarations, targetDeclarations);
                    util_9.addAll(viewFactoryExpr.declarations, targetDeclarations);
                    return viewFactoryExpr.expression;
                };
                TemplateCompiler = __decorate([
                    di_15.Injectable(), 
                    __metadata('design:paramtypes', [runtime_metadata_1.RuntimeMetadataResolver, template_normalizer_1.TemplateNormalizer, template_parser_1.TemplateParser, style_compiler_1.StyleCompiler, change_detector_compiler_1.ChangeDetectionCompiler, proto_view_compiler_2.ProtoViewCompiler, view_compiler_1.ViewCompiler, resolved_metadata_cache_1.ResolvedMetadataCache, change_detection_5.ChangeDetectorGenConfig])
                ], TemplateCompiler);
                return TemplateCompiler;
            }());
            exports_135("TemplateCompiler", TemplateCompiler);
            NormalizedComponentWithViewDirectives = (function () {
                function NormalizedComponentWithViewDirectives(component, directives, pipes) {
                    this.component = component;
                    this.directives = directives;
                    this.pipes = pipes;
                }
                return NormalizedComponentWithViewDirectives;
            }());
            exports_135("NormalizedComponentWithViewDirectives", NormalizedComponentWithViewDirectives);
            CompiledTemplate = (function () {
                function CompiledTemplate() {
                    this.viewFactory = null;
                }
                CompiledTemplate.prototype.init = function (viewFactory) { this.viewFactory = viewFactory; };
                return CompiledTemplate;
            }());
            DirectiveCollector = (function () {
                function DirectiveCollector() {
                    this.directives = [];
                    this.components = [];
                }
                DirectiveCollector.findUsedDirectives = function (parsedTemplate) {
                    var collector = new DirectiveCollector();
                    template_ast_5.templateVisitAll(collector, parsedTemplate);
                    return collector;
                };
                DirectiveCollector.prototype.visitBoundText = function (ast, context) { return null; };
                DirectiveCollector.prototype.visitText = function (ast, context) { return null; };
                DirectiveCollector.prototype.visitNgContent = function (ast, context) { return null; };
                DirectiveCollector.prototype.visitElement = function (ast, context) {
                    template_ast_5.templateVisitAll(this, ast.directives);
                    template_ast_5.templateVisitAll(this, ast.children);
                    return null;
                };
                DirectiveCollector.prototype.visitEmbeddedTemplate = function (ast, context) {
                    template_ast_5.templateVisitAll(this, ast.directives);
                    template_ast_5.templateVisitAll(this, ast.children);
                    return null;
                };
                DirectiveCollector.prototype.visitVariable = function (ast, ctx) { return null; };
                DirectiveCollector.prototype.visitAttr = function (ast, attrNameAndValues) { return null; };
                DirectiveCollector.prototype.visitDirective = function (ast, ctx) {
                    if (ast.directive.isComponent) {
                        this.components.push(ast.directive);
                    }
                    this.directives.push(ast.directive);
                    return null;
                };
                DirectiveCollector.prototype.visitEvent = function (ast, eventTargetAndNames) {
                    return null;
                };
                DirectiveCollector.prototype.visitDirectiveProperty = function (ast, context) { return null; };
                DirectiveCollector.prototype.visitElementProperty = function (ast, context) { return null; };
                return DirectiveCollector;
            }());
            PipeVisitor = (function () {
                function PipeVisitor() {
                    this.collector = new template_parser_1.PipeCollector();
                }
                PipeVisitor.prototype.visitBoundText = function (ast, context) {
                    ast.value.visit(this.collector);
                    return null;
                };
                PipeVisitor.prototype.visitText = function (ast, context) { return null; };
                PipeVisitor.prototype.visitNgContent = function (ast, context) { return null; };
                PipeVisitor.prototype.visitElement = function (ast, context) {
                    template_ast_5.templateVisitAll(this, ast.inputs);
                    template_ast_5.templateVisitAll(this, ast.outputs);
                    template_ast_5.templateVisitAll(this, ast.directives);
                    template_ast_5.templateVisitAll(this, ast.children);
                    return null;
                };
                PipeVisitor.prototype.visitEmbeddedTemplate = function (ast, context) {
                    template_ast_5.templateVisitAll(this, ast.outputs);
                    template_ast_5.templateVisitAll(this, ast.directives);
                    template_ast_5.templateVisitAll(this, ast.children);
                    return null;
                };
                PipeVisitor.prototype.visitVariable = function (ast, ctx) { return null; };
                PipeVisitor.prototype.visitAttr = function (ast, attrNameAndValues) { return null; };
                PipeVisitor.prototype.visitDirective = function (ast, ctx) {
                    template_ast_5.templateVisitAll(this, ast.inputs);
                    template_ast_5.templateVisitAll(this, ast.hostEvents);
                    template_ast_5.templateVisitAll(this, ast.hostProperties);
                    return null;
                };
                PipeVisitor.prototype.visitEvent = function (ast, eventTargetAndNames) {
                    ast.handler.visit(this.collector);
                    return null;
                };
                PipeVisitor.prototype.visitDirectiveProperty = function (ast, context) {
                    ast.value.visit(this.collector);
                    return null;
                };
                PipeVisitor.prototype.visitElementProperty = function (ast, context) {
                    ast.value.visit(this.collector);
                    return null;
                };
                return PipeVisitor;
            }());
        }
    }
});
System.register("test/node_modules/angular2/ts/src/compiler/runtime_compiler", ['angular2/src/core/linker/compiler', 'angular2/src/core/linker/view_ref', "test/node_modules/angular2/ts/src/compiler/template_compiler", 'angular2/src/core/di'], function(exports_136, context_136) {
    "use strict";
    var __moduleName = context_136 && context_136.id;
    var compiler_1, view_ref_1, template_compiler_1, di_16;
    var RuntimeCompiler, RuntimeCompiler_;
    return {
        setters:[
            function (compiler_1_1) {
                compiler_1 = compiler_1_1;
            },
            function (view_ref_1_1) {
                view_ref_1 = view_ref_1_1;
            },
            function (template_compiler_1_1) {
                template_compiler_1 = template_compiler_1_1;
            },
            function (di_16_1) {
                di_16 = di_16_1;
            }],
        execute: function() {
            RuntimeCompiler = (function (_super) {
                __extends(RuntimeCompiler, _super);
                function RuntimeCompiler() {
                    _super.apply(this, arguments);
                }
                return RuntimeCompiler;
            }(compiler_1.Compiler));
            exports_136("RuntimeCompiler", RuntimeCompiler);
            RuntimeCompiler_ = (function (_super) {
                __extends(RuntimeCompiler_, _super);
                function RuntimeCompiler_(_templateCompiler) {
                    _super.call(this);
                    this._templateCompiler = _templateCompiler;
                }
                RuntimeCompiler_.prototype.compileInHost = function (componentType) {
                    return this._templateCompiler.compileHostComponentRuntime(componentType)
                        .then(function (hostViewFactory) { return new view_ref_1.HostViewFactoryRef_(hostViewFactory); });
                };
                RuntimeCompiler_.prototype.clearCache = function () {
                    _super.prototype.clearCache.call(this);
                    this._templateCompiler.clearCache();
                };
                RuntimeCompiler_ = __decorate([
                    di_16.Injectable(), 
                    __metadata('design:paramtypes', [template_compiler_1.TemplateCompiler])
                ], RuntimeCompiler_);
                return RuntimeCompiler_;
            }(compiler_1.Compiler_));
            exports_136("RuntimeCompiler_", RuntimeCompiler_);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/compiler/compiler", ["test/node_modules/angular2/ts/src/compiler/runtime_compiler", "test/node_modules/angular2/ts/src/compiler/template_compiler", "test/node_modules/angular2/ts/src/compiler/directive_metadata", "test/node_modules/angular2/ts/src/compiler/source_module", 'angular2/src/core/platform_directives_and_pipes', 'angular2/src/compiler/template_ast', 'angular2/src/compiler/template_parser', 'angular2/src/facade/lang', 'angular2/src/core/di', 'angular2/src/compiler/html_parser', 'angular2/src/compiler/template_normalizer', 'angular2/src/compiler/runtime_metadata', 'angular2/src/compiler/change_detector_compiler', 'angular2/src/compiler/style_compiler', 'angular2/src/compiler/view_compiler', 'angular2/src/compiler/proto_view_compiler', 'angular2/src/compiler/template_compiler', 'angular2/src/core/change_detection/change_detection', 'angular2/src/core/linker/compiler', 'angular2/src/compiler/runtime_compiler', 'angular2/src/compiler/schema/element_schema_registry', 'angular2/src/compiler/schema/dom_element_schema_registry', 'angular2/src/compiler/url_resolver'], function(exports_137, context_137) {
    "use strict";
    var __moduleName = context_137 && context_137.id;
    var runtime_compiler_1, lang_74, di_17, template_parser_2, html_parser_3, template_normalizer_2, runtime_metadata_2, change_detector_compiler_2, style_compiler_2, view_compiler_2, proto_view_compiler_3, template_compiler_2, change_detection_6, compiler_2, runtime_compiler_2, element_schema_registry_2, dom_element_schema_registry_1, url_resolver_4, change_detection_7;
    var COMPILER_PROVIDERS;
    function _createChangeDetectorGenConfig() {
        return new change_detection_6.ChangeDetectorGenConfig(lang_74.assertionsEnabled(), false, true);
    }
    var exportedNames_2 = {
        'COMPILER_PROVIDERS': true,
        'TemplateCompiler': true,
        'CompileDirectiveMetadata': true,
        'CompileTypeMetadata': true,
        'CompileTemplateMetadata': true,
        'SourceModule': true,
        'SourceWithImports': true,
        'PLATFORM_DIRECTIVES': true,
        'PLATFORM_PIPES': true,
        'TEMPLATE_TRANSFORMS': true
    };
    function exportStar_3(m) {
        var exports = {};
        for(var n in m) {
            if (n !== "default"&& !exportedNames_2.hasOwnProperty(n)) exports[n] = m[n];
        }
        exports_137(exports);
    }
    return {
        setters:[
            function (runtime_compiler_1_1) {
                runtime_compiler_1 = runtime_compiler_1_1;
            },
            function (template_compiler_3_1) {
                exports_137({
                    "TemplateCompiler": template_compiler_3_1["TemplateCompiler"]
                });
            },
            function (directive_metadata_3_1) {
                exports_137({
                    "CompileDirectiveMetadata": directive_metadata_3_1["CompileDirectiveMetadata"],
                    "CompileTypeMetadata": directive_metadata_3_1["CompileTypeMetadata"],
                    "CompileTemplateMetadata": directive_metadata_3_1["CompileTemplateMetadata"]
                });
            },
            function (source_module_6_1) {
                exports_137({
                    "SourceModule": source_module_6_1["SourceModule"],
                    "SourceWithImports": source_module_6_1["SourceWithImports"]
                });
            },
            function (platform_directives_and_pipes_2_1) {
                exports_137({
                    "PLATFORM_DIRECTIVES": platform_directives_and_pipes_2_1["PLATFORM_DIRECTIVES"],
                    "PLATFORM_PIPES": platform_directives_and_pipes_2_1["PLATFORM_PIPES"]
                });
            },
            function (template_ast_6_1) {
                exportStar_3(template_ast_6_1);
            },
            function (template_parser_3_1) {
                exports_137({
                    "TEMPLATE_TRANSFORMS": template_parser_3_1["TEMPLATE_TRANSFORMS"]
                });
                template_parser_2 = template_parser_3_1;
            },
            function (lang_74_1) {
                lang_74 = lang_74_1;
            },
            function (di_17_1) {
                di_17 = di_17_1;
            },
            function (html_parser_3_1) {
                html_parser_3 = html_parser_3_1;
            },
            function (template_normalizer_2_1) {
                template_normalizer_2 = template_normalizer_2_1;
            },
            function (runtime_metadata_2_1) {
                runtime_metadata_2 = runtime_metadata_2_1;
            },
            function (change_detector_compiler_2_1) {
                change_detector_compiler_2 = change_detector_compiler_2_1;
            },
            function (style_compiler_2_1) {
                style_compiler_2 = style_compiler_2_1;
            },
            function (view_compiler_2_1) {
                view_compiler_2 = view_compiler_2_1;
            },
            function (proto_view_compiler_3_1) {
                proto_view_compiler_3 = proto_view_compiler_3_1;
            },
            function (template_compiler_2_1) {
                template_compiler_2 = template_compiler_2_1;
            },
            function (change_detection_6_1) {
                change_detection_6 = change_detection_6_1;
                change_detection_7 = change_detection_6_1;
            },
            function (compiler_2_1) {
                compiler_2 = compiler_2_1;
            },
            function (runtime_compiler_2_1) {
                runtime_compiler_2 = runtime_compiler_2_1;
            },
            function (element_schema_registry_2_1) {
                element_schema_registry_2 = element_schema_registry_2_1;
            },
            function (dom_element_schema_registry_1_1) {
                dom_element_schema_registry_1 = dom_element_schema_registry_1_1;
            },
            function (url_resolver_4_1) {
                url_resolver_4 = url_resolver_4_1;
            }],
        execute: function() {
            /**
             * A set of providers that provide `RuntimeCompiler` and its dependencies to use for
             * template compilation.
             */
            exports_137("COMPILER_PROVIDERS", COMPILER_PROVIDERS = lang_74.CONST_EXPR([
                change_detection_7.Lexer,
                change_detection_7.Parser,
                html_parser_3.HtmlParser,
                template_parser_2.TemplateParser,
                template_normalizer_2.TemplateNormalizer,
                runtime_metadata_2.RuntimeMetadataResolver,
                url_resolver_4.DEFAULT_PACKAGE_URL_PROVIDER,
                style_compiler_2.StyleCompiler,
                proto_view_compiler_3.ProtoViewCompiler,
                view_compiler_2.ViewCompiler,
                change_detector_compiler_2.ChangeDetectionCompiler,
                new di_17.Provider(change_detection_6.ChangeDetectorGenConfig, { useFactory: _createChangeDetectorGenConfig, deps: [] }),
                template_compiler_2.TemplateCompiler,
                new di_17.Provider(runtime_compiler_2.RuntimeCompiler, { useClass: runtime_compiler_1.RuntimeCompiler_ }),
                new di_17.Provider(compiler_2.Compiler, { useExisting: runtime_compiler_2.RuntimeCompiler }),
                dom_element_schema_registry_1.DomElementSchemaRegistry,
                new di_17.Provider(element_schema_registry_2.ElementSchemaRegistry, { useExisting: dom_element_schema_registry_1.DomElementSchemaRegistry }),
                url_resolver_4.UrlResolver
            ]));
        }
    }
});
System.register("test/node_modules/angular2/ts/compiler", ["test/node_modules/angular2/ts/src/compiler/url_resolver", "test/node_modules/angular2/ts/src/compiler/xhr", "test/node_modules/angular2/ts/src/compiler/compiler"], function(exports_138, context_138) {
    "use strict";
    var __moduleName = context_138 && context_138.id;
    function exportStar_4(m) {
        var exports = {};
        for(var n in m) {
            if (n !== "default") exports[n] = m[n];
        }
        exports_138(exports);
    }
    return {
        setters:[
            function (url_resolver_5_1) {
                exportStar_4(url_resolver_5_1);
            },
            function (xhr_3_1) {
                exportStar_4(xhr_3_1);
            },
            function (compiler_3_1) {
                exportStar_4(compiler_3_1);
            }],
        execute: function() {
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/metadata/di", ['angular2/src/facade/lang', 'angular2/src/core/di', 'angular2/src/core/di/metadata'], function(exports_139, context_139) {
    "use strict";
    var __moduleName = context_139 && context_139.id;
    var lang_75, di_18, metadata_1;
    var AttributeMetadata, QueryMetadata, ContentChildrenMetadata, ContentChildMetadata, ViewQueryMetadata, ViewChildrenMetadata, ViewChildMetadata;
    return {
        setters:[
            function (lang_75_1) {
                lang_75 = lang_75_1;
            },
            function (di_18_1) {
                di_18 = di_18_1;
            },
            function (metadata_1_1) {
                metadata_1 = metadata_1_1;
            }],
        execute: function() {
            /**
             * Specifies that a constant attribute value should be injected.
             *
             * The directive can inject constant string literals of host element attributes.
             *
             * ### Example
             *
             * Suppose we have an `<input>` element and want to know its `type`.
             *
             * ```html
             * <input type="text">
             * ```
             *
             * A decorator can inject string literal `text` like so:
             *
             * {@example core/ts/metadata/metadata.ts region='attributeMetadata'}
             */
            AttributeMetadata = (function (_super) {
                __extends(AttributeMetadata, _super);
                function AttributeMetadata(attributeName) {
                    _super.call(this);
                    this.attributeName = attributeName;
                }
                Object.defineProperty(AttributeMetadata.prototype, "token", {
                    get: function () {
                        // Normally one would default a token to a type of an injected value but here
                        // the type of a variable is "string" and we can't use primitive type as a return value
                        // so we use instance of Attribute instead. This doesn't matter much in practice as arguments
                        // with @Attribute annotation are injected by ElementInjector that doesn't take tokens into
                        // account.
                        return this;
                    },
                    enumerable: true,
                    configurable: true
                });
                AttributeMetadata.prototype.toString = function () { return "@Attribute(" + lang_75.stringify(this.attributeName) + ")"; };
                AttributeMetadata = __decorate([
                    lang_75.CONST(), 
                    __metadata('design:paramtypes', [String])
                ], AttributeMetadata);
                return AttributeMetadata;
            }(metadata_1.DependencyMetadata));
            exports_139("AttributeMetadata", AttributeMetadata);
            /**
             * Declares an injectable parameter to be a live list of directives or variable
             * bindings from the content children of a directive.
             *
             * ### Example ([live demo](http://plnkr.co/edit/lY9m8HLy7z06vDoUaSN2?p=preview))
             *
             * Assume that `<tabs>` component would like to get a list its children `<pane>`
             * components as shown in this example:
             *
             * ```html
             * <tabs>
             *   <pane title="Overview">...</pane>
             *   <pane *ngFor="#o of objects" [title]="o.title">{{o.text}}</pane>
             * </tabs>
             * ```
             *
             * The preferred solution is to query for `Pane` directives using this decorator.
             *
             * ```javascript
             * @Component({
             *   selector: 'pane',
             *   inputs: ['title']
             * })
             * class Pane {
             *   title:string;
             * }
             *
             * @Component({
             *  selector: 'tabs',
             *  template: `
             *    <ul>
             *      <li *ngFor="#pane of panes">{{pane.title}}</li>
             *    </ul>
             *    <ng-content></ng-content>
             *  `
             * })
             * class Tabs {
             *   panes: QueryList<Pane>;
             *   constructor(@Query(Pane) panes:QueryList<Pane>) {
              *    this.panes = panes;
              *  }
             * }
             * ```
             *
             * A query can look for variable bindings by passing in a string with desired binding symbol.
             *
             * ### Example ([live demo](http://plnkr.co/edit/sT2j25cH1dURAyBRCKx1?p=preview))
             * ```html
             * <seeker>
             *   <div #findme>...</div>
             * </seeker>
             *
             * @Component({ selector: 'seeker' })
             * class Seeker {
             *   constructor(@Query('findme') elList: QueryList<ElementRef>) {...}
             * }
             * ```
             *
             * In this case the object that is injected depend on the type of the variable
             * binding. It can be an ElementRef, a directive or a component.
             *
             * Passing in a comma separated list of variable bindings will query for all of them.
             *
             * ```html
             * <seeker>
             *   <div #find-me>...</div>
             *   <div #find-me-too>...</div>
             * </seeker>
             *
             *  @Component({
             *   selector: 'seeker'
             * })
             * class Seeker {
             *   constructor(@Query('findMe, findMeToo') elList: QueryList<ElementRef>) {...}
             * }
             * ```
             *
             * Configure whether query looks for direct children or all descendants
             * of the querying element, by using the `descendants` parameter.
             * It is set to `false` by default.
             *
             * ### Example ([live demo](http://plnkr.co/edit/wtGeB977bv7qvA5FTYl9?p=preview))
             * ```html
             * <container #first>
             *   <item>a</item>
             *   <item>b</item>
             *   <container #second>
             *     <item>c</item>
             *   </container>
             * </container>
             * ```
             *
             * When querying for items, the first container will see only `a` and `b` by default,
             * but with `Query(TextDirective, {descendants: true})` it will see `c` too.
             *
             * The queried directives are kept in a depth-first pre-order with respect to their
             * positions in the DOM.
             *
             * Query does not look deep into any subcomponent views.
             *
             * Query is updated as part of the change-detection cycle. Since change detection
             * happens after construction of a directive, QueryList will always be empty when observed in the
             * constructor.
             *
             * The injected object is an unmodifiable live list.
             * See {@link QueryList} for more details.
             */
            QueryMetadata = (function (_super) {
                __extends(QueryMetadata, _super);
                function QueryMetadata(_selector, _a) {
                    var _b = _a === void 0 ? {} : _a, _c = _b.descendants, descendants = _c === void 0 ? false : _c, _d = _b.first, first = _d === void 0 ? false : _d;
                    _super.call(this);
                    this._selector = _selector;
                    this.descendants = descendants;
                    this.first = first;
                }
                Object.defineProperty(QueryMetadata.prototype, "isViewQuery", {
                    /**
                     * always `false` to differentiate it with {@link ViewQueryMetadata}.
                     */
                    get: function () { return false; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(QueryMetadata.prototype, "selector", {
                    /**
                     * what this is querying for.
                     */
                    get: function () { return di_18.resolveForwardRef(this._selector); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(QueryMetadata.prototype, "isVarBindingQuery", {
                    /**
                     * whether this is querying for a variable binding or a directive.
                     */
                    get: function () { return lang_75.isString(this.selector); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(QueryMetadata.prototype, "varBindings", {
                    /**
                     * returns a list of variable bindings this is querying for.
                     * Only applicable if this is a variable bindings query.
                     */
                    get: function () { return this.selector.split(','); },
                    enumerable: true,
                    configurable: true
                });
                QueryMetadata.prototype.toString = function () { return "@Query(" + lang_75.stringify(this.selector) + ")"; };
                QueryMetadata = __decorate([
                    lang_75.CONST(), 
                    __metadata('design:paramtypes', [Object, Object])
                ], QueryMetadata);
                return QueryMetadata;
            }(metadata_1.DependencyMetadata));
            exports_139("QueryMetadata", QueryMetadata);
            // TODO: add an example after ContentChildren and ViewChildren are in master
            /**
             * Configures a content query.
             *
             * Content queries are set before the `ngAfterContentInit` callback is called.
             *
             * ### Example
             *
             * ```
             * @Directive({
             *   selector: 'someDir'
             * })
             * class SomeDir {
             *   @ContentChildren(ChildDirective) contentChildren: QueryList<ChildDirective>;
             *
             *   ngAfterContentInit() {
             *     // contentChildren is set
             *   }
             * }
             * ```
             */
            ContentChildrenMetadata = (function (_super) {
                __extends(ContentChildrenMetadata, _super);
                function ContentChildrenMetadata(_selector, _a) {
                    var _b = (_a === void 0 ? {} : _a).descendants, descendants = _b === void 0 ? false : _b;
                    _super.call(this, _selector, { descendants: descendants });
                }
                ContentChildrenMetadata = __decorate([
                    lang_75.CONST(), 
                    __metadata('design:paramtypes', [Object, Object])
                ], ContentChildrenMetadata);
                return ContentChildrenMetadata;
            }(QueryMetadata));
            exports_139("ContentChildrenMetadata", ContentChildrenMetadata);
            // TODO: add an example after ContentChild and ViewChild are in master
            /**
             * Configures a content query.
             *
             * Content queries are set before the `ngAfterContentInit` callback is called.
             *
             * ### Example
             *
             * ```
             * @Directive({
             *   selector: 'someDir'
             * })
             * class SomeDir {
             *   @ContentChild(ChildDirective) contentChild;
             *
             *   ngAfterContentInit() {
             *     // contentChild is set
             *   }
             * }
             * ```
             */
            ContentChildMetadata = (function (_super) {
                __extends(ContentChildMetadata, _super);
                function ContentChildMetadata(_selector) {
                    _super.call(this, _selector, { descendants: true, first: true });
                }
                ContentChildMetadata = __decorate([
                    lang_75.CONST(), 
                    __metadata('design:paramtypes', [Object])
                ], ContentChildMetadata);
                return ContentChildMetadata;
            }(QueryMetadata));
            exports_139("ContentChildMetadata", ContentChildMetadata);
            /**
             * Similar to {@link QueryMetadata}, but querying the component view, instead of
             * the content children.
             *
             * ### Example ([live demo](http://plnkr.co/edit/eNsFHDf7YjyM6IzKxM1j?p=preview))
             *
             * ```javascript
             * @Component({
             *   ...,
             *   template: `
             *     <item> a </item>
             *     <item> b </item>
             *     <item> c </item>
             *   `
             * })
             * class MyComponent {
             *   shown: boolean;
             *
             *   constructor(private @Query(Item) items:QueryList<Item>) {
             *     items.changes.subscribe(() => console.log(items.length));
             *   }
             * }
             * ```
             *
             * Supports the same querying parameters as {@link QueryMetadata}, except
             * `descendants`. This always queries the whole view.
             *
             * As `shown` is flipped between true and false, items will contain zero of one
             * items.
             *
             * Specifies that a {@link QueryList} should be injected.
             *
             * The injected object is an iterable and observable live list.
             * See {@link QueryList} for more details.
             */
            ViewQueryMetadata = (function (_super) {
                __extends(ViewQueryMetadata, _super);
                function ViewQueryMetadata(_selector, _a) {
                    var _b = _a === void 0 ? {} : _a, _c = _b.descendants, descendants = _c === void 0 ? false : _c, _d = _b.first, first = _d === void 0 ? false : _d;
                    _super.call(this, _selector, { descendants: descendants, first: first });
                }
                Object.defineProperty(ViewQueryMetadata.prototype, "isViewQuery", {
                    /**
                     * always `true` to differentiate it with {@link QueryMetadata}.
                     */
                    get: function () { return true; },
                    enumerable: true,
                    configurable: true
                });
                ViewQueryMetadata.prototype.toString = function () { return "@ViewQuery(" + lang_75.stringify(this.selector) + ")"; };
                ViewQueryMetadata = __decorate([
                    lang_75.CONST(), 
                    __metadata('design:paramtypes', [Object, Object])
                ], ViewQueryMetadata);
                return ViewQueryMetadata;
            }(QueryMetadata));
            exports_139("ViewQueryMetadata", ViewQueryMetadata);
            /**
             * Configures a view query.
             *
             * View queries are set before the `ngAfterViewInit` callback is called.
             *
             * ### Example
             *
             * ```
             * @Component({
             *   selector: 'someDir',
             *   templateUrl: 'someTemplate',
             *   directives: [ItemDirective]
             * })
             * class SomeDir {
             *   @ViewChildren(ItemDirective) viewChildren: QueryList<ItemDirective>;
             *
             *   ngAfterViewInit() {
             *     // viewChildren is set
             *   }
             * }
             * ```
             */
            ViewChildrenMetadata = (function (_super) {
                __extends(ViewChildrenMetadata, _super);
                function ViewChildrenMetadata(_selector) {
                    _super.call(this, _selector, { descendants: true });
                }
                ViewChildrenMetadata = __decorate([
                    lang_75.CONST(), 
                    __metadata('design:paramtypes', [Object])
                ], ViewChildrenMetadata);
                return ViewChildrenMetadata;
            }(ViewQueryMetadata));
            exports_139("ViewChildrenMetadata", ViewChildrenMetadata);
            /**
             * Configures a view query.
             *
             * View queries are set before the `ngAfterViewInit` callback is called.
             *
             * ### Example
             *
             * ```
             * @Component({
             *   selector: 'someDir',
             *   templateUrl: 'someTemplate',
             *   directives: [ItemDirective]
             * })
             * class SomeDir {
             *   @ViewChild(ItemDirective) viewChild:ItemDirective;
             *
             *   ngAfterViewInit() {
             *     // viewChild is set
             *   }
             * }
             * ```
             */
            ViewChildMetadata = (function (_super) {
                __extends(ViewChildMetadata, _super);
                function ViewChildMetadata(_selector) {
                    _super.call(this, _selector, { descendants: true, first: true });
                }
                ViewChildMetadata = __decorate([
                    lang_75.CONST(), 
                    __metadata('design:paramtypes', [Object])
                ], ViewChildMetadata);
                return ViewChildMetadata;
            }(ViewQueryMetadata));
            exports_139("ViewChildMetadata", ViewChildMetadata);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/metadata/directives", ['angular2/src/facade/lang', 'angular2/src/core/di/metadata', 'angular2/src/core/change_detection'], function(exports_140, context_140) {
    "use strict";
    var __moduleName = context_140 && context_140.id;
    var lang_76, metadata_2, change_detection_8;
    var DirectiveMetadata, ComponentMetadata, PipeMetadata, InputMetadata, OutputMetadata, HostBindingMetadata, HostListenerMetadata;
    return {
        setters:[
            function (lang_76_1) {
                lang_76 = lang_76_1;
            },
            function (metadata_2_1) {
                metadata_2 = metadata_2_1;
            },
            function (change_detection_8_1) {
                change_detection_8 = change_detection_8_1;
            }],
        execute: function() {
            /**
             * Directives allow you to attach behavior to elements in the DOM.
             *
             * {@link DirectiveMetadata}s with an embedded view are called {@link ComponentMetadata}s.
             *
             * A directive consists of a single directive annotation and a controller class. When the
             * directive's `selector` matches
             * elements in the DOM, the following steps occur:
             *
             * 1. For each directive, the `ElementInjector` attempts to resolve the directive's constructor
             * arguments.
             * 2. Angular instantiates directives for each matched element using `ElementInjector` in a
             * depth-first order,
             *    as declared in the HTML.
             *
             * ## Understanding How Injection Works
             *
             * There are three stages of injection resolution.
             * - *Pre-existing Injectors*:
             *   - The terminal {@link Injector} cannot resolve dependencies. It either throws an error or, if
             * the dependency was
             *     specified as `@Optional`, returns `null`.
             *   - The platform injector resolves browser singleton resources, such as: cookies, title,
             * location, and others.
             * - *Component Injectors*: Each component instance has its own {@link Injector}, and they follow
             * the same parent-child hierarchy
             *     as the component instances in the DOM.
             * - *Element Injectors*: Each component instance has a Shadow DOM. Within the Shadow DOM each
             * element has an `ElementInjector`
             *     which follow the same parent-child hierarchy as the DOM elements themselves.
             *
             * When a template is instantiated, it also must instantiate the corresponding directives in a
             * depth-first order. The
             * current `ElementInjector` resolves the constructor dependencies for each directive.
             *
             * Angular then resolves dependencies as follows, according to the order in which they appear in the
             * {@link ViewMetadata}:
             *
             * 1. Dependencies on the current element
             * 2. Dependencies on element injectors and their parents until it encounters a Shadow DOM boundary
             * 3. Dependencies on component injectors and their parents until it encounters the root component
             * 4. Dependencies on pre-existing injectors
             *
             *
             * The `ElementInjector` can inject other directives, element-specific special objects, or it can
             * delegate to the parent
             * injector.
             *
             * To inject other directives, declare the constructor parameter as:
             * - `directive:DirectiveType`: a directive on the current element only
             * - `@Host() directive:DirectiveType`: any directive that matches the type between the current
             * element and the
             *    Shadow DOM root.
             * - `@Query(DirectiveType) query:QueryList<DirectiveType>`: A live collection of direct child
             * directives.
             * - `@QueryDescendants(DirectiveType) query:QueryList<DirectiveType>`: A live collection of any
             * child directives.
             *
             * To inject element-specific special objects, declare the constructor parameter as:
             * - `element: ElementRef` to obtain a reference to logical element in the view.
             * - `viewContainer: ViewContainerRef` to control child template instantiation, for
             * {@link DirectiveMetadata} directives only
             * - `bindingPropagation: BindingPropagation` to control change detection in a more granular way.
             *
             * ### Example
             *
             * The following example demonstrates how dependency injection resolves constructor arguments in
             * practice.
             *
             *
             * Assume this HTML template:
             *
             * ```
             * <div dependency="1">
             *   <div dependency="2">
             *     <div dependency="3" my-directive>
             *       <div dependency="4">
             *         <div dependency="5"></div>
             *       </div>
             *       <div dependency="6"></div>
             *     </div>
             *   </div>
             * </div>
             * ```
             *
             * With the following `dependency` decorator and `SomeService` injectable class.
             *
             * ```
             * @Injectable()
             * class SomeService {
             * }
             *
             * @Directive({
             *   selector: '[dependency]',
             *   inputs: [
             *     'id: dependency'
             *   ]
             * })
             * class Dependency {
             *   id:string;
             * }
             * ```
             *
             * Let's step through the different ways in which `MyDirective` could be declared...
             *
             *
             * ### No injection
             *
             * Here the constructor is declared with no arguments, therefore nothing is injected into
             * `MyDirective`.
             *
             * ```
             * @Directive({ selector: '[my-directive]' })
             * class MyDirective {
             *   constructor() {
             *   }
             * }
             * ```
             *
             * This directive would be instantiated with no dependencies.
             *
             *
             * ### Component-level injection
             *
             * Directives can inject any injectable instance from the closest component injector or any of its
             * parents.
             *
             * Here, the constructor declares a parameter, `someService`, and injects the `SomeService` type
             * from the parent
             * component's injector.
             * ```
             * @Directive({ selector: '[my-directive]' })
             * class MyDirective {
             *   constructor(someService: SomeService) {
             *   }
             * }
             * ```
             *
             * This directive would be instantiated with a dependency on `SomeService`.
             *
             *
             * ### Injecting a directive from the current element
             *
             * Directives can inject other directives declared on the current element.
             *
             * ```
             * @Directive({ selector: '[my-directive]' })
             * class MyDirective {
             *   constructor(dependency: Dependency) {
             *     expect(dependency.id).toEqual(3);
             *   }
             * }
             * ```
             * This directive would be instantiated with `Dependency` declared at the same element, in this case
             * `dependency="3"`.
             *
             * ### Injecting a directive from any ancestor elements
             *
             * Directives can inject other directives declared on any ancestor element (in the current Shadow
             * DOM), i.e. on the current element, the
             * parent element, or its parents.
             * ```
             * @Directive({ selector: '[my-directive]' })
             * class MyDirective {
             *   constructor(@Host() dependency: Dependency) {
             *     expect(dependency.id).toEqual(2);
             *   }
             * }
             * ```
             *
             * `@Host` checks the current element, the parent, as well as its parents recursively. If
             * `dependency="2"` didn't
             * exist on the direct parent, this injection would
             * have returned
             * `dependency="1"`.
             *
             *
             * ### Injecting a live collection of direct child directives
             *
             *
             * A directive can also query for other child directives. Since parent directives are instantiated
             * before child directives, a directive can't simply inject the list of child directives. Instead,
             * the directive injects a {@link QueryList}, which updates its contents as children are added,
             * removed, or moved by a directive that uses a {@link ViewContainerRef} such as a `ngFor`, an
             * `ngIf`, or an `ngSwitch`.
             *
             * ```
             * @Directive({ selector: '[my-directive]' })
             * class MyDirective {
             *   constructor(@Query(Dependency) dependencies:QueryList<Dependency>) {
             *   }
             * }
             * ```
             *
             * This directive would be instantiated with a {@link QueryList} which contains `Dependency` 4 and
             * `Dependency` 6. Here, `Dependency` 5 would not be included, because it is not a direct child.
             *
             * ### Injecting a live collection of descendant directives
             *
             * By passing the descendant flag to `@Query` above, we can include the children of the child
             * elements.
             *
             * ```
             * @Directive({ selector: '[my-directive]' })
             * class MyDirective {
             *   constructor(@Query(Dependency, {descendants: true}) dependencies:QueryList<Dependency>) {
             *   }
             * }
             * ```
             *
             * This directive would be instantiated with a Query which would contain `Dependency` 4, 5 and 6.
             *
             * ### Optional injection
             *
             * The normal behavior of directives is to return an error when a specified dependency cannot be
             * resolved. If you
             * would like to inject `null` on unresolved dependency instead, you can annotate that dependency
             * with `@Optional()`.
             * This explicitly permits the author of a template to treat some of the surrounding directives as
             * optional.
             *
             * ```
             * @Directive({ selector: '[my-directive]' })
             * class MyDirective {
             *   constructor(@Optional() dependency:Dependency) {
             *   }
             * }
             * ```
             *
             * This directive would be instantiated with a `Dependency` directive found on the current element.
             * If none can be
             * found, the injector supplies `null` instead of throwing an error.
             *
             * ### Example
             *
             * Here we use a decorator directive to simply define basic tool-tip behavior.
             *
             * ```
             * @Directive({
             *   selector: '[tooltip]',
             *   inputs: [
             *     'text: tooltip'
             *   ],
             *   host: {
             *     '(mouseenter)': 'onMouseEnter()',
             *     '(mouseleave)': 'onMouseLeave()'
             *   }
             * })
             * class Tooltip{
             *   text:string;
             *   overlay:Overlay; // NOT YET IMPLEMENTED
             *   overlayManager:OverlayManager; // NOT YET IMPLEMENTED
             *
             *   constructor(overlayManager:OverlayManager) {
             *     this.overlay = overlay;
             *   }
             *
             *   onMouseEnter() {
             *     // exact signature to be determined
             *     this.overlay = this.overlayManager.open(text, ...);
             *   }
             *
             *   onMouseLeave() {
             *     this.overlay.close();
             *     this.overlay = null;
             *   }
             * }
             * ```
             * In our HTML template, we can then add this behavior to a `<div>` or any other element with the
             * `tooltip` selector,
             * like so:
             *
             * ```
             * <div tooltip="some text here"></div>
             * ```
             *
             * Directives can also control the instantiation, destruction, and positioning of inline template
             * elements:
             *
             * A directive uses a {@link ViewContainerRef} to instantiate, insert, move, and destroy views at
             * runtime.
             * The {@link ViewContainerRef} is created as a result of `<template>` element, and represents a
             * location in the current view
             * where these actions are performed.
             *
             * Views are always created as children of the current {@link ViewMetadata}, and as siblings of the
             * `<template>` element. Thus a
             * directive in a child view cannot inject the directive that created it.
             *
             * Since directives that create views via ViewContainers are common in Angular, and using the full
             * `<template>` element syntax is wordy, Angular
             * also supports a shorthand notation: `<li *foo="bar">` and `<li template="foo: bar">` are
             * equivalent.
             *
             * Thus,
             *
             * ```
             * <ul>
             *   <li *foo="bar" title="text"></li>
             * </ul>
             * ```
             *
             * Expands in use to:
             *
             * ```
             * <ul>
             *   <template [foo]="bar">
             *     <li title="text"></li>
             *   </template>
             * </ul>
             * ```
             *
             * Notice that although the shorthand places `*foo="bar"` within the `<li>` element, the binding for
             * the directive
             * controller is correctly instantiated on the `<template>` element rather than the `<li>` element.
             *
             * ## Lifecycle hooks
             *
             * When the directive class implements some {@link angular2/lifecycle_hooks} the callbacks are
             * called by the change detection at defined points in time during the life of the directive.
             *
             * ### Example
             *
             * Let's suppose we want to implement the `unless` behavior, to conditionally include a template.
             *
             * Here is a simple directive that triggers on an `unless` selector:
             *
             * ```
             * @Directive({
             *   selector: '[unless]',
             *   inputs: ['unless']
             * })
             * export class Unless {
             *   viewContainer: ViewContainerRef;
             *   templateRef: TemplateRef;
             *   prevCondition: boolean;
             *
             *   constructor(viewContainer: ViewContainerRef, templateRef: TemplateRef) {
             *     this.viewContainer = viewContainer;
             *     this.templateRef = templateRef;
             *     this.prevCondition = null;
             *   }
             *
             *   set unless(newCondition) {
             *     if (newCondition && (isBlank(this.prevCondition) || !this.prevCondition)) {
             *       this.prevCondition = true;
             *       this.viewContainer.clear();
             *     } else if (!newCondition && (isBlank(this.prevCondition) || this.prevCondition)) {
             *       this.prevCondition = false;
             *       this.viewContainer.create(this.templateRef);
             *     }
             *   }
             * }
             * ```
             *
             * We can then use this `unless` selector in a template:
             * ```
             * <ul>
             *   <li *unless="expr"></li>
             * </ul>
             * ```
             *
             * Once the directive instantiates the child view, the shorthand notation for the template expands
             * and the result is:
             *
             * ```
             * <ul>
             *   <template [unless]="exp">
             *     <li></li>
             *   </template>
             *   <li></li>
             * </ul>
             * ```
             *
             * Note also that although the `<li></li>` template still exists inside the `<template></template>`,
             * the instantiated
             * view occurs on the second `<li></li>` which is a sibling to the `<template>` element.
             */
            DirectiveMetadata = (function (_super) {
                __extends(DirectiveMetadata, _super);
                function DirectiveMetadata(_a) {
                    var _b = _a === void 0 ? {} : _a, selector = _b.selector, inputs = _b.inputs, outputs = _b.outputs, properties = _b.properties, events = _b.events, host = _b.host, bindings = _b.bindings, providers = _b.providers, exportAs = _b.exportAs, queries = _b.queries;
                    _super.call(this);
                    this.selector = selector;
                    this._inputs = inputs;
                    this._properties = properties;
                    this._outputs = outputs;
                    this._events = events;
                    this.host = host;
                    this.exportAs = exportAs;
                    this.queries = queries;
                    this._providers = providers;
                    this._bindings = bindings;
                }
                Object.defineProperty(DirectiveMetadata.prototype, "inputs", {
                    /**
                     * Enumerates the set of data-bound input properties for a directive
                     *
                     * Angular automatically updates input properties during change detection.
                     *
                     * The `inputs` property defines a set of `directiveProperty` to `bindingProperty`
                     * configuration:
                     *
                     * - `directiveProperty` specifies the component property where the value is written.
                     * - `bindingProperty` specifies the DOM property where the value is read from.
                     *
                     * When `bindingProperty` is not provided, it is assumed to be equal to `directiveProperty`.
                     *
                     * ### Example ([live demo](http://plnkr.co/edit/ivhfXY?p=preview))
                     *
                     * The following example creates a component with two data-bound properties.
                     *
                     * ```typescript
                     * @Component({
                     *   selector: 'bank-account',
                     *   inputs: ['bankName', 'id: account-id'],
                     *   template: `
                     *     Bank Name: {{bankName}}
                     *     Account Id: {{id}}
                     *   `
                     * })
                     * class BankAccount {
                     *   bankName: string;
                     *   id: string;
                     *
                     *   // this property is not bound, and won't be automatically updated by Angular
                     *   normalizedBankName: string;
                     * }
                     *
                     * @Component({
                     *   selector: 'app',
                     *   template: `
                     *     <bank-account bank-name="RBC" account-id="4747"></bank-account>
                     *   `,
                     *   directives: [BankAccount]
                     * })
                     * class App {}
                     *
                     * bootstrap(App);
                     * ```
                     *
                     */
                    get: function () {
                        return lang_76.isPresent(this._properties) && this._properties.length > 0 ? this._properties :
                            this._inputs;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(DirectiveMetadata.prototype, "properties", {
                    get: function () { return this.inputs; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(DirectiveMetadata.prototype, "outputs", {
                    /**
                     * Enumerates the set of event-bound output properties.
                     *
                     * When an output property emits an event, an event handler attached to that event
                     * the template is invoked.
                     *
                     * The `outputs` property defines a set of `directiveProperty` to `bindingProperty`
                     * configuration:
                     *
                     * - `directiveProperty` specifies the component property that emits events.
                     * - `bindingProperty` specifies the DOM property the event handler is attached to.
                     *
                     * ### Example ([live demo](http://plnkr.co/edit/d5CNq7?p=preview))
                     *
                     * ```typescript
                     * @Directive({
                     *   selector: 'interval-dir',
                     *   outputs: ['everySecond', 'five5Secs: everyFiveSeconds']
                     * })
                     * class IntervalDir {
                     *   everySecond = new EventEmitter();
                     *   five5Secs = new EventEmitter();
                     *
                     *   constructor() {
                     *     setInterval(() => this.everySecond.emit("event"), 1000);
                     *     setInterval(() => this.five5Secs.emit("event"), 5000);
                     *   }
                     * }
                     *
                     * @Component({
                     *   selector: 'app',
                     *   template: `
                     *     <interval-dir (everySecond)="everySecond()" (everyFiveSeconds)="everyFiveSeconds()">
                     *     </interval-dir>
                     *   `,
                     *   directives: [IntervalDir]
                     * })
                     * class App {
                     *   everySecond() { console.log('second'); }
                     *   everyFiveSeconds() { console.log('five seconds'); }
                     * }
                     * bootstrap(App);
                     * ```
                     *
                     */
                    get: function () {
                        return lang_76.isPresent(this._events) && this._events.length > 0 ? this._events : this._outputs;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(DirectiveMetadata.prototype, "events", {
                    get: function () { return this.outputs; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(DirectiveMetadata.prototype, "providers", {
                    /**
                     * Defines the set of injectable objects that are visible to a Directive and its light DOM
                     * children.
                     *
                     * ## Simple Example
                     *
                     * Here is an example of a class that can be injected:
                     *
                     * ```
                     * class Greeter {
                     *    greet(name:string) {
                     *      return 'Hello ' + name + '!';
                     *    }
                     * }
                     *
                     * @Directive({
                     *   selector: 'greet',
                     *   bindings: [
                     *     Greeter
                     *   ]
                     * })
                     * class HelloWorld {
                     *   greeter:Greeter;
                     *
                     *   constructor(greeter:Greeter) {
                     *     this.greeter = greeter;
                     *   }
                     * }
                     * ```
                     */
                    get: function () {
                        return lang_76.isPresent(this._bindings) && this._bindings.length > 0 ? this._bindings :
                            this._providers;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(DirectiveMetadata.prototype, "bindings", {
                    /** @deprecated */
                    get: function () { return this.providers; },
                    enumerable: true,
                    configurable: true
                });
                DirectiveMetadata = __decorate([
                    lang_76.CONST(), 
                    __metadata('design:paramtypes', [Object])
                ], DirectiveMetadata);
                return DirectiveMetadata;
            }(metadata_2.InjectableMetadata));
            exports_140("DirectiveMetadata", DirectiveMetadata);
            /**
             * Declare reusable UI building blocks for an application.
             *
             * Each Angular component requires a single `@Component` annotation. The
             * `@Component`
             * annotation specifies when a component is instantiated, and which properties and hostListeners it
             * binds to.
             *
             * When a component is instantiated, Angular
             * - creates a shadow DOM for the component.
             * - loads the selected template into the shadow DOM.
             * - creates all the injectable objects configured with `providers` and `viewProviders`.
             *
             * All template expressions and statements are then evaluated against the component instance.
             *
             * For details on the `@View` annotation, see {@link ViewMetadata}.
             *
             * ## Lifecycle hooks
             *
             * When the component class implements some {@link angular2/lifecycle_hooks} the callbacks are
             * called by the change detection at defined points in time during the life of the component.
             *
             * ### Example
             *
             * {@example core/ts/metadata/metadata.ts region='component'}
             */
            ComponentMetadata = (function (_super) {
                __extends(ComponentMetadata, _super);
                function ComponentMetadata(_a) {
                    var _b = _a === void 0 ? {} : _a, selector = _b.selector, inputs = _b.inputs, outputs = _b.outputs, properties = _b.properties, events = _b.events, host = _b.host, exportAs = _b.exportAs, moduleId = _b.moduleId, bindings = _b.bindings, providers = _b.providers, viewBindings = _b.viewBindings, viewProviders = _b.viewProviders, _c = _b.changeDetection, changeDetection = _c === void 0 ? change_detection_8.ChangeDetectionStrategy.Default : _c, queries = _b.queries, templateUrl = _b.templateUrl, template = _b.template, styleUrls = _b.styleUrls, styles = _b.styles, directives = _b.directives, pipes = _b.pipes, encapsulation = _b.encapsulation;
                    _super.call(this, {
                        selector: selector,
                        inputs: inputs,
                        outputs: outputs,
                        properties: properties,
                        events: events,
                        host: host,
                        exportAs: exportAs,
                        bindings: bindings,
                        providers: providers,
                        queries: queries
                    });
                    this.changeDetection = changeDetection;
                    this._viewProviders = viewProviders;
                    this._viewBindings = viewBindings;
                    this.templateUrl = templateUrl;
                    this.template = template;
                    this.styleUrls = styleUrls;
                    this.styles = styles;
                    this.directives = directives;
                    this.pipes = pipes;
                    this.encapsulation = encapsulation;
                    this.moduleId = moduleId;
                }
                Object.defineProperty(ComponentMetadata.prototype, "viewProviders", {
                    /**
                     * Defines the set of injectable objects that are visible to its view DOM children.
                     *
                     * ## Simple Example
                     *
                     * Here is an example of a class that can be injected:
                     *
                     * ```
                     * class Greeter {
                     *    greet(name:string) {
                     *      return 'Hello ' + name + '!';
                     *    }
                     * }
                     *
                     * @Directive({
                     *   selector: 'needs-greeter'
                     * })
                     * class NeedsGreeter {
                     *   greeter:Greeter;
                     *
                     *   constructor(greeter:Greeter) {
                     *     this.greeter = greeter;
                     *   }
                     * }
                     *
                     * @Component({
                     *   selector: 'greet',
                     *   viewProviders: [
                     *     Greeter
                     *   ],
                     *   template: `<needs-greeter></needs-greeter>`,
                     *   directives: [NeedsGreeter]
                     * })
                     * class HelloWorld {
                     * }
                     *
                     * ```
                     */
                    get: function () {
                        return lang_76.isPresent(this._viewBindings) && this._viewBindings.length > 0 ? this._viewBindings :
                            this._viewProviders;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ComponentMetadata.prototype, "viewBindings", {
                    get: function () { return this.viewProviders; },
                    enumerable: true,
                    configurable: true
                });
                ComponentMetadata = __decorate([
                    lang_76.CONST(), 
                    __metadata('design:paramtypes', [Object])
                ], ComponentMetadata);
                return ComponentMetadata;
            }(DirectiveMetadata));
            exports_140("ComponentMetadata", ComponentMetadata);
            /**
             * Declare reusable pipe function.
             *
             * A "pure" pipe is only re-evaluated when either the input or any of the arguments change.
             *
             * When not specified, pipes default to being pure.
             *
             * ### Example
             *
             * {@example core/ts/metadata/metadata.ts region='pipe'}
             */
            PipeMetadata = (function (_super) {
                __extends(PipeMetadata, _super);
                function PipeMetadata(_a) {
                    var name = _a.name, pure = _a.pure;
                    _super.call(this);
                    this.name = name;
                    this._pure = pure;
                }
                Object.defineProperty(PipeMetadata.prototype, "pure", {
                    get: function () { return lang_76.isPresent(this._pure) ? this._pure : true; },
                    enumerable: true,
                    configurable: true
                });
                PipeMetadata = __decorate([
                    lang_76.CONST(), 
                    __metadata('design:paramtypes', [Object])
                ], PipeMetadata);
                return PipeMetadata;
            }(metadata_2.InjectableMetadata));
            exports_140("PipeMetadata", PipeMetadata);
            /**
             * Declares a data-bound input property.
             *
             * Angular automatically updates data-bound properties during change detection.
             *
             * `InputMetadata` takes an optional parameter that specifies the name
             * used when instantiating a component in the template. When not provided,
             * the name of the decorated property is used.
             *
             * ### Example
             *
             * The following example creates a component with two input properties.
             *
             * ```typescript
             * @Component({
             *   selector: 'bank-account',
             *   template: `
             *     Bank Name: {{bankName}}
             *     Account Id: {{id}}
             *   `
             * })
             * class BankAccount {
             *   @Input() bankName: string;
             *   @Input('account-id') id: string;
             *
             *   // this property is not bound, and won't be automatically updated by Angular
             *   normalizedBankName: string;
             * }
             *
             * @Component({
             *   selector: 'app',
             *   template: `
             *     <bank-account bank-name="RBC" account-id="4747"></bank-account>
             *   `,
             *   directives: [BankAccount]
             * })
             * class App {}
             *
             * bootstrap(App);
             * ```
             */
            InputMetadata = (function () {
                function InputMetadata(
                    /**
                     * Name used when instantiating a component in the template.
                     */
                    bindingPropertyName) {
                    this.bindingPropertyName = bindingPropertyName;
                }
                InputMetadata = __decorate([
                    lang_76.CONST(), 
                    __metadata('design:paramtypes', [String])
                ], InputMetadata);
                return InputMetadata;
            }());
            exports_140("InputMetadata", InputMetadata);
            /**
             * Declares an event-bound output property.
             *
             * When an output property emits an event, an event handler attached to that event
             * the template is invoked.
             *
             * `OutputMetadata` takes an optional parameter that specifies the name
             * used when instantiating a component in the template. When not provided,
             * the name of the decorated property is used.
             *
             * ### Example
             *
             * ```typescript
             * @Directive({
             *   selector: 'interval-dir',
             * })
             * class IntervalDir {
             *   @Output() everySecond = new EventEmitter();
             *   @Output('everyFiveSeconds') five5Secs = new EventEmitter();
             *
             *   constructor() {
             *     setInterval(() => this.everySecond.emit("event"), 1000);
             *     setInterval(() => this.five5Secs.emit("event"), 5000);
             *   }
             * }
             *
             * @Component({
             *   selector: 'app',
             *   template: `
             *     <interval-dir (everySecond)="everySecond()" (everyFiveSeconds)="everyFiveSeconds()">
             *     </interval-dir>
             *   `,
             *   directives: [IntervalDir]
             * })
             * class App {
             *   everySecond() { console.log('second'); }
             *   everyFiveSeconds() { console.log('five seconds'); }
             * }
             * bootstrap(App);
             * ```
             */
            OutputMetadata = (function () {
                function OutputMetadata(bindingPropertyName) {
                    this.bindingPropertyName = bindingPropertyName;
                }
                OutputMetadata = __decorate([
                    lang_76.CONST(), 
                    __metadata('design:paramtypes', [String])
                ], OutputMetadata);
                return OutputMetadata;
            }());
            exports_140("OutputMetadata", OutputMetadata);
            /**
             * Declares a host property binding.
             *
             * Angular automatically checks host property bindings during change detection.
             * If a binding changes, it will update the host element of the directive.
             *
             * `HostBindingMetadata` takes an optional parameter that specifies the property
             * name of the host element that will be updated. When not provided,
             * the class property name is used.
             *
             * ### Example
             *
             * The following example creates a directive that sets the `valid` and `invalid` classes
             * on the DOM element that has ngModel directive on it.
             *
             * ```typescript
             * @Directive({selector: '[ngModel]'})
             * class NgModelStatus {
             *   constructor(public control:NgModel) {}
             *   @HostBinding('class.valid') get valid { return this.control.valid; }
             *   @HostBinding('class.invalid') get invalid { return this.control.invalid; }
             * }
             *
             * @Component({
             *   selector: 'app',
             *   template: `<input [(ngModel)]="prop">`,
             *   directives: [FORM_DIRECTIVES, NgModelStatus]
             * })
             * class App {
             *   prop;
             * }
             *
             * bootstrap(App);
             * ```
             */
            HostBindingMetadata = (function () {
                function HostBindingMetadata(hostPropertyName) {
                    this.hostPropertyName = hostPropertyName;
                }
                HostBindingMetadata = __decorate([
                    lang_76.CONST(), 
                    __metadata('design:paramtypes', [String])
                ], HostBindingMetadata);
                return HostBindingMetadata;
            }());
            exports_140("HostBindingMetadata", HostBindingMetadata);
            /**
             * Declares a host listener.
             *
             * Angular will invoke the decorated method when the host element emits the specified event.
             *
             * If the decorated method returns `false`, then `preventDefault` is applied on the DOM
             * event.
             *
             * ### Example
             *
             * The following example declares a directive that attaches a click listener to the button and
             * counts clicks.
             *
             * ```typescript
             * @Directive({selector: 'button[counting]'})
             * class CountClicks {
             *   numberOfClicks = 0;
             *
             *   @HostListener('click', ['$event.target'])
             *   onClick(btn) {
             *     console.log("button", btn, "number of clicks:", this.numberOfClicks++);
             *   }
             * }
             *
             * @Component({
             *   selector: 'app',
             *   template: `<button counting>Increment</button>`,
             *   directives: [CountClicks]
             * })
             * class App {}
             *
             * bootstrap(App);
             * ```
             */
            HostListenerMetadata = (function () {
                function HostListenerMetadata(eventName, args) {
                    this.eventName = eventName;
                    this.args = args;
                }
                HostListenerMetadata = __decorate([
                    lang_76.CONST(), 
                    __metadata('design:paramtypes', [String, Array])
                ], HostListenerMetadata);
                return HostListenerMetadata;
            }());
            exports_140("HostListenerMetadata", HostListenerMetadata);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/metadata/view", ['angular2/src/facade/lang'], function(exports_141, context_141) {
    "use strict";
    var __moduleName = context_141 && context_141.id;
    var lang_77;
    var ViewEncapsulation, VIEW_ENCAPSULATION_VALUES, ViewMetadata;
    return {
        setters:[
            function (lang_77_1) {
                lang_77 = lang_77_1;
            }],
        execute: function() {
            /**
             * Defines template and style encapsulation options available for Component's {@link View}.
             *
             * See {@link ViewMetadata#encapsulation}.
             */
            (function (ViewEncapsulation) {
                /**
                 * Emulate `Native` scoping of styles by adding an attribute containing surrogate id to the Host
                 * Element and pre-processing the style rules provided via
                 * {@link ViewMetadata#styles} or {@link ViewMetadata#stylesUrls}, and adding the new Host Element
                 * attribute to all selectors.
                 *
                 * This is the default option.
                 */
                ViewEncapsulation[ViewEncapsulation["Emulated"] = 0] = "Emulated";
                /**
                 * Use the native encapsulation mechanism of the renderer.
                 *
                 * For the DOM this means using [Shadow DOM](https://w3c.github.io/webcomponents/spec/shadow/) and
                 * creating a ShadowRoot for Component's Host Element.
                 */
                ViewEncapsulation[ViewEncapsulation["Native"] = 1] = "Native";
                /**
                 * Don't provide any template or style encapsulation.
                 */
                ViewEncapsulation[ViewEncapsulation["None"] = 2] = "None";
            })(ViewEncapsulation || (ViewEncapsulation = {}));
            exports_141("ViewEncapsulation", ViewEncapsulation);
            exports_141("VIEW_ENCAPSULATION_VALUES", VIEW_ENCAPSULATION_VALUES = [ViewEncapsulation.Emulated, ViewEncapsulation.Native, ViewEncapsulation.None]);
            /**
             * Metadata properties available for configuring Views.
             *
             * Each Angular component requires a single `@Component` and at least one `@View` annotation. The
             * `@View` annotation specifies the HTML template to use, and lists the directives that are active
             * within the template.
             *
             * When a component is instantiated, the template is loaded into the component's shadow root, and
             * the expressions and statements in the template are evaluated against the component.
             *
             * For details on the `@Component` annotation, see {@link ComponentMetadata}.
             *
             * ### Example
             *
             * ```
             * @Component({
             *   selector: 'greet',
             *   template: 'Hello {{name}}!',
             *   directives: [GreetUser, Bold]
             * })
             * class Greet {
             *   name: string;
             *
             *   constructor() {
             *     this.name = 'World';
             *   }
             * }
             * ```
             */
            ViewMetadata = (function () {
                function ViewMetadata(_a) {
                    var _b = _a === void 0 ? {} : _a, templateUrl = _b.templateUrl, template = _b.template, directives = _b.directives, pipes = _b.pipes, encapsulation = _b.encapsulation, styles = _b.styles, styleUrls = _b.styleUrls;
                    this.templateUrl = templateUrl;
                    this.template = template;
                    this.styleUrls = styleUrls;
                    this.styles = styles;
                    this.directives = directives;
                    this.pipes = pipes;
                    this.encapsulation = encapsulation;
                }
                ViewMetadata = __decorate([
                    lang_77.CONST(), 
                    __metadata('design:paramtypes', [Object])
                ], ViewMetadata);
                return ViewMetadata;
            }());
            exports_141("ViewMetadata", ViewMetadata);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/util/decorators", ['angular2/src/facade/lang'], function(exports_142, context_142) {
    "use strict";
    var __moduleName = context_142 && context_142.id;
    var lang_78;
    var _nextClassId, Reflect;
    function extractAnnotation(annotation) {
        if (lang_78.isFunction(annotation) && annotation.hasOwnProperty('annotation')) {
            // it is a decorator, extract annotation
            annotation = annotation.annotation;
        }
        return annotation;
    }
    function applyParams(fnOrArray, key) {
        if (fnOrArray === Object || fnOrArray === String || fnOrArray === Function ||
            fnOrArray === Number || fnOrArray === Array) {
            throw new Error("Can not use native " + lang_78.stringify(fnOrArray) + " as constructor");
        }
        if (lang_78.isFunction(fnOrArray)) {
            return fnOrArray;
        }
        else if (fnOrArray instanceof Array) {
            var annotations = fnOrArray;
            var fn = fnOrArray[fnOrArray.length - 1];
            if (!lang_78.isFunction(fn)) {
                throw new Error("Last position of Class method array must be Function in key " + key + " was '" + lang_78.stringify(fn) + "'");
            }
            var annoLength = annotations.length - 1;
            if (annoLength != fn.length) {
                throw new Error("Number of annotations (" + annoLength + ") does not match number of arguments (" + fn.length + ") in the function: " + lang_78.stringify(fn));
            }
            var paramsAnnotations = [];
            for (var i = 0, ii = annotations.length - 1; i < ii; i++) {
                var paramAnnotations = [];
                paramsAnnotations.push(paramAnnotations);
                var annotation = annotations[i];
                if (annotation instanceof Array) {
                    for (var j = 0; j < annotation.length; j++) {
                        paramAnnotations.push(extractAnnotation(annotation[j]));
                    }
                }
                else if (lang_78.isFunction(annotation)) {
                    paramAnnotations.push(extractAnnotation(annotation));
                }
                else {
                    paramAnnotations.push(annotation);
                }
            }
            Reflect.defineMetadata('parameters', paramsAnnotations, fn);
            return fn;
        }
        else {
            throw new Error("Only Function or Array is supported in Class definition for key '" + key + "' is '" + lang_78.stringify(fnOrArray) + "'");
        }
    }
    /**
     * Provides a way for expressing ES6 classes with parameter annotations in ES5.
     *
     * ## Basic Example
     *
     * ```
     * var Greeter = ng.Class({
     *   constructor: function(name) {
     *     this.name = name;
     *   },
     *
     *   greet: function() {
     *     alert('Hello ' + this.name + '!');
     *   }
     * });
     * ```
     *
     * is equivalent to ES6:
     *
     * ```
     * class Greeter {
     *   constructor(name) {
     *     this.name = name;
     *   }
     *
     *   greet() {
     *     alert('Hello ' + this.name + '!');
     *   }
     * }
     * ```
     *
     * or equivalent to ES5:
     *
     * ```
     * var Greeter = function (name) {
     *   this.name = name;
     * }
     *
     * Greeter.prototype.greet = function () {
     *   alert('Hello ' + this.name + '!');
     * }
     * ```
     *
     * ### Example with parameter annotations
     *
     * ```
     * var MyService = ng.Class({
     *   constructor: [String, [new Query(), QueryList], function(name, queryList) {
     *     ...
     *   }]
     * });
     * ```
     *
     * is equivalent to ES6:
     *
     * ```
     * class MyService {
     *   constructor(name: string, @Query() queryList: QueryList) {
     *     ...
     *   }
     * }
     * ```
     *
     * ### Example with inheritance
     *
     * ```
     * var Shape = ng.Class({
     *   constructor: (color) {
     *     this.color = color;
     *   }
     * });
     *
     * var Square = ng.Class({
     *   extends: Shape,
     *   constructor: function(color, size) {
     *     Shape.call(this, color);
     *     this.size = size;
     *   }
     * });
     * ```
     */
    function Class(clsDef) {
        var constructor = applyParams(clsDef.hasOwnProperty('constructor') ? clsDef.constructor : undefined, 'constructor');
        var proto = constructor.prototype;
        if (clsDef.hasOwnProperty('extends')) {
            if (lang_78.isFunction(clsDef.extends)) {
                constructor.prototype = proto =
                    Object.create(clsDef.extends.prototype);
            }
            else {
                throw new Error("Class definition 'extends' property must be a constructor function was: " + lang_78.stringify(clsDef.extends));
            }
        }
        for (var key in clsDef) {
            if (key != 'extends' && key != 'prototype' && clsDef.hasOwnProperty(key)) {
                proto[key] = applyParams(clsDef[key], key);
            }
        }
        if (this && this.annotations instanceof Array) {
            Reflect.defineMetadata('annotations', this.annotations, constructor);
        }
        if (!constructor['name']) {
            constructor['overriddenName'] = "class" + _nextClassId++;
        }
        return constructor;
    }
    exports_142("Class", Class);
    function makeDecorator(annotationCls, chainFn) {
        if (chainFn === void 0) { chainFn = null; }
        function DecoratorFactory(objOrType) {
            var annotationInstance = new annotationCls(objOrType);
            if (this instanceof annotationCls) {
                return annotationInstance;
            }
            else {
                var chainAnnotation = lang_78.isFunction(this) && this.annotations instanceof Array ? this.annotations : [];
                chainAnnotation.push(annotationInstance);
                var TypeDecorator = function TypeDecorator(cls) {
                    var annotations = Reflect.getOwnMetadata('annotations', cls);
                    annotations = annotations || [];
                    annotations.push(annotationInstance);
                    Reflect.defineMetadata('annotations', annotations, cls);
                    return cls;
                };
                TypeDecorator.annotations = chainAnnotation;
                TypeDecorator.Class = Class;
                if (chainFn)
                    chainFn(TypeDecorator);
                return TypeDecorator;
            }
        }
        DecoratorFactory.prototype = Object.create(annotationCls.prototype);
        return DecoratorFactory;
    }
    exports_142("makeDecorator", makeDecorator);
    function makeParamDecorator(annotationCls) {
        function ParamDecoratorFactory() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var annotationInstance = Object.create(annotationCls.prototype);
            annotationCls.apply(annotationInstance, args);
            if (this instanceof annotationCls) {
                return annotationInstance;
            }
            else {
                ParamDecorator.annotation = annotationInstance;
                return ParamDecorator;
            }
            function ParamDecorator(cls, unusedKey, index) {
                var parameters = Reflect.getMetadata('parameters', cls);
                parameters = parameters || [];
                // there might be gaps if some in between parameters do not have annotations.
                // we pad with nulls.
                while (parameters.length <= index) {
                    parameters.push(null);
                }
                parameters[index] = parameters[index] || [];
                var annotationsForParam = parameters[index];
                annotationsForParam.push(annotationInstance);
                Reflect.defineMetadata('parameters', parameters, cls);
                return cls;
            }
        }
        ParamDecoratorFactory.prototype = Object.create(annotationCls.prototype);
        return ParamDecoratorFactory;
    }
    exports_142("makeParamDecorator", makeParamDecorator);
    function makePropDecorator(decoratorCls) {
        function PropDecoratorFactory() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var decoratorInstance = Object.create(decoratorCls.prototype);
            decoratorCls.apply(decoratorInstance, args);
            if (this instanceof decoratorCls) {
                return decoratorInstance;
            }
            else {
                return function PropDecorator(target, name) {
                    var meta = Reflect.getOwnMetadata('propMetadata', target.constructor);
                    meta = meta || {};
                    meta[name] = meta[name] || [];
                    meta[name].unshift(decoratorInstance);
                    Reflect.defineMetadata('propMetadata', meta, target.constructor);
                };
            }
        }
        PropDecoratorFactory.prototype = Object.create(decoratorCls.prototype);
        return PropDecoratorFactory;
    }
    exports_142("makePropDecorator", makePropDecorator);
    return {
        setters:[
            function (lang_78_1) {
                lang_78 = lang_78_1;
            }],
        execute: function() {
            _nextClassId = 0;
            Reflect = lang_78.global.Reflect;
            // Throw statement at top-level is disallowed by closure compiler in ES6 input.
            // Wrap in an IIFE as a work-around.
            (function checkReflect() {
                if (!(Reflect && Reflect.getMetadata)) {
                    throw 'reflect-metadata shim is required when using class decorators';
                }
            })();
        }
    }
});
/**
 * This indirection is needed to free up Component, etc symbols in the public API
 * to be used by the decorator versions of these annotations.
 */
System.register("test/node_modules/angular2/ts/src/core/metadata", ["test/node_modules/angular2/ts/src/core/metadata/di", "test/node_modules/angular2/ts/src/core/metadata/directives", "test/node_modules/angular2/ts/src/core/metadata/view", "test/node_modules/angular2/ts/src/core/util/decorators"], function(exports_143, context_143) {
    "use strict";
    var __moduleName = context_143 && context_143.id;
    var di_19, directives_4, view_8, decorators_1;
    var Component, Directive, View, Attribute, Query, ContentChildren, ContentChild, ViewChildren, ViewChild, ViewQuery, Pipe, Input, Output, HostBinding, HostListener;
    return {
        setters:[
            function (di_20_1) {
                exports_143({
                    "QueryMetadata": di_20_1["QueryMetadata"],
                    "ContentChildrenMetadata": di_20_1["ContentChildrenMetadata"],
                    "ContentChildMetadata": di_20_1["ContentChildMetadata"],
                    "ViewChildrenMetadata": di_20_1["ViewChildrenMetadata"],
                    "ViewQueryMetadata": di_20_1["ViewQueryMetadata"],
                    "ViewChildMetadata": di_20_1["ViewChildMetadata"],
                    "AttributeMetadata": di_20_1["AttributeMetadata"]
                });
                di_19 = di_20_1;
            },
            function (directives_5_1) {
                exports_143({
                    "ComponentMetadata": directives_5_1["ComponentMetadata"],
                    "DirectiveMetadata": directives_5_1["DirectiveMetadata"],
                    "PipeMetadata": directives_5_1["PipeMetadata"],
                    "InputMetadata": directives_5_1["InputMetadata"],
                    "OutputMetadata": directives_5_1["OutputMetadata"],
                    "HostBindingMetadata": directives_5_1["HostBindingMetadata"],
                    "HostListenerMetadata": directives_5_1["HostListenerMetadata"]
                });
                directives_4 = directives_5_1;
            },
            function (view_9_1) {
                exports_143({
                    "ViewMetadata": view_9_1["ViewMetadata"],
                    "ViewEncapsulation": view_9_1["ViewEncapsulation"]
                });
                view_8 = view_9_1;
            },
            function (decorators_1_1) {
                decorators_1 = decorators_1_1;
            }],
        execute: function() {
            // TODO(alexeagle): remove the duplication of this doc. It is copied from ComponentMetadata.
            /**
             * Declare reusable UI building blocks for an application.
             *
             * Each Angular component requires a single `@Component` annotation. The `@Component`
             * annotation specifies when a component is instantiated, and which properties and hostListeners it
             * binds to.
             *
             * When a component is instantiated, Angular
             * - creates a shadow DOM for the component.
             * - loads the selected template into the shadow DOM.
             * - creates all the injectable objects configured with `providers` and `viewProviders`.
             *
             * All template expressions and statements are then evaluated against the component instance.
             *
             * ## Lifecycle hooks
             *
             * When the component class implements some {@link angular2/lifecycle_hooks} the callbacks are
             * called by the change detection at defined points in time during the life of the component.
             *
             * ### Example
             *
             * {@example core/ts/metadata/metadata.ts region='component'}
             */
            exports_143("Component", Component = decorators_1.makeDecorator(directives_4.ComponentMetadata, function (fn) { return fn.View = View; }));
            // TODO(alexeagle): remove the duplication of this doc. It is copied from DirectiveMetadata.
            /**
             * Directives allow you to attach behavior to elements in the DOM.
             *
             * {@link DirectiveMetadata}s with an embedded view are called {@link ComponentMetadata}s.
             *
             * A directive consists of a single directive annotation and a controller class. When the
             * directive's `selector` matches
             * elements in the DOM, the following steps occur:
             *
             * 1. For each directive, the `ElementInjector` attempts to resolve the directive's constructor
             * arguments.
             * 2. Angular instantiates directives for each matched element using `ElementInjector` in a
             * depth-first order,
             *    as declared in the HTML.
             *
             * ## Understanding How Injection Works
             *
             * There are three stages of injection resolution.
             * - *Pre-existing Injectors*:
             *   - The terminal {@link Injector} cannot resolve dependencies. It either throws an error or, if
             * the dependency was
             *     specified as `@Optional`, returns `null`.
             *   - The platform injector resolves browser singleton resources, such as: cookies, title,
             * location, and others.
             * - *Component Injectors*: Each component instance has its own {@link Injector}, and they follow
             * the same parent-child hierarchy
             *     as the component instances in the DOM.
             * - *Element Injectors*: Each component instance has a Shadow DOM. Within the Shadow DOM each
             * element has an `ElementInjector`
             *     which follow the same parent-child hierarchy as the DOM elements themselves.
             *
             * When a template is instantiated, it also must instantiate the corresponding directives in a
             * depth-first order. The
             * current `ElementInjector` resolves the constructor dependencies for each directive.
             *
             * Angular then resolves dependencies as follows, according to the order in which they appear in the
             * {@link ViewMetadata}:
             *
             * 1. Dependencies on the current element
             * 2. Dependencies on element injectors and their parents until it encounters a Shadow DOM boundary
             * 3. Dependencies on component injectors and their parents until it encounters the root component
             * 4. Dependencies on pre-existing injectors
             *
             *
             * The `ElementInjector` can inject other directives, element-specific special objects, or it can
             * delegate to the parent
             * injector.
             *
             * To inject other directives, declare the constructor parameter as:
             * - `directive:DirectiveType`: a directive on the current element only
             * - `@Host() directive:DirectiveType`: any directive that matches the type between the current
             * element and the
             *    Shadow DOM root.
             * - `@Query(DirectiveType) query:QueryList<DirectiveType>`: A live collection of direct child
             * directives.
             * - `@QueryDescendants(DirectiveType) query:QueryList<DirectiveType>`: A live collection of any
             * child directives.
             *
             * To inject element-specific special objects, declare the constructor parameter as:
             * - `element: ElementRef` to obtain a reference to logical element in the view.
             * - `viewContainer: ViewContainerRef` to control child template instantiation, for
             * {@link DirectiveMetadata} directives only
             * - `bindingPropagation: BindingPropagation` to control change detection in a more granular way.
             *
             * ### Example
             *
             * The following example demonstrates how dependency injection resolves constructor arguments in
             * practice.
             *
             *
             * Assume this HTML template:
             *
             * ```
             * <div dependency="1">
             *   <div dependency="2">
             *     <div dependency="3" my-directive>
             *       <div dependency="4">
             *         <div dependency="5"></div>
             *       </div>
             *       <div dependency="6"></div>
             *     </div>
             *   </div>
             * </div>
             * ```
             *
             * With the following `dependency` decorator and `SomeService` injectable class.
             *
             * ```
             * @Injectable()
             * class SomeService {
             * }
             *
             * @Directive({
             *   selector: '[dependency]',
             *   inputs: [
             *     'id: dependency'
             *   ]
             * })
             * class Dependency {
             *   id:string;
             * }
             * ```
             *
             * Let's step through the different ways in which `MyDirective` could be declared...
             *
             *
             * ### No injection
             *
             * Here the constructor is declared with no arguments, therefore nothing is injected into
             * `MyDirective`.
             *
             * ```
             * @Directive({ selector: '[my-directive]' })
             * class MyDirective {
             *   constructor() {
             *   }
             * }
             * ```
             *
             * This directive would be instantiated with no dependencies.
             *
             *
             * ### Component-level injection
             *
             * Directives can inject any injectable instance from the closest component injector or any of its
             * parents.
             *
             * Here, the constructor declares a parameter, `someService`, and injects the `SomeService` type
             * from the parent
             * component's injector.
             * ```
             * @Directive({ selector: '[my-directive]' })
             * class MyDirective {
             *   constructor(someService: SomeService) {
             *   }
             * }
             * ```
             *
             * This directive would be instantiated with a dependency on `SomeService`.
             *
             *
             * ### Injecting a directive from the current element
             *
             * Directives can inject other directives declared on the current element.
             *
             * ```
             * @Directive({ selector: '[my-directive]' })
             * class MyDirective {
             *   constructor(dependency: Dependency) {
             *     expect(dependency.id).toEqual(3);
             *   }
             * }
             * ```
             * This directive would be instantiated with `Dependency` declared at the same element, in this case
             * `dependency="3"`.
             *
             * ### Injecting a directive from any ancestor elements
             *
             * Directives can inject other directives declared on any ancestor element (in the current Shadow
             * DOM), i.e. on the current element, the
             * parent element, or its parents.
             * ```
             * @Directive({ selector: '[my-directive]' })
             * class MyDirective {
             *   constructor(@Host() dependency: Dependency) {
             *     expect(dependency.id).toEqual(2);
             *   }
             * }
             * ```
             *
             * `@Host` checks the current element, the parent, as well as its parents recursively. If
             * `dependency="2"` didn't
             * exist on the direct parent, this injection would
             * have returned
             * `dependency="1"`.
             *
             *
             * ### Injecting a live collection of direct child directives
             *
             *
             * A directive can also query for other child directives. Since parent directives are instantiated
             * before child directives, a directive can't simply inject the list of child directives. Instead,
             * the directive injects a {@link QueryList}, which updates its contents as children are added,
             * removed, or moved by a directive that uses a {@link ViewContainerRef} such as a `ngFor`, an
             * `ngIf`, or an `ngSwitch`.
             *
             * ```
             * @Directive({ selector: '[my-directive]' })
             * class MyDirective {
             *   constructor(@Query(Dependency) dependencies:QueryList<Dependency>) {
             *   }
             * }
             * ```
             *
             * This directive would be instantiated with a {@link QueryList} which contains `Dependency` 4 and
             * 6. Here, `Dependency` 5 would not be included, because it is not a direct child.
             *
             * ### Injecting a live collection of descendant directives
             *
             * By passing the descendant flag to `@Query` above, we can include the children of the child
             * elements.
             *
             * ```
             * @Directive({ selector: '[my-directive]' })
             * class MyDirective {
             *   constructor(@Query(Dependency, {descendants: true}) dependencies:QueryList<Dependency>) {
             *   }
             * }
             * ```
             *
             * This directive would be instantiated with a Query which would contain `Dependency` 4, 5 and 6.
             *
             * ### Optional injection
             *
             * The normal behavior of directives is to return an error when a specified dependency cannot be
             * resolved. If you
             * would like to inject `null` on unresolved dependency instead, you can annotate that dependency
             * with `@Optional()`.
             * This explicitly permits the author of a template to treat some of the surrounding directives as
             * optional.
             *
             * ```
             * @Directive({ selector: '[my-directive]' })
             * class MyDirective {
             *   constructor(@Optional() dependency:Dependency) {
             *   }
             * }
             * ```
             *
             * This directive would be instantiated with a `Dependency` directive found on the current element.
             * If none can be
             * found, the injector supplies `null` instead of throwing an error.
             *
             * ### Example
             *
             * Here we use a decorator directive to simply define basic tool-tip behavior.
             *
             * ```
             * @Directive({
             *   selector: '[tooltip]',
             *   inputs: [
             *     'text: tooltip'
             *   ],
             *   host: {
             *     '(mouseenter)': 'onMouseEnter()',
             *     '(mouseleave)': 'onMouseLeave()'
             *   }
             * })
             * class Tooltip{
             *   text:string;
             *   overlay:Overlay; // NOT YET IMPLEMENTED
             *   overlayManager:OverlayManager; // NOT YET IMPLEMENTED
             *
             *   constructor(overlayManager:OverlayManager) {
             *     this.overlay = overlay;
             *   }
             *
             *   onMouseEnter() {
             *     // exact signature to be determined
             *     this.overlay = this.overlayManager.open(text, ...);
             *   }
             *
             *   onMouseLeave() {
             *     this.overlay.close();
             *     this.overlay = null;
             *   }
             * }
             * ```
             * In our HTML template, we can then add this behavior to a `<div>` or any other element with the
             * `tooltip` selector,
             * like so:
             *
             * ```
             * <div tooltip="some text here"></div>
             * ```
             *
             * Directives can also control the instantiation, destruction, and positioning of inline template
             * elements:
             *
             * A directive uses a {@link ViewContainerRef} to instantiate, insert, move, and destroy views at
             * runtime.
             * The {@link ViewContainerRef} is created as a result of `<template>` element, and represents a
             * location in the current view
             * where these actions are performed.
             *
             * Views are always created as children of the current {@link ViewMetadata}, and as siblings of the
             * `<template>` element. Thus a
             * directive in a child view cannot inject the directive that created it.
             *
             * Since directives that create views via ViewContainers are common in Angular, and using the full
             * `<template>` element syntax is wordy, Angular
             * also supports a shorthand notation: `<li *foo="bar">` and `<li template="foo: bar">` are
             * equivalent.
             *
             * Thus,
             *
             * ```
             * <ul>
             *   <li *foo="bar" title="text"></li>
             * </ul>
             * ```
             *
             * Expands in use to:
             *
             * ```
             * <ul>
             *   <template [foo]="bar">
             *     <li title="text"></li>
             *   </template>
             * </ul>
             * ```
             *
             * Notice that although the shorthand places `*foo="bar"` within the `<li>` element, the binding for
             * the directive
             * controller is correctly instantiated on the `<template>` element rather than the `<li>` element.
             *
             * ## Lifecycle hooks
             *
             * When the directive class implements some {@link angular2/lifecycle_hooks} the callbacks are
             * called by the change detection at defined points in time during the life of the directive.
             *
             * ### Example
             *
             * Let's suppose we want to implement the `unless` behavior, to conditionally include a template.
             *
             * Here is a simple directive that triggers on an `unless` selector:
             *
             * ```
             * @Directive({
             *   selector: '[unless]',
             *   inputs: ['unless']
             * })
             * export class Unless {
             *   viewContainer: ViewContainerRef;
             *   templateRef: TemplateRef;
             *   prevCondition: boolean;
             *
             *   constructor(viewContainer: ViewContainerRef, templateRef: TemplateRef) {
             *     this.viewContainer = viewContainer;
             *     this.templateRef = templateRef;
             *     this.prevCondition = null;
             *   }
             *
             *   set unless(newCondition) {
             *     if (newCondition && (isBlank(this.prevCondition) || !this.prevCondition)) {
             *       this.prevCondition = true;
             *       this.viewContainer.clear();
             *     } else if (!newCondition && (isBlank(this.prevCondition) || this.prevCondition)) {
             *       this.prevCondition = false;
             *       this.viewContainer.create(this.templateRef);
             *     }
             *   }
             * }
             * ```
             *
             * We can then use this `unless` selector in a template:
             * ```
             * <ul>
             *   <li *unless="expr"></li>
             * </ul>
             * ```
             *
             * Once the directive instantiates the child view, the shorthand notation for the template expands
             * and the result is:
             *
             * ```
             * <ul>
             *   <template [unless]="exp">
             *     <li></li>
             *   </template>
             *   <li></li>
             * </ul>
             * ```
             *
             * Note also that although the `<li></li>` template still exists inside the `<template></template>`,
             * the instantiated
             * view occurs on the second `<li></li>` which is a sibling to the `<template>` element.
             */
            exports_143("Directive", Directive = decorators_1.makeDecorator(directives_4.DirectiveMetadata));
            // TODO(alexeagle): remove the duplication of this doc. It is copied from ViewMetadata.
            /**
             * Metadata properties available for configuring Views.
             *
             * Each Angular component requires a single `@Component` and at least one `@View` annotation. The
             * `@View` annotation specifies the HTML template to use, and lists the directives that are active
             * within the template.
             *
             * When a component is instantiated, the template is loaded into the component's shadow root, and
             * the expressions and statements in the template are evaluated against the component.
             *
             * For details on the `@Component` annotation, see {@link ComponentMetadata}.
             *
             * ### Example
             *
             * ```
             * @Component({
             *   selector: 'greet',
             *   template: 'Hello {{name}}!',
             *   directives: [GreetUser, Bold]
             * })
             * class Greet {
             *   name: string;
             *
             *   constructor() {
             *     this.name = 'World';
             *   }
             * }
             * ```
             */
            View = decorators_1.makeDecorator(view_8.ViewMetadata, function (fn) { return fn.View = View; });
            /**
             * Specifies that a constant attribute value should be injected.
             *
             * The directive can inject constant string literals of host element attributes.
             *
             * ### Example
             *
             * Suppose we have an `<input>` element and want to know its `type`.
             *
             * ```html
             * <input type="text">
             * ```
             *
             * A decorator can inject string literal `text` like so:
             *
             * {@example core/ts/metadata/metadata.ts region='attributeMetadata'}
             */
            exports_143("Attribute", Attribute = decorators_1.makeParamDecorator(di_19.AttributeMetadata));
            // TODO(alexeagle): remove the duplication of this doc. It is copied from QueryMetadata.
            /**
             * Declares an injectable parameter to be a live list of directives or variable
             * bindings from the content children of a directive.
             *
             * ### Example ([live demo](http://plnkr.co/edit/lY9m8HLy7z06vDoUaSN2?p=preview))
             *
             * Assume that `<tabs>` component would like to get a list its children `<pane>`
             * components as shown in this example:
             *
             * ```html
             * <tabs>
             *   <pane title="Overview">...</pane>
             *   <pane *ngFor="#o of objects" [title]="o.title">{{o.text}}</pane>
             * </tabs>
             * ```
             *
             * The preferred solution is to query for `Pane` directives using this decorator.
             *
             * ```javascript
             * @Component({
             *   selector: 'pane',
             *   inputs: ['title']
             * })
             * class Pane {
             *   title:string;
             * }
             *
             * @Component({
             *  selector: 'tabs',
             *  template: `
             *    <ul>
             *      <li *ngFor="#pane of panes">{{pane.title}}</li>
             *    </ul>
             *    <ng-content></ng-content>
             *  `
             * })
             * class Tabs {
             *   panes: QueryList<Pane>;
             *   constructor(@Query(Pane) panes:QueryList<Pane>) {
             *     this.panes = panes;
             *   }
             * }
             * ```
             *
             * A query can look for variable bindings by passing in a string with desired binding symbol.
             *
             * ### Example ([live demo](http://plnkr.co/edit/sT2j25cH1dURAyBRCKx1?p=preview))
             * ```html
             * <seeker>
             *   <div #findme>...</div>
             * </seeker>
             *
             * @Component({ selector: 'foo' })
             * class seeker {
             *   constructor(@Query('findme') elList: QueryList<ElementRef>) {...}
             * }
             * ```
             *
             * In this case the object that is injected depend on the type of the variable
             * binding. It can be an ElementRef, a directive or a component.
             *
             * Passing in a comma separated list of variable bindings will query for all of them.
             *
             * ```html
             * <seeker>
             *   <div #findMe>...</div>
             *   <div #findMeToo>...</div>
             * </seeker>
             *
             *  @Component({
             *   selector: 'foo'
             * })
             * class Seeker {
             *   constructor(@Query('findMe, findMeToo') elList: QueryList<ElementRef>) {...}
             * }
             * ```
             *
             * Configure whether query looks for direct children or all descendants
             * of the querying element, by using the `descendants` parameter.
             * It is set to `false` by default.
             *
             * ### Example ([live demo](http://plnkr.co/edit/wtGeB977bv7qvA5FTYl9?p=preview))
             * ```html
             * <container #first>
             *   <item>a</item>
             *   <item>b</item>
             *   <container #second>
             *     <item>c</item>
             *   </container>
             * </container>
             * ```
             *
             * When querying for items, the first container will see only `a` and `b` by default,
             * but with `Query(TextDirective, {descendants: true})` it will see `c` too.
             *
             * The queried directives are kept in a depth-first pre-order with respect to their
             * positions in the DOM.
             *
             * Query does not look deep into any subcomponent views.
             *
             * Query is updated as part of the change-detection cycle. Since change detection
             * happens after construction of a directive, QueryList will always be empty when observed in the
             * constructor.
             *
             * The injected object is an unmodifiable live list.
             * See {@link QueryList} for more details.
             */
            exports_143("Query", Query = decorators_1.makeParamDecorator(di_19.QueryMetadata));
            // TODO(alexeagle): remove the duplication of this doc. It is copied from ContentChildrenMetadata.
            /**
             * Configures a content query.
             *
             * Content queries are set before the `ngAfterContentInit` callback is called.
             *
             * ### Example
             *
             * ```
             * @Directive({
             *   selector: 'someDir'
             * })
             * class SomeDir {
             *   @ContentChildren(ChildDirective) contentChildren: QueryList<ChildDirective>;
             *
             *   ngAfterContentInit() {
             *     // contentChildren is set
             *   }
             * }
             * ```
             */
            exports_143("ContentChildren", ContentChildren = decorators_1.makePropDecorator(di_19.ContentChildrenMetadata));
            // TODO(alexeagle): remove the duplication of this doc. It is copied from ContentChildMetadata.
            /**
             * Configures a content query.
             *
             * Content queries are set before the `ngAfterContentInit` callback is called.
             *
             * ### Example
             *
             * ```
             * @Directive({
             *   selector: 'someDir'
             * })
             * class SomeDir {
             *   @ContentChild(ChildDirective) contentChild;
             *
             *   ngAfterContentInit() {
             *     // contentChild is set
             *   }
             * }
             * ```
             */
            exports_143("ContentChild", ContentChild = decorators_1.makePropDecorator(di_19.ContentChildMetadata));
            // TODO(alexeagle): remove the duplication of this doc. It is copied from ViewChildrenMetadata.
            /**
             * Configures a view query.
             *
             * View queries are set before the `ngAfterViewInit` callback is called.
             *
             * ### Example
             *
             * ```
             * @Component({
             *   selector: 'someDir',
             *   templateUrl: 'someTemplate',
             *   directives: [ItemDirective]
             * })
             * class SomeDir {
             *   @ViewChildren(ItemDirective) viewChildren: QueryList<ItemDirective>;
             *
             *   ngAfterViewInit() {
             *     // viewChildren is set
             *   }
             * }
             * ```
             */
            exports_143("ViewChildren", ViewChildren = decorators_1.makePropDecorator(di_19.ViewChildrenMetadata));
            // TODO(alexeagle): remove the duplication of this doc. It is copied from ViewChildMetadata.
            /**
             * Configures a view query.
             *
             * View queries are set before the `ngAfterViewInit` callback is called.
             *
             * ### Example
             *
             * ```
             * @Component({
             *   selector: 'someDir',
             *   templateUrl: 'someTemplate',
             *   directives: [ItemDirective]
             * })
             * class SomeDir {
             *   @ViewChild(ItemDirective) viewChild:ItemDirective;
             *
             *   ngAfterViewInit() {
             *     // viewChild is set
             *   }
             * }
             * ```
             */
            exports_143("ViewChild", ViewChild = decorators_1.makePropDecorator(di_19.ViewChildMetadata));
            // TODO(alexeagle): remove the duplication of this doc. It is copied from ViewQueryMetadata.
            /**
             * Similar to {@link QueryMetadata}, but querying the component view, instead of
             * the content children.
             *
             * ### Example ([live demo](http://plnkr.co/edit/eNsFHDf7YjyM6IzKxM1j?p=preview))
             *
             * ```javascript
             * @Component({
             *   ...,
             *   template: `
             *     <item> a </item>
             *     <item> b </item>
             *     <item> c </item>
             *   `
             * })
             * class MyComponent {
             *   shown: boolean;
             *
             *   constructor(private @Query(Item) items:QueryList<Item>) {
             *     items.changes.subscribe(() => console.log(items.length));
             *   }
             * }
             * ```
             *
             * Supports the same querying parameters as {@link QueryMetadata}, except
             * `descendants`. This always queries the whole view.
             *
             * As `shown` is flipped between true and false, items will contain zero of one
             * items.
             *
             * Specifies that a {@link QueryList} should be injected.
             *
             * The injected object is an iterable and observable live list.
             * See {@link QueryList} for more details.
             */
            exports_143("ViewQuery", ViewQuery = decorators_1.makeParamDecorator(di_19.ViewQueryMetadata));
            // TODO(alexeagle): remove the duplication of this doc. It is copied from PipeMetadata.
            /**
             * Declare reusable pipe function.
             *
             * ### Example
             *
             * {@example core/ts/metadata/metadata.ts region='pipe'}
             */
            exports_143("Pipe", Pipe = decorators_1.makeDecorator(directives_4.PipeMetadata));
            // TODO(alexeagle): remove the duplication of this doc. It is copied from InputMetadata.
            /**
             * Declares a data-bound input property.
             *
             * Angular automatically updates data-bound properties during change detection.
             *
             * `InputMetadata` takes an optional parameter that specifies the name
             * used when instantiating a component in the template. When not provided,
             * the name of the decorated property is used.
             *
             * ### Example
             *
             * The following example creates a component with two input properties.
             *
             * ```typescript
             * @Component({
             *   selector: 'bank-account',
             *   template: `
             *     Bank Name: {{bankName}}
             *     Account Id: {{id}}
             *   `
             * })
             * class BankAccount {
             *   @Input() bankName: string;
             *   @Input('account-id') id: string;
             *
             *   // this property is not bound, and won't be automatically updated by Angular
             *   normalizedBankName: string;
             * }
             *
             * @Component({
             *   selector: 'app',
             *   template: `
             *     <bank-account bank-name="RBC" account-id="4747"></bank-account>
             *   `,
             *   directives: [BankAccount]
             * })
             * class App {}
             *
             * bootstrap(App);
             * ```
             */
            exports_143("Input", Input = decorators_1.makePropDecorator(directives_4.InputMetadata));
            // TODO(alexeagle): remove the duplication of this doc. It is copied from OutputMetadata.
            /**
             * Declares an event-bound output property.
             *
             * When an output property emits an event, an event handler attached to that event
             * the template is invoked.
             *
             * `OutputMetadata` takes an optional parameter that specifies the name
             * used when instantiating a component in the template. When not provided,
             * the name of the decorated property is used.
             *
             * ### Example
             *
             * ```typescript
             * @Directive({
             *   selector: 'interval-dir',
             * })
             * class IntervalDir {
             *   @Output() everySecond = new EventEmitter();
             *   @Output('everyFiveSeconds') five5Secs = new EventEmitter();
             *
             *   constructor() {
             *     setInterval(() => this.everySecond.emit("event"), 1000);
             *     setInterval(() => this.five5Secs.emit("event"), 5000);
             *   }
             * }
             *
             * @Component({
             *   selector: 'app',
             *   template: `
             *     <interval-dir (everySecond)="everySecond()" (everyFiveSeconds)="everyFiveSeconds()">
             *     </interval-dir>
             *   `,
             *   directives: [IntervalDir]
             * })
             * class App {
             *   everySecond() { console.log('second'); }
             *   everyFiveSeconds() { console.log('five seconds'); }
             * }
             * bootstrap(App);
             * ```
             */
            exports_143("Output", Output = decorators_1.makePropDecorator(directives_4.OutputMetadata));
            // TODO(alexeagle): remove the duplication of this doc. It is copied from HostBindingMetadata.
            /**
             * Declares a host property binding.
             *
             * Angular automatically checks host property bindings during change detection.
             * If a binding changes, it will update the host element of the directive.
             *
             * `HostBindingMetadata` takes an optional parameter that specifies the property
             * name of the host element that will be updated. When not provided,
             * the class property name is used.
             *
             * ### Example
             *
             * The following example creates a directive that sets the `valid` and `invalid` classes
             * on the DOM element that has ngModel directive on it.
             *
             * ```typescript
             * @Directive({selector: '[ngModel]'})
             * class NgModelStatus {
             *   constructor(public control:NgModel) {}
             *   @HostBinding('[class.valid]') get valid { return this.control.valid; }
             *   @HostBinding('[class.invalid]') get invalid { return this.control.invalid; }
             * }
             *
             * @Component({
             *   selector: 'app',
             *   template: `<input [(ngModel)]="prop">`,
             *   directives: [FORM_DIRECTIVES, NgModelStatus]
             * })
             * class App {
             *   prop;
             * }
             *
             * bootstrap(App);
             * ```
             */
            exports_143("HostBinding", HostBinding = decorators_1.makePropDecorator(directives_4.HostBindingMetadata));
            // TODO(alexeagle): remove the duplication of this doc. It is copied from HostListenerMetadata.
            /**
             * Declares a host listener.
             *
             * Angular will invoke the decorated method when the host element emits the specified event.
             *
             * If the decorated method returns `false`, then `preventDefault` is applied on the DOM
             * event.
             *
             * ### Example
             *
             * The following example declares a directive that attaches a click listener to the button and
             * counts clicks.
             *
             * ```typescript
             * @Directive({selector: 'button[counting]'})
             * class CountClicks {
             *   numberOfClicks = 0;
             *
             *   @HostListener('click', ['$event.target'])
             *   onClick(btn) {
             *     console.log("button", btn, "number of clicks:", this.numberOfClicks++);
             *   }
             * }
             *
             * @Component({
             *   selector: 'app',
             *   template: `<button counting>Increment</button>`,
             *   directives: [CountClicks]
             * })
             * class App {}
             *
             * bootstrap(App);
             * ```
             */
            exports_143("HostListener", HostListener = decorators_1.makePropDecorator(directives_4.HostListenerMetadata));
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/util", ["test/node_modules/angular2/ts/src/core/util/decorators"], function(exports_144, context_144) {
    "use strict";
    var __moduleName = context_144 && context_144.id;
    return {
        setters:[
            function (decorators_2_1) {
                exports_144({
                    "Class": decorators_2_1["Class"],
                    "ClassDefinition": decorators_2_1["ClassDefinition"],
                    "TypeDecorator": decorators_2_1["TypeDecorator"]
                });
            }],
        execute: function() {
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/prod_mode", ['angular2/src/facade/lang'], function(exports_145, context_145) {
    "use strict";
    var __moduleName = context_145 && context_145.id;
    return {
        setters:[
            function (lang_79_1) {
                exports_145({
                    "enableProdMode": lang_79_1["enableProdMode"]
                });
            }],
        execute: function() {
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/di/metadata", ["angular2/src/facade/lang"], function(exports_146, context_146) {
    "use strict";
    var __moduleName = context_146 && context_146.id;
    var lang_80;
    var InjectMetadata, OptionalMetadata, DependencyMetadata, InjectableMetadata, SelfMetadata, SkipSelfMetadata, HostMetadata;
    return {
        setters:[
            function (lang_80_1) {
                lang_80 = lang_80_1;
            }],
        execute: function() {
            /**
             * A parameter metadata that specifies a dependency.
             *
             * ### Example ([live demo](http://plnkr.co/edit/6uHYJK?p=preview))
             *
             * ```typescript
             * class Engine {}
             *
             * @Injectable()
             * class Car {
             *   engine;
             *   constructor(@Inject("MyEngine") engine:Engine) {
             *     this.engine = engine;
             *   }
             * }
             *
             * var injector = Injector.resolveAndCreate([
             *  provide("MyEngine", {useClass: Engine}),
             *  Car
             * ]);
             *
             * expect(injector.get(Car).engine instanceof Engine).toBe(true);
             * ```
             *
             * When `@Inject()` is not present, {@link Injector} will use the type annotation of the parameter.
             *
             * ### Example
             *
             * ```typescript
             * class Engine {}
             *
             * @Injectable()
             * class Car {
             *   constructor(public engine: Engine) {} //same as constructor(@Inject(Engine) engine:Engine)
             * }
             *
             * var injector = Injector.resolveAndCreate([Engine, Car]);
             * expect(injector.get(Car).engine instanceof Engine).toBe(true);
             * ```
             */
            InjectMetadata = (function () {
                function InjectMetadata(token) {
                    this.token = token;
                }
                InjectMetadata.prototype.toString = function () { return "@Inject(" + lang_80.stringify(this.token) + ")"; };
                InjectMetadata = __decorate([
                    lang_80.CONST(), 
                    __metadata('design:paramtypes', [Object])
                ], InjectMetadata);
                return InjectMetadata;
            }());
            exports_146("InjectMetadata", InjectMetadata);
            /**
             * A parameter metadata that marks a dependency as optional. {@link Injector} provides `null` if
             * the dependency is not found.
             *
             * ### Example ([live demo](http://plnkr.co/edit/AsryOm?p=preview))
             *
             * ```typescript
             * class Engine {}
             *
             * @Injectable()
             * class Car {
             *   engine;
             *   constructor(@Optional() engine:Engine) {
             *     this.engine = engine;
             *   }
             * }
             *
             * var injector = Injector.resolveAndCreate([Car]);
             * expect(injector.get(Car).engine).toBeNull();
             * ```
             */
            OptionalMetadata = (function () {
                function OptionalMetadata() {
                }
                OptionalMetadata.prototype.toString = function () { return "@Optional()"; };
                OptionalMetadata = __decorate([
                    lang_80.CONST(), 
                    __metadata('design:paramtypes', [])
                ], OptionalMetadata);
                return OptionalMetadata;
            }());
            exports_146("OptionalMetadata", OptionalMetadata);
            /**
             * `DependencyMetadata` is used by the framework to extend DI.
             * This is internal to Angular and should not be used directly.
             */
            DependencyMetadata = (function () {
                function DependencyMetadata() {
                }
                Object.defineProperty(DependencyMetadata.prototype, "token", {
                    get: function () { return null; },
                    enumerable: true,
                    configurable: true
                });
                DependencyMetadata = __decorate([
                    lang_80.CONST(), 
                    __metadata('design:paramtypes', [])
                ], DependencyMetadata);
                return DependencyMetadata;
            }());
            exports_146("DependencyMetadata", DependencyMetadata);
            /**
             * A marker metadata that marks a class as available to {@link Injector} for creation.
             *
             * ### Example ([live demo](http://plnkr.co/edit/Wk4DMQ?p=preview))
             *
             * ```typescript
             * @Injectable()
             * class UsefulService {}
             *
             * @Injectable()
             * class NeedsService {
             *   constructor(public service:UsefulService) {}
             * }
             *
             * var injector = Injector.resolveAndCreate([NeedsService, UsefulService]);
             * expect(injector.get(NeedsService).service instanceof UsefulService).toBe(true);
             * ```
             * {@link Injector} will throw {@link NoAnnotationError} when trying to instantiate a class that
             * does not have `@Injectable` marker, as shown in the example below.
             *
             * ```typescript
             * class UsefulService {}
             *
             * class NeedsService {
             *   constructor(public service:UsefulService) {}
             * }
             *
             * var injector = Injector.resolveAndCreate([NeedsService, UsefulService]);
             * expect(() => injector.get(NeedsService)).toThrowError();
             * ```
             */
            InjectableMetadata = (function () {
                function InjectableMetadata() {
                }
                InjectableMetadata = __decorate([
                    lang_80.CONST(), 
                    __metadata('design:paramtypes', [])
                ], InjectableMetadata);
                return InjectableMetadata;
            }());
            exports_146("InjectableMetadata", InjectableMetadata);
            /**
             * Specifies that an {@link Injector} should retrieve a dependency only from itself.
             *
             * ### Example ([live demo](http://plnkr.co/edit/NeagAg?p=preview))
             *
             * ```typescript
             * class Dependency {
             * }
             *
             * @Injectable()
             * class NeedsDependency {
             *   dependency;
             *   constructor(@Self() dependency:Dependency) {
             *     this.dependency = dependency;
             *   }
             * }
             *
             * var inj = Injector.resolveAndCreate([Dependency, NeedsDependency]);
             * var nd = inj.get(NeedsDependency);
             *
             * expect(nd.dependency instanceof Dependency).toBe(true);
             *
             * var inj = Injector.resolveAndCreate([Dependency]);
             * var child = inj.resolveAndCreateChild([NeedsDependency]);
             * expect(() => child.get(NeedsDependency)).toThrowError();
             * ```
             */
            SelfMetadata = (function () {
                function SelfMetadata() {
                }
                SelfMetadata.prototype.toString = function () { return "@Self()"; };
                SelfMetadata = __decorate([
                    lang_80.CONST(), 
                    __metadata('design:paramtypes', [])
                ], SelfMetadata);
                return SelfMetadata;
            }());
            exports_146("SelfMetadata", SelfMetadata);
            /**
             * Specifies that the dependency resolution should start from the parent injector.
             *
             * ### Example ([live demo](http://plnkr.co/edit/Wchdzb?p=preview))
             *
             * ```typescript
             * class Dependency {
             * }
             *
             * @Injectable()
             * class NeedsDependency {
             *   dependency;
             *   constructor(@SkipSelf() dependency:Dependency) {
             *     this.dependency = dependency;
             *   }
             * }
             *
             * var parent = Injector.resolveAndCreate([Dependency]);
             * var child = parent.resolveAndCreateChild([NeedsDependency]);
             * expect(child.get(NeedsDependency).dependency instanceof Depedency).toBe(true);
             *
             * var inj = Injector.resolveAndCreate([Dependency, NeedsDependency]);
             * expect(() => inj.get(NeedsDependency)).toThrowError();
             * ```
             */
            SkipSelfMetadata = (function () {
                function SkipSelfMetadata() {
                }
                SkipSelfMetadata.prototype.toString = function () { return "@SkipSelf()"; };
                SkipSelfMetadata = __decorate([
                    lang_80.CONST(), 
                    __metadata('design:paramtypes', [])
                ], SkipSelfMetadata);
                return SkipSelfMetadata;
            }());
            exports_146("SkipSelfMetadata", SkipSelfMetadata);
            /**
             * Specifies that an injector should retrieve a dependency from any injector until reaching the
             * closest host.
             *
             * In Angular, a component element is automatically declared as a host for all the injectors in
             * its view.
             *
             * ### Example ([live demo](http://plnkr.co/edit/GX79pV?p=preview))
             *
             * In the following example `App` contains `ParentCmp`, which contains `ChildDirective`.
             * So `ParentCmp` is the host of `ChildDirective`.
             *
             * `ChildDirective` depends on two services: `HostService` and `OtherService`.
             * `HostService` is defined at `ParentCmp`, and `OtherService` is defined at `App`.
             *
             *```typescript
             * class OtherService {}
             * class HostService {}
             *
             * @Directive({
             *   selector: 'child-directive'
             * })
             * class ChildDirective {
             *   constructor(@Optional() @Host() os:OtherService, @Optional() @Host() hs:HostService){
             *     console.log("os is null", os);
             *     console.log("hs is NOT null", hs);
             *   }
             * }
             *
             * @Component({
             *   selector: 'parent-cmp',
             *   providers: [HostService],
             *   template: `
             *     Dir: <child-directive></child-directive>
             *   `,
             *   directives: [ChildDirective]
             * })
             * class ParentCmp {
             * }
             *
             * @Component({
             *   selector: 'app',
             *   providers: [OtherService],
             *   template: `
             *     Parent: <parent-cmp></parent-cmp>
             *   `,
             *   directives: [ParentCmp]
             * })
             * class App {
             * }
             *
             * bootstrap(App);
             *```
             */
            HostMetadata = (function () {
                function HostMetadata() {
                }
                HostMetadata.prototype.toString = function () { return "@Host()"; };
                HostMetadata = __decorate([
                    lang_80.CONST(), 
                    __metadata('design:paramtypes', [])
                ], HostMetadata);
                return HostMetadata;
            }());
            exports_146("HostMetadata", HostMetadata);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/di/decorators", ["test/node_modules/angular2/ts/src/core/di/metadata", "test/node_modules/angular2/ts/src/core/util/decorators"], function(exports_147, context_147) {
    "use strict";
    var __moduleName = context_147 && context_147.id;
    var metadata_3, decorators_3;
    var Inject, Optional, Injectable, Self, Host, SkipSelf;
    return {
        setters:[
            function (metadata_3_1) {
                metadata_3 = metadata_3_1;
            },
            function (decorators_3_1) {
                decorators_3 = decorators_3_1;
            }],
        execute: function() {
            /**
             * Factory for creating {@link InjectMetadata}.
             */
            exports_147("Inject", Inject = decorators_3.makeParamDecorator(metadata_3.InjectMetadata));
            /**
             * Factory for creating {@link OptionalMetadata}.
             */
            exports_147("Optional", Optional = decorators_3.makeParamDecorator(metadata_3.OptionalMetadata));
            /**
             * Factory for creating {@link InjectableMetadata}.
             */
            exports_147("Injectable", Injectable = decorators_3.makeDecorator(metadata_3.InjectableMetadata));
            /**
             * Factory for creating {@link SelfMetadata}.
             */
            exports_147("Self", Self = decorators_3.makeParamDecorator(metadata_3.SelfMetadata));
            /**
             * Factory for creating {@link HostMetadata}.
             */
            exports_147("Host", Host = decorators_3.makeParamDecorator(metadata_3.HostMetadata));
            /**
             * Factory for creating {@link SkipSelfMetadata}.
             */
            exports_147("SkipSelf", SkipSelf = decorators_3.makeParamDecorator(metadata_3.SkipSelfMetadata));
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/di/forward_ref", ['angular2/src/facade/lang'], function(exports_148, context_148) {
    "use strict";
    var __moduleName = context_148 && context_148.id;
    var lang_81;
    /**
     * Allows to refer to references which are not yet defined.
     *
     * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of
     * DI is declared,
     * but not yet defined. It is also used when the `token` which we use when creating a query is not
     * yet defined.
     *
     * ### Example
     * {@example core/di/ts/forward_ref/forward_ref.ts region='forward_ref'}
     */
    function forwardRef(forwardRefFn) {
        forwardRefFn.__forward_ref__ = forwardRef;
        forwardRefFn.toString = function () { return lang_81.stringify(this()); };
        return forwardRefFn;
    }
    exports_148("forwardRef", forwardRef);
    /**
     * Lazily retrieves the reference value from a forwardRef.
     *
     * Acts as the identity function when given a non-forward-ref value.
     *
     * ### Example ([live demo](http://plnkr.co/edit/GU72mJrk1fiodChcmiDR?p=preview))
     *
     * ```typescript
     * var ref = forwardRef(() => "refValue");
     * expect(resolveForwardRef(ref)).toEqual("refValue");
     * expect(resolveForwardRef("regularValue")).toEqual("regularValue");
     * ```
     *
     * See: {@link forwardRef}
     */
    function resolveForwardRef(type) {
        if (lang_81.isFunction(type) && type.hasOwnProperty('__forward_ref__') &&
            type.__forward_ref__ === forwardRef) {
            return type();
        }
        else {
            return type;
        }
    }
    exports_148("resolveForwardRef", resolveForwardRef);
    return {
        setters:[
            function (lang_81_1) {
                lang_81 = lang_81_1;
            }],
        execute: function() {
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/di/key", ['angular2/src/facade/lang', 'angular2/src/facade/exceptions', "test/node_modules/angular2/ts/src/core/di/forward_ref"], function(exports_149, context_149) {
    "use strict";
    var __moduleName = context_149 && context_149.id;
    var lang_82, exceptions_18, forward_ref_1;
    var Key, KeyRegistry, _globalKeyRegistry;
    return {
        setters:[
            function (lang_82_1) {
                lang_82 = lang_82_1;
            },
            function (exceptions_18_1) {
                exceptions_18 = exceptions_18_1;
            },
            function (forward_ref_1_1) {
                forward_ref_1 = forward_ref_1_1;
            }],
        execute: function() {
            /**
             * A unique object used for retrieving items from the {@link Injector}.
             *
             * Keys have:
             * - a system-wide unique `id`.
             * - a `token`.
             *
             * `Key` is used internally by {@link Injector} because its system-wide unique `id` allows the
             * injector to store created objects in a more efficient way.
             *
             * `Key` should not be created directly. {@link Injector} creates keys automatically when resolving
             * providers.
             */
            Key = (function () {
                /**
                 * Private
                 */
                function Key(token, id) {
                    this.token = token;
                    this.id = id;
                    if (lang_82.isBlank(token)) {
                        throw new exceptions_18.BaseException('Token must be defined!');
                    }
                }
                Object.defineProperty(Key.prototype, "displayName", {
                    /**
                     * Returns a stringified token.
                     */
                    get: function () { return lang_82.stringify(this.token); },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Retrieves a `Key` for a token.
                 */
                Key.get = function (token) { return _globalKeyRegistry.get(forward_ref_1.resolveForwardRef(token)); };
                Object.defineProperty(Key, "numberOfKeys", {
                    /**
                     * @returns the number of keys registered in the system.
                     */
                    get: function () { return _globalKeyRegistry.numberOfKeys; },
                    enumerable: true,
                    configurable: true
                });
                return Key;
            }());
            exports_149("Key", Key);
            /**
             * @internal
             */
            KeyRegistry = (function () {
                function KeyRegistry() {
                    this._allKeys = new Map();
                }
                KeyRegistry.prototype.get = function (token) {
                    if (token instanceof Key)
                        return token;
                    if (this._allKeys.has(token)) {
                        return this._allKeys.get(token);
                    }
                    var newKey = new Key(token, Key.numberOfKeys);
                    this._allKeys.set(token, newKey);
                    return newKey;
                };
                Object.defineProperty(KeyRegistry.prototype, "numberOfKeys", {
                    get: function () { return this._allKeys.size; },
                    enumerable: true,
                    configurable: true
                });
                return KeyRegistry;
            }());
            exports_149("KeyRegistry", KeyRegistry);
            _globalKeyRegistry = new KeyRegistry();
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/di/exceptions", ['angular2/src/facade/collection', 'angular2/src/facade/lang', 'angular2/src/facade/exceptions'], function(exports_150, context_150) {
    "use strict";
    var __moduleName = context_150 && context_150.id;
    var collection_31, lang_83, exceptions_19;
    var AbstractProviderError, NoProviderError, CyclicDependencyError, InstantiationError, InvalidProviderError, NoAnnotationError, OutOfBoundsError, MixingMultiProvidersWithRegularProvidersError;
    function findFirstClosedCycle(keys) {
        var res = [];
        for (var i = 0; i < keys.length; ++i) {
            if (collection_31.ListWrapper.contains(res, keys[i])) {
                res.push(keys[i]);
                return res;
            }
            else {
                res.push(keys[i]);
            }
        }
        return res;
    }
    function constructResolvingPath(keys) {
        if (keys.length > 1) {
            var reversed = findFirstClosedCycle(collection_31.ListWrapper.reversed(keys));
            var tokenStrs = reversed.map(function (k) { return lang_83.stringify(k.token); });
            return " (" + tokenStrs.join(' -> ') + ")";
        }
        else {
            return "";
        }
    }
    return {
        setters:[
            function (collection_31_1) {
                collection_31 = collection_31_1;
            },
            function (lang_83_1) {
                lang_83 = lang_83_1;
            },
            function (exceptions_19_1) {
                exceptions_19 = exceptions_19_1;
            }],
        execute: function() {
            /**
             * Base class for all errors arising from misconfigured providers.
             */
            AbstractProviderError = (function (_super) {
                __extends(AbstractProviderError, _super);
                function AbstractProviderError(injector, key, constructResolvingMessage) {
                    _super.call(this, "DI Exception");
                    this.keys = [key];
                    this.injectors = [injector];
                    this.constructResolvingMessage = constructResolvingMessage;
                    this.message = this.constructResolvingMessage(this.keys);
                }
                AbstractProviderError.prototype.addKey = function (injector, key) {
                    this.injectors.push(injector);
                    this.keys.push(key);
                    this.message = this.constructResolvingMessage(this.keys);
                };
                Object.defineProperty(AbstractProviderError.prototype, "context", {
                    get: function () { return this.injectors[this.injectors.length - 1].debugContext(); },
                    enumerable: true,
                    configurable: true
                });
                return AbstractProviderError;
            }(exceptions_19.BaseException));
            exports_150("AbstractProviderError", AbstractProviderError);
            /**
             * Thrown when trying to retrieve a dependency by `Key` from {@link Injector}, but the
             * {@link Injector} does not have a {@link Provider} for {@link Key}.
             *
             * ### Example ([live demo](http://plnkr.co/edit/vq8D3FRB9aGbnWJqtEPE?p=preview))
             *
             * ```typescript
             * class A {
             *   constructor(b:B) {}
             * }
             *
             * expect(() => Injector.resolveAndCreate([A])).toThrowError();
             * ```
             */
            NoProviderError = (function (_super) {
                __extends(NoProviderError, _super);
                function NoProviderError(injector, key) {
                    _super.call(this, injector, key, function (keys) {
                        var first = lang_83.stringify(collection_31.ListWrapper.first(keys).token);
                        return "No provider for " + first + "!" + constructResolvingPath(keys);
                    });
                }
                return NoProviderError;
            }(AbstractProviderError));
            exports_150("NoProviderError", NoProviderError);
            /**
             * Thrown when dependencies form a cycle.
             *
             * ### Example ([live demo](http://plnkr.co/edit/wYQdNos0Tzql3ei1EV9j?p=info))
             *
             * ```typescript
             * var injector = Injector.resolveAndCreate([
             *   provide("one", {useFactory: (two) => "two", deps: [[new Inject("two")]]}),
             *   provide("two", {useFactory: (one) => "one", deps: [[new Inject("one")]]})
             * ]);
             *
             * expect(() => injector.get("one")).toThrowError();
             * ```
             *
             * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.
             */
            CyclicDependencyError = (function (_super) {
                __extends(CyclicDependencyError, _super);
                function CyclicDependencyError(injector, key) {
                    _super.call(this, injector, key, function (keys) {
                        return "Cannot instantiate cyclic dependency!" + constructResolvingPath(keys);
                    });
                }
                return CyclicDependencyError;
            }(AbstractProviderError));
            exports_150("CyclicDependencyError", CyclicDependencyError);
            /**
             * Thrown when a constructing type returns with an Error.
             *
             * The `InstantiationError` class contains the original error plus the dependency graph which caused
             * this object to be instantiated.
             *
             * ### Example ([live demo](http://plnkr.co/edit/7aWYdcqTQsP0eNqEdUAf?p=preview))
             *
             * ```typescript
             * class A {
             *   constructor() {
             *     throw new Error('message');
             *   }
             * }
             *
             * var injector = Injector.resolveAndCreate([A]);
            
             * try {
             *   injector.get(A);
             * } catch (e) {
             *   expect(e instanceof InstantiationError).toBe(true);
             *   expect(e.originalException.message).toEqual("message");
             *   expect(e.originalStack).toBeDefined();
             * }
             * ```
             */
            InstantiationError = (function (_super) {
                __extends(InstantiationError, _super);
                function InstantiationError(injector, originalException, originalStack, key) {
                    _super.call(this, "DI Exception", originalException, originalStack, null);
                    this.keys = [key];
                    this.injectors = [injector];
                }
                InstantiationError.prototype.addKey = function (injector, key) {
                    this.injectors.push(injector);
                    this.keys.push(key);
                };
                Object.defineProperty(InstantiationError.prototype, "wrapperMessage", {
                    get: function () {
                        var first = lang_83.stringify(collection_31.ListWrapper.first(this.keys).token);
                        return "Error during instantiation of " + first + "!" + constructResolvingPath(this.keys) + ".";
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(InstantiationError.prototype, "causeKey", {
                    get: function () { return this.keys[0]; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(InstantiationError.prototype, "context", {
                    get: function () { return this.injectors[this.injectors.length - 1].debugContext(); },
                    enumerable: true,
                    configurable: true
                });
                return InstantiationError;
            }(exceptions_19.WrappedException));
            exports_150("InstantiationError", InstantiationError);
            /**
             * Thrown when an object other then {@link Provider} (or `Type`) is passed to {@link Injector}
             * creation.
             *
             * ### Example ([live demo](http://plnkr.co/edit/YatCFbPAMCL0JSSQ4mvH?p=preview))
             *
             * ```typescript
             * expect(() => Injector.resolveAndCreate(["not a type"])).toThrowError();
             * ```
             */
            InvalidProviderError = (function (_super) {
                __extends(InvalidProviderError, _super);
                function InvalidProviderError(provider) {
                    _super.call(this, "Invalid provider - only instances of Provider and Type are allowed, got: " +
                        provider.toString());
                }
                return InvalidProviderError;
            }(exceptions_19.BaseException));
            exports_150("InvalidProviderError", InvalidProviderError);
            /**
             * Thrown when the class has no annotation information.
             *
             * Lack of annotation information prevents the {@link Injector} from determining which dependencies
             * need to be injected into the constructor.
             *
             * ### Example ([live demo](http://plnkr.co/edit/rHnZtlNS7vJOPQ6pcVkm?p=preview))
             *
             * ```typescript
             * class A {
             *   constructor(b) {}
             * }
             *
             * expect(() => Injector.resolveAndCreate([A])).toThrowError();
             * ```
             *
             * This error is also thrown when the class not marked with {@link Injectable} has parameter types.
             *
             * ```typescript
             * class B {}
             *
             * class A {
             *   constructor(b:B) {} // no information about the parameter types of A is available at runtime.
             * }
             *
             * expect(() => Injector.resolveAndCreate([A,B])).toThrowError();
             * ```
             */
            NoAnnotationError = (function (_super) {
                __extends(NoAnnotationError, _super);
                function NoAnnotationError(typeOrFunc, params) {
                    _super.call(this, NoAnnotationError._genMessage(typeOrFunc, params));
                }
                NoAnnotationError._genMessage = function (typeOrFunc, params) {
                    var signature = [];
                    for (var i = 0, ii = params.length; i < ii; i++) {
                        var parameter = params[i];
                        if (lang_83.isBlank(parameter) || parameter.length == 0) {
                            signature.push('?');
                        }
                        else {
                            signature.push(parameter.map(lang_83.stringify).join(' '));
                        }
                    }
                    return "Cannot resolve all parameters for '" + lang_83.stringify(typeOrFunc) + "'(" +
                        signature.join(', ') + "). " +
                        "Make sure that all the parameters are decorated with Inject or have valid type annotations and that '" +
                        lang_83.stringify(typeOrFunc) + "' is decorated with Injectable.";
                };
                return NoAnnotationError;
            }(exceptions_19.BaseException));
            exports_150("NoAnnotationError", NoAnnotationError);
            /**
             * Thrown when getting an object by index.
             *
             * ### Example ([live demo](http://plnkr.co/edit/bRs0SX2OTQiJzqvjgl8P?p=preview))
             *
             * ```typescript
             * class A {}
             *
             * var injector = Injector.resolveAndCreate([A]);
             *
             * expect(() => injector.getAt(100)).toThrowError();
             * ```
             */
            OutOfBoundsError = (function (_super) {
                __extends(OutOfBoundsError, _super);
                function OutOfBoundsError(index) {
                    _super.call(this, "Index " + index + " is out-of-bounds.");
                }
                return OutOfBoundsError;
            }(exceptions_19.BaseException));
            exports_150("OutOfBoundsError", OutOfBoundsError);
            // TODO: add a working example after alpha38 is released
            /**
             * Thrown when a multi provider and a regular provider are bound to the same token.
             *
             * ### Example
             *
             * ```typescript
             * expect(() => Injector.resolveAndCreate([
             *   new Provider("Strings", {useValue: "string1", multi: true}),
             *   new Provider("Strings", {useValue: "string2", multi: false})
             * ])).toThrowError();
             * ```
             */
            MixingMultiProvidersWithRegularProvidersError = (function (_super) {
                __extends(MixingMultiProvidersWithRegularProvidersError, _super);
                function MixingMultiProvidersWithRegularProvidersError(provider1, provider2) {
                    _super.call(this, "Cannot mix multi providers and regular providers, got: " + provider1.toString() + " " +
                        provider2.toString());
                }
                return MixingMultiProvidersWithRegularProvidersError;
            }(exceptions_19.BaseException));
            exports_150("MixingMultiProvidersWithRegularProvidersError", MixingMultiProvidersWithRegularProvidersError);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/di/provider", ['angular2/src/facade/lang', 'angular2/src/facade/exceptions', 'angular2/src/facade/collection', 'angular2/src/core/reflection/reflection', "test/node_modules/angular2/ts/src/core/di/key", "test/node_modules/angular2/ts/src/core/di/metadata", "test/node_modules/angular2/ts/src/core/di/exceptions", "test/node_modules/angular2/ts/src/core/di/forward_ref"], function(exports_151, context_151) {
    "use strict";
    var __moduleName = context_151 && context_151.id;
    var lang_84, exceptions_20, collection_32, reflection_3, key_1, metadata_4, exceptions_21, forward_ref_2;
    var Dependency, _EMPTY_LIST, Provider, Binding, ResolvedProvider_, ResolvedFactory, ProviderBuilder;
    /**
     * Creates a {@link Provider}.
     *
     * To construct a {@link Provider}, bind a `token` to either a class, a value, a factory function,
     * or
     * to an existing `token`.
     * See {@link ProviderBuilder} for more details.
     *
     * The `token` is most commonly a class or {@link angular2/di/OpaqueToken}.
     *
     * @deprecated
     */
    function bind(token) {
        return new ProviderBuilder(token);
    }
    exports_151("bind", bind);
    /**
     * Creates a {@link Provider}.
     *
     * See {@link Provider} for more details.
     *
     * <!-- TODO: improve the docs -->
     */
    function provide(token, _a) {
        var useClass = _a.useClass, useValue = _a.useValue, useExisting = _a.useExisting, useFactory = _a.useFactory, deps = _a.deps, multi = _a.multi;
        return new Provider(token, {
            useClass: useClass,
            useValue: useValue,
            useExisting: useExisting,
            useFactory: useFactory,
            deps: deps,
            multi: multi
        });
    }
    exports_151("provide", provide);
    /**
     * Resolve a single provider.
     */
    function resolveFactory(provider) {
        var factoryFn;
        var resolvedDeps;
        if (lang_84.isPresent(provider.useClass)) {
            var useClass = forward_ref_2.resolveForwardRef(provider.useClass);
            factoryFn = reflection_3.reflector.factory(useClass);
            resolvedDeps = _dependenciesFor(useClass);
        }
        else if (lang_84.isPresent(provider.useExisting)) {
            factoryFn = function (aliasInstance) { return aliasInstance; };
            resolvedDeps = [Dependency.fromKey(key_1.Key.get(provider.useExisting))];
        }
        else if (lang_84.isPresent(provider.useFactory)) {
            factoryFn = provider.useFactory;
            resolvedDeps = _constructDependencies(provider.useFactory, provider.dependencies);
        }
        else {
            factoryFn = function () { return provider.useValue; };
            resolvedDeps = _EMPTY_LIST;
        }
        return new ResolvedFactory(factoryFn, resolvedDeps);
    }
    exports_151("resolveFactory", resolveFactory);
    /**
     * Converts the {@link Provider} into {@link ResolvedProvider}.
     *
     * {@link Injector} internally only uses {@link ResolvedProvider}, {@link Provider} contains
     * convenience provider syntax.
     */
    function resolveProvider(provider) {
        return new ResolvedProvider_(key_1.Key.get(provider.token), [resolveFactory(provider)], provider.multi);
    }
    exports_151("resolveProvider", resolveProvider);
    /**
     * Resolve a list of Providers.
     */
    function resolveProviders(providers) {
        var normalized = _normalizeProviders(providers, []);
        var resolved = normalized.map(resolveProvider);
        return collection_32.MapWrapper.values(mergeResolvedProviders(resolved, new Map()));
    }
    exports_151("resolveProviders", resolveProviders);
    /**
     * Merges a list of ResolvedProviders into a list where
     * each key is contained exactly once and multi providers
     * have been merged.
     */
    function mergeResolvedProviders(providers, normalizedProvidersMap) {
        for (var i = 0; i < providers.length; i++) {
            var provider = providers[i];
            var existing = normalizedProvidersMap.get(provider.key.id);
            if (lang_84.isPresent(existing)) {
                if (provider.multiProvider !== existing.multiProvider) {
                    throw new exceptions_21.MixingMultiProvidersWithRegularProvidersError(existing, provider);
                }
                if (provider.multiProvider) {
                    for (var j = 0; j < provider.resolvedFactories.length; j++) {
                        existing.resolvedFactories.push(provider.resolvedFactories[j]);
                    }
                }
                else {
                    normalizedProvidersMap.set(provider.key.id, provider);
                }
            }
            else {
                var resolvedProvider;
                if (provider.multiProvider) {
                    resolvedProvider = new ResolvedProvider_(provider.key, collection_32.ListWrapper.clone(provider.resolvedFactories), provider.multiProvider);
                }
                else {
                    resolvedProvider = provider;
                }
                normalizedProvidersMap.set(provider.key.id, resolvedProvider);
            }
        }
        return normalizedProvidersMap;
    }
    exports_151("mergeResolvedProviders", mergeResolvedProviders);
    function _normalizeProviders(providers, res) {
        providers.forEach(function (b) {
            if (b instanceof lang_84.Type) {
                res.push(provide(b, { useClass: b }));
            }
            else if (b instanceof Provider) {
                res.push(b);
            }
            else if (b instanceof Array) {
                _normalizeProviders(b, res);
            }
            else if (b instanceof ProviderBuilder) {
                throw new exceptions_21.InvalidProviderError(b.token);
            }
            else {
                throw new exceptions_21.InvalidProviderError(b);
            }
        });
        return res;
    }
    function _constructDependencies(factoryFunction, dependencies) {
        if (lang_84.isBlank(dependencies)) {
            return _dependenciesFor(factoryFunction);
        }
        else {
            var params = dependencies.map(function (t) { return [t]; });
            return dependencies.map(function (t) { return _extractToken(factoryFunction, t, params); });
        }
    }
    function _dependenciesFor(typeOrFunc) {
        var params = reflection_3.reflector.parameters(typeOrFunc);
        if (lang_84.isBlank(params))
            return [];
        if (params.some(lang_84.isBlank)) {
            throw new exceptions_21.NoAnnotationError(typeOrFunc, params);
        }
        return params.map(function (p) { return _extractToken(typeOrFunc, p, params); });
    }
    function _extractToken(typeOrFunc, metadata /*any[] | any*/, params) {
        var depProps = [];
        var token = null;
        var optional = false;
        if (!lang_84.isArray(metadata)) {
            if (metadata instanceof metadata_4.InjectMetadata) {
                return _createDependency(metadata.token, optional, null, null, depProps);
            }
            else {
                return _createDependency(metadata, optional, null, null, depProps);
            }
        }
        var lowerBoundVisibility = null;
        var upperBoundVisibility = null;
        for (var i = 0; i < metadata.length; ++i) {
            var paramMetadata = metadata[i];
            if (paramMetadata instanceof lang_84.Type) {
                token = paramMetadata;
            }
            else if (paramMetadata instanceof metadata_4.InjectMetadata) {
                token = paramMetadata.token;
            }
            else if (paramMetadata instanceof metadata_4.OptionalMetadata) {
                optional = true;
            }
            else if (paramMetadata instanceof metadata_4.SelfMetadata) {
                upperBoundVisibility = paramMetadata;
            }
            else if (paramMetadata instanceof metadata_4.HostMetadata) {
                upperBoundVisibility = paramMetadata;
            }
            else if (paramMetadata instanceof metadata_4.SkipSelfMetadata) {
                lowerBoundVisibility = paramMetadata;
            }
            else if (paramMetadata instanceof metadata_4.DependencyMetadata) {
                if (lang_84.isPresent(paramMetadata.token)) {
                    token = paramMetadata.token;
                }
                depProps.push(paramMetadata);
            }
        }
        token = forward_ref_2.resolveForwardRef(token);
        if (lang_84.isPresent(token)) {
            return _createDependency(token, optional, lowerBoundVisibility, upperBoundVisibility, depProps);
        }
        else {
            throw new exceptions_21.NoAnnotationError(typeOrFunc, params);
        }
    }
    function _createDependency(token, optional, lowerBoundVisibility, upperBoundVisibility, depProps) {
        return new Dependency(key_1.Key.get(token), optional, lowerBoundVisibility, upperBoundVisibility, depProps);
    }
    return {
        setters:[
            function (lang_84_1) {
                lang_84 = lang_84_1;
            },
            function (exceptions_20_1) {
                exceptions_20 = exceptions_20_1;
            },
            function (collection_32_1) {
                collection_32 = collection_32_1;
            },
            function (reflection_3_1) {
                reflection_3 = reflection_3_1;
            },
            function (key_1_1) {
                key_1 = key_1_1;
            },
            function (metadata_4_1) {
                metadata_4 = metadata_4_1;
            },
            function (exceptions_21_1) {
                exceptions_21 = exceptions_21_1;
            },
            function (forward_ref_2_1) {
                forward_ref_2 = forward_ref_2_1;
            }],
        execute: function() {
            /**
             * `Dependency` is used by the framework to extend DI.
             * This is internal to Angular and should not be used directly.
             */
            Dependency = (function () {
                function Dependency(key, optional, lowerBoundVisibility, upperBoundVisibility, properties) {
                    this.key = key;
                    this.optional = optional;
                    this.lowerBoundVisibility = lowerBoundVisibility;
                    this.upperBoundVisibility = upperBoundVisibility;
                    this.properties = properties;
                }
                Dependency.fromKey = function (key) { return new Dependency(key, false, null, null, []); };
                return Dependency;
            }());
            exports_151("Dependency", Dependency);
            _EMPTY_LIST = lang_84.CONST_EXPR([]);
            /**
             * Describes how the {@link Injector} should instantiate a given token.
             *
             * See {@link provide}.
             *
             * ### Example ([live demo](http://plnkr.co/edit/GNAyj6K6PfYg2NBzgwZ5?p%3Dpreview&p=preview))
             *
             * ```javascript
             * var injector = Injector.resolveAndCreate([
             *   new Provider("message", { useValue: 'Hello' })
             * ]);
             *
             * expect(injector.get("message")).toEqual('Hello');
             * ```
             */
            Provider = (function () {
                function Provider(token, _a) {
                    var useClass = _a.useClass, useValue = _a.useValue, useExisting = _a.useExisting, useFactory = _a.useFactory, deps = _a.deps, multi = _a.multi;
                    this.token = token;
                    this.useClass = useClass;
                    this.useValue = useValue;
                    this.useExisting = useExisting;
                    this.useFactory = useFactory;
                    this.dependencies = deps;
                    this._multi = multi;
                }
                Object.defineProperty(Provider.prototype, "multi", {
                    // TODO: Provide a full working example after alpha38 is released.
                    /**
                     * Creates multiple providers matching the same token (a multi-provider).
                     *
                     * Multi-providers are used for creating pluggable service, where the system comes
                     * with some default providers, and the user can register additional providers.
                     * The combination of the default providers and the additional providers will be
                     * used to drive the behavior of the system.
                     *
                     * ### Example
                     *
                     * ```typescript
                     * var injector = Injector.resolveAndCreate([
                     *   new Provider("Strings", { useValue: "String1", multi: true}),
                     *   new Provider("Strings", { useValue: "String2", multi: true})
                     * ]);
                     *
                     * expect(injector.get("Strings")).toEqual(["String1", "String2"]);
                     * ```
                     *
                     * Multi-providers and regular providers cannot be mixed. The following
                     * will throw an exception:
                     *
                     * ```typescript
                     * var injector = Injector.resolveAndCreate([
                     *   new Provider("Strings", { useValue: "String1", multi: true }),
                     *   new Provider("Strings", { useValue: "String2"})
                     * ]);
                     * ```
                     */
                    get: function () { return lang_84.normalizeBool(this._multi); },
                    enumerable: true,
                    configurable: true
                });
                Provider = __decorate([
                    lang_84.CONST(), 
                    __metadata('design:paramtypes', [Object, Object])
                ], Provider);
                return Provider;
            }());
            exports_151("Provider", Provider);
            /**
             * See {@link Provider} instead.
             *
             * @deprecated
             */
            Binding = (function (_super) {
                __extends(Binding, _super);
                function Binding(token, _a) {
                    var toClass = _a.toClass, toValue = _a.toValue, toAlias = _a.toAlias, toFactory = _a.toFactory, deps = _a.deps, multi = _a.multi;
                    _super.call(this, token, {
                        useClass: toClass,
                        useValue: toValue,
                        useExisting: toAlias,
                        useFactory: toFactory,
                        deps: deps,
                        multi: multi
                    });
                }
                Object.defineProperty(Binding.prototype, "toClass", {
                    /**
                     * @deprecated
                     */
                    get: function () { return this.useClass; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Binding.prototype, "toAlias", {
                    /**
                     * @deprecated
                     */
                    get: function () { return this.useExisting; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Binding.prototype, "toFactory", {
                    /**
                     * @deprecated
                     */
                    get: function () { return this.useFactory; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Binding.prototype, "toValue", {
                    /**
                     * @deprecated
                     */
                    get: function () { return this.useValue; },
                    enumerable: true,
                    configurable: true
                });
                Binding = __decorate([
                    lang_84.CONST(), 
                    __metadata('design:paramtypes', [Object, Object])
                ], Binding);
                return Binding;
            }(Provider));
            exports_151("Binding", Binding);
            ResolvedProvider_ = (function () {
                function ResolvedProvider_(key, resolvedFactories, multiProvider) {
                    this.key = key;
                    this.resolvedFactories = resolvedFactories;
                    this.multiProvider = multiProvider;
                }
                Object.defineProperty(ResolvedProvider_.prototype, "resolvedFactory", {
                    get: function () { return this.resolvedFactories[0]; },
                    enumerable: true,
                    configurable: true
                });
                return ResolvedProvider_;
            }());
            exports_151("ResolvedProvider_", ResolvedProvider_);
            /**
             * An internal resolved representation of a factory function created by resolving {@link Provider}.
             */
            ResolvedFactory = (function () {
                function ResolvedFactory(
                    /**
                     * Factory function which can return an instance of an object represented by a key.
                     */
                    factory, 
                    /**
                     * Arguments (dependencies) to the `factory` function.
                     */
                    dependencies) {
                    this.factory = factory;
                    this.dependencies = dependencies;
                }
                return ResolvedFactory;
            }());
            exports_151("ResolvedFactory", ResolvedFactory);
            /**
             * Helper class for the {@link bind} function.
             */
            ProviderBuilder = (function () {
                function ProviderBuilder(token) {
                    this.token = token;
                }
                /**
                 * Binds a DI token to a class.
                 *
                 * ### Example ([live demo](http://plnkr.co/edit/ZpBCSYqv6e2ud5KXLdxQ?p=preview))
                 *
                 * Because `toAlias` and `toClass` are often confused, the example contains
                 * both use cases for easy comparison.
                 *
                 * ```typescript
                 * class Vehicle {}
                 *
                 * class Car extends Vehicle {}
                 *
                 * var injectorClass = Injector.resolveAndCreate([
                 *   Car,
                 *   provide(Vehicle, {useClass: Car})
                 * ]);
                 * var injectorAlias = Injector.resolveAndCreate([
                 *   Car,
                 *   provide(Vehicle, {useExisting: Car})
                 * ]);
                 *
                 * expect(injectorClass.get(Vehicle)).not.toBe(injectorClass.get(Car));
                 * expect(injectorClass.get(Vehicle) instanceof Car).toBe(true);
                 *
                 * expect(injectorAlias.get(Vehicle)).toBe(injectorAlias.get(Car));
                 * expect(injectorAlias.get(Vehicle) instanceof Car).toBe(true);
                 * ```
                 */
                ProviderBuilder.prototype.toClass = function (type) {
                    if (!lang_84.isType(type)) {
                        throw new exceptions_20.BaseException("Trying to create a class provider but \"" + lang_84.stringify(type) + "\" is not a class!");
                    }
                    return new Provider(this.token, { useClass: type });
                };
                /**
                 * Binds a DI token to a value.
                 *
                 * ### Example ([live demo](http://plnkr.co/edit/G024PFHmDL0cJFgfZK8O?p=preview))
                 *
                 * ```typescript
                 * var injector = Injector.resolveAndCreate([
                 *   provide('message', {useValue: 'Hello'})
                 * ]);
                 *
                 * expect(injector.get('message')).toEqual('Hello');
                 * ```
                 */
                ProviderBuilder.prototype.toValue = function (value) { return new Provider(this.token, { useValue: value }); };
                /**
                 * Binds a DI token to an existing token.
                 *
                 * Angular will return the same instance as if the provided token was used. (This is
                 * in contrast to `useClass` where a separate instance of `useClass` will be returned.)
                 *
                 * ### Example ([live demo](http://plnkr.co/edit/uBaoF2pN5cfc5AfZapNw?p=preview))
                 *
                 * Because `toAlias` and `toClass` are often confused, the example contains
                 * both use cases for easy comparison.
                 *
                 * ```typescript
                 * class Vehicle {}
                 *
                 * class Car extends Vehicle {}
                 *
                 * var injectorAlias = Injector.resolveAndCreate([
                 *   Car,
                 *   provide(Vehicle, {useExisting: Car})
                 * ]);
                 * var injectorClass = Injector.resolveAndCreate([
                 *   Car,
                 *   provide(Vehicle, {useClass: Car})
                 * ]);
                 *
                 * expect(injectorAlias.get(Vehicle)).toBe(injectorAlias.get(Car));
                 * expect(injectorAlias.get(Vehicle) instanceof Car).toBe(true);
                 *
                 * expect(injectorClass.get(Vehicle)).not.toBe(injectorClass.get(Car));
                 * expect(injectorClass.get(Vehicle) instanceof Car).toBe(true);
                 * ```
                 */
                ProviderBuilder.prototype.toAlias = function (aliasToken) {
                    if (lang_84.isBlank(aliasToken)) {
                        throw new exceptions_20.BaseException("Can not alias " + lang_84.stringify(this.token) + " to a blank value!");
                    }
                    return new Provider(this.token, { useExisting: aliasToken });
                };
                /**
                 * Binds a DI token to a function which computes the value.
                 *
                 * ### Example ([live demo](http://plnkr.co/edit/OejNIfTT3zb1iBxaIYOb?p=preview))
                 *
                 * ```typescript
                 * var injector = Injector.resolveAndCreate([
                 *   provide(Number, {useFactory: () => { return 1+2; }}),
                 *   provide(String, {useFactory: (v) => { return "Value: " + v; }, deps: [Number]})
                 * ]);
                 *
                 * expect(injector.get(Number)).toEqual(3);
                 * expect(injector.get(String)).toEqual('Value: 3');
                 * ```
                 */
                ProviderBuilder.prototype.toFactory = function (factory, dependencies) {
                    if (!lang_84.isFunction(factory)) {
                        throw new exceptions_20.BaseException("Trying to create a factory provider but \"" + lang_84.stringify(factory) + "\" is not a function!");
                    }
                    return new Provider(this.token, { useFactory: factory, deps: dependencies });
                };
                return ProviderBuilder;
            }());
            exports_151("ProviderBuilder", ProviderBuilder);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/di/injector", ['angular2/src/facade/collection', "test/node_modules/angular2/ts/src/core/di/provider", "test/node_modules/angular2/ts/src/core/di/exceptions", 'angular2/src/facade/lang', 'angular2/src/facade/exceptions', "test/node_modules/angular2/ts/src/core/di/key", "test/node_modules/angular2/ts/src/core/di/metadata"], function(exports_152, context_152) {
    "use strict";
    var __moduleName = context_152 && context_152.id;
    var collection_33, provider_1, exceptions_22, lang_85, exceptions_23, key_2, metadata_5;
    var _MAX_CONSTRUCTION_COUNTER, UNDEFINED, Visibility, ProtoInjectorInlineStrategy, ProtoInjectorDynamicStrategy, ProtoInjector, InjectorInlineStrategy, InjectorDynamicStrategy, ProviderWithVisibility, Injector, INJECTOR_KEY;
    function canSee(src, dst) {
        return (src === dst) ||
            (dst === Visibility.PublicAndPrivate || src === Visibility.PublicAndPrivate);
    }
    function _mapProviders(injector, fn) {
        var res = [];
        for (var i = 0; i < injector._proto.numberOfProviders; ++i) {
            res.push(fn(injector._proto.getProviderAtIndex(i)));
        }
        return res;
    }
    return {
        setters:[
            function (collection_33_1) {
                collection_33 = collection_33_1;
            },
            function (provider_1_1) {
                provider_1 = provider_1_1;
            },
            function (exceptions_22_1) {
                exceptions_22 = exceptions_22_1;
            },
            function (lang_85_1) {
                lang_85 = lang_85_1;
            },
            function (exceptions_23_1) {
                exceptions_23 = exceptions_23_1;
            },
            function (key_2_1) {
                key_2 = key_2_1;
            },
            function (metadata_5_1) {
                metadata_5 = metadata_5_1;
            }],
        execute: function() {
            // Threshold for the dynamic version
            _MAX_CONSTRUCTION_COUNTER = 10;
            exports_152("UNDEFINED", UNDEFINED = lang_85.CONST_EXPR(new Object()));
            /**
             * Visibility of a {@link Provider}.
             */
            (function (Visibility) {
                /**
                 * A `Public` {@link Provider} is only visible to regular (as opposed to host) child injectors.
                 */
                Visibility[Visibility["Public"] = 0] = "Public";
                /**
                 * A `Private` {@link Provider} is only visible to host (as opposed to regular) child injectors.
                 */
                Visibility[Visibility["Private"] = 1] = "Private";
                /**
                 * A `PublicAndPrivate` {@link Provider} is visible to both host and regular child injectors.
                 */
                Visibility[Visibility["PublicAndPrivate"] = 2] = "PublicAndPrivate";
            })(Visibility || (Visibility = {}));
            exports_152("Visibility", Visibility);
            ProtoInjectorInlineStrategy = (function () {
                function ProtoInjectorInlineStrategy(protoEI, bwv) {
                    this.provider0 = null;
                    this.provider1 = null;
                    this.provider2 = null;
                    this.provider3 = null;
                    this.provider4 = null;
                    this.provider5 = null;
                    this.provider6 = null;
                    this.provider7 = null;
                    this.provider8 = null;
                    this.provider9 = null;
                    this.keyId0 = null;
                    this.keyId1 = null;
                    this.keyId2 = null;
                    this.keyId3 = null;
                    this.keyId4 = null;
                    this.keyId5 = null;
                    this.keyId6 = null;
                    this.keyId7 = null;
                    this.keyId8 = null;
                    this.keyId9 = null;
                    this.visibility0 = null;
                    this.visibility1 = null;
                    this.visibility2 = null;
                    this.visibility3 = null;
                    this.visibility4 = null;
                    this.visibility5 = null;
                    this.visibility6 = null;
                    this.visibility7 = null;
                    this.visibility8 = null;
                    this.visibility9 = null;
                    var length = bwv.length;
                    if (length > 0) {
                        this.provider0 = bwv[0].provider;
                        this.keyId0 = bwv[0].getKeyId();
                        this.visibility0 = bwv[0].visibility;
                    }
                    if (length > 1) {
                        this.provider1 = bwv[1].provider;
                        this.keyId1 = bwv[1].getKeyId();
                        this.visibility1 = bwv[1].visibility;
                    }
                    if (length > 2) {
                        this.provider2 = bwv[2].provider;
                        this.keyId2 = bwv[2].getKeyId();
                        this.visibility2 = bwv[2].visibility;
                    }
                    if (length > 3) {
                        this.provider3 = bwv[3].provider;
                        this.keyId3 = bwv[3].getKeyId();
                        this.visibility3 = bwv[3].visibility;
                    }
                    if (length > 4) {
                        this.provider4 = bwv[4].provider;
                        this.keyId4 = bwv[4].getKeyId();
                        this.visibility4 = bwv[4].visibility;
                    }
                    if (length > 5) {
                        this.provider5 = bwv[5].provider;
                        this.keyId5 = bwv[5].getKeyId();
                        this.visibility5 = bwv[5].visibility;
                    }
                    if (length > 6) {
                        this.provider6 = bwv[6].provider;
                        this.keyId6 = bwv[6].getKeyId();
                        this.visibility6 = bwv[6].visibility;
                    }
                    if (length > 7) {
                        this.provider7 = bwv[7].provider;
                        this.keyId7 = bwv[7].getKeyId();
                        this.visibility7 = bwv[7].visibility;
                    }
                    if (length > 8) {
                        this.provider8 = bwv[8].provider;
                        this.keyId8 = bwv[8].getKeyId();
                        this.visibility8 = bwv[8].visibility;
                    }
                    if (length > 9) {
                        this.provider9 = bwv[9].provider;
                        this.keyId9 = bwv[9].getKeyId();
                        this.visibility9 = bwv[9].visibility;
                    }
                }
                ProtoInjectorInlineStrategy.prototype.getProviderAtIndex = function (index) {
                    if (index == 0)
                        return this.provider0;
                    if (index == 1)
                        return this.provider1;
                    if (index == 2)
                        return this.provider2;
                    if (index == 3)
                        return this.provider3;
                    if (index == 4)
                        return this.provider4;
                    if (index == 5)
                        return this.provider5;
                    if (index == 6)
                        return this.provider6;
                    if (index == 7)
                        return this.provider7;
                    if (index == 8)
                        return this.provider8;
                    if (index == 9)
                        return this.provider9;
                    throw new exceptions_22.OutOfBoundsError(index);
                };
                ProtoInjectorInlineStrategy.prototype.createInjectorStrategy = function (injector) {
                    return new InjectorInlineStrategy(injector, this);
                };
                return ProtoInjectorInlineStrategy;
            }());
            exports_152("ProtoInjectorInlineStrategy", ProtoInjectorInlineStrategy);
            ProtoInjectorDynamicStrategy = (function () {
                function ProtoInjectorDynamicStrategy(protoInj, bwv) {
                    var len = bwv.length;
                    this.providers = collection_33.ListWrapper.createFixedSize(len);
                    this.keyIds = collection_33.ListWrapper.createFixedSize(len);
                    this.visibilities = collection_33.ListWrapper.createFixedSize(len);
                    for (var i = 0; i < len; i++) {
                        this.providers[i] = bwv[i].provider;
                        this.keyIds[i] = bwv[i].getKeyId();
                        this.visibilities[i] = bwv[i].visibility;
                    }
                }
                ProtoInjectorDynamicStrategy.prototype.getProviderAtIndex = function (index) {
                    if (index < 0 || index >= this.providers.length) {
                        throw new exceptions_22.OutOfBoundsError(index);
                    }
                    return this.providers[index];
                };
                ProtoInjectorDynamicStrategy.prototype.createInjectorStrategy = function (ei) {
                    return new InjectorDynamicStrategy(this, ei);
                };
                return ProtoInjectorDynamicStrategy;
            }());
            exports_152("ProtoInjectorDynamicStrategy", ProtoInjectorDynamicStrategy);
            ProtoInjector = (function () {
                function ProtoInjector(bwv) {
                    this.numberOfProviders = bwv.length;
                    this._strategy = bwv.length > _MAX_CONSTRUCTION_COUNTER ?
                        new ProtoInjectorDynamicStrategy(this, bwv) :
                        new ProtoInjectorInlineStrategy(this, bwv);
                }
                ProtoInjector.fromResolvedProviders = function (providers) {
                    var bd = providers.map(function (b) { return new ProviderWithVisibility(b, Visibility.Public); });
                    return new ProtoInjector(bd);
                };
                ProtoInjector.prototype.getProviderAtIndex = function (index) {
                    return this._strategy.getProviderAtIndex(index);
                };
                return ProtoInjector;
            }());
            exports_152("ProtoInjector", ProtoInjector);
            InjectorInlineStrategy = (function () {
                function InjectorInlineStrategy(injector, protoStrategy) {
                    this.injector = injector;
                    this.protoStrategy = protoStrategy;
                    this.obj0 = UNDEFINED;
                    this.obj1 = UNDEFINED;
                    this.obj2 = UNDEFINED;
                    this.obj3 = UNDEFINED;
                    this.obj4 = UNDEFINED;
                    this.obj5 = UNDEFINED;
                    this.obj6 = UNDEFINED;
                    this.obj7 = UNDEFINED;
                    this.obj8 = UNDEFINED;
                    this.obj9 = UNDEFINED;
                }
                InjectorInlineStrategy.prototype.resetConstructionCounter = function () { this.injector._constructionCounter = 0; };
                InjectorInlineStrategy.prototype.instantiateProvider = function (provider, visibility) {
                    return this.injector._new(provider, visibility);
                };
                InjectorInlineStrategy.prototype.getObjByKeyId = function (keyId, visibility) {
                    var p = this.protoStrategy;
                    var inj = this.injector;
                    if (p.keyId0 === keyId && canSee(p.visibility0, visibility)) {
                        if (this.obj0 === UNDEFINED) {
                            this.obj0 = inj._new(p.provider0, p.visibility0);
                        }
                        return this.obj0;
                    }
                    if (p.keyId1 === keyId && canSee(p.visibility1, visibility)) {
                        if (this.obj1 === UNDEFINED) {
                            this.obj1 = inj._new(p.provider1, p.visibility1);
                        }
                        return this.obj1;
                    }
                    if (p.keyId2 === keyId && canSee(p.visibility2, visibility)) {
                        if (this.obj2 === UNDEFINED) {
                            this.obj2 = inj._new(p.provider2, p.visibility2);
                        }
                        return this.obj2;
                    }
                    if (p.keyId3 === keyId && canSee(p.visibility3, visibility)) {
                        if (this.obj3 === UNDEFINED) {
                            this.obj3 = inj._new(p.provider3, p.visibility3);
                        }
                        return this.obj3;
                    }
                    if (p.keyId4 === keyId && canSee(p.visibility4, visibility)) {
                        if (this.obj4 === UNDEFINED) {
                            this.obj4 = inj._new(p.provider4, p.visibility4);
                        }
                        return this.obj4;
                    }
                    if (p.keyId5 === keyId && canSee(p.visibility5, visibility)) {
                        if (this.obj5 === UNDEFINED) {
                            this.obj5 = inj._new(p.provider5, p.visibility5);
                        }
                        return this.obj5;
                    }
                    if (p.keyId6 === keyId && canSee(p.visibility6, visibility)) {
                        if (this.obj6 === UNDEFINED) {
                            this.obj6 = inj._new(p.provider6, p.visibility6);
                        }
                        return this.obj6;
                    }
                    if (p.keyId7 === keyId && canSee(p.visibility7, visibility)) {
                        if (this.obj7 === UNDEFINED) {
                            this.obj7 = inj._new(p.provider7, p.visibility7);
                        }
                        return this.obj7;
                    }
                    if (p.keyId8 === keyId && canSee(p.visibility8, visibility)) {
                        if (this.obj8 === UNDEFINED) {
                            this.obj8 = inj._new(p.provider8, p.visibility8);
                        }
                        return this.obj8;
                    }
                    if (p.keyId9 === keyId && canSee(p.visibility9, visibility)) {
                        if (this.obj9 === UNDEFINED) {
                            this.obj9 = inj._new(p.provider9, p.visibility9);
                        }
                        return this.obj9;
                    }
                    return UNDEFINED;
                };
                InjectorInlineStrategy.prototype.getObjAtIndex = function (index) {
                    if (index == 0)
                        return this.obj0;
                    if (index == 1)
                        return this.obj1;
                    if (index == 2)
                        return this.obj2;
                    if (index == 3)
                        return this.obj3;
                    if (index == 4)
                        return this.obj4;
                    if (index == 5)
                        return this.obj5;
                    if (index == 6)
                        return this.obj6;
                    if (index == 7)
                        return this.obj7;
                    if (index == 8)
                        return this.obj8;
                    if (index == 9)
                        return this.obj9;
                    throw new exceptions_22.OutOfBoundsError(index);
                };
                InjectorInlineStrategy.prototype.getMaxNumberOfObjects = function () { return _MAX_CONSTRUCTION_COUNTER; };
                return InjectorInlineStrategy;
            }());
            exports_152("InjectorInlineStrategy", InjectorInlineStrategy);
            InjectorDynamicStrategy = (function () {
                function InjectorDynamicStrategy(protoStrategy, injector) {
                    this.protoStrategy = protoStrategy;
                    this.injector = injector;
                    this.objs = collection_33.ListWrapper.createFixedSize(protoStrategy.providers.length);
                    collection_33.ListWrapper.fill(this.objs, UNDEFINED);
                }
                InjectorDynamicStrategy.prototype.resetConstructionCounter = function () { this.injector._constructionCounter = 0; };
                InjectorDynamicStrategy.prototype.instantiateProvider = function (provider, visibility) {
                    return this.injector._new(provider, visibility);
                };
                InjectorDynamicStrategy.prototype.getObjByKeyId = function (keyId, visibility) {
                    var p = this.protoStrategy;
                    for (var i = 0; i < p.keyIds.length; i++) {
                        if (p.keyIds[i] === keyId && canSee(p.visibilities[i], visibility)) {
                            if (this.objs[i] === UNDEFINED) {
                                this.objs[i] = this.injector._new(p.providers[i], p.visibilities[i]);
                            }
                            return this.objs[i];
                        }
                    }
                    return UNDEFINED;
                };
                InjectorDynamicStrategy.prototype.getObjAtIndex = function (index) {
                    if (index < 0 || index >= this.objs.length) {
                        throw new exceptions_22.OutOfBoundsError(index);
                    }
                    return this.objs[index];
                };
                InjectorDynamicStrategy.prototype.getMaxNumberOfObjects = function () { return this.objs.length; };
                return InjectorDynamicStrategy;
            }());
            exports_152("InjectorDynamicStrategy", InjectorDynamicStrategy);
            ProviderWithVisibility = (function () {
                function ProviderWithVisibility(provider, visibility) {
                    this.provider = provider;
                    this.visibility = visibility;
                }
                ;
                ProviderWithVisibility.prototype.getKeyId = function () { return this.provider.key.id; };
                return ProviderWithVisibility;
            }());
            exports_152("ProviderWithVisibility", ProviderWithVisibility);
            /**
             * A dependency injection container used for instantiating objects and resolving dependencies.
             *
             * An `Injector` is a replacement for a `new` operator, which can automatically resolve the
             * constructor dependencies.
             *
             * In typical use, application code asks for the dependencies in the constructor and they are
             * resolved by the `Injector`.
             *
             * ### Example ([live demo](http://plnkr.co/edit/jzjec0?p=preview))
             *
             * The following example creates an `Injector` configured to create `Engine` and `Car`.
             *
             * ```typescript
             * @Injectable()
             * class Engine {
             * }
             *
             * @Injectable()
             * class Car {
             *   constructor(public engine:Engine) {}
             * }
             *
             * var injector = Injector.resolveAndCreate([Car, Engine]);
             * var car = injector.get(Car);
             * expect(car instanceof Car).toBe(true);
             * expect(car.engine instanceof Engine).toBe(true);
             * ```
             *
             * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`
             * resolve all of the object's dependencies automatically.
             */
            Injector = (function () {
                /**
                 * Private
                 */
                function Injector(_proto /* ProtoInjector */, _parent, _isHostBoundary, _depProvider, _debugContext) {
                    if (_parent === void 0) { _parent = null; }
                    if (_isHostBoundary === void 0) { _isHostBoundary = false; }
                    if (_depProvider === void 0) { _depProvider = null; }
                    if (_debugContext === void 0) { _debugContext = null; }
                    this._isHostBoundary = _isHostBoundary;
                    this._depProvider = _depProvider;
                    this._debugContext = _debugContext;
                    /** @internal */
                    this._constructionCounter = 0;
                    this._proto = _proto;
                    this._parent = _parent;
                    this._strategy = _proto._strategy.createInjectorStrategy(this);
                }
                /**
                 * Turns an array of provider definitions into an array of resolved providers.
                 *
                 * A resolution is a process of flattening multiple nested arrays and converting individual
                 * providers into an array of {@link ResolvedProvider}s.
                 *
                 * ### Example ([live demo](http://plnkr.co/edit/AiXTHi?p=preview))
                 *
                 * ```typescript
                 * @Injectable()
                 * class Engine {
                 * }
                 *
                 * @Injectable()
                 * class Car {
                 *   constructor(public engine:Engine) {}
                 * }
                 *
                 * var providers = Injector.resolve([Car, [[Engine]]]);
                 *
                 * expect(providers.length).toEqual(2);
                 *
                 * expect(providers[0] instanceof ResolvedProvider).toBe(true);
                 * expect(providers[0].key.displayName).toBe("Car");
                 * expect(providers[0].dependencies.length).toEqual(1);
                 * expect(providers[0].factory).toBeDefined();
                 *
                 * expect(providers[1].key.displayName).toBe("Engine");
                 * });
                 * ```
                 *
                 * See {@link Injector#fromResolvedProviders} for more info.
                 */
                Injector.resolve = function (providers) {
                    return provider_1.resolveProviders(providers);
                };
                /**
                 * Resolves an array of providers and creates an injector from those providers.
                 *
                 * The passed-in providers can be an array of `Type`, {@link Provider},
                 * or a recursive array of more providers.
                 *
                 * ### Example ([live demo](http://plnkr.co/edit/ePOccA?p=preview))
                 *
                 * ```typescript
                 * @Injectable()
                 * class Engine {
                 * }
                 *
                 * @Injectable()
                 * class Car {
                 *   constructor(public engine:Engine) {}
                 * }
                 *
                 * var injector = Injector.resolveAndCreate([Car, Engine]);
                 * expect(injector.get(Car) instanceof Car).toBe(true);
                 * ```
                 *
                 * This function is slower than the corresponding `fromResolvedProviders`
                 * because it needs to resolve the passed-in providers first.
                 * See {@link Injector#resolve} and {@link Injector#fromResolvedProviders}.
                 */
                Injector.resolveAndCreate = function (providers) {
                    var resolvedProviders = Injector.resolve(providers);
                    return Injector.fromResolvedProviders(resolvedProviders);
                };
                /**
                 * Creates an injector from previously resolved providers.
                 *
                 * This API is the recommended way to construct injectors in performance-sensitive parts.
                 *
                 * ### Example ([live demo](http://plnkr.co/edit/KrSMci?p=preview))
                 *
                 * ```typescript
                 * @Injectable()
                 * class Engine {
                 * }
                 *
                 * @Injectable()
                 * class Car {
                 *   constructor(public engine:Engine) {}
                 * }
                 *
                 * var providers = Injector.resolve([Car, Engine]);
                 * var injector = Injector.fromResolvedProviders(providers);
                 * expect(injector.get(Car) instanceof Car).toBe(true);
                 * ```
                 */
                Injector.fromResolvedProviders = function (providers) {
                    return new Injector(ProtoInjector.fromResolvedProviders(providers));
                };
                /**
                 * @deprecated
                 */
                Injector.fromResolvedBindings = function (providers) {
                    return Injector.fromResolvedProviders(providers);
                };
                Object.defineProperty(Injector.prototype, "hostBoundary", {
                    /**
                     * Whether this injector is a boundary to a host.
                     * @internal
                     */
                    get: function () { return this._isHostBoundary; },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @internal
                 */
                Injector.prototype.debugContext = function () { return this._debugContext(); };
                /**
                 * Retrieves an instance from the injector based on the provided token.
                 * Throws {@link NoProviderError} if not found.
                 *
                 * ### Example ([live demo](http://plnkr.co/edit/HeXSHg?p=preview))
                 *
                 * ```typescript
                 * var injector = Injector.resolveAndCreate([
                 *   provide("validToken", {useValue: "Value"})
                 * ]);
                 * expect(injector.get("validToken")).toEqual("Value");
                 * expect(() => injector.get("invalidToken")).toThrowError();
                 * ```
                 *
                 * `Injector` returns itself when given `Injector` as a token.
                 *
                 * ```typescript
                 * var injector = Injector.resolveAndCreate([]);
                 * expect(injector.get(Injector)).toBe(injector);
                 * ```
                 */
                Injector.prototype.get = function (token) {
                    return this._getByKey(key_2.Key.get(token), null, null, false, Visibility.PublicAndPrivate);
                };
                /**
                 * Retrieves an instance from the injector based on the provided token.
                 * Returns null if not found.
                 *
                 * ### Example ([live demo](http://plnkr.co/edit/tpEbEy?p=preview))
                 *
                 * ```typescript
                 * var injector = Injector.resolveAndCreate([
                 *   provide("validToken", {useValue: "Value"})
                 * ]);
                 * expect(injector.getOptional("validToken")).toEqual("Value");
                 * expect(injector.getOptional("invalidToken")).toBe(null);
                 * ```
                 *
                 * `Injector` returns itself when given `Injector` as a token.
                 *
                 * ```typescript
                 * var injector = Injector.resolveAndCreate([]);
                 * expect(injector.getOptional(Injector)).toBe(injector);
                 * ```
                 */
                Injector.prototype.getOptional = function (token) {
                    return this._getByKey(key_2.Key.get(token), null, null, true, Visibility.PublicAndPrivate);
                };
                /**
                 * @internal
                 */
                Injector.prototype.getAt = function (index) { return this._strategy.getObjAtIndex(index); };
                Object.defineProperty(Injector.prototype, "parent", {
                    /**
                     * Parent of this injector.
                     *
                     * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.
                     * -->
                     *
                     * ### Example ([live demo](http://plnkr.co/edit/eosMGo?p=preview))
                     *
                     * ```typescript
                     * var parent = Injector.resolveAndCreate([]);
                     * var child = parent.resolveAndCreateChild([]);
                     * expect(child.parent).toBe(parent);
                     * ```
                     */
                    get: function () { return this._parent; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Injector.prototype, "internalStrategy", {
                    /**
                     * @internal
                     * Internal. Do not use.
                     * We return `any` not to export the InjectorStrategy type.
                     */
                    get: function () { return this._strategy; },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Resolves an array of providers and creates a child injector from those providers.
                 *
                 * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.
                 * -->
                 *
                 * The passed-in providers can be an array of `Type`, {@link Provider},
                 * or a recursive array of more providers.
                 *
                 * ### Example ([live demo](http://plnkr.co/edit/opB3T4?p=preview))
                 *
                 * ```typescript
                 * class ParentProvider {}
                 * class ChildProvider {}
                 *
                 * var parent = Injector.resolveAndCreate([ParentProvider]);
                 * var child = parent.resolveAndCreateChild([ChildProvider]);
                 *
                 * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);
                 * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);
                 * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));
                 * ```
                 *
                 * This function is slower than the corresponding `createChildFromResolved`
                 * because it needs to resolve the passed-in providers first.
                 * See {@link Injector#resolve} and {@link Injector#createChildFromResolved}.
                 */
                Injector.prototype.resolveAndCreateChild = function (providers) {
                    var resolvedProviders = Injector.resolve(providers);
                    return this.createChildFromResolved(resolvedProviders);
                };
                /**
                 * Creates a child injector from previously resolved providers.
                 *
                 * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.
                 * -->
                 *
                 * This API is the recommended way to construct injectors in performance-sensitive parts.
                 *
                 * ### Example ([live demo](http://plnkr.co/edit/VhyfjN?p=preview))
                 *
                 * ```typescript
                 * class ParentProvider {}
                 * class ChildProvider {}
                 *
                 * var parentProviders = Injector.resolve([ParentProvider]);
                 * var childProviders = Injector.resolve([ChildProvider]);
                 *
                 * var parent = Injector.fromResolvedProviders(parentProviders);
                 * var child = parent.createChildFromResolved(childProviders);
                 *
                 * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);
                 * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);
                 * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));
                 * ```
                 */
                Injector.prototype.createChildFromResolved = function (providers) {
                    var bd = providers.map(function (b) { return new ProviderWithVisibility(b, Visibility.Public); });
                    var proto = new ProtoInjector(bd);
                    var inj = new Injector(proto);
                    inj._parent = this;
                    return inj;
                };
                /**
                 * Resolves a provider and instantiates an object in the context of the injector.
                 *
                 * The created object does not get cached by the injector.
                 *
                 * ### Example ([live demo](http://plnkr.co/edit/yvVXoB?p=preview))
                 *
                 * ```typescript
                 * @Injectable()
                 * class Engine {
                 * }
                 *
                 * @Injectable()
                 * class Car {
                 *   constructor(public engine:Engine) {}
                 * }
                 *
                 * var injector = Injector.resolveAndCreate([Engine]);
                 *
                 * var car = injector.resolveAndInstantiate(Car);
                 * expect(car.engine).toBe(injector.get(Engine));
                 * expect(car).not.toBe(injector.resolveAndInstantiate(Car));
                 * ```
                 */
                Injector.prototype.resolveAndInstantiate = function (provider) {
                    return this.instantiateResolved(Injector.resolve([provider])[0]);
                };
                /**
                 * Instantiates an object using a resolved provider in the context of the injector.
                 *
                 * The created object does not get cached by the injector.
                 *
                 * ### Example ([live demo](http://plnkr.co/edit/ptCImQ?p=preview))
                 *
                 * ```typescript
                 * @Injectable()
                 * class Engine {
                 * }
                 *
                 * @Injectable()
                 * class Car {
                 *   constructor(public engine:Engine) {}
                 * }
                 *
                 * var injector = Injector.resolveAndCreate([Engine]);
                 * var carProvider = Injector.resolve([Car])[0];
                 * var car = injector.instantiateResolved(carProvider);
                 * expect(car.engine).toBe(injector.get(Engine));
                 * expect(car).not.toBe(injector.instantiateResolved(carProvider));
                 * ```
                 */
                Injector.prototype.instantiateResolved = function (provider) {
                    return this._instantiateProvider(provider, Visibility.PublicAndPrivate);
                };
                /** @internal */
                Injector.prototype._new = function (provider, visibility) {
                    if (this._constructionCounter++ > this._strategy.getMaxNumberOfObjects()) {
                        throw new exceptions_22.CyclicDependencyError(this, provider.key);
                    }
                    return this._instantiateProvider(provider, visibility);
                };
                Injector.prototype._instantiateProvider = function (provider, visibility) {
                    if (provider.multiProvider) {
                        var res = collection_33.ListWrapper.createFixedSize(provider.resolvedFactories.length);
                        for (var i = 0; i < provider.resolvedFactories.length; ++i) {
                            res[i] = this._instantiate(provider, provider.resolvedFactories[i], visibility);
                        }
                        return res;
                    }
                    else {
                        return this._instantiate(provider, provider.resolvedFactories[0], visibility);
                    }
                };
                Injector.prototype._instantiate = function (provider, resolvedFactory, visibility) {
                    var factory = resolvedFactory.factory;
                    var deps = resolvedFactory.dependencies;
                    var length = deps.length;
                    var d0;
                    var d1;
                    var d2;
                    var d3;
                    var d4;
                    var d5;
                    var d6;
                    var d7;
                    var d8;
                    var d9;
                    var d10;
                    var d11;
                    var d12;
                    var d13;
                    var d14;
                    var d15;
                    var d16;
                    var d17;
                    var d18;
                    var d19;
                    try {
                        d0 = length > 0 ? this._getByDependency(provider, deps[0], visibility) : null;
                        d1 = length > 1 ? this._getByDependency(provider, deps[1], visibility) : null;
                        d2 = length > 2 ? this._getByDependency(provider, deps[2], visibility) : null;
                        d3 = length > 3 ? this._getByDependency(provider, deps[3], visibility) : null;
                        d4 = length > 4 ? this._getByDependency(provider, deps[4], visibility) : null;
                        d5 = length > 5 ? this._getByDependency(provider, deps[5], visibility) : null;
                        d6 = length > 6 ? this._getByDependency(provider, deps[6], visibility) : null;
                        d7 = length > 7 ? this._getByDependency(provider, deps[7], visibility) : null;
                        d8 = length > 8 ? this._getByDependency(provider, deps[8], visibility) : null;
                        d9 = length > 9 ? this._getByDependency(provider, deps[9], visibility) : null;
                        d10 = length > 10 ? this._getByDependency(provider, deps[10], visibility) : null;
                        d11 = length > 11 ? this._getByDependency(provider, deps[11], visibility) : null;
                        d12 = length > 12 ? this._getByDependency(provider, deps[12], visibility) : null;
                        d13 = length > 13 ? this._getByDependency(provider, deps[13], visibility) : null;
                        d14 = length > 14 ? this._getByDependency(provider, deps[14], visibility) : null;
                        d15 = length > 15 ? this._getByDependency(provider, deps[15], visibility) : null;
                        d16 = length > 16 ? this._getByDependency(provider, deps[16], visibility) : null;
                        d17 = length > 17 ? this._getByDependency(provider, deps[17], visibility) : null;
                        d18 = length > 18 ? this._getByDependency(provider, deps[18], visibility) : null;
                        d19 = length > 19 ? this._getByDependency(provider, deps[19], visibility) : null;
                    }
                    catch (e) {
                        if (e instanceof exceptions_22.AbstractProviderError || e instanceof exceptions_22.InstantiationError) {
                            e.addKey(this, provider.key);
                        }
                        throw e;
                    }
                    var obj;
                    try {
                        switch (length) {
                            case 0:
                                obj = factory();
                                break;
                            case 1:
                                obj = factory(d0);
                                break;
                            case 2:
                                obj = factory(d0, d1);
                                break;
                            case 3:
                                obj = factory(d0, d1, d2);
                                break;
                            case 4:
                                obj = factory(d0, d1, d2, d3);
                                break;
                            case 5:
                                obj = factory(d0, d1, d2, d3, d4);
                                break;
                            case 6:
                                obj = factory(d0, d1, d2, d3, d4, d5);
                                break;
                            case 7:
                                obj = factory(d0, d1, d2, d3, d4, d5, d6);
                                break;
                            case 8:
                                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7);
                                break;
                            case 9:
                                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8);
                                break;
                            case 10:
                                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9);
                                break;
                            case 11:
                                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10);
                                break;
                            case 12:
                                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11);
                                break;
                            case 13:
                                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12);
                                break;
                            case 14:
                                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13);
                                break;
                            case 15:
                                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14);
                                break;
                            case 16:
                                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15);
                                break;
                            case 17:
                                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16);
                                break;
                            case 18:
                                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17);
                                break;
                            case 19:
                                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18);
                                break;
                            case 20:
                                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, d19);
                                break;
                            default:
                                throw new exceptions_23.BaseException("Cannot instantiate '" + provider.key.displayName + "' because it has more than 20 dependencies");
                        }
                    }
                    catch (e) {
                        throw new exceptions_22.InstantiationError(this, e, e.stack, provider.key);
                    }
                    return obj;
                };
                Injector.prototype._getByDependency = function (provider, dep, providerVisibility) {
                    var special = lang_85.isPresent(this._depProvider) ?
                        this._depProvider.getDependency(this, provider, dep) :
                        UNDEFINED;
                    if (special !== UNDEFINED) {
                        return special;
                    }
                    else {
                        return this._getByKey(dep.key, dep.lowerBoundVisibility, dep.upperBoundVisibility, dep.optional, providerVisibility);
                    }
                };
                Injector.prototype._getByKey = function (key, lowerBoundVisibility, upperBoundVisibility, optional, providerVisibility) {
                    if (key === INJECTOR_KEY) {
                        return this;
                    }
                    if (upperBoundVisibility instanceof metadata_5.SelfMetadata) {
                        return this._getByKeySelf(key, optional, providerVisibility);
                    }
                    else if (upperBoundVisibility instanceof metadata_5.HostMetadata) {
                        return this._getByKeyHost(key, optional, providerVisibility, lowerBoundVisibility);
                    }
                    else {
                        return this._getByKeyDefault(key, optional, providerVisibility, lowerBoundVisibility);
                    }
                };
                /** @internal */
                Injector.prototype._throwOrNull = function (key, optional) {
                    if (optional) {
                        return null;
                    }
                    else {
                        throw new exceptions_22.NoProviderError(this, key);
                    }
                };
                /** @internal */
                Injector.prototype._getByKeySelf = function (key, optional, providerVisibility) {
                    var obj = this._strategy.getObjByKeyId(key.id, providerVisibility);
                    return (obj !== UNDEFINED) ? obj : this._throwOrNull(key, optional);
                };
                /** @internal */
                Injector.prototype._getByKeyHost = function (key, optional, providerVisibility, lowerBoundVisibility) {
                    var inj = this;
                    if (lowerBoundVisibility instanceof metadata_5.SkipSelfMetadata) {
                        if (inj._isHostBoundary) {
                            return this._getPrivateDependency(key, optional, inj);
                        }
                        else {
                            inj = inj._parent;
                        }
                    }
                    while (inj != null) {
                        var obj = inj._strategy.getObjByKeyId(key.id, providerVisibility);
                        if (obj !== UNDEFINED)
                            return obj;
                        if (lang_85.isPresent(inj._parent) && inj._isHostBoundary) {
                            return this._getPrivateDependency(key, optional, inj);
                        }
                        else {
                            inj = inj._parent;
                        }
                    }
                    return this._throwOrNull(key, optional);
                };
                /** @internal */
                Injector.prototype._getPrivateDependency = function (key, optional, inj) {
                    var obj = inj._parent._strategy.getObjByKeyId(key.id, Visibility.Private);
                    return (obj !== UNDEFINED) ? obj : this._throwOrNull(key, optional);
                };
                /** @internal */
                Injector.prototype._getByKeyDefault = function (key, optional, providerVisibility, lowerBoundVisibility) {
                    var inj = this;
                    if (lowerBoundVisibility instanceof metadata_5.SkipSelfMetadata) {
                        providerVisibility = inj._isHostBoundary ? Visibility.PublicAndPrivate : Visibility.Public;
                        inj = inj._parent;
                    }
                    while (inj != null) {
                        var obj = inj._strategy.getObjByKeyId(key.id, providerVisibility);
                        if (obj !== UNDEFINED)
                            return obj;
                        providerVisibility = inj._isHostBoundary ? Visibility.PublicAndPrivate : Visibility.Public;
                        inj = inj._parent;
                    }
                    return this._throwOrNull(key, optional);
                };
                Object.defineProperty(Injector.prototype, "displayName", {
                    get: function () {
                        return "Injector(providers: [" + _mapProviders(this, function (b) { return (" \"" + b.key.displayName + "\" "); }).join(", ") + "])";
                    },
                    enumerable: true,
                    configurable: true
                });
                Injector.prototype.toString = function () { return this.displayName; };
                return Injector;
            }());
            exports_152("Injector", Injector);
            INJECTOR_KEY = key_2.Key.get(Injector);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/di/opaque_token", ['angular2/src/facade/lang'], function(exports_153, context_153) {
    "use strict";
    var __moduleName = context_153 && context_153.id;
    var lang_86;
    var OpaqueToken;
    return {
        setters:[
            function (lang_86_1) {
                lang_86 = lang_86_1;
            }],
        execute: function() {
            /**
             * Creates a token that can be used in a DI Provider.
             *
             * ### Example ([live demo](http://plnkr.co/edit/Ys9ezXpj2Mnoy3Uc8KBp?p=preview))
             *
             * ```typescript
             * var t = new OpaqueToken("value");
             *
             * var injector = Injector.resolveAndCreate([
             *   provide(t, {useValue: "bindingValue"})
             * ]);
             *
             * expect(injector.get(t)).toEqual("bindingValue");
             * ```
             *
             * Using an `OpaqueToken` is preferable to using strings as tokens because of possible collisions
             * caused by multiple providers using the same string as two different tokens.
             *
             * Using an `OpaqueToken` is preferable to using an `Object` as tokens because it provides better
             * error messages.
             */
            OpaqueToken = (function () {
                function OpaqueToken(_desc) {
                    this._desc = _desc;
                }
                OpaqueToken.prototype.toString = function () { return "Token " + this._desc; };
                OpaqueToken = __decorate([
                    lang_86.CONST(), 
                    __metadata('design:paramtypes', [String])
                ], OpaqueToken);
                return OpaqueToken;
            }());
            exports_153("OpaqueToken", OpaqueToken);
        }
    }
});
/**
 * @module
 * @description
 * The `di` module provides dependency injection container services.
 */
System.register("test/node_modules/angular2/ts/src/core/di", ["test/node_modules/angular2/ts/src/core/di/metadata", "test/node_modules/angular2/ts/src/core/di/decorators", "test/node_modules/angular2/ts/src/core/di/forward_ref", "test/node_modules/angular2/ts/src/core/di/injector", "test/node_modules/angular2/ts/src/core/di/provider", "test/node_modules/angular2/ts/src/core/di/key", "test/node_modules/angular2/ts/src/core/di/exceptions", "test/node_modules/angular2/ts/src/core/di/opaque_token"], function(exports_154, context_154) {
    "use strict";
    var __moduleName = context_154 && context_154.id;
    var exportedNames_3 = {
        'InjectMetadata': true,
        'OptionalMetadata': true,
        'InjectableMetadata': true,
        'SelfMetadata': true,
        'HostMetadata': true,
        'SkipSelfMetadata': true,
        'DependencyMetadata': true,
        'forwardRef': true,
        'resolveForwardRef': true,
        'ForwardRefFn': true,
        'Injector': true,
        'Binding': true,
        'ProviderBuilder': true,
        'ResolvedBinding': true,
        'ResolvedFactory': true,
        'Dependency': true,
        'bind': true,
        'Provider': true,
        'ResolvedProvider': true,
        'provide': true,
        'Key': true,
        'NoProviderError': true,
        'AbstractProviderError': true,
        'CyclicDependencyError': true,
        'InstantiationError': true,
        'InvalidProviderError': true,
        'NoAnnotationError': true,
        'OutOfBoundsError': true,
        'OpaqueToken': true
    };
    function exportStar_5(m) {
        var exports = {};
        for(var n in m) {
            if (n !== "default"&& !exportedNames_3.hasOwnProperty(n)) exports[n] = m[n];
        }
        exports_154(exports);
    }
    return {
        setters:[
            function (metadata_6_1) {
                exports_154({
                    "InjectMetadata": metadata_6_1["InjectMetadata"],
                    "OptionalMetadata": metadata_6_1["OptionalMetadata"],
                    "InjectableMetadata": metadata_6_1["InjectableMetadata"],
                    "SelfMetadata": metadata_6_1["SelfMetadata"],
                    "HostMetadata": metadata_6_1["HostMetadata"],
                    "SkipSelfMetadata": metadata_6_1["SkipSelfMetadata"],
                    "DependencyMetadata": metadata_6_1["DependencyMetadata"]
                });
            },
            function (decorators_4_1) {
                exportStar_5(decorators_4_1);
            },
            function (forward_ref_3_1) {
                exports_154({
                    "forwardRef": forward_ref_3_1["forwardRef"],
                    "resolveForwardRef": forward_ref_3_1["resolveForwardRef"],
                    "ForwardRefFn": forward_ref_3_1["ForwardRefFn"]
                });
            },
            function (injector_1_1) {
                exports_154({
                    "Injector": injector_1_1["Injector"]
                });
            },
            function (provider_2_1) {
                exports_154({
                    "Binding": provider_2_1["Binding"],
                    "ProviderBuilder": provider_2_1["ProviderBuilder"],
                    "ResolvedBinding": provider_2_1["ResolvedBinding"],
                    "ResolvedFactory": provider_2_1["ResolvedFactory"],
                    "Dependency": provider_2_1["Dependency"],
                    "bind": provider_2_1["bind"],
                    "Provider": provider_2_1["Provider"],
                    "ResolvedProvider": provider_2_1["ResolvedProvider"],
                    "provide": provider_2_1["provide"]
                });
            },
            function (key_3_1) {
                exports_154({
                    "Key": key_3_1["Key"]
                });
            },
            function (exceptions_24_1) {
                exports_154({
                    "NoProviderError": exceptions_24_1["NoProviderError"],
                    "AbstractProviderError": exceptions_24_1["AbstractProviderError"],
                    "CyclicDependencyError": exceptions_24_1["CyclicDependencyError"],
                    "InstantiationError": exceptions_24_1["InstantiationError"],
                    "InvalidProviderError": exceptions_24_1["InvalidProviderError"],
                    "NoAnnotationError": exceptions_24_1["NoAnnotationError"],
                    "OutOfBoundsError": exceptions_24_1["OutOfBoundsError"]
                });
            },
            function (opaque_token_1_1) {
                exports_154({
                    "OpaqueToken": opaque_token_1_1["OpaqueToken"]
                });
            }],
        execute: function() {
        }
    }
});
System.register("test/node_modules/angular2/ts/src/facade/lang", [], function(exports_155, context_155) {
    "use strict";
    var __moduleName = context_155 && context_155.id;
    var globalScope, IS_DART, _global, Type, Math, Date, _devMode, _modeLocked, StringWrapper, StringJoiner, NumberParseError, NumberWrapper, RegExp, RegExpWrapper, RegExpMatcherWrapper, FunctionWrapper, Json, DateWrapper, _symbolIterator;
    function scheduleMicroTask(fn) {
        Zone.current.scheduleMicroTask('scheduleMicrotask', fn);
    }
    exports_155("scheduleMicroTask", scheduleMicroTask);
    function getTypeNameForDebugging(type) {
        return type['name'];
    }
    exports_155("getTypeNameForDebugging", getTypeNameForDebugging);
    function lockMode() {
        _modeLocked = true;
    }
    exports_155("lockMode", lockMode);
    /**
     * Disable Angular's development mode, which turns off assertions and other
     * checks within the framework.
     *
     * One important assertion this disables verifies that a change detection pass
     * does not result in additional changes to any bindings (also known as
     * unidirectional data flow).
     */
    function enableProdMode() {
        if (_modeLocked) {
            // Cannot use BaseException as that ends up importing from facade/lang.
            throw 'Cannot enable prod mode after platform setup.';
        }
        _devMode = false;
    }
    exports_155("enableProdMode", enableProdMode);
    function assertionsEnabled() {
        return _devMode;
    }
    exports_155("assertionsEnabled", assertionsEnabled);
    // This function is needed only to properly support Dart's const expressions
    // see https://github.com/angular/ts2dart/pull/151 for more info
    function CONST_EXPR(expr) {
        return expr;
    }
    exports_155("CONST_EXPR", CONST_EXPR);
    function CONST() {
        return function (target) { return target; };
    }
    exports_155("CONST", CONST);
    function isPresent(obj) {
        return obj !== undefined && obj !== null;
    }
    exports_155("isPresent", isPresent);
    function isBlank(obj) {
        return obj === undefined || obj === null;
    }
    exports_155("isBlank", isBlank);
    function isString(obj) {
        return typeof obj === "string";
    }
    exports_155("isString", isString);
    function isFunction(obj) {
        return typeof obj === "function";
    }
    exports_155("isFunction", isFunction);
    function isType(obj) {
        return isFunction(obj);
    }
    exports_155("isType", isType);
    function isStringMap(obj) {
        return typeof obj === 'object' && obj !== null;
    }
    exports_155("isStringMap", isStringMap);
    function isPromise(obj) {
        return obj instanceof _global.Promise;
    }
    exports_155("isPromise", isPromise);
    function isArray(obj) {
        return Array.isArray(obj);
    }
    exports_155("isArray", isArray);
    function isNumber(obj) {
        return typeof obj === 'number';
    }
    exports_155("isNumber", isNumber);
    function isDate(obj) {
        return obj instanceof Date && !isNaN(obj.valueOf());
    }
    exports_155("isDate", isDate);
    function noop() { }
    exports_155("noop", noop);
    function stringify(token) {
        if (typeof token === 'string') {
            return token;
        }
        if (token === undefined || token === null) {
            return '' + token;
        }
        if (token.name) {
            return token.name;
        }
        if (token.overriddenName) {
            return token.overriddenName;
        }
        var res = token.toString();
        var newLineIndex = res.indexOf("\n");
        return (newLineIndex === -1) ? res : res.substring(0, newLineIndex);
    }
    exports_155("stringify", stringify);
    // serialize / deserialize enum exist only for consistency with dart API
    // enums in typescript don't need to be serialized
    function serializeEnum(val) {
        return val;
    }
    exports_155("serializeEnum", serializeEnum);
    function deserializeEnum(val, values) {
        return val;
    }
    exports_155("deserializeEnum", deserializeEnum);
    function resolveEnumToken(enumValue, val) {
        return enumValue[val];
    }
    exports_155("resolveEnumToken", resolveEnumToken);
    // JS has NaN !== NaN
    function looseIdentical(a, b) {
        return a === b || typeof a === "number" && typeof b === "number" && isNaN(a) && isNaN(b);
    }
    exports_155("looseIdentical", looseIdentical);
    // JS considers NaN is the same as NaN for map Key (while NaN !== NaN otherwise)
    // see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map
    function getMapKey(value) {
        return value;
    }
    exports_155("getMapKey", getMapKey);
    function normalizeBlank(obj) {
        return isBlank(obj) ? null : obj;
    }
    exports_155("normalizeBlank", normalizeBlank);
    function normalizeBool(obj) {
        return isBlank(obj) ? false : obj;
    }
    exports_155("normalizeBool", normalizeBool);
    function isJsObject(o) {
        return o !== null && (typeof o === "function" || typeof o === "object");
    }
    exports_155("isJsObject", isJsObject);
    function print(obj) {
        console.log(obj);
    }
    exports_155("print", print);
    function setValueOnPath(global, path, value) {
        var parts = path.split('.');
        var obj = global;
        while (parts.length > 1) {
            var name = parts.shift();
            if (obj.hasOwnProperty(name) && isPresent(obj[name])) {
                obj = obj[name];
            }
            else {
                obj = obj[name] = {};
            }
        }
        if (obj === undefined || obj === null) {
            obj = {};
        }
        obj[parts.shift()] = value;
    }
    exports_155("setValueOnPath", setValueOnPath);
    function getSymbolIterator() {
        if (isBlank(_symbolIterator)) {
            if (isPresent(Symbol) && isPresent(Symbol.iterator)) {
                _symbolIterator = Symbol.iterator;
            }
            else {
                // es6-shim specific logic
                var keys = Object.getOwnPropertyNames(Map.prototype);
                for (var i = 0; i < keys.length; ++i) {
                    var key = keys[i];
                    if (key !== 'entries' && key !== 'size' &&
                        Map.prototype[key] === Map.prototype['entries']) {
                        _symbolIterator = key;
                    }
                }
            }
        }
        return _symbolIterator;
    }
    exports_155("getSymbolIterator", getSymbolIterator);
    function evalExpression(sourceUrl, expr, declarations, vars) {
        var fnBody = declarations + "\nreturn " + expr + "\n//# sourceURL=" + sourceUrl;
        var fnArgNames = [];
        var fnArgValues = [];
        for (var argName in vars) {
            fnArgNames.push(argName);
            fnArgValues.push(vars[argName]);
        }
        return new (Function.bind.apply(Function, [void 0].concat(fnArgNames.concat(fnBody))))().apply(void 0, fnArgValues);
    }
    exports_155("evalExpression", evalExpression);
    function isPrimitive(obj) {
        return !isJsObject(obj);
    }
    exports_155("isPrimitive", isPrimitive);
    function hasConstructor(value, type) {
        return value.constructor === type;
    }
    exports_155("hasConstructor", hasConstructor);
    function bitWiseOr(values) {
        return values.reduce(function (a, b) { return a | b; });
    }
    exports_155("bitWiseOr", bitWiseOr);
    function bitWiseAnd(values) {
        return values.reduce(function (a, b) { return a & b; });
    }
    exports_155("bitWiseAnd", bitWiseAnd);
    function escape(s) {
        return _global.encodeURI(s);
    }
    exports_155("escape", escape);
    return {
        setters:[],
        execute: function() {
            if (typeof window === 'undefined') {
                if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
                    // TODO: Replace any with WorkerGlobalScope from lib.webworker.d.ts #3492
                    globalScope = self;
                }
                else {
                    globalScope = global;
                }
            }
            else {
                globalScope = window;
            }
            exports_155("IS_DART", IS_DART = false);
            // Need to declare a new variable for global here since TypeScript
            // exports the original value of the symbol.
            _global = globalScope;
            exports_155("global", _global);
            exports_155("Type", Type = Function);
            exports_155("Math", Math = _global.Math);
            exports_155("Date", Date = _global.Date);
            _devMode = true;
            _modeLocked = false;
            // TODO: remove calls to assert in production environment
            // Note: Can't just export this and import in in other files
            // as `assert` is a reserved keyword in Dart
            _global.assert = function assert(condition) {
                // TODO: to be fixed properly via #2830, noop for now
            };
            StringWrapper = (function () {
                function StringWrapper() {
                }
                StringWrapper.fromCharCode = function (code) { return String.fromCharCode(code); };
                StringWrapper.charCodeAt = function (s, index) { return s.charCodeAt(index); };
                StringWrapper.split = function (s, regExp) { return s.split(regExp); };
                StringWrapper.equals = function (s, s2) { return s === s2; };
                StringWrapper.stripLeft = function (s, charVal) {
                    if (s && s.length) {
                        var pos = 0;
                        for (var i = 0; i < s.length; i++) {
                            if (s[i] != charVal)
                                break;
                            pos++;
                        }
                        s = s.substring(pos);
                    }
                    return s;
                };
                StringWrapper.stripRight = function (s, charVal) {
                    if (s && s.length) {
                        var pos = s.length;
                        for (var i = s.length - 1; i >= 0; i--) {
                            if (s[i] != charVal)
                                break;
                            pos--;
                        }
                        s = s.substring(0, pos);
                    }
                    return s;
                };
                StringWrapper.replace = function (s, from, replace) {
                    return s.replace(from, replace);
                };
                StringWrapper.replaceAll = function (s, from, replace) {
                    return s.replace(from, replace);
                };
                StringWrapper.slice = function (s, from, to) {
                    if (from === void 0) { from = 0; }
                    if (to === void 0) { to = null; }
                    return s.slice(from, to === null ? undefined : to);
                };
                StringWrapper.replaceAllMapped = function (s, from, cb) {
                    return s.replace(from, function () {
                        var matches = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            matches[_i - 0] = arguments[_i];
                        }
                        // Remove offset & string from the result array
                        matches.splice(-2, 2);
                        // The callback receives match, p1, ..., pn
                        return cb(matches);
                    });
                };
                StringWrapper.contains = function (s, substr) { return s.indexOf(substr) != -1; };
                StringWrapper.compare = function (a, b) {
                    if (a < b) {
                        return -1;
                    }
                    else if (a > b) {
                        return 1;
                    }
                    else {
                        return 0;
                    }
                };
                return StringWrapper;
            }());
            exports_155("StringWrapper", StringWrapper);
            StringJoiner = (function () {
                function StringJoiner(parts) {
                    if (parts === void 0) { parts = []; }
                    this.parts = parts;
                }
                StringJoiner.prototype.add = function (part) { this.parts.push(part); };
                StringJoiner.prototype.toString = function () { return this.parts.join(""); };
                return StringJoiner;
            }());
            exports_155("StringJoiner", StringJoiner);
            NumberParseError = (function (_super) {
                __extends(NumberParseError, _super);
                function NumberParseError(message) {
                    _super.call(this);
                    this.message = message;
                }
                NumberParseError.prototype.toString = function () { return this.message; };
                return NumberParseError;
            }(Error));
            exports_155("NumberParseError", NumberParseError);
            NumberWrapper = (function () {
                function NumberWrapper() {
                }
                NumberWrapper.toFixed = function (n, fractionDigits) { return n.toFixed(fractionDigits); };
                NumberWrapper.equal = function (a, b) { return a === b; };
                NumberWrapper.parseIntAutoRadix = function (text) {
                    var result = parseInt(text);
                    if (isNaN(result)) {
                        throw new NumberParseError("Invalid integer literal when parsing " + text);
                    }
                    return result;
                };
                NumberWrapper.parseInt = function (text, radix) {
                    if (radix == 10) {
                        if (/^(\-|\+)?[0-9]+$/.test(text)) {
                            return parseInt(text, radix);
                        }
                    }
                    else if (radix == 16) {
                        if (/^(\-|\+)?[0-9ABCDEFabcdef]+$/.test(text)) {
                            return parseInt(text, radix);
                        }
                    }
                    else {
                        var result = parseInt(text, radix);
                        if (!isNaN(result)) {
                            return result;
                        }
                    }
                    throw new NumberParseError("Invalid integer literal when parsing " + text + " in base " +
                        radix);
                };
                // TODO: NaN is a valid literal but is returned by parseFloat to indicate an error.
                NumberWrapper.parseFloat = function (text) { return parseFloat(text); };
                Object.defineProperty(NumberWrapper, "NaN", {
                    get: function () { return NaN; },
                    enumerable: true,
                    configurable: true
                });
                NumberWrapper.isNaN = function (value) { return isNaN(value); };
                NumberWrapper.isInteger = function (value) { return Number.isInteger(value); };
                return NumberWrapper;
            }());
            exports_155("NumberWrapper", NumberWrapper);
            exports_155("RegExp", RegExp = _global.RegExp);
            RegExpWrapper = (function () {
                function RegExpWrapper() {
                }
                RegExpWrapper.create = function (regExpStr, flags) {
                    if (flags === void 0) { flags = ''; }
                    flags = flags.replace(/g/g, '');
                    return new _global.RegExp(regExpStr, flags + 'g');
                };
                RegExpWrapper.firstMatch = function (regExp, input) {
                    // Reset multimatch regex state
                    regExp.lastIndex = 0;
                    return regExp.exec(input);
                };
                RegExpWrapper.test = function (regExp, input) {
                    regExp.lastIndex = 0;
                    return regExp.test(input);
                };
                RegExpWrapper.matcher = function (regExp, input) {
                    // Reset regex state for the case
                    // someone did not loop over all matches
                    // last time.
                    regExp.lastIndex = 0;
                    return { re: regExp, input: input };
                };
                return RegExpWrapper;
            }());
            exports_155("RegExpWrapper", RegExpWrapper);
            RegExpMatcherWrapper = (function () {
                function RegExpMatcherWrapper() {
                }
                RegExpMatcherWrapper.next = function (matcher) {
                    return matcher.re.exec(matcher.input);
                };
                return RegExpMatcherWrapper;
            }());
            exports_155("RegExpMatcherWrapper", RegExpMatcherWrapper);
            FunctionWrapper = (function () {
                function FunctionWrapper() {
                }
                FunctionWrapper.apply = function (fn, posArgs) { return fn.apply(null, posArgs); };
                return FunctionWrapper;
            }());
            exports_155("FunctionWrapper", FunctionWrapper);
            // Can't be all uppercase as our transpiler would think it is a special directive...
            Json = (function () {
                function Json() {
                }
                Json.parse = function (s) { return _global.JSON.parse(s); };
                Json.stringify = function (data) {
                    // Dart doesn't take 3 arguments
                    return _global.JSON.stringify(data, null, 2);
                };
                return Json;
            }());
            exports_155("Json", Json);
            DateWrapper = (function () {
                function DateWrapper() {
                }
                DateWrapper.create = function (year, month, day, hour, minutes, seconds, milliseconds) {
                    if (month === void 0) { month = 1; }
                    if (day === void 0) { day = 1; }
                    if (hour === void 0) { hour = 0; }
                    if (minutes === void 0) { minutes = 0; }
                    if (seconds === void 0) { seconds = 0; }
                    if (milliseconds === void 0) { milliseconds = 0; }
                    return new Date(year, month - 1, day, hour, minutes, seconds, milliseconds);
                };
                DateWrapper.fromISOString = function (str) { return new Date(str); };
                DateWrapper.fromMillis = function (ms) { return new Date(ms); };
                DateWrapper.toMillis = function (date) { return date.getTime(); };
                DateWrapper.now = function () { return new Date(); };
                DateWrapper.toJson = function (date) { return date.toJSON(); };
                return DateWrapper;
            }());
            exports_155("DateWrapper", DateWrapper);
            _symbolIterator = null;
        }
    }
});
System.register("test/node_modules/angular2/ts/src/facade/async", ['angular2/src/facade/lang', 'angular2/src/facade/promise', 'rxjs/Subject', 'rxjs/observable/PromiseObservable', 'rxjs/operator/toPromise', 'rxjs/Observable'], function(exports_156, context_156) {
    "use strict";
    var __moduleName = context_156 && context_156.id;
    var lang_87, Subject_1, PromiseObservable_1, toPromise_1;
    var TimerWrapper, ObservableWrapper, EventEmitter;
    return {
        setters:[
            function (lang_87_1) {
                lang_87 = lang_87_1;
            },
            function (promise_3_1) {
                exports_156({
                    "PromiseWrapper": promise_3_1["PromiseWrapper"],
                    "PromiseCompleter": promise_3_1["PromiseCompleter"]
                });
            },
            function (Subject_1_1) {
                Subject_1 = Subject_1_1;
                exports_156({
                    "Subject": Subject_1_1["Subject"]
                });
            },
            function (PromiseObservable_1_1) {
                PromiseObservable_1 = PromiseObservable_1_1;
            },
            function (toPromise_1_1) {
                toPromise_1 = toPromise_1_1;
            },
            function (Observable_1_1) {
                exports_156({
                    "Observable": Observable_1_1["Observable"]
                });
            }],
        execute: function() {
            TimerWrapper = (function () {
                function TimerWrapper() {
                }
                TimerWrapper.setTimeout = function (fn, millis) {
                    return lang_87.global.setTimeout(fn, millis);
                };
                TimerWrapper.clearTimeout = function (id) { lang_87.global.clearTimeout(id); };
                TimerWrapper.setInterval = function (fn, millis) {
                    return lang_87.global.setInterval(fn, millis);
                };
                TimerWrapper.clearInterval = function (id) { lang_87.global.clearInterval(id); };
                return TimerWrapper;
            }());
            exports_156("TimerWrapper", TimerWrapper);
            ObservableWrapper = (function () {
                function ObservableWrapper() {
                }
                // TODO(vsavkin): when we use rxnext, try inferring the generic type from the first arg
                ObservableWrapper.subscribe = function (emitter, onNext, onError, onComplete) {
                    if (onComplete === void 0) { onComplete = function () { }; }
                    onError = (typeof onError === "function") && onError || lang_87.noop;
                    onComplete = (typeof onComplete === "function") && onComplete || lang_87.noop;
                    return emitter.subscribe({ next: onNext, error: onError, complete: onComplete });
                };
                ObservableWrapper.isObservable = function (obs) { return !!obs.subscribe; };
                /**
                 * Returns whether `obs` has any subscribers listening to events.
                 */
                ObservableWrapper.hasSubscribers = function (obs) { return obs.observers.length > 0; };
                ObservableWrapper.dispose = function (subscription) { subscription.unsubscribe(); };
                /**
                 * @deprecated - use callEmit() instead
                 */
                ObservableWrapper.callNext = function (emitter, value) { emitter.next(value); };
                ObservableWrapper.callEmit = function (emitter, value) { emitter.emit(value); };
                ObservableWrapper.callError = function (emitter, error) { emitter.error(error); };
                ObservableWrapper.callComplete = function (emitter) { emitter.complete(); };
                ObservableWrapper.fromPromise = function (promise) {
                    return PromiseObservable_1.PromiseObservable.create(promise);
                };
                ObservableWrapper.toPromise = function (obj) { return toPromise_1.toPromise.call(obj); };
                return ObservableWrapper;
            }());
            exports_156("ObservableWrapper", ObservableWrapper);
            /**
             * Use by directives and components to emit custom Events.
             *
             * ### Examples
             *
             * In the following example, `Zippy` alternatively emits `open` and `close` events when its
             * title gets clicked:
             *
             * ```
             * @Component({
             *   selector: 'zippy',
             *   template: `
             *   <div class="zippy">
             *     <div (click)="toggle()">Toggle</div>
             *     <div [hidden]="!visible">
             *       <ng-content></ng-content>
             *     </div>
             *  </div>`})
             * export class Zippy {
             *   visible: boolean = true;
             *   @Output() open: EventEmitter<any> = new EventEmitter();
             *   @Output() close: EventEmitter<any> = new EventEmitter();
             *
             *   toggle() {
             *     this.visible = !this.visible;
             *     if (this.visible) {
             *       this.open.emit(null);
             *     } else {
             *       this.close.emit(null);
             *     }
             *   }
             * }
             * ```
             *
             * Use Rx.Observable but provides an adapter to make it work as specified here:
             * https://github.com/jhusain/observable-spec
             *
             * Once a reference implementation of the spec is available, switch to it.
             */
            EventEmitter = (function (_super) {
                __extends(EventEmitter, _super);
                /**
                 * Creates an instance of [EventEmitter], which depending on [isAsync],
                 * delivers events synchronously or asynchronously.
                 */
                function EventEmitter(isAsync) {
                    if (isAsync === void 0) { isAsync = true; }
                    _super.call(this);
                    this._isAsync = isAsync;
                }
                EventEmitter.prototype.emit = function (value) { _super.prototype.next.call(this, value); };
                /**
                 * @deprecated - use .emit(value) instead
                 */
                EventEmitter.prototype.next = function (value) { _super.prototype.next.call(this, value); };
                EventEmitter.prototype.subscribe = function (generatorOrNext, error, complete) {
                    var schedulerFn;
                    var errorFn = function (err) { return null; };
                    var completeFn = function () { return null; };
                    if (generatorOrNext && typeof generatorOrNext === 'object') {
                        schedulerFn = this._isAsync ? function (value) { setTimeout(function () { return generatorOrNext.next(value); }); } :
                            function (value) { generatorOrNext.next(value); };
                        if (generatorOrNext.error) {
                            errorFn = this._isAsync ? function (err) { setTimeout(function () { return generatorOrNext.error(err); }); } :
                                function (err) { generatorOrNext.error(err); };
                        }
                        if (generatorOrNext.complete) {
                            completeFn = this._isAsync ? function () { setTimeout(function () { return generatorOrNext.complete(); }); } :
                                function () { generatorOrNext.complete(); };
                        }
                    }
                    else {
                        schedulerFn = this._isAsync ? function (value) { setTimeout(function () { return generatorOrNext(value); }); } :
                            function (value) { generatorOrNext(value); };
                        if (error) {
                            errorFn =
                                this._isAsync ? function (err) { setTimeout(function () { return error(err); }); } : function (err) { error(err); };
                        }
                        if (complete) {
                            completeFn =
                                this._isAsync ? function () { setTimeout(function () { return complete(); }); } : function () { complete(); };
                        }
                    }
                    return _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);
                };
                return EventEmitter;
            }(Subject_1.Subject));
            exports_156("EventEmitter", EventEmitter);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/facade/base_wrapped_exception", [], function(exports_157, context_157) {
    "use strict";
    var __moduleName = context_157 && context_157.id;
    var BaseWrappedException;
    return {
        setters:[],
        execute: function() {
            BaseWrappedException = (function (_super) {
                __extends(BaseWrappedException, _super);
                function BaseWrappedException(message) {
                    _super.call(this, message);
                }
                Object.defineProperty(BaseWrappedException.prototype, "wrapperMessage", {
                    get: function () { return ''; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(BaseWrappedException.prototype, "wrapperStack", {
                    get: function () { return null; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(BaseWrappedException.prototype, "originalException", {
                    get: function () { return null; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(BaseWrappedException.prototype, "originalStack", {
                    get: function () { return null; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(BaseWrappedException.prototype, "context", {
                    get: function () { return null; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(BaseWrappedException.prototype, "message", {
                    get: function () { return ''; },
                    enumerable: true,
                    configurable: true
                });
                return BaseWrappedException;
            }(Error));
            exports_157("BaseWrappedException", BaseWrappedException);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/facade/exception_handler", ['angular2/src/facade/lang', 'angular2/src/facade/base_wrapped_exception', 'angular2/src/facade/collection'], function(exports_158, context_158) {
    "use strict";
    var __moduleName = context_158 && context_158.id;
    var lang_88, base_wrapped_exception_1, collection_34;
    var _ArrayLogger, ExceptionHandler;
    return {
        setters:[
            function (lang_88_1) {
                lang_88 = lang_88_1;
            },
            function (base_wrapped_exception_1_1) {
                base_wrapped_exception_1 = base_wrapped_exception_1_1;
            },
            function (collection_34_1) {
                collection_34 = collection_34_1;
            }],
        execute: function() {
            _ArrayLogger = (function () {
                function _ArrayLogger() {
                    this.res = [];
                }
                _ArrayLogger.prototype.log = function (s) { this.res.push(s); };
                _ArrayLogger.prototype.logError = function (s) { this.res.push(s); };
                _ArrayLogger.prototype.logGroup = function (s) { this.res.push(s); };
                _ArrayLogger.prototype.logGroupEnd = function () { };
                ;
                return _ArrayLogger;
            }());
            /**
             * Provides a hook for centralized exception handling.
             *
             * The default implementation of `ExceptionHandler` prints error messages to the `Console`. To
             * intercept error handling,
             * write a custom exception handler that replaces this default as appropriate for your app.
             *
             * ### Example
             *
             * ```javascript
             *
             * class MyExceptionHandler implements ExceptionHandler {
             *   call(error, stackTrace = null, reason = null) {
             *     // do something with the exception
             *   }
             * }
             *
             * bootstrap(MyApp, [provide(ExceptionHandler, {useClass: MyExceptionHandler})])
             *
             * ```
             */
            ExceptionHandler = (function () {
                function ExceptionHandler(_logger, _rethrowException) {
                    if (_rethrowException === void 0) { _rethrowException = true; }
                    this._logger = _logger;
                    this._rethrowException = _rethrowException;
                }
                ExceptionHandler.exceptionToString = function (exception, stackTrace, reason) {
                    if (stackTrace === void 0) { stackTrace = null; }
                    if (reason === void 0) { reason = null; }
                    var l = new _ArrayLogger();
                    var e = new ExceptionHandler(l, false);
                    e.call(exception, stackTrace, reason);
                    return l.res.join("\n");
                };
                ExceptionHandler.prototype.call = function (exception, stackTrace, reason) {
                    if (stackTrace === void 0) { stackTrace = null; }
                    if (reason === void 0) { reason = null; }
                    var originalException = this._findOriginalException(exception);
                    var originalStack = this._findOriginalStack(exception);
                    var context = this._findContext(exception);
                    this._logger.logGroup("EXCEPTION: " + this._extractMessage(exception));
                    if (lang_88.isPresent(stackTrace) && lang_88.isBlank(originalStack)) {
                        this._logger.logError("STACKTRACE:");
                        this._logger.logError(this._longStackTrace(stackTrace));
                    }
                    if (lang_88.isPresent(reason)) {
                        this._logger.logError("REASON: " + reason);
                    }
                    if (lang_88.isPresent(originalException)) {
                        this._logger.logError("ORIGINAL EXCEPTION: " + this._extractMessage(originalException));
                    }
                    if (lang_88.isPresent(originalStack)) {
                        this._logger.logError("ORIGINAL STACKTRACE:");
                        this._logger.logError(this._longStackTrace(originalStack));
                    }
                    if (lang_88.isPresent(context)) {
                        this._logger.logError("ERROR CONTEXT:");
                        this._logger.logError(context);
                    }
                    this._logger.logGroupEnd();
                    // We rethrow exceptions, so operations like 'bootstrap' will result in an error
                    // when an exception happens. If we do not rethrow, bootstrap will always succeed.
                    if (this._rethrowException)
                        throw exception;
                };
                /** @internal */
                ExceptionHandler.prototype._extractMessage = function (exception) {
                    return exception instanceof base_wrapped_exception_1.BaseWrappedException ? exception.wrapperMessage :
                        exception.toString();
                };
                /** @internal */
                ExceptionHandler.prototype._longStackTrace = function (stackTrace) {
                    return collection_34.isListLikeIterable(stackTrace) ? stackTrace.join("\n\n-----async gap-----\n") :
                        stackTrace.toString();
                };
                /** @internal */
                ExceptionHandler.prototype._findContext = function (exception) {
                    try {
                        if (!(exception instanceof base_wrapped_exception_1.BaseWrappedException))
                            return null;
                        return lang_88.isPresent(exception.context) ? exception.context :
                            this._findContext(exception.originalException);
                    }
                    catch (e) {
                        // exception.context can throw an exception. if it happens, we ignore the context.
                        return null;
                    }
                };
                /** @internal */
                ExceptionHandler.prototype._findOriginalException = function (exception) {
                    if (!(exception instanceof base_wrapped_exception_1.BaseWrappedException))
                        return null;
                    var e = exception.originalException;
                    while (e instanceof base_wrapped_exception_1.BaseWrappedException && lang_88.isPresent(e.originalException)) {
                        e = e.originalException;
                    }
                    return e;
                };
                /** @internal */
                ExceptionHandler.prototype._findOriginalStack = function (exception) {
                    if (!(exception instanceof base_wrapped_exception_1.BaseWrappedException))
                        return null;
                    var e = exception;
                    var stack = exception.originalStack;
                    while (e instanceof base_wrapped_exception_1.BaseWrappedException && lang_88.isPresent(e.originalException)) {
                        e = e.originalException;
                        if (e instanceof base_wrapped_exception_1.BaseWrappedException && lang_88.isPresent(e.originalException)) {
                            stack = e.originalStack;
                        }
                    }
                    return stack;
                };
                return ExceptionHandler;
            }());
            exports_158("ExceptionHandler", ExceptionHandler);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/facade/exceptions", ["test/node_modules/angular2/ts/src/facade/base_wrapped_exception", "test/node_modules/angular2/ts/src/facade/exception_handler"], function(exports_159, context_159) {
    "use strict";
    var __moduleName = context_159 && context_159.id;
    var base_wrapped_exception_2, exception_handler_1;
    var BaseException, WrappedException;
    function makeTypeError(message) {
        return new TypeError(message);
    }
    exports_159("makeTypeError", makeTypeError);
    function unimplemented() {
        throw new BaseException('unimplemented');
    }
    exports_159("unimplemented", unimplemented);
    return {
        setters:[
            function (base_wrapped_exception_2_1) {
                base_wrapped_exception_2 = base_wrapped_exception_2_1;
            },
            function (exception_handler_1_1) {
                exception_handler_1 = exception_handler_1_1;
                exports_159({
                    "ExceptionHandler": exception_handler_1_1["ExceptionHandler"]
                });
            }],
        execute: function() {
            BaseException = (function (_super) {
                __extends(BaseException, _super);
                function BaseException(message) {
                    if (message === void 0) { message = "--"; }
                    _super.call(this, message);
                    this.message = message;
                    this.stack = (new Error(message)).stack;
                }
                BaseException.prototype.toString = function () { return this.message; };
                return BaseException;
            }(Error));
            exports_159("BaseException", BaseException);
            /**
             * Wraps an exception and provides additional context or information.
             */
            WrappedException = (function (_super) {
                __extends(WrappedException, _super);
                function WrappedException(_wrapperMessage, _originalException, _originalStack, _context) {
                    _super.call(this, _wrapperMessage);
                    this._wrapperMessage = _wrapperMessage;
                    this._originalException = _originalException;
                    this._originalStack = _originalStack;
                    this._context = _context;
                    this._wrapperStack = (new Error(_wrapperMessage)).stack;
                }
                Object.defineProperty(WrappedException.prototype, "wrapperMessage", {
                    get: function () { return this._wrapperMessage; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(WrappedException.prototype, "wrapperStack", {
                    get: function () { return this._wrapperStack; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(WrappedException.prototype, "originalException", {
                    get: function () { return this._originalException; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(WrappedException.prototype, "originalStack", {
                    get: function () { return this._originalStack; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(WrappedException.prototype, "context", {
                    get: function () { return this._context; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(WrappedException.prototype, "message", {
                    get: function () { return exception_handler_1.ExceptionHandler.exceptionToString(this); },
                    enumerable: true,
                    configurable: true
                });
                WrappedException.prototype.toString = function () { return this.message; };
                return WrappedException;
            }(base_wrapped_exception_2.BaseWrappedException));
            exports_159("WrappedException", WrappedException);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/facade/facade", ["test/node_modules/angular2/ts/src/facade/lang", "test/node_modules/angular2/ts/src/facade/async", "test/node_modules/angular2/ts/src/facade/exceptions", "test/node_modules/angular2/ts/src/facade/exception_handler"], function(exports_160, context_160) {
    "use strict";
    var __moduleName = context_160 && context_160.id;
    return {
        setters:[
            function (lang_89_1) {
                exports_160({
                    "ConcreteType": lang_89_1["ConcreteType"],
                    "Type": lang_89_1["Type"]
                });
            },
            function (async_13_1) {
                exports_160({
                    "EventEmitter": async_13_1["EventEmitter"]
                });
            },
            function (exceptions_25_1) {
                exports_160({
                    "WrappedException": exceptions_25_1["WrappedException"]
                });
            },
            function (exception_handler_3_1) {
                exports_160({
                    "ExceptionHandler": exception_handler_3_1["ExceptionHandler"]
                });
            }],
        execute: function() {
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/application_tokens", ['angular2/src/core/di', 'angular2/src/facade/lang'], function(exports_161, context_161) {
    "use strict";
    var __moduleName = context_161 && context_161.id;
    var di_21, lang_90;
    var APP_COMPONENT_REF_PROMISE, APP_COMPONENT, APP_ID, APP_ID_RANDOM_PROVIDER, PLATFORM_INITIALIZER, APP_INITIALIZER, PACKAGE_ROOT_URL;
    function _appIdRandomProviderFactory() {
        return "" + _randomChar() + _randomChar() + _randomChar();
    }
    function _randomChar() {
        return lang_90.StringWrapper.fromCharCode(97 + lang_90.Math.floor(lang_90.Math.random() * 25));
    }
    return {
        setters:[
            function (di_21_1) {
                di_21 = di_21_1;
            },
            function (lang_90_1) {
                lang_90 = lang_90_1;
            }],
        execute: function() {
            /**
             *  @internal
             */
            exports_161("APP_COMPONENT_REF_PROMISE", APP_COMPONENT_REF_PROMISE = lang_90.CONST_EXPR(new di_21.OpaqueToken('Promise<ComponentRef>')));
            /**
             * An {@link angular2/di/OpaqueToken} representing the application root type in the {@link
             * Injector}.
             *
             * ```
             * @Component(...)
             * class MyApp {
             *   ...
             * }
             *
             * bootstrap(MyApp).then((appRef:ApplicationRef) {
             *   expect(appRef.injector.get(appComponentTypeToken)).toEqual(MyApp);
             * });
             *
             * ```
             */
            exports_161("APP_COMPONENT", APP_COMPONENT = lang_90.CONST_EXPR(new di_21.OpaqueToken('AppComponent')));
            /**
             * A DI Token representing a unique string id assigned to the application by Angular and used
             * primarily for prefixing application attributes and CSS styles when
             * {@link ViewEncapsulation#Emulated} is being used.
             *
             * If you need to avoid randomly generated value to be used as an application id, you can provide
             * a custom value via a DI provider <!-- TODO: provider --> configuring the root {@link Injector}
             * using this token.
             */
            exports_161("APP_ID", APP_ID = lang_90.CONST_EXPR(new di_21.OpaqueToken('AppId')));
            /**
             * Providers that will generate a random APP_ID_TOKEN.
             */
            exports_161("APP_ID_RANDOM_PROVIDER", APP_ID_RANDOM_PROVIDER = lang_90.CONST_EXPR(new di_21.Provider(APP_ID, { useFactory: _appIdRandomProviderFactory, deps: [] })));
            /**
             * A function that will be executed when a platform is initialized.
             */
            exports_161("PLATFORM_INITIALIZER", PLATFORM_INITIALIZER = lang_90.CONST_EXPR(new di_21.OpaqueToken("Platform Initializer")));
            /**
             * A function that will be executed when an application is initialized.
             */
            exports_161("APP_INITIALIZER", APP_INITIALIZER = lang_90.CONST_EXPR(new di_21.OpaqueToken("Application Initializer")));
            /**
             * A token which indicates the root directory of the application
             */
            exports_161("PACKAGE_ROOT_URL", PACKAGE_ROOT_URL = lang_90.CONST_EXPR(new di_21.OpaqueToken("Application Packages Root URL")));
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/profile/wtf_impl", ['angular2/src/facade/lang'], function(exports_162, context_162) {
    "use strict";
    var __moduleName = context_162 && context_162.id;
    var lang_91;
    var trace, events;
    function detectWTF() {
        var wtf = lang_91.global['wtf'];
        if (wtf) {
            trace = wtf['trace'];
            if (trace) {
                events = trace['events'];
                return true;
            }
        }
        return false;
    }
    exports_162("detectWTF", detectWTF);
    function createScope(signature, flags) {
        if (flags === void 0) { flags = null; }
        return events.createScope(signature, flags);
    }
    exports_162("createScope", createScope);
    function leave(scope, returnValue) {
        trace.leaveScope(scope, returnValue);
        return returnValue;
    }
    exports_162("leave", leave);
    function startTimeRange(rangeType, action) {
        return trace.beginTimeRange(rangeType, action);
    }
    exports_162("startTimeRange", startTimeRange);
    function endTimeRange(range) {
        trace.endTimeRange(range);
    }
    exports_162("endTimeRange", endTimeRange);
    return {
        setters:[
            function (lang_91_1) {
                lang_91 = lang_91_1;
            }],
        execute: function() {
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/profile/profile", ["test/node_modules/angular2/ts/src/core/profile/wtf_impl"], function(exports_163, context_163) {
    "use strict";
    var __moduleName = context_163 && context_163.id;
    var impl;
    var wtfEnabled, wtfCreateScope, wtfLeave, wtfStartTimeRange, wtfEndTimeRange;
    function noopScope(arg0, arg1) {
        return null;
    }
    return {
        setters:[
            function (impl_1) {
                impl = impl_1;
            }],
        execute: function() {
            // Change exports to const once https://github.com/angular/ts2dart/issues/150
            /**
             * True if WTF is enabled.
             */
            exports_163("wtfEnabled", wtfEnabled = impl.detectWTF());
            /**
             * Create trace scope.
             *
             * Scopes must be strictly nested and are analogous to stack frames, but
             * do not have to follow the stack frames. Instead it is recommended that they follow logical
             * nesting. You may want to use
             * [Event
             * Signatures](http://google.github.io/tracing-framework/instrumenting-code.html#custom-events)
             * as they are defined in WTF.
             *
             * Used to mark scope entry. The return value is used to leave the scope.
             *
             *     var myScope = wtfCreateScope('MyClass#myMethod(ascii someVal)');
             *
             *     someMethod() {
             *        var s = myScope('Foo'); // 'Foo' gets stored in tracing UI
             *        // DO SOME WORK HERE
             *        return wtfLeave(s, 123); // Return value 123
             *     }
             *
             * Note, adding try-finally block around the work to ensure that `wtfLeave` gets called can
             * negatively impact the performance of your application. For this reason we recommend that
             * you don't add them to ensure that `wtfLeave` gets called. In production `wtfLeave` is a noop and
             * so try-finally block has no value. When debugging perf issues, skipping `wtfLeave`, do to
             * exception, will produce incorrect trace, but presence of exception signifies logic error which
             * needs to be fixed before the app should be profiled. Add try-finally only when you expect that
             * an exception is expected during normal execution while profiling.
             *
             */
            exports_163("wtfCreateScope", wtfCreateScope = wtfEnabled ? impl.createScope : function (signature, flags) { return noopScope; });
            /**
             * Used to mark end of Scope.
             *
             * - `scope` to end.
             * - `returnValue` (optional) to be passed to the WTF.
             *
             * Returns the `returnValue for easy chaining.
             */
            exports_163("wtfLeave", wtfLeave = wtfEnabled ? impl.leave : function (s, r) { return r; });
            /**
             * Used to mark Async start. Async are similar to scope but they don't have to be strictly nested.
             * The return value is used in the call to [endAsync]. Async ranges only work if WTF has been
             * enabled.
             *
             *     someMethod() {
             *        var s = wtfStartTimeRange('HTTP:GET', 'some.url');
             *        var future = new Future.delay(5).then((_) {
             *          wtfEndTimeRange(s);
             *        });
             *     }
             */
            exports_163("wtfStartTimeRange", wtfStartTimeRange = wtfEnabled ? impl.startTimeRange : function (rangeType, action) { return null; });
            /**
             * Ends a async time range operation.
             * [range] is the return value from [wtfStartTimeRange] Async ranges only work if WTF has been
             * enabled.
             */
            exports_163("wtfEndTimeRange", wtfEndTimeRange = wtfEnabled ? impl.endTimeRange : function (r) {
                return null;
            });
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/application_ref", ['angular2/src/core/zone/ng_zone', 'angular2/src/facade/lang', 'angular2/src/core/di', "test/node_modules/angular2/ts/src/core/application_tokens", 'angular2/src/facade/async', 'angular2/src/facade/collection', 'angular2/src/core/testability/testability', 'angular2/src/core/linker/dynamic_component_loader', 'angular2/src/facade/exceptions', 'angular2/src/core/console', "test/node_modules/angular2/ts/src/core/profile/profile"], function(exports_164, context_164) {
    "use strict";
    var __moduleName = context_164 && context_164.id;
    var ng_zone_1, lang_92, di_22, application_tokens_2, async_14, collection_35, testability_1, dynamic_component_loader_1, exceptions_26, console_1, profile_1, lang_93;
    var _platform, _platformProviders, PlatformRef, PlatformRef_, ApplicationRef, ApplicationRef_;
    /**
     * Construct providers specific to an individual root component.
     */
    function _componentProviders(appComponentType) {
        return [
            di_22.provide(application_tokens_2.APP_COMPONENT, { useValue: appComponentType }),
            di_22.provide(application_tokens_2.APP_COMPONENT_REF_PROMISE, {
                useFactory: function (dynamicComponentLoader, appRef, injector) {
                    // Save the ComponentRef for disposal later.
                    var ref;
                    // TODO(rado): investigate whether to support providers on root component.
                    return dynamicComponentLoader.loadAsRoot(appComponentType, null, injector, function () { appRef._unloadComponent(ref); })
                        .then(function (componentRef) {
                        ref = componentRef;
                        var testability = injector.getOptional(testability_1.Testability);
                        if (lang_92.isPresent(testability)) {
                            injector.get(testability_1.TestabilityRegistry)
                                .registerApplication(componentRef.location.nativeElement, testability);
                        }
                        return componentRef;
                    });
                },
                deps: [dynamic_component_loader_1.DynamicComponentLoader, ApplicationRef, di_22.Injector]
            }),
            di_22.provide(appComponentType, {
                useFactory: function (p) { return p.then(function (ref) { return ref.instance; }); },
                deps: [application_tokens_2.APP_COMPONENT_REF_PROMISE]
            }),
        ];
    }
    /**
     * Create an Angular zone.
     */
    function createNgZone() {
        return new ng_zone_1.NgZone({ enableLongStackTrace: lang_92.assertionsEnabled() });
    }
    exports_164("createNgZone", createNgZone);
    /**
     * Initialize the Angular 'platform' on the page.
     *
     * See {@link PlatformRef} for details on the Angular platform.
     *
     * It is also possible to specify providers to be made in the new platform. These providers
     * will be shared between all applications on the page. For example, an abstraction for
     * the browser cookie jar should be bound at the platform level, because there is only one
     * cookie jar regardless of how many applications on the page will be accessing it.
     *
     * The platform function can be called multiple times as long as the same list of providers
     * is passed into each call. If the platform function is called with a different set of
     * provides, Angular will throw an exception.
     */
    function platform(providers) {
        lang_93.lockMode();
        if (lang_92.isPresent(_platform)) {
            if (collection_35.ListWrapper.equals(_platformProviders, providers)) {
                return _platform;
            }
            else {
                throw new exceptions_26.BaseException("platform cannot be initialized with different sets of providers.");
            }
        }
        else {
            return _createPlatform(providers);
        }
    }
    exports_164("platform", platform);
    /**
     * Dispose the existing platform.
     */
    function disposePlatform() {
        if (lang_92.isPresent(_platform)) {
            _platform.dispose();
            _platform = null;
        }
    }
    exports_164("disposePlatform", disposePlatform);
    function _createPlatform(providers) {
        _platformProviders = providers;
        var injector = di_22.Injector.resolveAndCreate(providers);
        _platform = new PlatformRef_(injector, function () {
            _platform = null;
            _platformProviders = null;
        });
        _runPlatformInitializers(injector);
        return _platform;
    }
    function _runPlatformInitializers(injector) {
        var inits = injector.getOptional(application_tokens_2.PLATFORM_INITIALIZER);
        if (lang_92.isPresent(inits))
            inits.forEach(function (init) { return init(); });
    }
    function _runAppInitializers(injector) {
        var inits = injector.getOptional(application_tokens_2.APP_INITIALIZER);
        var promises = [];
        if (lang_92.isPresent(inits)) {
            inits.forEach(function (init) {
                var retVal = init();
                if (async_14.PromiseWrapper.isPromise(retVal)) {
                    promises.push(retVal);
                }
            });
        }
        if (promises.length > 0) {
            return async_14.PromiseWrapper.all(promises);
        }
        else {
            return null;
        }
    }
    return {
        setters:[
            function (ng_zone_1_1) {
                ng_zone_1 = ng_zone_1_1;
            },
            function (lang_92_1) {
                lang_92 = lang_92_1;
                lang_93 = lang_92_1;
            },
            function (di_22_1) {
                di_22 = di_22_1;
            },
            function (application_tokens_2_1) {
                application_tokens_2 = application_tokens_2_1;
            },
            function (async_14_1) {
                async_14 = async_14_1;
            },
            function (collection_35_1) {
                collection_35 = collection_35_1;
            },
            function (testability_1_1) {
                testability_1 = testability_1_1;
            },
            function (dynamic_component_loader_1_1) {
                dynamic_component_loader_1 = dynamic_component_loader_1_1;
            },
            function (exceptions_26_1) {
                exceptions_26 = exceptions_26_1;
            },
            function (console_1_1) {
                console_1 = console_1_1;
            },
            function (profile_1_1) {
                profile_1 = profile_1_1;
            }],
        execute: function() {
            /**
             * The Angular platform is the entry point for Angular on a web page. Each page
             * has exactly one platform, and services (such as reflection) which are common
             * to every Angular application running on the page are bound in its scope.
             *
             * A page's platform is initialized implicitly when {@link bootstrap}() is called, or
             * explicitly by calling {@link platform}().
             */
            PlatformRef = (function () {
                function PlatformRef() {
                }
                Object.defineProperty(PlatformRef.prototype, "injector", {
                    /**
                     * Retrieve the platform {@link Injector}, which is the parent injector for
                     * every Angular application on the page and provides singleton providers.
                     */
                    get: function () { throw exceptions_26.unimplemented(); },
                    enumerable: true,
                    configurable: true
                });
                ;
                return PlatformRef;
            }());
            exports_164("PlatformRef", PlatformRef);
            PlatformRef_ = (function (_super) {
                __extends(PlatformRef_, _super);
                function PlatformRef_(_injector, _dispose) {
                    _super.call(this);
                    this._injector = _injector;
                    this._dispose = _dispose;
                    /** @internal */
                    this._applications = [];
                    /** @internal */
                    this._disposeListeners = [];
                }
                PlatformRef_.prototype.registerDisposeListener = function (dispose) { this._disposeListeners.push(dispose); };
                Object.defineProperty(PlatformRef_.prototype, "injector", {
                    get: function () { return this._injector; },
                    enumerable: true,
                    configurable: true
                });
                PlatformRef_.prototype.application = function (providers) {
                    var app = this._initApp(createNgZone(), providers);
                    if (async_14.PromiseWrapper.isPromise(app)) {
                        throw new exceptions_26.BaseException("Cannot use asyncronous app initializers with application. Use asyncApplication instead.");
                    }
                    return app;
                };
                PlatformRef_.prototype.asyncApplication = function (bindingFn, additionalProviders) {
                    var _this = this;
                    var zone = createNgZone();
                    var completer = async_14.PromiseWrapper.completer();
                    if (bindingFn === null) {
                        completer.resolve(this._initApp(zone, additionalProviders));
                    }
                    else {
                        zone.run(function () {
                            async_14.PromiseWrapper.then(bindingFn(zone), function (providers) {
                                if (lang_92.isPresent(additionalProviders)) {
                                    providers = collection_35.ListWrapper.concat(providers, additionalProviders);
                                }
                                var promise = _this._initApp(zone, providers);
                                completer.resolve(promise);
                            });
                        });
                    }
                    return completer.promise;
                };
                PlatformRef_.prototype._initApp = function (zone, providers) {
                    var _this = this;
                    var injector;
                    var app;
                    zone.run(function () {
                        providers = collection_35.ListWrapper.concat(providers, [
                            di_22.provide(ng_zone_1.NgZone, { useValue: zone }),
                            di_22.provide(ApplicationRef, { useFactory: function () { return app; }, deps: [] })
                        ]);
                        var exceptionHandler;
                        try {
                            injector = _this.injector.resolveAndCreateChild(providers);
                            exceptionHandler = injector.get(exceptions_26.ExceptionHandler);
                            async_14.ObservableWrapper.subscribe(zone.onError, function (error) {
                                exceptionHandler.call(error.error, error.stackTrace);
                            });
                        }
                        catch (e) {
                            if (lang_92.isPresent(exceptionHandler)) {
                                exceptionHandler.call(e, e.stack);
                            }
                            else {
                                lang_92.print(e.toString());
                            }
                        }
                    });
                    app = new ApplicationRef_(this, zone, injector);
                    this._applications.push(app);
                    var promise = _runAppInitializers(injector);
                    if (promise !== null) {
                        return async_14.PromiseWrapper.then(promise, function (_) { return app; });
                    }
                    else {
                        return app;
                    }
                };
                PlatformRef_.prototype.dispose = function () {
                    collection_35.ListWrapper.clone(this._applications).forEach(function (app) { return app.dispose(); });
                    this._disposeListeners.forEach(function (dispose) { return dispose(); });
                    this._dispose();
                };
                /** @internal */
                PlatformRef_.prototype._applicationDisposed = function (app) { collection_35.ListWrapper.remove(this._applications, app); };
                return PlatformRef_;
            }(PlatformRef));
            exports_164("PlatformRef_", PlatformRef_);
            /**
             * A reference to an Angular application running on a page.
             *
             * For more about Angular applications, see the documentation for {@link bootstrap}.
             */
            ApplicationRef = (function () {
                function ApplicationRef() {
                }
                Object.defineProperty(ApplicationRef.prototype, "injector", {
                    /**
                     * Retrieve the application {@link Injector}.
                     */
                    get: function () { return exceptions_26.unimplemented(); },
                    enumerable: true,
                    configurable: true
                });
                ;
                Object.defineProperty(ApplicationRef.prototype, "zone", {
                    /**
                     * Retrieve the application {@link NgZone}.
                     */
                    get: function () { return exceptions_26.unimplemented(); },
                    enumerable: true,
                    configurable: true
                });
                ;
                Object.defineProperty(ApplicationRef.prototype, "componentTypes", {
                    /**
                     * Get a list of component types registered to this application.
                     */
                    get: function () { return exceptions_26.unimplemented(); },
                    enumerable: true,
                    configurable: true
                });
                ;
                return ApplicationRef;
            }());
            exports_164("ApplicationRef", ApplicationRef);
            ApplicationRef_ = (function (_super) {
                __extends(ApplicationRef_, _super);
                function ApplicationRef_(_platform, _zone, _injector) {
                    var _this = this;
                    _super.call(this);
                    this._platform = _platform;
                    this._zone = _zone;
                    this._injector = _injector;
                    /** @internal */
                    this._bootstrapListeners = [];
                    /** @internal */
                    this._disposeListeners = [];
                    /** @internal */
                    this._rootComponents = [];
                    /** @internal */
                    this._rootComponentTypes = [];
                    /** @internal */
                    this._changeDetectorRefs = [];
                    /** @internal */
                    this._runningTick = false;
                    /** @internal */
                    this._enforceNoNewChanges = false;
                    if (lang_92.isPresent(this._zone)) {
                        async_14.ObservableWrapper.subscribe(this._zone.onMicrotaskEmpty, function (_) { _this._zone.run(function () { _this.tick(); }); });
                    }
                    this._enforceNoNewChanges = lang_92.assertionsEnabled();
                }
                ApplicationRef_.prototype.registerBootstrapListener = function (listener) {
                    this._bootstrapListeners.push(listener);
                };
                ApplicationRef_.prototype.registerDisposeListener = function (dispose) { this._disposeListeners.push(dispose); };
                ApplicationRef_.prototype.registerChangeDetector = function (changeDetector) {
                    this._changeDetectorRefs.push(changeDetector);
                };
                ApplicationRef_.prototype.unregisterChangeDetector = function (changeDetector) {
                    collection_35.ListWrapper.remove(this._changeDetectorRefs, changeDetector);
                };
                ApplicationRef_.prototype.bootstrap = function (componentType, providers) {
                    var _this = this;
                    var completer = async_14.PromiseWrapper.completer();
                    this._zone.run(function () {
                        var componentProviders = _componentProviders(componentType);
                        if (lang_92.isPresent(providers)) {
                            componentProviders.push(providers);
                        }
                        var exceptionHandler = _this._injector.get(exceptions_26.ExceptionHandler);
                        _this._rootComponentTypes.push(componentType);
                        try {
                            var injector = _this._injector.resolveAndCreateChild(componentProviders);
                            var compRefToken = injector.get(application_tokens_2.APP_COMPONENT_REF_PROMISE);
                            var tick = function (componentRef) {
                                _this._loadComponent(componentRef);
                                completer.resolve(componentRef);
                            };
                            var tickResult = async_14.PromiseWrapper.then(compRefToken, tick);
                            async_14.PromiseWrapper.then(tickResult, null, function (err, stackTrace) {
                                completer.reject(err, stackTrace);
                                exceptionHandler.call(err, stackTrace);
                            });
                        }
                        catch (e) {
                            exceptionHandler.call(e, e.stack);
                            completer.reject(e, e.stack);
                        }
                    });
                    return completer.promise.then(function (ref) {
                        var c = _this._injector.get(console_1.Console);
                        if (lang_92.assertionsEnabled()) {
                            c.log("Angular 2 is running in the development mode. Call enableProdMode() to enable the production mode.");
                        }
                        return ref;
                    });
                };
                /** @internal */
                ApplicationRef_.prototype._loadComponent = function (componentRef) {
                    var appChangeDetector = componentRef.location.internalElement.parentView.changeDetector;
                    this._changeDetectorRefs.push(appChangeDetector.ref);
                    this.tick();
                    this._rootComponents.push(componentRef);
                    this._bootstrapListeners.forEach(function (listener) { return listener(componentRef); });
                };
                /** @internal */
                ApplicationRef_.prototype._unloadComponent = function (componentRef) {
                    if (!collection_35.ListWrapper.contains(this._rootComponents, componentRef)) {
                        return;
                    }
                    this.unregisterChangeDetector(componentRef.location.internalElement.parentView.changeDetector.ref);
                    collection_35.ListWrapper.remove(this._rootComponents, componentRef);
                };
                Object.defineProperty(ApplicationRef_.prototype, "injector", {
                    get: function () { return this._injector; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ApplicationRef_.prototype, "zone", {
                    get: function () { return this._zone; },
                    enumerable: true,
                    configurable: true
                });
                ApplicationRef_.prototype.tick = function () {
                    if (this._runningTick) {
                        throw new exceptions_26.BaseException("ApplicationRef.tick is called recursively");
                    }
                    var s = ApplicationRef_._tickScope();
                    try {
                        this._runningTick = true;
                        this._changeDetectorRefs.forEach(function (detector) { return detector.detectChanges(); });
                        if (this._enforceNoNewChanges) {
                            this._changeDetectorRefs.forEach(function (detector) { return detector.checkNoChanges(); });
                        }
                    }
                    finally {
                        this._runningTick = false;
                        profile_1.wtfLeave(s);
                    }
                };
                ApplicationRef_.prototype.dispose = function () {
                    // TODO(alxhub): Dispose of the NgZone.
                    collection_35.ListWrapper.clone(this._rootComponents).forEach(function (ref) { return ref.dispose(); });
                    this._disposeListeners.forEach(function (dispose) { return dispose(); });
                    this._platform._applicationDisposed(this);
                };
                Object.defineProperty(ApplicationRef_.prototype, "componentTypes", {
                    get: function () { return this._rootComponentTypes; },
                    enumerable: true,
                    configurable: true
                });
                /** @internal */
                ApplicationRef_._tickScope = profile_1.wtfCreateScope('ApplicationRef#tick()');
                return ApplicationRef_;
            }(ApplicationRef));
            exports_164("ApplicationRef_", ApplicationRef_);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/zone/ng_zone_impl", [], function(exports_165, context_165) {
    "use strict";
    var __moduleName = context_165 && context_165.id;
    var NgZoneError, NgZoneImpl;
    return {
        setters:[],
        execute: function() {
            /**
             * Stores error information; delivered via [NgZone.onError] stream.
             */
            NgZoneError = (function () {
                function NgZoneError(error, stackTrace) {
                    this.error = error;
                    this.stackTrace = stackTrace;
                }
                return NgZoneError;
            }());
            exports_165("NgZoneError", NgZoneError);
            NgZoneImpl = (function () {
                function NgZoneImpl(_a) {
                    var _this = this;
                    var trace = _a.trace, onEnter = _a.onEnter, onLeave = _a.onLeave, setMicrotask = _a.setMicrotask, setMacrotask = _a.setMacrotask, onError = _a.onError;
                    this.onEnter = onEnter;
                    this.onLeave = onLeave;
                    this.setMicrotask = setMicrotask;
                    this.setMacrotask = setMacrotask;
                    this.onError = onError;
                    if (Zone) {
                        this.outer = this.inner = Zone.current;
                        if (Zone['wtfZoneSpec']) {
                            this.inner = this.inner.fork(Zone['wtfZoneSpec']);
                        }
                        if (trace) {
                            this.inner = this.inner.fork(Zone['longStackTraceZoneSpec']);
                        }
                        this.inner = this.inner.fork({
                            name: 'angular',
                            properties: { 'isAngularZone': true },
                            onInvokeTask: function (delegate, current, target, task, applyThis, applyArgs) {
                                try {
                                    _this.onEnter();
                                    return delegate.invokeTask(target, task, applyThis, applyArgs);
                                }
                                finally {
                                    _this.onLeave();
                                }
                            },
                            onInvoke: function (delegate, current, target, callback, applyThis, applyArgs, source) {
                                try {
                                    _this.onEnter();
                                    return delegate.invoke(target, callback, applyThis, applyArgs, source);
                                }
                                finally {
                                    _this.onLeave();
                                }
                            },
                            onHasTask: function (delegate, current, target, hasTaskState) {
                                delegate.hasTask(target, hasTaskState);
                                if (current == target) {
                                    // We are only interested in hasTask events which originate from our zone
                                    // (A child hasTask event is not interesting to us)
                                    if (hasTaskState.change == 'microTask') {
                                        _this.setMicrotask(hasTaskState.microTask);
                                    }
                                    else if (hasTaskState.change == 'macroTask') {
                                        _this.setMacrotask(hasTaskState.macroTask);
                                    }
                                }
                            },
                            onHandleError: function (delegate, current, target, error) {
                                delegate.handleError(target, error);
                                _this.onError(new NgZoneError(error, error.stack));
                                return false;
                            }
                        });
                    }
                    else {
                        throw new Error('Angular2 needs to be run with Zone.js polyfill.');
                    }
                }
                NgZoneImpl.isInAngularZone = function () { return Zone.current.get('isAngularZone') === true; };
                NgZoneImpl.prototype.runInner = function (fn) { return this.inner.runGuarded(fn); };
                ;
                NgZoneImpl.prototype.runOuter = function (fn) { return this.outer.run(fn); };
                ;
                return NgZoneImpl;
            }());
            exports_165("NgZoneImpl", NgZoneImpl);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/zone/ng_zone", ['angular2/src/facade/async', "test/node_modules/angular2/ts/src/core/zone/ng_zone_impl", "test/node_modules/angular2/ts/src/facade/exceptions"], function(exports_166, context_166) {
    "use strict";
    var __moduleName = context_166 && context_166.id;
    var async_15, ng_zone_impl_1, exceptions_27;
    var NgZone;
    return {
        setters:[
            function (async_15_1) {
                async_15 = async_15_1;
            },
            function (ng_zone_impl_1_1) {
                ng_zone_impl_1 = ng_zone_impl_1_1;
                exports_166({
                    "NgZoneError": ng_zone_impl_1_1["NgZoneError"]
                });
            },
            function (exceptions_27_1) {
                exceptions_27 = exceptions_27_1;
            }],
        execute: function() {
            /**
             * An injectable service for executing work inside or outside of the Angular zone.
             *
             * The most common use of this service is to optimize performance when starting a work consisting of
             * one or more asynchronous tasks that don't require UI updates or error handling to be handled by
             * Angular. Such tasks can be kicked off via {@link #runOutsideAngular} and if needed, these tasks
             * can reenter the Angular zone via {@link #run}.
             *
             * <!-- TODO: add/fix links to:
             *   - docs explaining zones and the use of zones in Angular and change-detection
             *   - link to runOutsideAngular/run (throughout this file!)
             *   -->
             *
             * ### Example ([live demo](http://plnkr.co/edit/lY9m8HLy7z06vDoUaSN2?p=preview))
             * ```
             * import {Component, View, NgZone} from 'angular2/core';
             * import {NgIf} from 'angular2/common';
             *
             * @Component({
             *   selector: 'ng-zone-demo'.
             *   template: `
             *     <h2>Demo: NgZone</h2>
             *
             *     <p>Progress: {{progress}}%</p>
             *     <p *ngIf="progress >= 100">Done processing {{label}} of Angular zone!</p>
             *
             *     <button (click)="processWithinAngularZone()">Process within Angular zone</button>
             *     <button (click)="processOutsideOfAngularZone()">Process outside of Angular zone</button>
             *   `,
             *   directives: [NgIf]
             * })
             * export class NgZoneDemo {
             *   progress: number = 0;
             *   label: string;
             *
             *   constructor(private _ngZone: NgZone) {}
             *
             *   // Loop inside the Angular zone
             *   // so the UI DOES refresh after each setTimeout cycle
             *   processWithinAngularZone() {
             *     this.label = 'inside';
             *     this.progress = 0;
             *     this._increaseProgress(() => console.log('Inside Done!'));
             *   }
             *
             *   // Loop outside of the Angular zone
             *   // so the UI DOES NOT refresh after each setTimeout cycle
             *   processOutsideOfAngularZone() {
             *     this.label = 'outside';
             *     this.progress = 0;
             *     this._ngZone.runOutsideAngular(() => {
             *       this._increaseProgress(() => {
             *       // reenter the Angular zone and display done
             *       this._ngZone.run(() => {console.log('Outside Done!') });
             *     }}));
             *   }
             *
             *
             *   _increaseProgress(doneCallback: () => void) {
             *     this.progress += 1;
             *     console.log(`Current progress: ${this.progress}%`);
             *
             *     if (this.progress < 100) {
             *       window.setTimeout(() => this._increaseProgress(doneCallback)), 10)
             *     } else {
             *       doneCallback();
             *     }
             *   }
             * }
             * ```
             */
            NgZone = (function () {
                /**
                 * @param {bool} enableLongStackTrace whether to enable long stack trace. They should only be
                 *               enabled in development mode as they significantly impact perf.
                 */
                function NgZone(_a) {
                    var _this = this;
                    var _b = _a.enableLongStackTrace, enableLongStackTrace = _b === void 0 ? false : _b;
                    this._hasPendingMicrotasks = false;
                    this._hasPendingMacrotasks = false;
                    /** @internal */
                    this._isStable = true;
                    /** @internal */
                    this._nesting = 0;
                    /** @internal */
                    this._onUnstable = new async_15.EventEmitter(false);
                    /** @internal */
                    this._onMicrotaskEmpty = new async_15.EventEmitter(false);
                    /** @internal */
                    this._onStable = new async_15.EventEmitter(false);
                    /** @internal */
                    this._onErrorEvents = new async_15.EventEmitter(false);
                    this._zoneImpl = new ng_zone_impl_1.NgZoneImpl({
                        trace: enableLongStackTrace,
                        onEnter: function () {
                            // console.log('ZONE.enter', this._nesting, this._isStable);
                            _this._nesting++;
                            if (_this._isStable) {
                                _this._isStable = false;
                                _this._onUnstable.emit(null);
                            }
                        },
                        onLeave: function () {
                            _this._nesting--;
                            // console.log('ZONE.leave', this._nesting, this._isStable);
                            _this._checkStable();
                        },
                        setMicrotask: function (hasMicrotasks) {
                            _this._hasPendingMicrotasks = hasMicrotasks;
                            _this._checkStable();
                        },
                        setMacrotask: function (hasMacrotasks) { _this._hasPendingMacrotasks = hasMacrotasks; },
                        onError: function (error) { return _this._onErrorEvents.emit(error); }
                    });
                }
                NgZone.isInAngularZone = function () { return ng_zone_impl_1.NgZoneImpl.isInAngularZone(); };
                NgZone.assertInAngularZone = function () {
                    if (!ng_zone_impl_1.NgZoneImpl.isInAngularZone()) {
                        throw new exceptions_27.BaseException('Expected to be in Angular Zone, but it is not!');
                    }
                };
                NgZone.assertNotInAngularZone = function () {
                    if (ng_zone_impl_1.NgZoneImpl.isInAngularZone()) {
                        throw new exceptions_27.BaseException('Expected to not be in Angular Zone, but it is!');
                    }
                };
                NgZone.prototype._checkStable = function () {
                    var _this = this;
                    if (this._nesting == 0) {
                        if (!this._hasPendingMicrotasks && !this._isStable) {
                            try {
                                // console.log('ZONE.microtaskEmpty');
                                this._nesting++;
                                this._onMicrotaskEmpty.emit(null);
                            }
                            finally {
                                this._nesting--;
                                if (!this._hasPendingMicrotasks) {
                                    try {
                                        // console.log('ZONE.stable', this._nesting, this._isStable);
                                        this.runOutsideAngular(function () { return _this._onStable.emit(null); });
                                    }
                                    finally {
                                        this._isStable = true;
                                    }
                                }
                            }
                        }
                    }
                };
                ;
                Object.defineProperty(NgZone.prototype, "onUnstable", {
                    /**
                     * Notifies when code enters Angular Zone. This gets fired first on VM Turn.
                     */
                    get: function () { return this._onUnstable; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NgZone.prototype, "onMicrotaskEmpty", {
                    /**
                     * Notifies when there is no more microtasks enqueue in the current VM Turn.
                     * This is a hint for Angular to do change detection, which may enqueue more microtasks.
                     * For this reason this event can fire multiple times per VM Turn.
                     */
                    get: function () { return this._onMicrotaskEmpty; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NgZone.prototype, "onStable", {
                    /**
                     * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which
                     * implies we are about to relinquish VM turn.
                     * This event gets called just once.
                     */
                    get: function () { return this._onStable; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NgZone.prototype, "onError", {
                    /**
                     * Notify that an error has been delivered.
                     */
                    get: function () { return this._onErrorEvents; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NgZone.prototype, "hasPendingMicrotasks", {
                    /**
                     * Whether there are any outstanding microtasks.
                     */
                    get: function () { return this._hasPendingMicrotasks; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NgZone.prototype, "hasPendingMacrotasks", {
                    /**
                     * Whether there are any outstanding microtasks.
                     */
                    get: function () { return this._hasPendingMacrotasks; },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Executes the `fn` function synchronously within the Angular zone and returns value returned by
                 * the function.
                 *
                 * Running functions via `run` allows you to reenter Angular zone from a task that was executed
                 * outside of the Angular zone (typically started via {@link #runOutsideAngular}).
                 *
                 * Any future tasks or microtasks scheduled from within this function will continue executing from
                 * within the Angular zone.
                 */
                NgZone.prototype.run = function (fn) { return this._zoneImpl.runInner(fn); };
                /**
                 * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by
                 * the function.
                 *
                 * Running functions via `runOutsideAngular` allows you to escape Angular's zone and do work that
                 * doesn't trigger Angular change-detection or is subject to Angular's error handling.
                 *
                 * Any future tasks or microtasks scheduled from within this function will continue executing from
                 * outside of the Angular zone.
                 *
                 * Use {@link #run} to reenter the Angular zone and do work that updates the application model.
                 */
                NgZone.prototype.runOutsideAngular = function (fn) { return this._zoneImpl.runOuter(fn); };
                return NgZone;
            }());
            exports_166("NgZone", NgZone);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/zone", ["test/node_modules/angular2/ts/src/core/zone/ng_zone"], function(exports_167, context_167) {
    "use strict";
    var __moduleName = context_167 && context_167.id;
    return {
        setters:[
            function (ng_zone_2_1) {
                exports_167({
                    "NgZone": ng_zone_2_1["NgZone"],
                    "NgZoneError": ng_zone_2_1["NgZoneError"]
                });
            }],
        execute: function() {
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/render/api", [], function(exports_168, context_168) {
    "use strict";
    var __moduleName = context_168 && context_168.id;
    var RenderComponentType, RenderDebugInfo, Renderer, RootRenderer;
    return {
        setters:[],
        execute: function() {
            RenderComponentType = (function () {
                function RenderComponentType(id, encapsulation, styles) {
                    this.id = id;
                    this.encapsulation = encapsulation;
                    this.styles = styles;
                }
                return RenderComponentType;
            }());
            exports_168("RenderComponentType", RenderComponentType);
            RenderDebugInfo = (function () {
                function RenderDebugInfo(injector, component, providerTokens, locals) {
                    this.injector = injector;
                    this.component = component;
                    this.providerTokens = providerTokens;
                    this.locals = locals;
                }
                return RenderDebugInfo;
            }());
            exports_168("RenderDebugInfo", RenderDebugInfo);
            Renderer = (function () {
                function Renderer() {
                }
                return Renderer;
            }());
            exports_168("Renderer", Renderer);
            /**
             * Injectable service that provides a low-level interface for modifying the UI.
             *
             * Use this service to bypass Angular's templating and make custom UI changes that can't be
             * expressed declaratively. For example if you need to set a property or an attribute whose name is
             * not statically known, use {@link #setElementProperty} or {@link #setElementAttribute}
             * respectively.
             *
             * If you are implementing a custom renderer, you must implement this interface.
             *
             * The default Renderer implementation is `DomRenderer`. Also available is `WebWorkerRenderer`.
             */
            RootRenderer = (function () {
                function RootRenderer() {
                }
                return RootRenderer;
            }());
            exports_168("RootRenderer", RootRenderer);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/render", ["test/node_modules/angular2/ts/src/core/render/api"], function(exports_169, context_169) {
    "use strict";
    var __moduleName = context_169 && context_169.id;
    return {
        setters:[
            function (api_1_1) {
                exports_169({
                    "RootRenderer": api_1_1["RootRenderer"],
                    "Renderer": api_1_1["Renderer"],
                    "RenderComponentType": api_1_1["RenderComponentType"]
                });
            }],
        execute: function() {
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/linker/interfaces", [], function(exports_170, context_170) {
    "use strict";
    var __moduleName = context_170 && context_170.id;
    var LifecycleHooks, LIFECYCLE_HOOKS_VALUES;
    return {
        setters:[],
        execute: function() {
            (function (LifecycleHooks) {
                LifecycleHooks[LifecycleHooks["OnInit"] = 0] = "OnInit";
                LifecycleHooks[LifecycleHooks["OnDestroy"] = 1] = "OnDestroy";
                LifecycleHooks[LifecycleHooks["DoCheck"] = 2] = "DoCheck";
                LifecycleHooks[LifecycleHooks["OnChanges"] = 3] = "OnChanges";
                LifecycleHooks[LifecycleHooks["AfterContentInit"] = 4] = "AfterContentInit";
                LifecycleHooks[LifecycleHooks["AfterContentChecked"] = 5] = "AfterContentChecked";
                LifecycleHooks[LifecycleHooks["AfterViewInit"] = 6] = "AfterViewInit";
                LifecycleHooks[LifecycleHooks["AfterViewChecked"] = 7] = "AfterViewChecked";
            })(LifecycleHooks || (LifecycleHooks = {}));
            exports_170("LifecycleHooks", LifecycleHooks);
            /**
             * @internal
             */
            exports_170("LIFECYCLE_HOOKS_VALUES", LIFECYCLE_HOOKS_VALUES = [
                LifecycleHooks.OnInit,
                LifecycleHooks.OnDestroy,
                LifecycleHooks.DoCheck,
                LifecycleHooks.OnChanges,
                LifecycleHooks.AfterContentInit,
                LifecycleHooks.AfterContentChecked,
                LifecycleHooks.AfterViewInit,
                LifecycleHooks.AfterViewChecked
            ]);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/linker/directive_resolver", ['angular2/src/core/di', 'angular2/src/facade/lang', 'angular2/src/facade/exceptions', 'angular2/src/facade/collection', 'angular2/src/core/metadata', 'angular2/src/core/reflection/reflection'], function(exports_171, context_171) {
    "use strict";
    var __moduleName = context_171 && context_171.id;
    var di_23, lang_94, exceptions_28, collection_36, metadata_7, reflection_4;
    var DirectiveResolver, CODEGEN_DIRECTIVE_RESOLVER;
    function _isDirectiveMetadata(type) {
        return type instanceof metadata_7.DirectiveMetadata;
    }
    return {
        setters:[
            function (di_23_1) {
                di_23 = di_23_1;
            },
            function (lang_94_1) {
                lang_94 = lang_94_1;
            },
            function (exceptions_28_1) {
                exceptions_28 = exceptions_28_1;
            },
            function (collection_36_1) {
                collection_36 = collection_36_1;
            },
            function (metadata_7_1) {
                metadata_7 = metadata_7_1;
            },
            function (reflection_4_1) {
                reflection_4 = reflection_4_1;
            }],
        execute: function() {
            /*
             * Resolve a `Type` for {@link DirectiveMetadata}.
             *
             * This interface can be overridden by the application developer to create custom behavior.
             *
             * See {@link Compiler}
             */
            DirectiveResolver = (function () {
                function DirectiveResolver() {
                }
                /**
                 * Return {@link DirectiveMetadata} for a given `Type`.
                 */
                DirectiveResolver.prototype.resolve = function (type) {
                    var typeMetadata = reflection_4.reflector.annotations(di_23.resolveForwardRef(type));
                    if (lang_94.isPresent(typeMetadata)) {
                        var metadata = typeMetadata.find(_isDirectiveMetadata);
                        if (lang_94.isPresent(metadata)) {
                            var propertyMetadata = reflection_4.reflector.propMetadata(type);
                            return this._mergeWithPropertyMetadata(metadata, propertyMetadata, type);
                        }
                    }
                    throw new exceptions_28.BaseException("No Directive annotation found on " + lang_94.stringify(type));
                };
                DirectiveResolver.prototype._mergeWithPropertyMetadata = function (dm, propertyMetadata, directiveType) {
                    var inputs = [];
                    var outputs = [];
                    var host = {};
                    var queries = {};
                    collection_36.StringMapWrapper.forEach(propertyMetadata, function (metadata, propName) {
                        metadata.forEach(function (a) {
                            if (a instanceof metadata_7.InputMetadata) {
                                if (lang_94.isPresent(a.bindingPropertyName)) {
                                    inputs.push(propName + ": " + a.bindingPropertyName);
                                }
                                else {
                                    inputs.push(propName);
                                }
                            }
                            if (a instanceof metadata_7.OutputMetadata) {
                                if (lang_94.isPresent(a.bindingPropertyName)) {
                                    outputs.push(propName + ": " + a.bindingPropertyName);
                                }
                                else {
                                    outputs.push(propName);
                                }
                            }
                            if (a instanceof metadata_7.HostBindingMetadata) {
                                if (lang_94.isPresent(a.hostPropertyName)) {
                                    host[("[" + a.hostPropertyName + "]")] = propName;
                                }
                                else {
                                    host[("[" + propName + "]")] = propName;
                                }
                            }
                            if (a instanceof metadata_7.HostListenerMetadata) {
                                var args = lang_94.isPresent(a.args) ? a.args.join(', ') : '';
                                host[("(" + a.eventName + ")")] = propName + "(" + args + ")";
                            }
                            if (a instanceof metadata_7.ContentChildrenMetadata) {
                                queries[propName] = a;
                            }
                            if (a instanceof metadata_7.ViewChildrenMetadata) {
                                queries[propName] = a;
                            }
                            if (a instanceof metadata_7.ContentChildMetadata) {
                                queries[propName] = a;
                            }
                            if (a instanceof metadata_7.ViewChildMetadata) {
                                queries[propName] = a;
                            }
                        });
                    });
                    return this._merge(dm, inputs, outputs, host, queries, directiveType);
                };
                DirectiveResolver.prototype._merge = function (dm, inputs, outputs, host, queries, directiveType) {
                    var mergedInputs = lang_94.isPresent(dm.inputs) ? collection_36.ListWrapper.concat(dm.inputs, inputs) : inputs;
                    var mergedOutputs;
                    if (lang_94.isPresent(dm.outputs)) {
                        dm.outputs.forEach(function (propName) {
                            if (collection_36.ListWrapper.contains(outputs, propName)) {
                                throw new exceptions_28.BaseException("Output event '" + propName + "' defined multiple times in '" + lang_94.stringify(directiveType) + "'");
                            }
                        });
                        mergedOutputs = collection_36.ListWrapper.concat(dm.outputs, outputs);
                    }
                    else {
                        mergedOutputs = outputs;
                    }
                    var mergedHost = lang_94.isPresent(dm.host) ? collection_36.StringMapWrapper.merge(dm.host, host) : host;
                    var mergedQueries = lang_94.isPresent(dm.queries) ? collection_36.StringMapWrapper.merge(dm.queries, queries) : queries;
                    if (dm instanceof metadata_7.ComponentMetadata) {
                        return new metadata_7.ComponentMetadata({
                            selector: dm.selector,
                            inputs: mergedInputs,
                            outputs: mergedOutputs,
                            host: mergedHost,
                            exportAs: dm.exportAs,
                            moduleId: dm.moduleId,
                            queries: mergedQueries,
                            changeDetection: dm.changeDetection,
                            providers: dm.providers,
                            viewProviders: dm.viewProviders
                        });
                    }
                    else {
                        return new metadata_7.DirectiveMetadata({
                            selector: dm.selector,
                            inputs: mergedInputs,
                            outputs: mergedOutputs,
                            host: mergedHost,
                            exportAs: dm.exportAs,
                            queries: mergedQueries,
                            providers: dm.providers
                        });
                    }
                };
                DirectiveResolver = __decorate([
                    di_23.Injectable(), 
                    __metadata('design:paramtypes', [])
                ], DirectiveResolver);
                return DirectiveResolver;
            }());
            exports_171("DirectiveResolver", DirectiveResolver);
            exports_171("CODEGEN_DIRECTIVE_RESOLVER", CODEGEN_DIRECTIVE_RESOLVER = new DirectiveResolver());
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/linker/view_resolver", ['angular2/src/core/di', "test/node_modules/angular2/ts/src/core/metadata/view", "test/node_modules/angular2/ts/src/core/metadata/directives", 'angular2/src/facade/lang', 'angular2/src/facade/exceptions', 'angular2/src/facade/collection', 'angular2/src/core/reflection/reflection'], function(exports_172, context_172) {
    "use strict";
    var __moduleName = context_172 && context_172.id;
    var di_24, view_10, directives_6, lang_95, exceptions_29, collection_37, reflection_5;
    var ViewResolver;
    return {
        setters:[
            function (di_24_1) {
                di_24 = di_24_1;
            },
            function (view_10_1) {
                view_10 = view_10_1;
            },
            function (directives_6_1) {
                directives_6 = directives_6_1;
            },
            function (lang_95_1) {
                lang_95 = lang_95_1;
            },
            function (exceptions_29_1) {
                exceptions_29 = exceptions_29_1;
            },
            function (collection_37_1) {
                collection_37 = collection_37_1;
            },
            function (reflection_5_1) {
                reflection_5 = reflection_5_1;
            }],
        execute: function() {
            /**
             * Resolves types to {@link ViewMetadata}.
             */
            ViewResolver = (function () {
                function ViewResolver() {
                    /** @internal */
                    this._cache = new collection_37.Map();
                }
                ViewResolver.prototype.resolve = function (component) {
                    var view = this._cache.get(component);
                    if (lang_95.isBlank(view)) {
                        view = this._resolve(component);
                        this._cache.set(component, view);
                    }
                    return view;
                };
                /** @internal */
                ViewResolver.prototype._resolve = function (component) {
                    var compMeta;
                    var viewMeta;
                    reflection_5.reflector.annotations(component).forEach(function (m) {
                        if (m instanceof view_10.ViewMetadata) {
                            viewMeta = m;
                        }
                        if (m instanceof directives_6.ComponentMetadata) {
                            compMeta = m;
                        }
                    });
                    if (lang_95.isPresent(compMeta)) {
                        if (lang_95.isBlank(compMeta.template) && lang_95.isBlank(compMeta.templateUrl) && lang_95.isBlank(viewMeta)) {
                            throw new exceptions_29.BaseException("Component '" + lang_95.stringify(component) + "' must have either 'template' or 'templateUrl' set.");
                        }
                        else if (lang_95.isPresent(compMeta.template) && lang_95.isPresent(viewMeta)) {
                            this._throwMixingViewAndComponent("template", component);
                        }
                        else if (lang_95.isPresent(compMeta.templateUrl) && lang_95.isPresent(viewMeta)) {
                            this._throwMixingViewAndComponent("templateUrl", component);
                        }
                        else if (lang_95.isPresent(compMeta.directives) && lang_95.isPresent(viewMeta)) {
                            this._throwMixingViewAndComponent("directives", component);
                        }
                        else if (lang_95.isPresent(compMeta.pipes) && lang_95.isPresent(viewMeta)) {
                            this._throwMixingViewAndComponent("pipes", component);
                        }
                        else if (lang_95.isPresent(compMeta.encapsulation) && lang_95.isPresent(viewMeta)) {
                            this._throwMixingViewAndComponent("encapsulation", component);
                        }
                        else if (lang_95.isPresent(compMeta.styles) && lang_95.isPresent(viewMeta)) {
                            this._throwMixingViewAndComponent("styles", component);
                        }
                        else if (lang_95.isPresent(compMeta.styleUrls) && lang_95.isPresent(viewMeta)) {
                            this._throwMixingViewAndComponent("styleUrls", component);
                        }
                        else if (lang_95.isPresent(viewMeta)) {
                            return viewMeta;
                        }
                        else {
                            return new view_10.ViewMetadata({
                                templateUrl: compMeta.templateUrl,
                                template: compMeta.template,
                                directives: compMeta.directives,
                                pipes: compMeta.pipes,
                                encapsulation: compMeta.encapsulation,
                                styles: compMeta.styles,
                                styleUrls: compMeta.styleUrls
                            });
                        }
                    }
                    else {
                        if (lang_95.isBlank(viewMeta)) {
                            throw new exceptions_29.BaseException("Could not compile '" + lang_95.stringify(component) + "' because it is not a component.");
                        }
                        else {
                            return viewMeta;
                        }
                    }
                    return null;
                };
                /** @internal */
                ViewResolver.prototype._throwMixingViewAndComponent = function (propertyName, component) {
                    throw new exceptions_29.BaseException("Component '" + lang_95.stringify(component) + "' cannot have both '" + propertyName + "' and '@View' set at the same time\"");
                };
                ViewResolver = __decorate([
                    di_24.Injectable(), 
                    __metadata('design:paramtypes', [])
                ], ViewResolver);
                return ViewResolver;
            }());
            exports_172("ViewResolver", ViewResolver);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/linker/compiler", ['angular2/src/core/di', 'angular2/src/facade/lang', 'angular2/src/facade/exceptions', 'angular2/src/facade/async', 'angular2/src/core/reflection/reflection', 'angular2/src/core/linker/view', 'angular2/src/core/linker/view_ref'], function(exports_173, context_173) {
    "use strict";
    var __moduleName = context_173 && context_173.id;
    var di_25, lang_96, exceptions_30, async_16, reflection_6, view_11, view_ref_2;
    var Compiler, Compiler_;
    function isHostViewFactory(type) {
        return type instanceof view_11.HostViewFactory;
    }
    return {
        setters:[
            function (di_25_1) {
                di_25 = di_25_1;
            },
            function (lang_96_1) {
                lang_96 = lang_96_1;
            },
            function (exceptions_30_1) {
                exceptions_30 = exceptions_30_1;
            },
            function (async_16_1) {
                async_16 = async_16_1;
            },
            function (reflection_6_1) {
                reflection_6 = reflection_6_1;
            },
            function (view_11_1) {
                view_11 = view_11_1;
            },
            function (view_ref_2_1) {
                view_ref_2 = view_ref_2_1;
            }],
        execute: function() {
            /**
             * Low-level service for compiling {@link Component}s into {@link ProtoViewRef ProtoViews}s, which
             * can later be used to create and render a Component instance.
             *
             * Most applications should instead use higher-level {@link DynamicComponentLoader} service, which
             * both compiles and instantiates a Component.
             */
            Compiler = (function () {
                function Compiler() {
                }
                return Compiler;
            }());
            exports_173("Compiler", Compiler);
            Compiler_ = (function (_super) {
                __extends(Compiler_, _super);
                function Compiler_() {
                    _super.apply(this, arguments);
                }
                Compiler_.prototype.compileInHost = function (componentType) {
                    var metadatas = reflection_6.reflector.annotations(componentType);
                    var hostViewFactory = metadatas.find(isHostViewFactory);
                    if (lang_96.isBlank(hostViewFactory)) {
                        throw new exceptions_30.BaseException("No precompiled component " + lang_96.stringify(componentType) + " found");
                    }
                    return async_16.PromiseWrapper.resolve(new view_ref_2.HostViewFactoryRef_(hostViewFactory));
                };
                Compiler_.prototype.clearCache = function () { };
                Compiler_ = __decorate([
                    di_25.Injectable(), 
                    __metadata('design:paramtypes', [])
                ], Compiler_);
                return Compiler_;
            }(Compiler));
            exports_173("Compiler_", Compiler_);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/linker/view_type", [], function(exports_174, context_174) {
    "use strict";
    var __moduleName = context_174 && context_174.id;
    var ViewType;
    return {
        setters:[],
        execute: function() {
            (function (ViewType) {
                // A view that contains the host element with bound component directive.
                // Contains a COMPONENT view
                ViewType[ViewType["HOST"] = 0] = "HOST";
                // The view of the component
                // Can contain 0 to n EMBEDDED views
                ViewType[ViewType["COMPONENT"] = 1] = "COMPONENT";
                // A view that is embedded into another View via a <template> element
                // inside of a COMPONENT view
                ViewType[ViewType["EMBEDDED"] = 2] = "EMBEDDED";
            })(ViewType || (ViewType = {}));
            exports_174("ViewType", ViewType);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/linker/element_ref", ['angular2/src/facade/exceptions'], function(exports_175, context_175) {
    "use strict";
    var __moduleName = context_175 && context_175.id;
    var exceptions_31;
    var ElementRef, ElementRef_;
    return {
        setters:[
            function (exceptions_31_1) {
                exceptions_31 = exceptions_31_1;
            }],
        execute: function() {
            /**
             * Represents a location in a View that has an injection, change-detection and render context
             * associated with it.
             *
             * An `ElementRef` is created for each element in the Template that contains a Directive, Component
             * or data-binding.
             *
             * An `ElementRef` is backed by a render-specific element. In the browser, this is usually a DOM
             * element.
             */
            ElementRef = (function () {
                function ElementRef() {
                }
                Object.defineProperty(ElementRef.prototype, "nativeElement", {
                    /**
                     * The underlying native element or `null` if direct access to native elements is not supported
                     * (e.g. when the application runs in a web worker).
                     *
                     * <div class="callout is-critical">
                     *   <header>Use with caution</header>
                     *   <p>
                     *    Use this API as the last resort when direct access to DOM is needed. Use templating and
                     *    data-binding provided by Angular instead. Alternatively you take a look at {@link Renderer}
                     *    which provides API that can safely be used even when direct access to native elements is not
                     *    supported.
                     *   </p>
                     *   <p>
                     *    Relying on direct DOM access creates tight coupling between your application and rendering
                     *    layers which will make it impossible to separate the two and deploy your application into a
                     *    web worker.
                     *   </p>
                     * </div>
                     */
                    get: function () { return exceptions_31.unimplemented(); },
                    enumerable: true,
                    configurable: true
                });
                return ElementRef;
            }());
            exports_175("ElementRef", ElementRef);
            ElementRef_ = (function () {
                function ElementRef_(_appElement) {
                    this._appElement = _appElement;
                }
                Object.defineProperty(ElementRef_.prototype, "internalElement", {
                    get: function () { return this._appElement; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ElementRef_.prototype, "nativeElement", {
                    get: function () { return this._appElement.nativeElement; },
                    enumerable: true,
                    configurable: true
                });
                return ElementRef_;
            }());
            exports_175("ElementRef_", ElementRef_);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/linker/template_ref", [], function(exports_176, context_176) {
    "use strict";
    var __moduleName = context_176 && context_176.id;
    var TemplateRef, TemplateRef_;
    return {
        setters:[],
        execute: function() {
            /**
             * Represents an Embedded Template that can be used to instantiate Embedded Views.
             *
             * You can access a `TemplateRef`, in two ways. Via a directive placed on a `<template>` element (or
             * directive prefixed with `*`) and have the `TemplateRef` for this Embedded View injected into the
             * constructor of the directive using the `TemplateRef` Token. Alternatively you can query for the
             * `TemplateRef` from a Component or a Directive via {@link Query}.
             *
             * To instantiate Embedded Views based on a Template, use
             * {@link ViewContainerRef#createEmbeddedView}, which will create the View and attach it to the
             * View Container.
             */
            TemplateRef = (function () {
                function TemplateRef() {
                }
                Object.defineProperty(TemplateRef.prototype, "elementRef", {
                    /**
                     * The location in the View where the Embedded View logically belongs to.
                     *
                     * The data-binding and injection contexts of Embedded Views created from this `TemplateRef`
                     * inherit from the contexts of this location.
                     *
                     * Typically new Embedded Views are attached to the View Container of this location, but in
                     * advanced use-cases, the View can be attached to a different container while keeping the
                     * data-binding and injection context from the original location.
                     *
                     */
                    // TODO(i): rename to anchor or location
                    get: function () { return null; },
                    enumerable: true,
                    configurable: true
                });
                return TemplateRef;
            }());
            exports_176("TemplateRef", TemplateRef);
            TemplateRef_ = (function (_super) {
                __extends(TemplateRef_, _super);
                function TemplateRef_(_elementRef) {
                    _super.call(this);
                    this._elementRef = _elementRef;
                }
                Object.defineProperty(TemplateRef_.prototype, "elementRef", {
                    get: function () { return this._elementRef; },
                    enumerable: true,
                    configurable: true
                });
                return TemplateRef_;
            }(TemplateRef));
            exports_176("TemplateRef_", TemplateRef_);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/linker/view_ref", ['angular2/src/facade/exceptions'], function(exports_177, context_177) {
    "use strict";
    var __moduleName = context_177 && context_177.id;
    var exceptions_32;
    var ViewRef, HostViewRef, EmbeddedViewRef, ViewRef_, HostViewFactoryRef, HostViewFactoryRef_;
    return {
        setters:[
            function (exceptions_32_1) {
                exceptions_32 = exceptions_32_1;
            }],
        execute: function() {
            ViewRef = (function () {
                function ViewRef() {
                }
                Object.defineProperty(ViewRef.prototype, "changeDetectorRef", {
                    /**
                     * @internal
                     */
                    get: function () { return exceptions_32.unimplemented(); },
                    enumerable: true,
                    configurable: true
                });
                ;
                Object.defineProperty(ViewRef.prototype, "destroyed", {
                    get: function () { return exceptions_32.unimplemented(); },
                    enumerable: true,
                    configurable: true
                });
                return ViewRef;
            }());
            exports_177("ViewRef", ViewRef);
            /**
             * Represents a View containing a single Element that is the Host Element of a {@link Component}
             * instance.
             *
             * A Host View is created for every dynamically created Component that was compiled on its own (as
             * opposed to as a part of another Component's Template) via {@link Compiler#compileInHost} or one
             * of the higher-level APIs: {@link AppViewManager#createRootHostView},
             * {@link AppViewManager#createHostViewInContainer}, {@link ViewContainerRef#createHostView}.
             */
            HostViewRef = (function (_super) {
                __extends(HostViewRef, _super);
                function HostViewRef() {
                    _super.apply(this, arguments);
                }
                Object.defineProperty(HostViewRef.prototype, "rootNodes", {
                    get: function () { return exceptions_32.unimplemented(); },
                    enumerable: true,
                    configurable: true
                });
                ;
                return HostViewRef;
            }(ViewRef));
            exports_177("HostViewRef", HostViewRef);
            /**
             * Represents an Angular View.
             *
             * <!-- TODO: move the next two paragraphs to the dev guide -->
             * A View is a fundamental building block of the application UI. It is the smallest grouping of
             * Elements which are created and destroyed together.
             *
             * Properties of elements in a View can change, but the structure (number and order) of elements in
             * a View cannot. Changing the structure of Elements can only be done by inserting, moving or
             * removing nested Views via a {@link ViewContainerRef}. Each View can contain many View Containers.
             * <!-- /TODO -->
             *
             * ### Example
             *
             * Given this template...
             *
             * ```
             * Count: {{items.length}}
             * <ul>
             *   <li *ngFor="var item of items">{{item}}</li>
             * </ul>
             * ```
             *
             * ... we have two {@link ProtoViewRef}s:
             *
             * Outer {@link ProtoViewRef}:
             * ```
             * Count: {{items.length}}
             * <ul>
             *   <template ngFor var-item [ngForOf]="items"></template>
             * </ul>
             * ```
             *
             * Inner {@link ProtoViewRef}:
             * ```
             *   <li>{{item}}</li>
             * ```
             *
             * Notice that the original template is broken down into two separate {@link ProtoViewRef}s.
             *
             * The outer/inner {@link ProtoViewRef}s are then assembled into views like so:
             *
             * ```
             * <!-- ViewRef: outer-0 -->
             * Count: 2
             * <ul>
             *   <template view-container-ref></template>
             *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->
             *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->
             * </ul>
             * <!-- /ViewRef: outer-0 -->
             * ```
             */
            EmbeddedViewRef = (function (_super) {
                __extends(EmbeddedViewRef, _super);
                function EmbeddedViewRef() {
                    _super.apply(this, arguments);
                }
                Object.defineProperty(EmbeddedViewRef.prototype, "rootNodes", {
                    get: function () { return exceptions_32.unimplemented(); },
                    enumerable: true,
                    configurable: true
                });
                ;
                return EmbeddedViewRef;
            }(ViewRef));
            exports_177("EmbeddedViewRef", EmbeddedViewRef);
            ViewRef_ = (function () {
                function ViewRef_(_view) {
                    this._view = _view;
                    this._view = _view;
                }
                Object.defineProperty(ViewRef_.prototype, "internalView", {
                    get: function () { return this._view; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ViewRef_.prototype, "changeDetectorRef", {
                    /**
                     * Return `ChangeDetectorRef`
                     */
                    get: function () { return this._view.changeDetector.ref; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ViewRef_.prototype, "rootNodes", {
                    get: function () { return this._view.flatRootNodes; },
                    enumerable: true,
                    configurable: true
                });
                ViewRef_.prototype.setLocal = function (variableName, value) { this._view.setLocal(variableName, value); };
                ViewRef_.prototype.hasLocal = function (variableName) { return this._view.hasLocal(variableName); };
                Object.defineProperty(ViewRef_.prototype, "destroyed", {
                    get: function () { return this._view.destroyed; },
                    enumerable: true,
                    configurable: true
                });
                return ViewRef_;
            }());
            exports_177("ViewRef_", ViewRef_);
            HostViewFactoryRef = (function () {
                function HostViewFactoryRef() {
                }
                return HostViewFactoryRef;
            }());
            exports_177("HostViewFactoryRef", HostViewFactoryRef);
            HostViewFactoryRef_ = (function () {
                function HostViewFactoryRef_(_hostViewFactory) {
                    this._hostViewFactory = _hostViewFactory;
                }
                Object.defineProperty(HostViewFactoryRef_.prototype, "internalHostViewFactory", {
                    get: function () { return this._hostViewFactory; },
                    enumerable: true,
                    configurable: true
                });
                return HostViewFactoryRef_;
            }());
            exports_177("HostViewFactoryRef_", HostViewFactoryRef_);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/linker/view_container_ref", ['angular2/src/facade/collection', 'angular2/src/facade/exceptions', 'angular2/src/facade/lang'], function(exports_178, context_178) {
    "use strict";
    var __moduleName = context_178 && context_178.id;
    var collection_38, exceptions_33, lang_97;
    var ViewContainerRef, ViewContainerRef_;
    return {
        setters:[
            function (collection_38_1) {
                collection_38 = collection_38_1;
            },
            function (exceptions_33_1) {
                exceptions_33 = exceptions_33_1;
            },
            function (lang_97_1) {
                lang_97 = lang_97_1;
            }],
        execute: function() {
            /**
             * Represents a container where one or more Views can be attached.
             *
             * The container can contain two kinds of Views. Host Views, created by instantiating a
             * {@link Component} via {@link #createHostView}, and Embedded Views, created by instantiating an
             * {@link TemplateRef Embedded Template} via {@link #createEmbeddedView}.
             *
             * The location of the View Container within the containing View is specified by the Anchor
             * `element`. Each View Container can have only one Anchor Element and each Anchor Element can only
             * have a single View Container.
             *
             * Root elements of Views attached to this container become siblings of the Anchor Element in
             * the Rendered View.
             *
             * To access a `ViewContainerRef` of an Element, you can either place a {@link Directive} injected
             * with `ViewContainerRef` on the Element, or you obtain it via
             * {@link AppViewManager#getViewContainer}.
             *
             * <!-- TODO(i): we are also considering ElementRef#viewContainer api -->
             */
            ViewContainerRef = (function () {
                function ViewContainerRef() {
                }
                Object.defineProperty(ViewContainerRef.prototype, "element", {
                    /**
                     * Anchor element that specifies the location of this container in the containing View.
                     * <!-- TODO: rename to anchorElement -->
                     */
                    get: function () { return exceptions_33.unimplemented(); },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Destroys all Views in this container.
                 */
                ViewContainerRef.prototype.clear = function () {
                    for (var i = this.length - 1; i >= 0; i--) {
                        this.remove(i);
                    }
                };
                Object.defineProperty(ViewContainerRef.prototype, "length", {
                    /**
                     * Returns the number of Views currently attached to this container.
                     */
                    get: function () { return exceptions_33.unimplemented(); },
                    enumerable: true,
                    configurable: true
                });
                ;
                return ViewContainerRef;
            }());
            exports_178("ViewContainerRef", ViewContainerRef);
            ViewContainerRef_ = (function (_super) {
                __extends(ViewContainerRef_, _super);
                function ViewContainerRef_(_element) {
                    _super.call(this);
                    this._element = _element;
                }
                ViewContainerRef_.prototype.get = function (index) { return this._element.nestedViews[index].ref; };
                Object.defineProperty(ViewContainerRef_.prototype, "length", {
                    get: function () {
                        var views = this._element.nestedViews;
                        return lang_97.isPresent(views) ? views.length : 0;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ViewContainerRef_.prototype, "element", {
                    get: function () { return this._element.ref; },
                    enumerable: true,
                    configurable: true
                });
                // TODO(rado): profile and decide whether bounds checks should be added
                // to the methods below.
                ViewContainerRef_.prototype.createEmbeddedView = function (templateRef, index) {
                    if (index === void 0) { index = -1; }
                    if (index == -1)
                        index = this.length;
                    var vm = this._element.parentView.viewManager;
                    return vm.createEmbeddedViewInContainer(this._element.ref, index, templateRef);
                };
                ViewContainerRef_.prototype.createHostView = function (hostViewFactoryRef, index, dynamicallyCreatedProviders, projectableNodes) {
                    if (index === void 0) { index = -1; }
                    if (dynamicallyCreatedProviders === void 0) { dynamicallyCreatedProviders = null; }
                    if (projectableNodes === void 0) { projectableNodes = null; }
                    if (index == -1)
                        index = this.length;
                    var vm = this._element.parentView.viewManager;
                    return vm.createHostViewInContainer(this._element.ref, index, hostViewFactoryRef, dynamicallyCreatedProviders, projectableNodes);
                };
                // TODO(i): refactor insert+remove into move
                ViewContainerRef_.prototype.insert = function (viewRef, index) {
                    if (index === void 0) { index = -1; }
                    if (index == -1)
                        index = this.length;
                    var vm = this._element.parentView.viewManager;
                    return vm.attachViewInContainer(this._element.ref, index, viewRef);
                };
                ViewContainerRef_.prototype.indexOf = function (viewRef) {
                    return collection_38.ListWrapper.indexOf(this._element.nestedViews, viewRef.internalView);
                };
                // TODO(i): rename to destroy
                ViewContainerRef_.prototype.remove = function (index) {
                    if (index === void 0) { index = -1; }
                    if (index == -1)
                        index = this.length - 1;
                    var vm = this._element.parentView.viewManager;
                    return vm.destroyViewInContainer(this._element.ref, index);
                    // view is intentionally not returned to the client.
                };
                // TODO(i): refactor insert+remove into move
                ViewContainerRef_.prototype.detach = function (index) {
                    if (index === void 0) { index = -1; }
                    if (index == -1)
                        index = this.length - 1;
                    var vm = this._element.parentView.viewManager;
                    return vm.detachViewInContainer(this._element.ref, index);
                };
                return ViewContainerRef_;
            }(ViewContainerRef));
            exports_178("ViewContainerRef_", ViewContainerRef_);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/linker/query_list", ['angular2/src/facade/collection', 'angular2/src/facade/lang', 'angular2/src/facade/async'], function(exports_179, context_179) {
    "use strict";
    var __moduleName = context_179 && context_179.id;
    var collection_39, lang_98, async_17;
    var QueryList;
    return {
        setters:[
            function (collection_39_1) {
                collection_39 = collection_39_1;
            },
            function (lang_98_1) {
                lang_98 = lang_98_1;
            },
            function (async_17_1) {
                async_17 = async_17_1;
            }],
        execute: function() {
            /**
             * An unmodifiable list of items that Angular keeps up to date when the state
             * of the application changes.
             *
             * The type of object that {@link QueryMetadata} and {@link ViewQueryMetadata} provide.
             *
             * Implements an iterable interface, therefore it can be used in both ES6
             * javascript `for (var i of items)` loops as well as in Angular templates with
             * `*ngFor="#i of myList"`.
             *
             * Changes can be observed by subscribing to the changes `Observable`.
             *
             * NOTE: In the future this class will implement an `Observable` interface.
             *
             * ### Example ([live demo](http://plnkr.co/edit/RX8sJnQYl9FWuSCWme5z?p=preview))
             * ```typescript
             * @Component({...})
             * class Container {
             *   constructor(@Query(Item) items: QueryList<Item>) {
             *     items.changes.subscribe(_ => console.log(items.length));
             *   }
             * }
             * ```
             */
            QueryList = (function () {
                function QueryList() {
                    this._results = [];
                    this._emitter = new async_17.EventEmitter();
                }
                Object.defineProperty(QueryList.prototype, "changes", {
                    get: function () { return this._emitter; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(QueryList.prototype, "length", {
                    get: function () { return this._results.length; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(QueryList.prototype, "first", {
                    get: function () { return collection_39.ListWrapper.first(this._results); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(QueryList.prototype, "last", {
                    get: function () { return collection_39.ListWrapper.last(this._results); },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * returns a new array with the passed in function applied to each element.
                 */
                QueryList.prototype.map = function (fn) { return this._results.map(fn); };
                /**
                 * returns a filtered array.
                 */
                QueryList.prototype.filter = function (fn) { return this._results.filter(fn); };
                /**
                 * returns a reduced value.
                 */
                QueryList.prototype.reduce = function (fn, init) { return this._results.reduce(fn, init); };
                /**
                 * executes function for each element in a query.
                 */
                QueryList.prototype.forEach = function (fn) { this._results.forEach(fn); };
                /**
                 * converts QueryList into an array
                 */
                QueryList.prototype.toArray = function () { return collection_39.ListWrapper.clone(this._results); };
                QueryList.prototype[lang_98.getSymbolIterator()] = function () { return this._results[lang_98.getSymbolIterator()](); };
                QueryList.prototype.toString = function () { return this._results.toString(); };
                /**
                 * @internal
                 */
                QueryList.prototype.reset = function (res) { this._results = res; };
                /** @internal */
                QueryList.prototype.notifyOnChanges = function () { this._emitter.emit(this); };
                return QueryList;
            }());
            exports_179("QueryList", QueryList);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/pipes/pipe_provider", ['angular2/src/core/di/provider', 'angular2/src/core/di'], function(exports_180, context_180) {
    "use strict";
    var __moduleName = context_180 && context_180.id;
    var provider_3, di_26;
    var PipeProvider;
    return {
        setters:[
            function (provider_3_1) {
                provider_3 = provider_3_1;
            },
            function (di_26_1) {
                di_26 = di_26_1;
            }],
        execute: function() {
            PipeProvider = (function (_super) {
                __extends(PipeProvider, _super);
                function PipeProvider(name, pure, key, resolvedFactories, multiBinding) {
                    _super.call(this, key, resolvedFactories, multiBinding);
                    this.name = name;
                    this.pure = pure;
                }
                PipeProvider.createFromType = function (type, metadata) {
                    var provider = new di_26.Provider(type, { useClass: type });
                    var rb = provider_3.resolveProvider(provider);
                    return new PipeProvider(metadata.name, metadata.pure, rb.key, rb.resolvedFactories, rb.multiProvider);
                };
                return PipeProvider;
            }(provider_3.ResolvedProvider_));
            exports_180("PipeProvider", PipeProvider);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/linker/pipe_resolver", ['angular2/src/core/di', 'angular2/src/facade/lang', 'angular2/src/facade/exceptions', 'angular2/src/core/metadata', 'angular2/src/core/reflection/reflection'], function(exports_181, context_181) {
    "use strict";
    var __moduleName = context_181 && context_181.id;
    var di_27, lang_99, exceptions_34, metadata_8, reflection_7;
    var PipeResolver, CODEGEN_PIPE_RESOLVER;
    function _isPipeMetadata(type) {
        return type instanceof metadata_8.PipeMetadata;
    }
    return {
        setters:[
            function (di_27_1) {
                di_27 = di_27_1;
            },
            function (lang_99_1) {
                lang_99 = lang_99_1;
            },
            function (exceptions_34_1) {
                exceptions_34 = exceptions_34_1;
            },
            function (metadata_8_1) {
                metadata_8 = metadata_8_1;
            },
            function (reflection_7_1) {
                reflection_7 = reflection_7_1;
            }],
        execute: function() {
            /**
             * Resolve a `Type` for {@link PipeMetadata}.
             *
             * This interface can be overridden by the application developer to create custom behavior.
             *
             * See {@link Compiler}
             */
            PipeResolver = (function () {
                function PipeResolver() {
                }
                /**
                 * Return {@link PipeMetadata} for a given `Type`.
                 */
                PipeResolver.prototype.resolve = function (type) {
                    var metas = reflection_7.reflector.annotations(di_27.resolveForwardRef(type));
                    if (lang_99.isPresent(metas)) {
                        var annotation = metas.find(_isPipeMetadata);
                        if (lang_99.isPresent(annotation)) {
                            return annotation;
                        }
                    }
                    throw new exceptions_34.BaseException("No Pipe decorator found on " + lang_99.stringify(type));
                };
                PipeResolver = __decorate([
                    di_27.Injectable(), 
                    __metadata('design:paramtypes', [])
                ], PipeResolver);
                return PipeResolver;
            }());
            exports_181("PipeResolver", PipeResolver);
            exports_181("CODEGEN_PIPE_RESOLVER", CODEGEN_PIPE_RESOLVER = new PipeResolver());
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/linker/resolved_metadata_cache", ["test/node_modules/angular2/ts/src/core/di", 'angular2/src/facade/lang', "test/node_modules/angular2/ts/src/core/linker/element", "test/node_modules/angular2/ts/src/core/linker/directive_resolver", "test/node_modules/angular2/ts/src/core/pipes/pipe_provider", "test/node_modules/angular2/ts/src/core/linker/pipe_resolver"], function(exports_182, context_182) {
    "use strict";
    var __moduleName = context_182 && context_182.id;
    var di_28, lang_100, element_3, directive_resolver_2, pipe_provider_1, pipe_resolver_2;
    var ResolvedMetadataCache, CODEGEN_RESOLVED_METADATA_CACHE;
    return {
        setters:[
            function (di_28_1) {
                di_28 = di_28_1;
            },
            function (lang_100_1) {
                lang_100 = lang_100_1;
            },
            function (element_3_1) {
                element_3 = element_3_1;
            },
            function (directive_resolver_2_1) {
                directive_resolver_2 = directive_resolver_2_1;
            },
            function (pipe_provider_1_1) {
                pipe_provider_1 = pipe_provider_1_1;
            },
            function (pipe_resolver_2_1) {
                pipe_resolver_2 = pipe_resolver_2_1;
            }],
        execute: function() {
            ResolvedMetadataCache = (function () {
                function ResolvedMetadataCache(_directiveResolver, _pipeResolver) {
                    this._directiveResolver = _directiveResolver;
                    this._pipeResolver = _pipeResolver;
                    this._directiveCache = new Map();
                    this._pipeCache = new Map();
                }
                ResolvedMetadataCache.prototype.getResolvedDirectiveMetadata = function (type) {
                    var result = this._directiveCache.get(type);
                    if (lang_100.isBlank(result)) {
                        result = element_3.DirectiveProvider.createFromType(type, this._directiveResolver.resolve(type));
                        this._directiveCache.set(type, result);
                    }
                    return result;
                };
                ResolvedMetadataCache.prototype.getResolvedPipeMetadata = function (type) {
                    var result = this._pipeCache.get(type);
                    if (lang_100.isBlank(result)) {
                        result = pipe_provider_1.PipeProvider.createFromType(type, this._pipeResolver.resolve(type));
                        this._pipeCache.set(type, result);
                    }
                    return result;
                };
                ResolvedMetadataCache = __decorate([
                    di_28.Injectable(), 
                    __metadata('design:paramtypes', [directive_resolver_2.DirectiveResolver, pipe_resolver_2.PipeResolver])
                ], ResolvedMetadataCache);
                return ResolvedMetadataCache;
            }());
            exports_182("ResolvedMetadataCache", ResolvedMetadataCache);
            exports_182("CODEGEN_RESOLVED_METADATA_CACHE", CODEGEN_RESOLVED_METADATA_CACHE = new ResolvedMetadataCache(directive_resolver_2.CODEGEN_DIRECTIVE_RESOLVER, pipe_resolver_2.CODEGEN_PIPE_RESOLVER));
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/linker/element", ['angular2/src/facade/lang', 'angular2/src/facade/exceptions', 'angular2/src/facade/collection', 'angular2/src/core/di', 'angular2/src/core/di/provider', 'angular2/src/core/di/injector', "test/node_modules/angular2/ts/src/core/metadata/di", "test/node_modules/angular2/ts/src/core/linker/view_type", "test/node_modules/angular2/ts/src/core/linker/element_ref", "test/node_modules/angular2/ts/src/core/linker/view_container_ref", 'angular2/src/core/render/api', "test/node_modules/angular2/ts/src/core/linker/template_ref", "test/node_modules/angular2/ts/src/core/metadata/directives", 'angular2/src/core/change_detection/change_detection', "test/node_modules/angular2/ts/src/core/linker/query_list", 'angular2/src/core/reflection/reflection', 'angular2/src/core/pipes/pipe_provider'], function(exports_183, context_183) {
    "use strict";
    var __moduleName = context_183 && context_183.id;
    var lang_101, exceptions_35, collection_40, di_29, provider_4, injector_2, provider_5, di_30, view_type_3, element_ref_1, view_container_ref_1, element_ref_2, api_2, template_ref_1, directives_7, change_detection_9, query_list_1, reflection_8, pipe_provider_2, view_container_ref_2;
    var _staticKeys, StaticKeys, DirectiveDependency, DirectiveProvider, QueryMetadataWithSetter, AppProtoElement, _Context, InjectorWithHostBoundary, AppElement, _EmptyQueryStrategy, _emptyQueryStrategy, InlineQueryStrategy, DynamicQueryStrategy, ElementDirectiveInlineStrategy, ElementDirectiveDynamicStrategy, ProtoQueryRef, QueryRef, _ComponentViewChangeDetectorRef;
    function setProvidersVisibility(providers, visibility, result) {
        for (var i = 0; i < providers.length; i++) {
            result.set(providers[i].key.id, visibility);
        }
    }
    return {
        setters:[
            function (lang_101_1) {
                lang_101 = lang_101_1;
            },
            function (exceptions_35_1) {
                exceptions_35 = exceptions_35_1;
            },
            function (collection_40_1) {
                collection_40 = collection_40_1;
            },
            function (di_29_1) {
                di_29 = di_29_1;
            },
            function (provider_4_1) {
                provider_4 = provider_4_1;
                provider_5 = provider_4_1;
            },
            function (injector_2_1) {
                injector_2 = injector_2_1;
            },
            function (di_30_1) {
                di_30 = di_30_1;
            },
            function (view_type_3_1) {
                view_type_3 = view_type_3_1;
            },
            function (element_ref_1_1) {
                element_ref_1 = element_ref_1_1;
                element_ref_2 = element_ref_1_1;
            },
            function (view_container_ref_1_1) {
                view_container_ref_1 = view_container_ref_1_1;
                view_container_ref_2 = view_container_ref_1_1;
            },
            function (api_2_1) {
                api_2 = api_2_1;
            },
            function (template_ref_1_1) {
                template_ref_1 = template_ref_1_1;
            },
            function (directives_7_1) {
                directives_7 = directives_7_1;
            },
            function (change_detection_9_1) {
                change_detection_9 = change_detection_9_1;
            },
            function (query_list_1_1) {
                query_list_1 = query_list_1_1;
            },
            function (reflection_8_1) {
                reflection_8 = reflection_8_1;
            },
            function (pipe_provider_2_1) {
                pipe_provider_2 = pipe_provider_2_1;
            }],
        execute: function() {
            StaticKeys = (function () {
                function StaticKeys() {
                    this.templateRefId = di_29.Key.get(template_ref_1.TemplateRef).id;
                    this.viewContainerId = di_29.Key.get(view_container_ref_1.ViewContainerRef).id;
                    this.changeDetectorRefId = di_29.Key.get(change_detection_9.ChangeDetectorRef).id;
                    this.elementRefId = di_29.Key.get(element_ref_2.ElementRef).id;
                    this.rendererId = di_29.Key.get(api_2.Renderer).id;
                }
                StaticKeys.instance = function () {
                    if (lang_101.isBlank(_staticKeys))
                        _staticKeys = new StaticKeys();
                    return _staticKeys;
                };
                return StaticKeys;
            }());
            exports_183("StaticKeys", StaticKeys);
            DirectiveDependency = (function (_super) {
                __extends(DirectiveDependency, _super);
                function DirectiveDependency(key, optional, lowerBoundVisibility, upperBoundVisibility, properties, attributeName, queryDecorator) {
                    _super.call(this, key, optional, lowerBoundVisibility, upperBoundVisibility, properties);
                    this.attributeName = attributeName;
                    this.queryDecorator = queryDecorator;
                    this._verify();
                }
                /** @internal */
                DirectiveDependency.prototype._verify = function () {
                    var count = 0;
                    if (lang_101.isPresent(this.queryDecorator))
                        count++;
                    if (lang_101.isPresent(this.attributeName))
                        count++;
                    if (count > 1)
                        throw new exceptions_35.BaseException('A directive injectable can contain only one of the following @Attribute or @Query.');
                };
                DirectiveDependency.createFrom = function (d) {
                    return new DirectiveDependency(d.key, d.optional, d.lowerBoundVisibility, d.upperBoundVisibility, d.properties, DirectiveDependency._attributeName(d.properties), DirectiveDependency._query(d.properties));
                };
                /** @internal */
                DirectiveDependency._attributeName = function (properties) {
                    var p = properties.find(function (p) { return p instanceof di_30.AttributeMetadata; });
                    return lang_101.isPresent(p) ? p.attributeName : null;
                };
                /** @internal */
                DirectiveDependency._query = function (properties) {
                    return properties.find(function (p) { return p instanceof di_30.QueryMetadata; });
                };
                return DirectiveDependency;
            }(di_29.Dependency));
            exports_183("DirectiveDependency", DirectiveDependency);
            DirectiveProvider = (function (_super) {
                __extends(DirectiveProvider, _super);
                function DirectiveProvider(key, factory, deps, isComponent, providers, viewProviders, queries) {
                    _super.call(this, key, [new provider_5.ResolvedFactory(factory, deps)], false);
                    this.isComponent = isComponent;
                    this.providers = providers;
                    this.viewProviders = viewProviders;
                    this.queries = queries;
                }
                Object.defineProperty(DirectiveProvider.prototype, "displayName", {
                    get: function () { return this.key.displayName; },
                    enumerable: true,
                    configurable: true
                });
                DirectiveProvider.createFromType = function (type, meta) {
                    var provider = new di_29.Provider(type, { useClass: type });
                    if (lang_101.isBlank(meta)) {
                        meta = new directives_7.DirectiveMetadata();
                    }
                    var rb = provider_5.resolveProvider(provider);
                    var rf = rb.resolvedFactories[0];
                    var deps = rf.dependencies.map(DirectiveDependency.createFrom);
                    var isComponent = meta instanceof directives_7.ComponentMetadata;
                    var resolvedProviders = lang_101.isPresent(meta.providers) ? di_29.Injector.resolve(meta.providers) : null;
                    var resolvedViewProviders = meta instanceof directives_7.ComponentMetadata && lang_101.isPresent(meta.viewProviders) ?
                        di_29.Injector.resolve(meta.viewProviders) :
                        null;
                    var queries = [];
                    if (lang_101.isPresent(meta.queries)) {
                        collection_40.StringMapWrapper.forEach(meta.queries, function (meta, fieldName) {
                            var setter = reflection_8.reflector.setter(fieldName);
                            queries.push(new QueryMetadataWithSetter(setter, meta));
                        });
                    }
                    // queries passed into the constructor.
                    // TODO: remove this after constructor queries are no longer supported
                    deps.forEach(function (d) {
                        if (lang_101.isPresent(d.queryDecorator)) {
                            queries.push(new QueryMetadataWithSetter(null, d.queryDecorator));
                        }
                    });
                    return new DirectiveProvider(rb.key, rf.factory, deps, isComponent, resolvedProviders, resolvedViewProviders, queries);
                };
                return DirectiveProvider;
            }(provider_5.ResolvedProvider_));
            exports_183("DirectiveProvider", DirectiveProvider);
            QueryMetadataWithSetter = (function () {
                function QueryMetadataWithSetter(setter, metadata) {
                    this.setter = setter;
                    this.metadata = metadata;
                }
                return QueryMetadataWithSetter;
            }());
            exports_183("QueryMetadataWithSetter", QueryMetadataWithSetter);
            AppProtoElement = (function () {
                function AppProtoElement(firstProviderIsComponent, index, attributes, pwvs, protoQueryRefs, directiveVariableBindings) {
                    this.firstProviderIsComponent = firstProviderIsComponent;
                    this.index = index;
                    this.attributes = attributes;
                    this.protoQueryRefs = protoQueryRefs;
                    this.directiveVariableBindings = directiveVariableBindings;
                    var length = pwvs.length;
                    if (length > 0) {
                        this.protoInjector = new injector_2.ProtoInjector(pwvs);
                    }
                    else {
                        this.protoInjector = null;
                        this.protoQueryRefs = [];
                    }
                }
                AppProtoElement.create = function (metadataCache, index, attributes, directiveTypes, directiveVariableBindings) {
                    var componentDirProvider = null;
                    var mergedProvidersMap = new Map();
                    var providerVisibilityMap = new Map();
                    var providers = collection_40.ListWrapper.createGrowableSize(directiveTypes.length);
                    var protoQueryRefs = [];
                    for (var i = 0; i < directiveTypes.length; i++) {
                        var dirProvider = metadataCache.getResolvedDirectiveMetadata(directiveTypes[i]);
                        providers[i] = new injector_2.ProviderWithVisibility(dirProvider, dirProvider.isComponent ? injector_2.Visibility.PublicAndPrivate : injector_2.Visibility.Public);
                        if (dirProvider.isComponent) {
                            componentDirProvider = dirProvider;
                        }
                        else {
                            if (lang_101.isPresent(dirProvider.providers)) {
                                provider_4.mergeResolvedProviders(dirProvider.providers, mergedProvidersMap);
                                setProvidersVisibility(dirProvider.providers, injector_2.Visibility.Public, providerVisibilityMap);
                            }
                        }
                        if (lang_101.isPresent(dirProvider.viewProviders)) {
                            provider_4.mergeResolvedProviders(dirProvider.viewProviders, mergedProvidersMap);
                            setProvidersVisibility(dirProvider.viewProviders, injector_2.Visibility.Private, providerVisibilityMap);
                        }
                        for (var queryIdx = 0; queryIdx < dirProvider.queries.length; queryIdx++) {
                            var q = dirProvider.queries[queryIdx];
                            protoQueryRefs.push(new ProtoQueryRef(i, q.setter, q.metadata));
                        }
                    }
                    if (lang_101.isPresent(componentDirProvider) && lang_101.isPresent(componentDirProvider.providers)) {
                        // directive providers need to be prioritized over component providers
                        provider_4.mergeResolvedProviders(componentDirProvider.providers, mergedProvidersMap);
                        setProvidersVisibility(componentDirProvider.providers, injector_2.Visibility.Public, providerVisibilityMap);
                    }
                    mergedProvidersMap.forEach(function (provider, _) {
                        providers.push(new injector_2.ProviderWithVisibility(provider, providerVisibilityMap.get(provider.key.id)));
                    });
                    return new AppProtoElement(lang_101.isPresent(componentDirProvider), index, attributes, providers, protoQueryRefs, directiveVariableBindings);
                };
                AppProtoElement.prototype.getProviderAtIndex = function (index) { return this.protoInjector.getProviderAtIndex(index); };
                return AppProtoElement;
            }());
            exports_183("AppProtoElement", AppProtoElement);
            _Context = (function () {
                function _Context(element, componentElement, injector) {
                    this.element = element;
                    this.componentElement = componentElement;
                    this.injector = injector;
                }
                return _Context;
            }());
            InjectorWithHostBoundary = (function () {
                function InjectorWithHostBoundary(injector, hostInjectorBoundary) {
                    this.injector = injector;
                    this.hostInjectorBoundary = hostInjectorBoundary;
                }
                return InjectorWithHostBoundary;
            }());
            exports_183("InjectorWithHostBoundary", InjectorWithHostBoundary);
            AppElement = (function () {
                function AppElement(proto, parentView, parent, nativeElement, embeddedViewFactory) {
                    var _this = this;
                    this.proto = proto;
                    this.parentView = parentView;
                    this.parent = parent;
                    this.nativeElement = nativeElement;
                    this.embeddedViewFactory = embeddedViewFactory;
                    this.nestedViews = null;
                    this.componentView = null;
                    this.ref = new element_ref_1.ElementRef_(this);
                    var parentInjector = lang_101.isPresent(parent) ? parent._injector : parentView.parentInjector;
                    if (lang_101.isPresent(this.proto.protoInjector)) {
                        var isBoundary;
                        if (lang_101.isPresent(parent) && lang_101.isPresent(parent.proto.protoInjector)) {
                            isBoundary = false;
                        }
                        else {
                            isBoundary = parentView.hostInjectorBoundary;
                        }
                        this._queryStrategy = this._buildQueryStrategy();
                        this._injector = new di_29.Injector(this.proto.protoInjector, parentInjector, isBoundary, this, function () { return _this._debugContext(); });
                        // we couple ourselves to the injector strategy to avoid polymorphic calls
                        var injectorStrategy = this._injector.internalStrategy;
                        this._strategy = injectorStrategy instanceof injector_2.InjectorInlineStrategy ?
                            new ElementDirectiveInlineStrategy(injectorStrategy, this) :
                            new ElementDirectiveDynamicStrategy(injectorStrategy, this);
                        this._strategy.init();
                    }
                    else {
                        this._queryStrategy = null;
                        this._injector = parentInjector;
                        this._strategy = null;
                    }
                }
                AppElement.getViewParentInjector = function (parentViewType, containerAppElement, imperativelyCreatedProviders, rootInjector) {
                    var parentInjector;
                    var hostInjectorBoundary;
                    switch (parentViewType) {
                        case view_type_3.ViewType.COMPONENT:
                            parentInjector = containerAppElement._injector;
                            hostInjectorBoundary = true;
                            break;
                        case view_type_3.ViewType.EMBEDDED:
                            parentInjector = lang_101.isPresent(containerAppElement.proto.protoInjector) ?
                                containerAppElement._injector.parent :
                                containerAppElement._injector;
                            hostInjectorBoundary = containerAppElement._injector.hostBoundary;
                            break;
                        case view_type_3.ViewType.HOST:
                            if (lang_101.isPresent(containerAppElement)) {
                                // host view is attached to a container
                                parentInjector = lang_101.isPresent(containerAppElement.proto.protoInjector) ?
                                    containerAppElement._injector.parent :
                                    containerAppElement._injector;
                                if (lang_101.isPresent(imperativelyCreatedProviders)) {
                                    var imperativeProvidersWithVisibility = imperativelyCreatedProviders.map(function (p) { return new injector_2.ProviderWithVisibility(p, injector_2.Visibility.Public); });
                                    // The imperative injector is similar to having an element between
                                    // the dynamic-loaded component and its parent => no boundary between
                                    // the component and imperativelyCreatedInjector.
                                    parentInjector = new di_29.Injector(new injector_2.ProtoInjector(imperativeProvidersWithVisibility), parentInjector, true, null, null);
                                    hostInjectorBoundary = false;
                                }
                                else {
                                    hostInjectorBoundary = containerAppElement._injector.hostBoundary;
                                }
                            }
                            else {
                                // bootstrap
                                parentInjector = rootInjector;
                                hostInjectorBoundary = true;
                            }
                            break;
                    }
                    return new InjectorWithHostBoundary(parentInjector, hostInjectorBoundary);
                };
                AppElement.prototype.attachComponentView = function (componentView) { this.componentView = componentView; };
                AppElement.prototype._debugContext = function () {
                    var c = this.parentView.getDebugContext(this, null, null);
                    return lang_101.isPresent(c) ? new _Context(c.element, c.componentElement, c.injector) : null;
                };
                AppElement.prototype.hasVariableBinding = function (name) {
                    var vb = this.proto.directiveVariableBindings;
                    return lang_101.isPresent(vb) && collection_40.StringMapWrapper.contains(vb, name);
                };
                AppElement.prototype.getVariableBinding = function (name) {
                    var index = this.proto.directiveVariableBindings[name];
                    return lang_101.isPresent(index) ? this.getDirectiveAtIndex(index) : this.getElementRef();
                };
                AppElement.prototype.get = function (token) { return this._injector.get(token); };
                AppElement.prototype.hasDirective = function (type) { return lang_101.isPresent(this._injector.getOptional(type)); };
                AppElement.prototype.getComponent = function () { return lang_101.isPresent(this._strategy) ? this._strategy.getComponent() : null; };
                AppElement.prototype.getInjector = function () { return this._injector; };
                AppElement.prototype.getElementRef = function () { return this.ref; };
                AppElement.prototype.getViewContainerRef = function () { return new view_container_ref_2.ViewContainerRef_(this); };
                AppElement.prototype.getTemplateRef = function () {
                    if (lang_101.isPresent(this.embeddedViewFactory)) {
                        return new template_ref_1.TemplateRef_(this.ref);
                    }
                    return null;
                };
                AppElement.prototype.getDependency = function (injector, provider, dep) {
                    if (provider instanceof DirectiveProvider) {
                        var dirDep = dep;
                        if (lang_101.isPresent(dirDep.attributeName))
                            return this._buildAttribute(dirDep);
                        if (lang_101.isPresent(dirDep.queryDecorator))
                            return this._queryStrategy.findQuery(dirDep.queryDecorator).list;
                        if (dirDep.key.id === StaticKeys.instance().changeDetectorRefId) {
                            // We provide the component's view change detector to components and
                            // the surrounding component's change detector to directives.
                            if (this.proto.firstProviderIsComponent) {
                                // Note: The component view is not yet created when
                                // this method is called!
                                return new _ComponentViewChangeDetectorRef(this);
                            }
                            else {
                                return this.parentView.changeDetector.ref;
                            }
                        }
                        if (dirDep.key.id === StaticKeys.instance().elementRefId) {
                            return this.getElementRef();
                        }
                        if (dirDep.key.id === StaticKeys.instance().viewContainerId) {
                            return this.getViewContainerRef();
                        }
                        if (dirDep.key.id === StaticKeys.instance().templateRefId) {
                            var tr = this.getTemplateRef();
                            if (lang_101.isBlank(tr) && !dirDep.optional) {
                                throw new di_29.NoProviderError(null, dirDep.key);
                            }
                            return tr;
                        }
                        if (dirDep.key.id === StaticKeys.instance().rendererId) {
                            return this.parentView.renderer;
                        }
                    }
                    else if (provider instanceof pipe_provider_2.PipeProvider) {
                        if (dep.key.id === StaticKeys.instance().changeDetectorRefId) {
                            // We provide the component's view change detector to components and
                            // the surrounding component's change detector to directives.
                            if (this.proto.firstProviderIsComponent) {
                                // Note: The component view is not yet created when
                                // this method is called!
                                return new _ComponentViewChangeDetectorRef(this);
                            }
                            else {
                                return this.parentView.changeDetector;
                            }
                        }
                    }
                    return injector_2.UNDEFINED;
                };
                AppElement.prototype._buildAttribute = function (dep) {
                    var attributes = this.proto.attributes;
                    if (lang_101.isPresent(attributes) && collection_40.StringMapWrapper.contains(attributes, dep.attributeName)) {
                        return attributes[dep.attributeName];
                    }
                    else {
                        return null;
                    }
                };
                AppElement.prototype.addDirectivesMatchingQuery = function (query, list) {
                    var templateRef = this.getTemplateRef();
                    if (query.selector === template_ref_1.TemplateRef && lang_101.isPresent(templateRef)) {
                        list.push(templateRef);
                    }
                    if (this._strategy != null) {
                        this._strategy.addDirectivesMatchingQuery(query, list);
                    }
                };
                AppElement.prototype._buildQueryStrategy = function () {
                    if (this.proto.protoQueryRefs.length === 0) {
                        return _emptyQueryStrategy;
                    }
                    else if (this.proto.protoQueryRefs.length <=
                        InlineQueryStrategy.NUMBER_OF_SUPPORTED_QUERIES) {
                        return new InlineQueryStrategy(this);
                    }
                    else {
                        return new DynamicQueryStrategy(this);
                    }
                };
                AppElement.prototype.getDirectiveAtIndex = function (index) { return this._injector.getAt(index); };
                AppElement.prototype.ngAfterViewChecked = function () {
                    if (lang_101.isPresent(this._queryStrategy))
                        this._queryStrategy.updateViewQueries();
                };
                AppElement.prototype.ngAfterContentChecked = function () {
                    if (lang_101.isPresent(this._queryStrategy))
                        this._queryStrategy.updateContentQueries();
                };
                AppElement.prototype.traverseAndSetQueriesAsDirty = function () {
                    var inj = this;
                    while (lang_101.isPresent(inj)) {
                        inj._setQueriesAsDirty();
                        if (lang_101.isBlank(inj.parent) && inj.parentView.proto.type === view_type_3.ViewType.EMBEDDED) {
                            inj = inj.parentView.containerAppElement;
                        }
                        else {
                            inj = inj.parent;
                        }
                    }
                };
                AppElement.prototype._setQueriesAsDirty = function () {
                    if (lang_101.isPresent(this._queryStrategy)) {
                        this._queryStrategy.setContentQueriesAsDirty();
                    }
                    if (this.parentView.proto.type === view_type_3.ViewType.COMPONENT) {
                        this.parentView.containerAppElement._queryStrategy.setViewQueriesAsDirty();
                    }
                };
                return AppElement;
            }());
            exports_183("AppElement", AppElement);
            _EmptyQueryStrategy = (function () {
                function _EmptyQueryStrategy() {
                }
                _EmptyQueryStrategy.prototype.setContentQueriesAsDirty = function () { };
                _EmptyQueryStrategy.prototype.setViewQueriesAsDirty = function () { };
                _EmptyQueryStrategy.prototype.updateContentQueries = function () { };
                _EmptyQueryStrategy.prototype.updateViewQueries = function () { };
                _EmptyQueryStrategy.prototype.findQuery = function (query) {
                    throw new exceptions_35.BaseException("Cannot find query for directive " + query + ".");
                };
                return _EmptyQueryStrategy;
            }());
            _emptyQueryStrategy = new _EmptyQueryStrategy();
            InlineQueryStrategy = (function () {
                function InlineQueryStrategy(ei) {
                    var protoRefs = ei.proto.protoQueryRefs;
                    if (protoRefs.length > 0)
                        this.query0 = new QueryRef(protoRefs[0], ei);
                    if (protoRefs.length > 1)
                        this.query1 = new QueryRef(protoRefs[1], ei);
                    if (protoRefs.length > 2)
                        this.query2 = new QueryRef(protoRefs[2], ei);
                }
                InlineQueryStrategy.prototype.setContentQueriesAsDirty = function () {
                    if (lang_101.isPresent(this.query0) && !this.query0.isViewQuery)
                        this.query0.dirty = true;
                    if (lang_101.isPresent(this.query1) && !this.query1.isViewQuery)
                        this.query1.dirty = true;
                    if (lang_101.isPresent(this.query2) && !this.query2.isViewQuery)
                        this.query2.dirty = true;
                };
                InlineQueryStrategy.prototype.setViewQueriesAsDirty = function () {
                    if (lang_101.isPresent(this.query0) && this.query0.isViewQuery)
                        this.query0.dirty = true;
                    if (lang_101.isPresent(this.query1) && this.query1.isViewQuery)
                        this.query1.dirty = true;
                    if (lang_101.isPresent(this.query2) && this.query2.isViewQuery)
                        this.query2.dirty = true;
                };
                InlineQueryStrategy.prototype.updateContentQueries = function () {
                    if (lang_101.isPresent(this.query0) && !this.query0.isViewQuery) {
                        this.query0.update();
                    }
                    if (lang_101.isPresent(this.query1) && !this.query1.isViewQuery) {
                        this.query1.update();
                    }
                    if (lang_101.isPresent(this.query2) && !this.query2.isViewQuery) {
                        this.query2.update();
                    }
                };
                InlineQueryStrategy.prototype.updateViewQueries = function () {
                    if (lang_101.isPresent(this.query0) && this.query0.isViewQuery) {
                        this.query0.update();
                    }
                    if (lang_101.isPresent(this.query1) && this.query1.isViewQuery) {
                        this.query1.update();
                    }
                    if (lang_101.isPresent(this.query2) && this.query2.isViewQuery) {
                        this.query2.update();
                    }
                };
                InlineQueryStrategy.prototype.findQuery = function (query) {
                    if (lang_101.isPresent(this.query0) && this.query0.protoQueryRef.query === query) {
                        return this.query0;
                    }
                    if (lang_101.isPresent(this.query1) && this.query1.protoQueryRef.query === query) {
                        return this.query1;
                    }
                    if (lang_101.isPresent(this.query2) && this.query2.protoQueryRef.query === query) {
                        return this.query2;
                    }
                    throw new exceptions_35.BaseException("Cannot find query for directive " + query + ".");
                };
                InlineQueryStrategy.NUMBER_OF_SUPPORTED_QUERIES = 3;
                return InlineQueryStrategy;
            }());
            DynamicQueryStrategy = (function () {
                function DynamicQueryStrategy(ei) {
                    this.queries = ei.proto.protoQueryRefs.map(function (p) { return new QueryRef(p, ei); });
                }
                DynamicQueryStrategy.prototype.setContentQueriesAsDirty = function () {
                    for (var i = 0; i < this.queries.length; ++i) {
                        var q = this.queries[i];
                        if (!q.isViewQuery)
                            q.dirty = true;
                    }
                };
                DynamicQueryStrategy.prototype.setViewQueriesAsDirty = function () {
                    for (var i = 0; i < this.queries.length; ++i) {
                        var q = this.queries[i];
                        if (q.isViewQuery)
                            q.dirty = true;
                    }
                };
                DynamicQueryStrategy.prototype.updateContentQueries = function () {
                    for (var i = 0; i < this.queries.length; ++i) {
                        var q = this.queries[i];
                        if (!q.isViewQuery) {
                            q.update();
                        }
                    }
                };
                DynamicQueryStrategy.prototype.updateViewQueries = function () {
                    for (var i = 0; i < this.queries.length; ++i) {
                        var q = this.queries[i];
                        if (q.isViewQuery) {
                            q.update();
                        }
                    }
                };
                DynamicQueryStrategy.prototype.findQuery = function (query) {
                    for (var i = 0; i < this.queries.length; ++i) {
                        var q = this.queries[i];
                        if (q.protoQueryRef.query === query) {
                            return q;
                        }
                    }
                    throw new exceptions_35.BaseException("Cannot find query for directive " + query + ".");
                };
                return DynamicQueryStrategy;
            }());
            /**
             * Strategy used by the `ElementInjector` when the number of providers is 10 or less.
             * In such a case, inlining fields is beneficial for performances.
             */
            ElementDirectiveInlineStrategy = (function () {
                function ElementDirectiveInlineStrategy(injectorStrategy, _ei) {
                    this.injectorStrategy = injectorStrategy;
                    this._ei = _ei;
                }
                ElementDirectiveInlineStrategy.prototype.init = function () {
                    var i = this.injectorStrategy;
                    var p = i.protoStrategy;
                    i.resetConstructionCounter();
                    if (p.provider0 instanceof DirectiveProvider && lang_101.isPresent(p.keyId0) && i.obj0 === injector_2.UNDEFINED)
                        i.obj0 = i.instantiateProvider(p.provider0, p.visibility0);
                    if (p.provider1 instanceof DirectiveProvider && lang_101.isPresent(p.keyId1) && i.obj1 === injector_2.UNDEFINED)
                        i.obj1 = i.instantiateProvider(p.provider1, p.visibility1);
                    if (p.provider2 instanceof DirectiveProvider && lang_101.isPresent(p.keyId2) && i.obj2 === injector_2.UNDEFINED)
                        i.obj2 = i.instantiateProvider(p.provider2, p.visibility2);
                    if (p.provider3 instanceof DirectiveProvider && lang_101.isPresent(p.keyId3) && i.obj3 === injector_2.UNDEFINED)
                        i.obj3 = i.instantiateProvider(p.provider3, p.visibility3);
                    if (p.provider4 instanceof DirectiveProvider && lang_101.isPresent(p.keyId4) && i.obj4 === injector_2.UNDEFINED)
                        i.obj4 = i.instantiateProvider(p.provider4, p.visibility4);
                    if (p.provider5 instanceof DirectiveProvider && lang_101.isPresent(p.keyId5) && i.obj5 === injector_2.UNDEFINED)
                        i.obj5 = i.instantiateProvider(p.provider5, p.visibility5);
                    if (p.provider6 instanceof DirectiveProvider && lang_101.isPresent(p.keyId6) && i.obj6 === injector_2.UNDEFINED)
                        i.obj6 = i.instantiateProvider(p.provider6, p.visibility6);
                    if (p.provider7 instanceof DirectiveProvider && lang_101.isPresent(p.keyId7) && i.obj7 === injector_2.UNDEFINED)
                        i.obj7 = i.instantiateProvider(p.provider7, p.visibility7);
                    if (p.provider8 instanceof DirectiveProvider && lang_101.isPresent(p.keyId8) && i.obj8 === injector_2.UNDEFINED)
                        i.obj8 = i.instantiateProvider(p.provider8, p.visibility8);
                    if (p.provider9 instanceof DirectiveProvider && lang_101.isPresent(p.keyId9) && i.obj9 === injector_2.UNDEFINED)
                        i.obj9 = i.instantiateProvider(p.provider9, p.visibility9);
                };
                ElementDirectiveInlineStrategy.prototype.getComponent = function () { return this.injectorStrategy.obj0; };
                ElementDirectiveInlineStrategy.prototype.isComponentKey = function (key) {
                    return this._ei.proto.firstProviderIsComponent && lang_101.isPresent(key) &&
                        key.id === this.injectorStrategy.protoStrategy.keyId0;
                };
                ElementDirectiveInlineStrategy.prototype.addDirectivesMatchingQuery = function (query, list) {
                    var i = this.injectorStrategy;
                    var p = i.protoStrategy;
                    if (lang_101.isPresent(p.provider0) && p.provider0.key.token === query.selector) {
                        if (i.obj0 === injector_2.UNDEFINED)
                            i.obj0 = i.instantiateProvider(p.provider0, p.visibility0);
                        list.push(i.obj0);
                    }
                    if (lang_101.isPresent(p.provider1) && p.provider1.key.token === query.selector) {
                        if (i.obj1 === injector_2.UNDEFINED)
                            i.obj1 = i.instantiateProvider(p.provider1, p.visibility1);
                        list.push(i.obj1);
                    }
                    if (lang_101.isPresent(p.provider2) && p.provider2.key.token === query.selector) {
                        if (i.obj2 === injector_2.UNDEFINED)
                            i.obj2 = i.instantiateProvider(p.provider2, p.visibility2);
                        list.push(i.obj2);
                    }
                    if (lang_101.isPresent(p.provider3) && p.provider3.key.token === query.selector) {
                        if (i.obj3 === injector_2.UNDEFINED)
                            i.obj3 = i.instantiateProvider(p.provider3, p.visibility3);
                        list.push(i.obj3);
                    }
                    if (lang_101.isPresent(p.provider4) && p.provider4.key.token === query.selector) {
                        if (i.obj4 === injector_2.UNDEFINED)
                            i.obj4 = i.instantiateProvider(p.provider4, p.visibility4);
                        list.push(i.obj4);
                    }
                    if (lang_101.isPresent(p.provider5) && p.provider5.key.token === query.selector) {
                        if (i.obj5 === injector_2.UNDEFINED)
                            i.obj5 = i.instantiateProvider(p.provider5, p.visibility5);
                        list.push(i.obj5);
                    }
                    if (lang_101.isPresent(p.provider6) && p.provider6.key.token === query.selector) {
                        if (i.obj6 === injector_2.UNDEFINED)
                            i.obj6 = i.instantiateProvider(p.provider6, p.visibility6);
                        list.push(i.obj6);
                    }
                    if (lang_101.isPresent(p.provider7) && p.provider7.key.token === query.selector) {
                        if (i.obj7 === injector_2.UNDEFINED)
                            i.obj7 = i.instantiateProvider(p.provider7, p.visibility7);
                        list.push(i.obj7);
                    }
                    if (lang_101.isPresent(p.provider8) && p.provider8.key.token === query.selector) {
                        if (i.obj8 === injector_2.UNDEFINED)
                            i.obj8 = i.instantiateProvider(p.provider8, p.visibility8);
                        list.push(i.obj8);
                    }
                    if (lang_101.isPresent(p.provider9) && p.provider9.key.token === query.selector) {
                        if (i.obj9 === injector_2.UNDEFINED)
                            i.obj9 = i.instantiateProvider(p.provider9, p.visibility9);
                        list.push(i.obj9);
                    }
                };
                return ElementDirectiveInlineStrategy;
            }());
            /**
             * Strategy used by the `ElementInjector` when the number of bindings is 11 or more.
             * In such a case, there are too many fields to inline (see ElementInjectorInlineStrategy).
             */
            ElementDirectiveDynamicStrategy = (function () {
                function ElementDirectiveDynamicStrategy(injectorStrategy, _ei) {
                    this.injectorStrategy = injectorStrategy;
                    this._ei = _ei;
                }
                ElementDirectiveDynamicStrategy.prototype.init = function () {
                    var inj = this.injectorStrategy;
                    var p = inj.protoStrategy;
                    inj.resetConstructionCounter();
                    for (var i = 0; i < p.keyIds.length; i++) {
                        if (p.providers[i] instanceof DirectiveProvider && lang_101.isPresent(p.keyIds[i]) &&
                            inj.objs[i] === injector_2.UNDEFINED) {
                            inj.objs[i] = inj.instantiateProvider(p.providers[i], p.visibilities[i]);
                        }
                    }
                };
                ElementDirectiveDynamicStrategy.prototype.getComponent = function () { return this.injectorStrategy.objs[0]; };
                ElementDirectiveDynamicStrategy.prototype.isComponentKey = function (key) {
                    var p = this.injectorStrategy.protoStrategy;
                    return this._ei.proto.firstProviderIsComponent && lang_101.isPresent(key) && key.id === p.keyIds[0];
                };
                ElementDirectiveDynamicStrategy.prototype.addDirectivesMatchingQuery = function (query, list) {
                    var ist = this.injectorStrategy;
                    var p = ist.protoStrategy;
                    for (var i = 0; i < p.providers.length; i++) {
                        if (p.providers[i].key.token === query.selector) {
                            if (ist.objs[i] === injector_2.UNDEFINED) {
                                ist.objs[i] = ist.instantiateProvider(p.providers[i], p.visibilities[i]);
                            }
                            list.push(ist.objs[i]);
                        }
                    }
                };
                return ElementDirectiveDynamicStrategy;
            }());
            ProtoQueryRef = (function () {
                function ProtoQueryRef(dirIndex, setter, query) {
                    this.dirIndex = dirIndex;
                    this.setter = setter;
                    this.query = query;
                }
                Object.defineProperty(ProtoQueryRef.prototype, "usesPropertySyntax", {
                    get: function () { return lang_101.isPresent(this.setter); },
                    enumerable: true,
                    configurable: true
                });
                return ProtoQueryRef;
            }());
            exports_183("ProtoQueryRef", ProtoQueryRef);
            QueryRef = (function () {
                function QueryRef(protoQueryRef, originator) {
                    this.protoQueryRef = protoQueryRef;
                    this.originator = originator;
                    this.list = new query_list_1.QueryList();
                    this.dirty = true;
                }
                Object.defineProperty(QueryRef.prototype, "isViewQuery", {
                    get: function () { return this.protoQueryRef.query.isViewQuery; },
                    enumerable: true,
                    configurable: true
                });
                QueryRef.prototype.update = function () {
                    if (!this.dirty)
                        return;
                    this._update();
                    this.dirty = false;
                    // TODO delete the check once only field queries are supported
                    if (this.protoQueryRef.usesPropertySyntax) {
                        var dir = this.originator.getDirectiveAtIndex(this.protoQueryRef.dirIndex);
                        if (this.protoQueryRef.query.first) {
                            this.protoQueryRef.setter(dir, this.list.length > 0 ? this.list.first : null);
                        }
                        else {
                            this.protoQueryRef.setter(dir, this.list);
                        }
                    }
                    this.list.notifyOnChanges();
                };
                QueryRef.prototype._update = function () {
                    var aggregator = [];
                    if (this.protoQueryRef.query.isViewQuery) {
                        // intentionally skipping originator for view queries.
                        var nestedView = this.originator.componentView;
                        if (lang_101.isPresent(nestedView))
                            this._visitView(nestedView, aggregator);
                    }
                    else {
                        this._visit(this.originator, aggregator);
                    }
                    this.list.reset(aggregator);
                };
                ;
                QueryRef.prototype._visit = function (inj, aggregator) {
                    var view = inj.parentView;
                    var startIdx = inj.proto.index;
                    for (var i = startIdx; i < view.appElements.length; i++) {
                        var curInj = view.appElements[i];
                        // The first injector after inj, that is outside the subtree rooted at
                        // inj has to have a null parent or a parent that is an ancestor of inj.
                        if (i > startIdx && (lang_101.isBlank(curInj.parent) || curInj.parent.proto.index < startIdx)) {
                            break;
                        }
                        if (!this.protoQueryRef.query.descendants &&
                            !(curInj.parent == this.originator || curInj == this.originator))
                            continue;
                        // We visit the view container(VC) views right after the injector that contains
                        // the VC. Theoretically, that might not be the right order if there are
                        // child injectors of said injector. Not clear whether if such case can
                        // even be constructed with the current apis.
                        this._visitInjector(curInj, aggregator);
                        this._visitViewContainerViews(curInj.nestedViews, aggregator);
                    }
                };
                QueryRef.prototype._visitInjector = function (inj, aggregator) {
                    if (this.protoQueryRef.query.isVarBindingQuery) {
                        this._aggregateVariableBinding(inj, aggregator);
                    }
                    else {
                        this._aggregateDirective(inj, aggregator);
                    }
                };
                QueryRef.prototype._visitViewContainerViews = function (views, aggregator) {
                    if (lang_101.isPresent(views)) {
                        for (var j = 0; j < views.length; j++) {
                            this._visitView(views[j], aggregator);
                        }
                    }
                };
                QueryRef.prototype._visitView = function (view, aggregator) {
                    for (var i = 0; i < view.appElements.length; i++) {
                        var inj = view.appElements[i];
                        this._visitInjector(inj, aggregator);
                        this._visitViewContainerViews(inj.nestedViews, aggregator);
                    }
                };
                QueryRef.prototype._aggregateVariableBinding = function (inj, aggregator) {
                    var vb = this.protoQueryRef.query.varBindings;
                    for (var i = 0; i < vb.length; ++i) {
                        if (inj.hasVariableBinding(vb[i])) {
                            aggregator.push(inj.getVariableBinding(vb[i]));
                        }
                    }
                };
                QueryRef.prototype._aggregateDirective = function (inj, aggregator) {
                    inj.addDirectivesMatchingQuery(this.protoQueryRef.query, aggregator);
                };
                return QueryRef;
            }());
            exports_183("QueryRef", QueryRef);
            _ComponentViewChangeDetectorRef = (function (_super) {
                __extends(_ComponentViewChangeDetectorRef, _super);
                function _ComponentViewChangeDetectorRef(_appElement) {
                    _super.call(this);
                    this._appElement = _appElement;
                }
                _ComponentViewChangeDetectorRef.prototype.markForCheck = function () { this._appElement.componentView.changeDetector.ref.markForCheck(); };
                _ComponentViewChangeDetectorRef.prototype.detach = function () { this._appElement.componentView.changeDetector.ref.detach(); };
                _ComponentViewChangeDetectorRef.prototype.detectChanges = function () { this._appElement.componentView.changeDetector.ref.detectChanges(); };
                _ComponentViewChangeDetectorRef.prototype.checkNoChanges = function () { this._appElement.componentView.changeDetector.ref.checkNoChanges(); };
                _ComponentViewChangeDetectorRef.prototype.reattach = function () { this._appElement.componentView.changeDetector.ref.reattach(); };
                return _ComponentViewChangeDetectorRef;
            }(change_detection_9.ChangeDetectorRef));
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/linker/view", ['angular2/src/facade/collection', 'angular2/src/core/change_detection/change_detection', 'angular2/src/core/change_detection/interfaces', "test/node_modules/angular2/ts/src/core/linker/element", 'angular2/src/facade/lang', 'angular2/src/facade/exceptions', 'angular2/src/core/render/api', "test/node_modules/angular2/ts/src/core/linker/view_ref", 'angular2/src/core/pipes/pipes', 'angular2/src/core/render/util', "test/node_modules/angular2/ts/src/core/linker/view_type"], function(exports_184, context_184) {
    "use strict";
    var __moduleName = context_184 && context_184.id;
    var collection_41, change_detection_10, interfaces_4, element_4, lang_102, exceptions_36, api_3, view_ref_3, pipes_2, util_10, pipes_3, view_type_4;
    var REFLECT_PREFIX, EMPTY_CONTEXT, AppView, AppProtoView, HostViewFactory;
    function _localsToStringMap(locals) {
        var res = {};
        var c = locals;
        while (lang_102.isPresent(c)) {
            res = collection_41.StringMapWrapper.merge(res, collection_41.MapWrapper.toStringMap(c.current));
            c = c.parent;
        }
        return res;
    }
    function flattenNestedViewRenderNodes(nodes) {
        return _flattenNestedViewRenderNodes(nodes, []);
    }
    exports_184("flattenNestedViewRenderNodes", flattenNestedViewRenderNodes);
    function _flattenNestedViewRenderNodes(nodes, renderNodes) {
        for (var i = 0; i < nodes.length; i++) {
            var node = nodes[i];
            if (node instanceof element_4.AppElement) {
                var appEl = node;
                renderNodes.push(appEl.nativeElement);
                if (lang_102.isPresent(appEl.nestedViews)) {
                    for (var k = 0; k < appEl.nestedViews.length; k++) {
                        _flattenNestedViewRenderNodes(appEl.nestedViews[k].rootNodesOrAppElements, renderNodes);
                    }
                }
            }
            else {
                renderNodes.push(node);
            }
        }
        return renderNodes;
    }
    function findLastRenderNode(node) {
        var lastNode;
        if (node instanceof element_4.AppElement) {
            var appEl = node;
            lastNode = appEl.nativeElement;
            if (lang_102.isPresent(appEl.nestedViews)) {
                // Note: Views might have no root nodes at all!
                for (var i = appEl.nestedViews.length - 1; i >= 0; i--) {
                    var nestedView = appEl.nestedViews[i];
                    if (nestedView.rootNodesOrAppElements.length > 0) {
                        lastNode = findLastRenderNode(nestedView.rootNodesOrAppElements[nestedView.rootNodesOrAppElements.length - 1]);
                    }
                }
            }
        }
        else {
            lastNode = node;
        }
        return lastNode;
    }
    exports_184("findLastRenderNode", findLastRenderNode);
    function checkSlotCount(componentName, expectedSlotCount, projectableNodes) {
        var givenSlotCount = lang_102.isPresent(projectableNodes) ? projectableNodes.length : 0;
        if (givenSlotCount < expectedSlotCount) {
            throw new exceptions_36.BaseException(("The component " + componentName + " has " + expectedSlotCount + " <ng-content> elements,") +
                (" but only " + givenSlotCount + " slots were provided."));
        }
    }
    exports_184("checkSlotCount", checkSlotCount);
    return {
        setters:[
            function (collection_41_1) {
                collection_41 = collection_41_1;
            },
            function (change_detection_10_1) {
                change_detection_10 = change_detection_10_1;
            },
            function (interfaces_4_1) {
                interfaces_4 = interfaces_4_1;
                exports_184({
                    "DebugContext": interfaces_4_1["DebugContext"]
                });
            },
            function (element_4_1) {
                element_4 = element_4_1;
            },
            function (lang_102_1) {
                lang_102 = lang_102_1;
            },
            function (exceptions_36_1) {
                exceptions_36 = exceptions_36_1;
            },
            function (api_3_1) {
                api_3 = api_3_1;
            },
            function (view_ref_3_1) {
                view_ref_3 = view_ref_3_1;
            },
            function (pipes_2_1) {
                pipes_2 = pipes_2_1;
                pipes_3 = pipes_2_1;
            },
            function (util_10_1) {
                util_10 = util_10_1;
            },
            function (view_type_4_1) {
                view_type_4 = view_type_4_1;
            }],
        execute: function() {
            REFLECT_PREFIX = 'ng-reflect-';
            EMPTY_CONTEXT = lang_102.CONST_EXPR(new Object());
            /**
             * Cost of making objects: http://jsperf.com/instantiate-size-of-object
             *
             */
            AppView = (function () {
                function AppView(proto, renderer, viewManager, projectableNodes, containerAppElement, imperativelyCreatedProviders, rootInjector, changeDetector) {
                    this.proto = proto;
                    this.renderer = renderer;
                    this.viewManager = viewManager;
                    this.projectableNodes = projectableNodes;
                    this.containerAppElement = containerAppElement;
                    this.changeDetector = changeDetector;
                    /**
                     * The context against which data-binding expressions in this view are evaluated against.
                     * This is always a component instance.
                     */
                    this.context = null;
                    this.destroyed = false;
                    this.ref = new view_ref_3.ViewRef_(this);
                    var injectorWithHostBoundary = element_4.AppElement.getViewParentInjector(this.proto.type, containerAppElement, imperativelyCreatedProviders, rootInjector);
                    this.parentInjector = injectorWithHostBoundary.injector;
                    this.hostInjectorBoundary = injectorWithHostBoundary.hostInjectorBoundary;
                    var pipes;
                    var context;
                    switch (proto.type) {
                        case view_type_4.ViewType.COMPONENT:
                            pipes = new pipes_3.Pipes(proto.protoPipes, containerAppElement.getInjector());
                            context = containerAppElement.getComponent();
                            break;
                        case view_type_4.ViewType.EMBEDDED:
                            pipes = containerAppElement.parentView.pipes;
                            context = containerAppElement.parentView.context;
                            break;
                        case view_type_4.ViewType.HOST:
                            pipes = null;
                            context = EMPTY_CONTEXT;
                            break;
                    }
                    this.pipes = pipes;
                    this.context = context;
                }
                AppView.prototype.init = function (rootNodesOrAppElements, allNodes, disposables, appElements) {
                    this.rootNodesOrAppElements = rootNodesOrAppElements;
                    this.allNodes = allNodes;
                    this.disposables = disposables;
                    this.appElements = appElements;
                    var localsMap = new collection_41.Map();
                    collection_41.StringMapWrapper.forEach(this.proto.templateVariableBindings, function (templateName, _) { localsMap.set(templateName, null); });
                    for (var i = 0; i < appElements.length; i++) {
                        var appEl = appElements[i];
                        var providerTokens = [];
                        if (lang_102.isPresent(appEl.proto.protoInjector)) {
                            for (var j = 0; j < appEl.proto.protoInjector.numberOfProviders; j++) {
                                providerTokens.push(appEl.proto.protoInjector.getProviderAtIndex(j).key.token);
                            }
                        }
                        collection_41.StringMapWrapper.forEach(appEl.proto.directiveVariableBindings, function (directiveIndex, name) {
                            if (lang_102.isBlank(directiveIndex)) {
                                localsMap.set(name, appEl.nativeElement);
                            }
                            else {
                                localsMap.set(name, appEl.getDirectiveAtIndex(directiveIndex));
                            }
                        });
                        this.renderer.setElementDebugInfo(appEl.nativeElement, new api_3.RenderDebugInfo(appEl.getInjector(), appEl.getComponent(), providerTokens, localsMap));
                    }
                    var parentLocals = null;
                    if (this.proto.type !== view_type_4.ViewType.COMPONENT) {
                        parentLocals =
                            lang_102.isPresent(this.containerAppElement) ? this.containerAppElement.parentView.locals : null;
                    }
                    if (this.proto.type === view_type_4.ViewType.COMPONENT) {
                        // Note: the render nodes have been attached to their host element
                        // in the ViewFactory already.
                        this.containerAppElement.attachComponentView(this);
                        this.containerAppElement.parentView.changeDetector.addViewChild(this.changeDetector);
                    }
                    this.locals = new change_detection_10.Locals(parentLocals, localsMap);
                    this.changeDetector.hydrate(this.context, this.locals, this, this.pipes);
                    this.viewManager.onViewCreated(this);
                };
                AppView.prototype.destroy = function () {
                    if (this.destroyed) {
                        throw new exceptions_36.BaseException('This view has already been destroyed!');
                    }
                    this.changeDetector.destroyRecursive();
                };
                AppView.prototype.notifyOnDestroy = function () {
                    this.destroyed = true;
                    var hostElement = this.proto.type === view_type_4.ViewType.COMPONENT ? this.containerAppElement.nativeElement : null;
                    this.renderer.destroyView(hostElement, this.allNodes);
                    for (var i = 0; i < this.disposables.length; i++) {
                        this.disposables[i]();
                    }
                    this.viewManager.onViewDestroyed(this);
                };
                Object.defineProperty(AppView.prototype, "changeDetectorRef", {
                    get: function () { return this.changeDetector.ref; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AppView.prototype, "flatRootNodes", {
                    get: function () { return flattenNestedViewRenderNodes(this.rootNodesOrAppElements); },
                    enumerable: true,
                    configurable: true
                });
                AppView.prototype.hasLocal = function (contextName) {
                    return collection_41.StringMapWrapper.contains(this.proto.templateVariableBindings, contextName);
                };
                AppView.prototype.setLocal = function (contextName, value) {
                    if (!this.hasLocal(contextName)) {
                        return;
                    }
                    var templateName = this.proto.templateVariableBindings[contextName];
                    this.locals.set(templateName, value);
                };
                // dispatch to element injector or text nodes based on context
                AppView.prototype.notifyOnBinding = function (b, currentValue) {
                    if (b.isTextNode()) {
                        this.renderer.setText(this.allNodes[b.elementIndex], currentValue);
                    }
                    else {
                        var nativeElement = this.appElements[b.elementIndex].nativeElement;
                        if (b.isElementProperty()) {
                            this.renderer.setElementProperty(nativeElement, b.name, currentValue);
                        }
                        else if (b.isElementAttribute()) {
                            this.renderer.setElementAttribute(nativeElement, b.name, lang_102.isPresent(currentValue) ? "" + currentValue : null);
                        }
                        else if (b.isElementClass()) {
                            this.renderer.setElementClass(nativeElement, b.name, currentValue);
                        }
                        else if (b.isElementStyle()) {
                            var unit = lang_102.isPresent(b.unit) ? b.unit : '';
                            this.renderer.setElementStyle(nativeElement, b.name, lang_102.isPresent(currentValue) ? "" + currentValue + unit : null);
                        }
                        else {
                            throw new exceptions_36.BaseException('Unsupported directive record');
                        }
                    }
                };
                AppView.prototype.logBindingUpdate = function (b, value) {
                    if (b.isDirective() || b.isElementProperty()) {
                        var nativeElement = this.appElements[b.elementIndex].nativeElement;
                        this.renderer.setBindingDebugInfo(nativeElement, "" + REFLECT_PREFIX + util_10.camelCaseToDashCase(b.name), "" + value);
                    }
                };
                AppView.prototype.notifyAfterContentChecked = function () {
                    var count = this.appElements.length;
                    for (var i = count - 1; i >= 0; i--) {
                        this.appElements[i].ngAfterContentChecked();
                    }
                };
                AppView.prototype.notifyAfterViewChecked = function () {
                    var count = this.appElements.length;
                    for (var i = count - 1; i >= 0; i--) {
                        this.appElements[i].ngAfterViewChecked();
                    }
                };
                AppView.prototype.getDebugContext = function (appElement, elementIndex, directiveIndex) {
                    try {
                        if (lang_102.isBlank(appElement) && elementIndex < this.appElements.length) {
                            appElement = this.appElements[elementIndex];
                        }
                        var container = this.containerAppElement;
                        var element = lang_102.isPresent(appElement) ? appElement.nativeElement : null;
                        var componentElement = lang_102.isPresent(container) ? container.nativeElement : null;
                        var directive = lang_102.isPresent(directiveIndex) ? appElement.getDirectiveAtIndex(directiveIndex) : null;
                        var injector = lang_102.isPresent(appElement) ? appElement.getInjector() : null;
                        return new interfaces_4.DebugContext(element, componentElement, directive, this.context, _localsToStringMap(this.locals), injector);
                    }
                    catch (e) {
                        // TODO: vsavkin log the exception once we have a good way to log errors and warnings
                        // if an error happens during getting the debug context, we return null.
                        return null;
                    }
                };
                AppView.prototype.getDirectiveFor = function (directive) {
                    return this.appElements[directive.elementIndex].getDirectiveAtIndex(directive.directiveIndex);
                };
                AppView.prototype.getDetectorFor = function (directive) {
                    var componentView = this.appElements[directive.elementIndex].componentView;
                    return lang_102.isPresent(componentView) ? componentView.changeDetector : null;
                };
                /**
                 * Triggers the event handlers for the element and the directives.
                 *
                 * This method is intended to be called from directive EventEmitters.
                 *
                 * @param {string} eventName
                 * @param {*} eventObj
                 * @param {number} boundElementIndex
                 * @return false if preventDefault must be applied to the DOM event
                 */
                AppView.prototype.triggerEventHandlers = function (eventName, eventObj, boundElementIndex) {
                    return this.changeDetector.handleEvent(eventName, boundElementIndex, eventObj);
                };
                return AppView;
            }());
            exports_184("AppView", AppView);
            /**
             *
             */
            AppProtoView = (function () {
                function AppProtoView(type, protoPipes, templateVariableBindings) {
                    this.type = type;
                    this.protoPipes = protoPipes;
                    this.templateVariableBindings = templateVariableBindings;
                }
                AppProtoView.create = function (metadataCache, type, pipes, templateVariableBindings) {
                    var protoPipes = null;
                    if (lang_102.isPresent(pipes) && pipes.length > 0) {
                        var boundPipes = collection_41.ListWrapper.createFixedSize(pipes.length);
                        for (var i = 0; i < pipes.length; i++) {
                            boundPipes[i] = metadataCache.getResolvedPipeMetadata(pipes[i]);
                        }
                        protoPipes = pipes_2.ProtoPipes.fromProviders(boundPipes);
                    }
                    return new AppProtoView(type, protoPipes, templateVariableBindings);
                };
                return AppProtoView;
            }());
            exports_184("AppProtoView", AppProtoView);
            HostViewFactory = (function () {
                function HostViewFactory(selector, viewFactory) {
                    this.selector = selector;
                    this.viewFactory = viewFactory;
                }
                HostViewFactory = __decorate([
                    lang_102.CONST(), 
                    __metadata('design:paramtypes', [String, Function])
                ], HostViewFactory);
                return HostViewFactory;
            }());
            exports_184("HostViewFactory", HostViewFactory);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/linker/view_manager", ['angular2/src/core/di', 'angular2/src/facade/lang', 'angular2/src/facade/collection', 'angular2/src/facade/exceptions', "test/node_modules/angular2/ts/src/core/linker/view", 'angular2/src/core/render/api', "test/node_modules/angular2/ts/src/core/profile/profile", 'angular2/src/core/application_tokens', "test/node_modules/angular2/ts/src/core/linker/view_type"], function(exports_185, context_185) {
    "use strict";
    var __moduleName = context_185 && context_185.id;
    var di_31, lang_103, collection_42, exceptions_37, view_12, api_4, profile_2, application_tokens_3, view_type_5;
    var AppViewManager, AppViewManager_;
    return {
        setters:[
            function (di_31_1) {
                di_31 = di_31_1;
            },
            function (lang_103_1) {
                lang_103 = lang_103_1;
            },
            function (collection_42_1) {
                collection_42 = collection_42_1;
            },
            function (exceptions_37_1) {
                exceptions_37 = exceptions_37_1;
            },
            function (view_12_1) {
                view_12 = view_12_1;
            },
            function (api_4_1) {
                api_4 = api_4_1;
            },
            function (profile_2_1) {
                profile_2 = profile_2_1;
            },
            function (application_tokens_3_1) {
                application_tokens_3 = application_tokens_3_1;
            },
            function (view_type_5_1) {
                view_type_5 = view_type_5_1;
            }],
        execute: function() {
            /**
             * Service exposing low level API for creating, moving and destroying Views.
             *
             * Most applications should use higher-level abstractions like {@link DynamicComponentLoader} and
             * {@link ViewContainerRef} instead.
             */
            AppViewManager = (function () {
                function AppViewManager() {
                }
                return AppViewManager;
            }());
            exports_185("AppViewManager", AppViewManager);
            AppViewManager_ = (function (_super) {
                __extends(AppViewManager_, _super);
                function AppViewManager_(_renderer, _appId) {
                    _super.call(this);
                    this._renderer = _renderer;
                    this._appId = _appId;
                    this._nextCompTypeId = 0;
                    /** @internal */
                    this._createRootHostViewScope = profile_2.wtfCreateScope('AppViewManager#createRootHostView()');
                    /** @internal */
                    this._destroyRootHostViewScope = profile_2.wtfCreateScope('AppViewManager#destroyRootHostView()');
                    /** @internal */
                    this._createEmbeddedViewInContainerScope = profile_2.wtfCreateScope('AppViewManager#createEmbeddedViewInContainer()');
                    /** @internal */
                    this._createHostViewInContainerScope = profile_2.wtfCreateScope('AppViewManager#createHostViewInContainer()');
                    /** @internal */
                    this._destroyViewInContainerScope = profile_2.wtfCreateScope('AppViewMananger#destroyViewInContainer()');
                    /** @internal */
                    this._attachViewInContainerScope = profile_2.wtfCreateScope('AppViewMananger#attachViewInContainer()');
                    /** @internal */
                    this._detachViewInContainerScope = profile_2.wtfCreateScope('AppViewMananger#detachViewInContainer()');
                }
                AppViewManager_.prototype.getViewContainer = function (location) {
                    return location.internalElement.getViewContainerRef();
                };
                AppViewManager_.prototype.getHostElement = function (hostViewRef) {
                    var hostView = hostViewRef.internalView;
                    if (hostView.proto.type !== view_type_5.ViewType.HOST) {
                        throw new exceptions_37.BaseException('This operation is only allowed on host views');
                    }
                    return hostView.appElements[0].ref;
                };
                AppViewManager_.prototype.getNamedElementInComponentView = function (hostLocation, variableName) {
                    var appEl = hostLocation.internalElement;
                    var componentView = appEl.componentView;
                    if (lang_103.isBlank(componentView)) {
                        throw new exceptions_37.BaseException("There is no component directive at element " + hostLocation);
                    }
                    for (var i = 0; i < componentView.appElements.length; i++) {
                        var compAppEl = componentView.appElements[i];
                        if (collection_42.StringMapWrapper.contains(compAppEl.proto.directiveVariableBindings, variableName)) {
                            return compAppEl.ref;
                        }
                    }
                    throw new exceptions_37.BaseException("Could not find variable " + variableName);
                };
                AppViewManager_.prototype.getComponent = function (hostLocation) {
                    return hostLocation.internalElement.getComponent();
                };
                AppViewManager_.prototype.createRootHostView = function (hostViewFactoryRef, overrideSelector, injector, projectableNodes) {
                    if (projectableNodes === void 0) { projectableNodes = null; }
                    var s = this._createRootHostViewScope();
                    var hostViewFactory = hostViewFactoryRef.internalHostViewFactory;
                    var selector = lang_103.isPresent(overrideSelector) ? overrideSelector : hostViewFactory.selector;
                    var view = hostViewFactory.viewFactory(this._renderer, this, null, projectableNodes, selector, null, injector);
                    return profile_2.wtfLeave(s, view.ref);
                };
                AppViewManager_.prototype.destroyRootHostView = function (hostViewRef) {
                    var s = this._destroyRootHostViewScope();
                    var hostView = hostViewRef.internalView;
                    hostView.renderer.detachView(view_12.flattenNestedViewRenderNodes(hostView.rootNodesOrAppElements));
                    hostView.destroy();
                    profile_2.wtfLeave(s);
                };
                AppViewManager_.prototype.createEmbeddedViewInContainer = function (viewContainerLocation, index, templateRef) {
                    var s = this._createEmbeddedViewInContainerScope();
                    var contextEl = templateRef.elementRef.internalElement;
                    var view = contextEl.embeddedViewFactory(contextEl.parentView.renderer, this, contextEl, contextEl.parentView.projectableNodes, null, null, null);
                    this._attachViewToContainer(view, viewContainerLocation.internalElement, index);
                    return profile_2.wtfLeave(s, view.ref);
                };
                AppViewManager_.prototype.createHostViewInContainer = function (viewContainerLocation, index, hostViewFactoryRef, dynamicallyCreatedProviders, projectableNodes) {
                    var s = this._createHostViewInContainerScope();
                    // TODO(tbosch): This should be specifiable via an additional argument!
                    var viewContainerLocation_ = viewContainerLocation;
                    var contextEl = viewContainerLocation_.internalElement;
                    var hostViewFactory = hostViewFactoryRef.internalHostViewFactory;
                    var view = hostViewFactory.viewFactory(contextEl.parentView.renderer, contextEl.parentView.viewManager, contextEl, projectableNodes, null, dynamicallyCreatedProviders, null);
                    this._attachViewToContainer(view, viewContainerLocation_.internalElement, index);
                    return profile_2.wtfLeave(s, view.ref);
                };
                AppViewManager_.prototype.destroyViewInContainer = function (viewContainerLocation, index) {
                    var s = this._destroyViewInContainerScope();
                    var view = this._detachViewInContainer(viewContainerLocation.internalElement, index);
                    view.destroy();
                    profile_2.wtfLeave(s);
                };
                // TODO(i): refactor detachViewInContainer+attachViewInContainer to moveViewInContainer
                AppViewManager_.prototype.attachViewInContainer = function (viewContainerLocation, index, viewRef) {
                    var viewRef_ = viewRef;
                    var s = this._attachViewInContainerScope();
                    this._attachViewToContainer(viewRef_.internalView, viewContainerLocation.internalElement, index);
                    return profile_2.wtfLeave(s, viewRef_);
                };
                // TODO(i): refactor detachViewInContainer+attachViewInContainer to moveViewInContainer
                AppViewManager_.prototype.detachViewInContainer = function (viewContainerLocation, index) {
                    var s = this._detachViewInContainerScope();
                    var view = this._detachViewInContainer(viewContainerLocation.internalElement, index);
                    return profile_2.wtfLeave(s, view.ref);
                };
                /** @internal */
                AppViewManager_.prototype.onViewCreated = function (view) { };
                /** @internal */
                AppViewManager_.prototype.onViewDestroyed = function (view) { };
                /** @internal */
                AppViewManager_.prototype.createRenderComponentType = function (encapsulation, styles) {
                    return new api_4.RenderComponentType(this._appId + "-" + this._nextCompTypeId++, encapsulation, styles);
                };
                AppViewManager_.prototype._attachViewToContainer = function (view, vcAppElement, viewIndex) {
                    if (view.proto.type === view_type_5.ViewType.COMPONENT) {
                        throw new exceptions_37.BaseException("Component views can't be moved!");
                    }
                    var nestedViews = vcAppElement.nestedViews;
                    if (nestedViews == null) {
                        nestedViews = [];
                        vcAppElement.nestedViews = nestedViews;
                    }
                    collection_42.ListWrapper.insert(nestedViews, viewIndex, view);
                    var refNode;
                    if (viewIndex > 0) {
                        var prevView = nestedViews[viewIndex - 1];
                        refNode = prevView.rootNodesOrAppElements.length > 0 ?
                            prevView.rootNodesOrAppElements[prevView.rootNodesOrAppElements.length - 1] :
                            null;
                    }
                    else {
                        refNode = vcAppElement.nativeElement;
                    }
                    if (lang_103.isPresent(refNode)) {
                        var refRenderNode = view_12.findLastRenderNode(refNode);
                        view.renderer.attachViewAfter(refRenderNode, view_12.flattenNestedViewRenderNodes(view.rootNodesOrAppElements));
                    }
                    // TODO: This is only needed when a view is destroyed,
                    // not when it is detached for reordering with ng-for...
                    vcAppElement.parentView.changeDetector.addContentChild(view.changeDetector);
                    vcAppElement.traverseAndSetQueriesAsDirty();
                };
                AppViewManager_.prototype._detachViewInContainer = function (vcAppElement, viewIndex) {
                    var view = collection_42.ListWrapper.removeAt(vcAppElement.nestedViews, viewIndex);
                    if (view.proto.type === view_type_5.ViewType.COMPONENT) {
                        throw new exceptions_37.BaseException("Component views can't be moved!");
                    }
                    vcAppElement.traverseAndSetQueriesAsDirty();
                    view.renderer.detachView(view_12.flattenNestedViewRenderNodes(view.rootNodesOrAppElements));
                    // TODO: This is only needed when a view is destroyed,
                    // not when it is detached for reordering with ng-for...
                    view.changeDetector.remove();
                    return view;
                };
                AppViewManager_ = __decorate([
                    di_31.Injectable(),
                    __param(1, di_31.Inject(application_tokens_3.APP_ID)), 
                    __metadata('design:paramtypes', [api_4.RootRenderer, String])
                ], AppViewManager_);
                return AppViewManager_;
            }(AppViewManager));
            exports_185("AppViewManager_", AppViewManager_);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/linker/dynamic_component_loader", ['angular2/src/core/di', "test/node_modules/angular2/ts/src/core/linker/compiler", 'angular2/src/facade/lang', 'angular2/src/core/linker/view_manager'], function(exports_186, context_186) {
    "use strict";
    var __moduleName = context_186 && context_186.id;
    var di_32, compiler_4, lang_104, view_manager_1;
    var ComponentRef, ComponentRef_, DynamicComponentLoader, DynamicComponentLoader_;
    return {
        setters:[
            function (di_32_1) {
                di_32 = di_32_1;
            },
            function (compiler_4_1) {
                compiler_4 = compiler_4_1;
            },
            function (lang_104_1) {
                lang_104 = lang_104_1;
            },
            function (view_manager_1_1) {
                view_manager_1 = view_manager_1_1;
            }],
        execute: function() {
            /**
             * Represents an instance of a Component created via {@link DynamicComponentLoader}.
             *
             * `ComponentRef` provides access to the Component Instance as well other objects related to this
             * Component Instance and allows you to destroy the Component Instance via the {@link #dispose}
             * method.
             */
            ComponentRef = (function () {
                function ComponentRef() {
                }
                Object.defineProperty(ComponentRef.prototype, "hostView", {
                    /**
                     * The {@link ViewRef} of the Host View of this Component instance.
                     */
                    get: function () {
                        return this.location.internalElement.parentView.ref;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ComponentRef.prototype, "hostComponent", {
                    /**
                     * @internal
                     *
                     * The instance of the component.
                     *
                     * TODO(i): this api should be removed
                     */
                    get: function () { return this.instance; },
                    enumerable: true,
                    configurable: true
                });
                return ComponentRef;
            }());
            exports_186("ComponentRef", ComponentRef);
            ComponentRef_ = (function (_super) {
                __extends(ComponentRef_, _super);
                /**
                 * TODO(i): refactor into public/private fields
                 */
                function ComponentRef_(location, instance, componentType, injector, _dispose) {
                    _super.call(this);
                    this._dispose = _dispose;
                    this.location = location;
                    this.instance = instance;
                    this.componentType = componentType;
                    this.injector = injector;
                }
                Object.defineProperty(ComponentRef_.prototype, "hostComponentType", {
                    /**
                     * @internal
                     *
                     * Returns the type of this Component instance.
                     *
                     * TODO(i): this api should be removed
                     */
                    get: function () { return this.componentType; },
                    enumerable: true,
                    configurable: true
                });
                ComponentRef_.prototype.dispose = function () { this._dispose(); };
                return ComponentRef_;
            }(ComponentRef));
            exports_186("ComponentRef_", ComponentRef_);
            /**
             * Service for instantiating a Component and attaching it to a View at a specified location.
             */
            DynamicComponentLoader = (function () {
                function DynamicComponentLoader() {
                }
                return DynamicComponentLoader;
            }());
            exports_186("DynamicComponentLoader", DynamicComponentLoader);
            DynamicComponentLoader_ = (function (_super) {
                __extends(DynamicComponentLoader_, _super);
                function DynamicComponentLoader_(_compiler, _viewManager) {
                    _super.call(this);
                    this._compiler = _compiler;
                    this._viewManager = _viewManager;
                }
                DynamicComponentLoader_.prototype.loadAsRoot = function (type, overrideSelector, injector, onDispose, projectableNodes) {
                    var _this = this;
                    return this._compiler.compileInHost(type).then(function (hostProtoViewRef) {
                        var hostViewRef = _this._viewManager.createRootHostView(hostProtoViewRef, overrideSelector, injector, projectableNodes);
                        var newLocation = _this._viewManager.getHostElement(hostViewRef);
                        var component = _this._viewManager.getComponent(newLocation);
                        var dispose = function () {
                            if (lang_104.isPresent(onDispose)) {
                                onDispose();
                            }
                            _this._viewManager.destroyRootHostView(hostViewRef);
                        };
                        return new ComponentRef_(newLocation, component, type, injector, dispose);
                    });
                };
                DynamicComponentLoader_.prototype.loadIntoLocation = function (type, hostLocation, anchorName, providers, projectableNodes) {
                    if (providers === void 0) { providers = null; }
                    if (projectableNodes === void 0) { projectableNodes = null; }
                    return this.loadNextToLocation(type, this._viewManager.getNamedElementInComponentView(hostLocation, anchorName), providers, projectableNodes);
                };
                DynamicComponentLoader_.prototype.loadNextToLocation = function (type, location, providers, projectableNodes) {
                    var _this = this;
                    if (providers === void 0) { providers = null; }
                    if (projectableNodes === void 0) { projectableNodes = null; }
                    return this._compiler.compileInHost(type).then(function (hostProtoViewRef) {
                        var viewContainer = _this._viewManager.getViewContainer(location);
                        var hostViewRef = viewContainer.createHostView(hostProtoViewRef, viewContainer.length, providers, projectableNodes);
                        var newLocation = _this._viewManager.getHostElement(hostViewRef);
                        var component = _this._viewManager.getComponent(newLocation);
                        var dispose = function () {
                            var index = viewContainer.indexOf(hostViewRef);
                            if (!hostViewRef.destroyed && index !== -1) {
                                viewContainer.remove(index);
                            }
                        };
                        return new ComponentRef_(newLocation, component, type, null, dispose);
                    });
                };
                DynamicComponentLoader_ = __decorate([
                    di_32.Injectable(), 
                    __metadata('design:paramtypes', [compiler_4.Compiler, view_manager_1.AppViewManager])
                ], DynamicComponentLoader_);
                return DynamicComponentLoader_;
            }(DynamicComponentLoader));
            exports_186("DynamicComponentLoader_", DynamicComponentLoader_);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/linker", ["test/node_modules/angular2/ts/src/core/linker/directive_resolver", "test/node_modules/angular2/ts/src/core/linker/view_resolver", "test/node_modules/angular2/ts/src/core/linker/compiler", "test/node_modules/angular2/ts/src/core/linker/view_manager", "test/node_modules/angular2/ts/src/core/linker/query_list", "test/node_modules/angular2/ts/src/core/linker/dynamic_component_loader", "test/node_modules/angular2/ts/src/core/linker/element_ref", "test/node_modules/angular2/ts/src/core/linker/template_ref", "test/node_modules/angular2/ts/src/core/linker/view_ref", "test/node_modules/angular2/ts/src/core/linker/view_container_ref"], function(exports_187, context_187) {
    "use strict";
    var __moduleName = context_187 && context_187.id;
    return {
        setters:[
            function (directive_resolver_3_1) {
                exports_187({
                    "DirectiveResolver": directive_resolver_3_1["DirectiveResolver"]
                });
            },
            function (view_resolver_2_1) {
                exports_187({
                    "ViewResolver": view_resolver_2_1["ViewResolver"]
                });
            },
            function (compiler_5_1) {
                exports_187({
                    "Compiler": compiler_5_1["Compiler"]
                });
            },
            function (view_manager_2_1) {
                exports_187({
                    "AppViewManager": view_manager_2_1["AppViewManager"]
                });
            },
            function (query_list_2_1) {
                exports_187({
                    "QueryList": query_list_2_1["QueryList"]
                });
            },
            function (dynamic_component_loader_2_1) {
                exports_187({
                    "DynamicComponentLoader": dynamic_component_loader_2_1["DynamicComponentLoader"]
                });
                exports_187({
                    "ComponentRef": dynamic_component_loader_2_1["ComponentRef"]
                });
            },
            function (element_ref_3_1) {
                exports_187({
                    "ElementRef": element_ref_3_1["ElementRef"]
                });
            },
            function (template_ref_2_1) {
                exports_187({
                    "TemplateRef": template_ref_2_1["TemplateRef"]
                });
            },
            function (view_ref_4_1) {
                exports_187({
                    "EmbeddedViewRef": view_ref_4_1["EmbeddedViewRef"],
                    "HostViewRef": view_ref_4_1["HostViewRef"],
                    "ViewRef": view_ref_4_1["ViewRef"],
                    "HostViewFactoryRef": view_ref_4_1["HostViewFactoryRef"]
                });
            },
            function (view_container_ref_3_1) {
                exports_187({
                    "ViewContainerRef": view_container_ref_3_1["ViewContainerRef"]
                });
            }],
        execute: function() {
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/debug/debug_node", ['angular2/src/facade/lang', 'angular2/src/facade/collection'], function(exports_188, context_188) {
    "use strict";
    var __moduleName = context_188 && context_188.id;
    var lang_105, collection_43;
    var EventListener, DebugNode, DebugElement, _nativeNodeToDebugNode;
    function asNativeElements(debugEls) {
        return debugEls.map(function (el) { return el.nativeElement; });
    }
    exports_188("asNativeElements", asNativeElements);
    function _queryElementChildren(element, predicate, matches) {
        element.childNodes.forEach(function (node) {
            if (node instanceof DebugElement) {
                if (predicate(node)) {
                    matches.push(node);
                }
                _queryElementChildren(node, predicate, matches);
            }
        });
    }
    function _queryNodeChildren(parentNode, predicate, matches) {
        if (parentNode instanceof DebugElement) {
            parentNode.childNodes.forEach(function (node) {
                if (predicate(node)) {
                    matches.push(node);
                }
                if (node instanceof DebugElement) {
                    _queryNodeChildren(node, predicate, matches);
                }
            });
        }
    }
    function getDebugNode(nativeNode) {
        return _nativeNodeToDebugNode.get(nativeNode);
    }
    exports_188("getDebugNode", getDebugNode);
    function getAllDebugNodes() {
        return collection_43.MapWrapper.values(_nativeNodeToDebugNode);
    }
    exports_188("getAllDebugNodes", getAllDebugNodes);
    function indexDebugNode(node) {
        _nativeNodeToDebugNode.set(node.nativeNode, node);
    }
    exports_188("indexDebugNode", indexDebugNode);
    function removeDebugNodeFromIndex(node) {
        _nativeNodeToDebugNode.delete(node.nativeNode);
    }
    exports_188("removeDebugNodeFromIndex", removeDebugNodeFromIndex);
    return {
        setters:[
            function (lang_105_1) {
                lang_105 = lang_105_1;
            },
            function (collection_43_1) {
                collection_43 = collection_43_1;
            }],
        execute: function() {
            EventListener = (function () {
                function EventListener(name, callback) {
                    this.name = name;
                    this.callback = callback;
                }
                ;
                return EventListener;
            }());
            exports_188("EventListener", EventListener);
            DebugNode = (function () {
                function DebugNode(nativeNode, parent) {
                    this.nativeNode = nativeNode;
                    if (lang_105.isPresent(parent) && parent instanceof DebugElement) {
                        parent.addChild(this);
                    }
                    else {
                        this.parent = null;
                    }
                    this.listeners = [];
                    this.providerTokens = [];
                }
                DebugNode.prototype.setDebugInfo = function (info) {
                    this.injector = info.injector;
                    this.providerTokens = info.providerTokens;
                    this.locals = info.locals;
                    this.componentInstance = info.component;
                };
                DebugNode.prototype.inject = function (token) { return this.injector.get(token); };
                DebugNode.prototype.getLocal = function (name) { return this.locals.get(name); };
                return DebugNode;
            }());
            exports_188("DebugNode", DebugNode);
            DebugElement = (function (_super) {
                __extends(DebugElement, _super);
                function DebugElement(nativeNode, parent) {
                    _super.call(this, nativeNode, parent);
                    this.properties = new Map();
                    this.attributes = new Map();
                    this.childNodes = [];
                    this.nativeElement = nativeNode;
                }
                DebugElement.prototype.addChild = function (child) {
                    if (lang_105.isPresent(child)) {
                        this.childNodes.push(child);
                        child.parent = this;
                    }
                };
                DebugElement.prototype.removeChild = function (child) {
                    var childIndex = this.childNodes.indexOf(child);
                    if (childIndex !== -1) {
                        child.parent = null;
                        this.childNodes.splice(childIndex, 1);
                    }
                };
                DebugElement.prototype.insertChildrenAfter = function (child, newChildren) {
                    var siblingIndex = this.childNodes.indexOf(child);
                    if (siblingIndex !== -1) {
                        var previousChildren = this.childNodes.slice(0, siblingIndex + 1);
                        var nextChildren = this.childNodes.slice(siblingIndex + 1);
                        this.childNodes =
                            collection_43.ListWrapper.concat(collection_43.ListWrapper.concat(previousChildren, newChildren), nextChildren);
                        for (var i = 0; i < newChildren.length; ++i) {
                            var newChild = newChildren[i];
                            if (lang_105.isPresent(newChild.parent)) {
                                newChild.parent.removeChild(newChild);
                            }
                            newChild.parent = this;
                        }
                    }
                };
                DebugElement.prototype.query = function (predicate) {
                    var results = this.queryAll(predicate);
                    return results.length > 0 ? results[0] : null;
                };
                DebugElement.prototype.queryAll = function (predicate) {
                    var matches = [];
                    _queryElementChildren(this, predicate, matches);
                    return matches;
                };
                DebugElement.prototype.queryAllNodes = function (predicate) {
                    var matches = [];
                    _queryNodeChildren(this, predicate, matches);
                    return matches;
                };
                Object.defineProperty(DebugElement.prototype, "children", {
                    get: function () {
                        var children = [];
                        this.childNodes.forEach(function (node) {
                            if (node instanceof DebugElement) {
                                children.push(node);
                            }
                        });
                        return children;
                    },
                    enumerable: true,
                    configurable: true
                });
                DebugElement.prototype.triggerEventHandler = function (eventName, eventObj) {
                    this.listeners.forEach(function (listener) {
                        if (listener.name == eventName) {
                            listener.callback(eventObj);
                        }
                    });
                };
                return DebugElement;
            }(DebugNode));
            exports_188("DebugElement", DebugElement);
            // Need to keep the nodes in a global Map so that multiple angular apps are supported.
            _nativeNodeToDebugNode = new Map();
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/testability/testability", ['angular2/src/core/di', 'angular2/src/facade/collection', 'angular2/src/facade/lang', 'angular2/src/facade/exceptions', "test/node_modules/angular2/ts/src/core/zone/ng_zone", 'angular2/src/facade/async'], function(exports_189, context_189) {
    "use strict";
    var __moduleName = context_189 && context_189.id;
    var di_33, collection_44, lang_106, exceptions_38, ng_zone_3, async_18;
    var Testability, TestabilityRegistry, _NoopGetTestability, _testabilityGetter;
    /**
     * Set the {@link GetTestability} implementation used by the Angular testing framework.
     */
    function setTestabilityGetter(getter) {
        _testabilityGetter = getter;
    }
    exports_189("setTestabilityGetter", setTestabilityGetter);
    return {
        setters:[
            function (di_33_1) {
                di_33 = di_33_1;
            },
            function (collection_44_1) {
                collection_44 = collection_44_1;
            },
            function (lang_106_1) {
                lang_106 = lang_106_1;
            },
            function (exceptions_38_1) {
                exceptions_38 = exceptions_38_1;
            },
            function (ng_zone_3_1) {
                ng_zone_3 = ng_zone_3_1;
            },
            function (async_18_1) {
                async_18 = async_18_1;
            }],
        execute: function() {
            /**
             * The Testability service provides testing hooks that can be accessed from
             * the browser and by services such as Protractor. Each bootstrapped Angular
             * application on the page will have an instance of Testability.
             */
            Testability = (function () {
                function Testability(_ngZone) {
                    this._ngZone = _ngZone;
                    /** @internal */
                    this._pendingCount = 0;
                    this._isZoneStable = true;
                    /**
                     * Whether any work was done since the last 'whenStable' callback. This is
                     * useful to detect if this could have potentially destabilized another
                     * component while it is stabilizing.
                     * @internal
                     */
                    this._didWork = false;
                    /** @internal */
                    this._callbacks = [];
                    this._watchAngularEvents();
                }
                /** @internal */
                Testability.prototype._watchAngularEvents = function () {
                    var _this = this;
                    async_18.ObservableWrapper.subscribe(this._ngZone.onUnstable, function (_) {
                        _this._didWork = true;
                        _this._isZoneStable = false;
                    });
                    this._ngZone.runOutsideAngular(function () {
                        async_18.ObservableWrapper.subscribe(_this._ngZone.onStable, function (_) {
                            ng_zone_3.NgZone.assertNotInAngularZone();
                            lang_106.scheduleMicroTask(function () {
                                _this._isZoneStable = true;
                                _this._runCallbacksIfReady();
                            });
                        });
                    });
                };
                Testability.prototype.increasePendingRequestCount = function () {
                    this._pendingCount += 1;
                    this._didWork = true;
                    return this._pendingCount;
                };
                Testability.prototype.decreasePendingRequestCount = function () {
                    this._pendingCount -= 1;
                    if (this._pendingCount < 0) {
                        throw new exceptions_38.BaseException('pending async requests below zero');
                    }
                    this._runCallbacksIfReady();
                    return this._pendingCount;
                };
                Testability.prototype.isStable = function () {
                    return this._isZoneStable && this._pendingCount == 0 && !this._ngZone.hasPendingMacrotasks;
                };
                /** @internal */
                Testability.prototype._runCallbacksIfReady = function () {
                    var _this = this;
                    if (this.isStable()) {
                        // Schedules the call backs in a new frame so that it is always async.
                        lang_106.scheduleMicroTask(function () {
                            while (_this._callbacks.length !== 0) {
                                (_this._callbacks.pop())(_this._didWork);
                            }
                            _this._didWork = false;
                        });
                    }
                    else {
                        // Not Ready
                        this._didWork = true;
                    }
                };
                Testability.prototype.whenStable = function (callback) {
                    this._callbacks.push(callback);
                    this._runCallbacksIfReady();
                };
                Testability.prototype.getPendingRequestCount = function () { return this._pendingCount; };
                Testability.prototype.findBindings = function (using, provider, exactMatch) {
                    // TODO(juliemr): implement.
                    return [];
                };
                Testability.prototype.findProviders = function (using, provider, exactMatch) {
                    // TODO(juliemr): implement.
                    return [];
                };
                Testability = __decorate([
                    di_33.Injectable(), 
                    __metadata('design:paramtypes', [ng_zone_3.NgZone])
                ], Testability);
                return Testability;
            }());
            exports_189("Testability", Testability);
            /**
             * A global registry of {@link Testability} instances for specific elements.
             */
            TestabilityRegistry = (function () {
                function TestabilityRegistry() {
                    /** @internal */
                    this._applications = new collection_44.Map();
                    _testabilityGetter.addToWindow(this);
                }
                TestabilityRegistry.prototype.registerApplication = function (token, testability) {
                    this._applications.set(token, testability);
                };
                TestabilityRegistry.prototype.getTestability = function (elem) { return this._applications.get(elem); };
                TestabilityRegistry.prototype.getAllTestabilities = function () { return collection_44.MapWrapper.values(this._applications); };
                TestabilityRegistry.prototype.getAllRootElements = function () { return collection_44.MapWrapper.keys(this._applications); };
                TestabilityRegistry.prototype.findTestabilityInTree = function (elem, findInAncestors) {
                    if (findInAncestors === void 0) { findInAncestors = true; }
                    return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);
                };
                TestabilityRegistry = __decorate([
                    di_33.Injectable(), 
                    __metadata('design:paramtypes', [])
                ], TestabilityRegistry);
                return TestabilityRegistry;
            }());
            exports_189("TestabilityRegistry", TestabilityRegistry);
            _NoopGetTestability = (function () {
                function _NoopGetTestability() {
                }
                _NoopGetTestability.prototype.addToWindow = function (registry) { };
                _NoopGetTestability.prototype.findTestabilityInTree = function (registry, elem, findInAncestors) {
                    return null;
                };
                _NoopGetTestability = __decorate([
                    lang_106.CONST(), 
                    __metadata('design:paramtypes', [])
                ], _NoopGetTestability);
                return _NoopGetTestability;
            }());
            _testabilityGetter = lang_106.CONST_EXPR(new _NoopGetTestability());
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/change_detection/parser/lexer", ['angular2/src/core/di/decorators', "angular2/src/facade/collection", "angular2/src/facade/lang", 'angular2/src/facade/exceptions'], function(exports_190, context_190) {
    "use strict";
    var __moduleName = context_190 && context_190.id;
    var decorators_5, collection_45, lang_107, exceptions_39;
    var TokenType, Lexer, Token, EOF, $EOF, $TAB, $LF, $VTAB, $FF, $CR, $SPACE, $BANG, $DQ, $HASH, $$, $PERCENT, $AMPERSAND, $SQ, $LPAREN, $RPAREN, $STAR, $PLUS, $COMMA, $MINUS, $PERIOD, $SLASH, $COLON, $SEMICOLON, $LT, $EQ, $GT, $QUESTION, $0, $9, $A, $E, $Z, $LBRACKET, $BACKSLASH, $RBRACKET, $CARET, $_, $a, $e, $f, $n, $r, $t, $u, $v, $z, $LBRACE, $BAR, $RBRACE, $NBSP, ScannerError, _Scanner, OPERATORS, KEYWORDS;
    function newCharacterToken(index, code) {
        return new Token(index, TokenType.Character, code, lang_107.StringWrapper.fromCharCode(code));
    }
    function newIdentifierToken(index, text) {
        return new Token(index, TokenType.Identifier, 0, text);
    }
    function newKeywordToken(index, text) {
        return new Token(index, TokenType.Keyword, 0, text);
    }
    function newOperatorToken(index, text) {
        return new Token(index, TokenType.Operator, 0, text);
    }
    function newStringToken(index, text) {
        return new Token(index, TokenType.String, 0, text);
    }
    function newNumberToken(index, n) {
        return new Token(index, TokenType.Number, n, "");
    }
    function isWhitespace(code) {
        return (code >= $TAB && code <= $SPACE) || (code == $NBSP);
    }
    function isIdentifierStart(code) {
        return ($a <= code && code <= $z) || ($A <= code && code <= $Z) || (code == $_) || (code == $$);
    }
    function isIdentifier(input) {
        if (input.length == 0)
            return false;
        var scanner = new _Scanner(input);
        if (!isIdentifierStart(scanner.peek))
            return false;
        scanner.advance();
        while (scanner.peek !== $EOF) {
            if (!isIdentifierPart(scanner.peek))
                return false;
            scanner.advance();
        }
        return true;
    }
    exports_190("isIdentifier", isIdentifier);
    function isIdentifierPart(code) {
        return ($a <= code && code <= $z) || ($A <= code && code <= $Z) || ($0 <= code && code <= $9) ||
            (code == $_) || (code == $$);
    }
    function isDigit(code) {
        return $0 <= code && code <= $9;
    }
    function isExponentStart(code) {
        return code == $e || code == $E;
    }
    function isExponentSign(code) {
        return code == $MINUS || code == $PLUS;
    }
    function unescape(code) {
        switch (code) {
            case $n:
                return $LF;
            case $f:
                return $FF;
            case $r:
                return $CR;
            case $t:
                return $TAB;
            case $v:
                return $VTAB;
            default:
                return code;
        }
    }
    return {
        setters:[
            function (decorators_5_1) {
                decorators_5 = decorators_5_1;
            },
            function (collection_45_1) {
                collection_45 = collection_45_1;
            },
            function (lang_107_1) {
                lang_107 = lang_107_1;
            },
            function (exceptions_39_1) {
                exceptions_39 = exceptions_39_1;
            }],
        execute: function() {
            (function (TokenType) {
                TokenType[TokenType["Character"] = 0] = "Character";
                TokenType[TokenType["Identifier"] = 1] = "Identifier";
                TokenType[TokenType["Keyword"] = 2] = "Keyword";
                TokenType[TokenType["String"] = 3] = "String";
                TokenType[TokenType["Operator"] = 4] = "Operator";
                TokenType[TokenType["Number"] = 5] = "Number";
            })(TokenType || (TokenType = {}));
            exports_190("TokenType", TokenType);
            Lexer = (function () {
                function Lexer() {
                }
                Lexer.prototype.tokenize = function (text) {
                    var scanner = new _Scanner(text);
                    var tokens = [];
                    var token = scanner.scanToken();
                    while (token != null) {
                        tokens.push(token);
                        token = scanner.scanToken();
                    }
                    return tokens;
                };
                Lexer = __decorate([
                    decorators_5.Injectable(), 
                    __metadata('design:paramtypes', [])
                ], Lexer);
                return Lexer;
            }());
            exports_190("Lexer", Lexer);
            Token = (function () {
                function Token(index, type, numValue, strValue) {
                    this.index = index;
                    this.type = type;
                    this.numValue = numValue;
                    this.strValue = strValue;
                }
                Token.prototype.isCharacter = function (code) {
                    return (this.type == TokenType.Character && this.numValue == code);
                };
                Token.prototype.isNumber = function () { return (this.type == TokenType.Number); };
                Token.prototype.isString = function () { return (this.type == TokenType.String); };
                Token.prototype.isOperator = function (operater) {
                    return (this.type == TokenType.Operator && this.strValue == operater);
                };
                Token.prototype.isIdentifier = function () { return (this.type == TokenType.Identifier); };
                Token.prototype.isKeyword = function () { return (this.type == TokenType.Keyword); };
                Token.prototype.isKeywordVar = function () { return (this.type == TokenType.Keyword && this.strValue == "var"); };
                Token.prototype.isKeywordNull = function () { return (this.type == TokenType.Keyword && this.strValue == "null"); };
                Token.prototype.isKeywordUndefined = function () {
                    return (this.type == TokenType.Keyword && this.strValue == "undefined");
                };
                Token.prototype.isKeywordTrue = function () { return (this.type == TokenType.Keyword && this.strValue == "true"); };
                Token.prototype.isKeywordFalse = function () { return (this.type == TokenType.Keyword && this.strValue == "false"); };
                Token.prototype.toNumber = function () {
                    // -1 instead of NULL ok?
                    return (this.type == TokenType.Number) ? this.numValue : -1;
                };
                Token.prototype.toString = function () {
                    switch (this.type) {
                        case TokenType.Character:
                        case TokenType.Identifier:
                        case TokenType.Keyword:
                        case TokenType.Operator:
                        case TokenType.String:
                            return this.strValue;
                        case TokenType.Number:
                            return this.numValue.toString();
                        default:
                            return null;
                    }
                };
                return Token;
            }());
            exports_190("Token", Token);
            exports_190("EOF", EOF = new Token(-1, TokenType.Character, 0, ""));
            exports_190("$EOF", $EOF = 0);
            exports_190("$TAB", $TAB = 9);
            exports_190("$LF", $LF = 10);
            exports_190("$VTAB", $VTAB = 11);
            exports_190("$FF", $FF = 12);
            exports_190("$CR", $CR = 13);
            exports_190("$SPACE", $SPACE = 32);
            exports_190("$BANG", $BANG = 33);
            exports_190("$DQ", $DQ = 34);
            exports_190("$HASH", $HASH = 35);
            exports_190("$$", $$ = 36);
            exports_190("$PERCENT", $PERCENT = 37);
            exports_190("$AMPERSAND", $AMPERSAND = 38);
            exports_190("$SQ", $SQ = 39);
            exports_190("$LPAREN", $LPAREN = 40);
            exports_190("$RPAREN", $RPAREN = 41);
            exports_190("$STAR", $STAR = 42);
            exports_190("$PLUS", $PLUS = 43);
            exports_190("$COMMA", $COMMA = 44);
            exports_190("$MINUS", $MINUS = 45);
            exports_190("$PERIOD", $PERIOD = 46);
            exports_190("$SLASH", $SLASH = 47);
            exports_190("$COLON", $COLON = 58);
            exports_190("$SEMICOLON", $SEMICOLON = 59);
            exports_190("$LT", $LT = 60);
            exports_190("$EQ", $EQ = 61);
            exports_190("$GT", $GT = 62);
            exports_190("$QUESTION", $QUESTION = 63);
            $0 = 48;
            $9 = 57;
            $A = 65, $E = 69, $Z = 90;
            exports_190("$LBRACKET", $LBRACKET = 91);
            exports_190("$BACKSLASH", $BACKSLASH = 92);
            exports_190("$RBRACKET", $RBRACKET = 93);
            $CARET = 94;
            $_ = 95;
            $a = 97, $e = 101, $f = 102, $n = 110, $r = 114, $t = 116, $u = 117, $v = 118, $z = 122;
            exports_190("$LBRACE", $LBRACE = 123);
            exports_190("$BAR", $BAR = 124);
            exports_190("$RBRACE", $RBRACE = 125);
            $NBSP = 160;
            ScannerError = (function (_super) {
                __extends(ScannerError, _super);
                function ScannerError(message) {
                    _super.call(this);
                    this.message = message;
                }
                ScannerError.prototype.toString = function () { return this.message; };
                return ScannerError;
            }(exceptions_39.BaseException));
            exports_190("ScannerError", ScannerError);
            _Scanner = (function () {
                function _Scanner(input) {
                    this.input = input;
                    this.peek = 0;
                    this.index = -1;
                    this.length = input.length;
                    this.advance();
                }
                _Scanner.prototype.advance = function () {
                    this.peek =
                        ++this.index >= this.length ? $EOF : lang_107.StringWrapper.charCodeAt(this.input, this.index);
                };
                _Scanner.prototype.scanToken = function () {
                    var input = this.input, length = this.length, peek = this.peek, index = this.index;
                    // Skip whitespace.
                    while (peek <= $SPACE) {
                        if (++index >= length) {
                            peek = $EOF;
                            break;
                        }
                        else {
                            peek = lang_107.StringWrapper.charCodeAt(input, index);
                        }
                    }
                    this.peek = peek;
                    this.index = index;
                    if (index >= length) {
                        return null;
                    }
                    // Handle identifiers and numbers.
                    if (isIdentifierStart(peek))
                        return this.scanIdentifier();
                    if (isDigit(peek))
                        return this.scanNumber(index);
                    var start = index;
                    switch (peek) {
                        case $PERIOD:
                            this.advance();
                            return isDigit(this.peek) ? this.scanNumber(start) : newCharacterToken(start, $PERIOD);
                        case $LPAREN:
                        case $RPAREN:
                        case $LBRACE:
                        case $RBRACE:
                        case $LBRACKET:
                        case $RBRACKET:
                        case $COMMA:
                        case $COLON:
                        case $SEMICOLON:
                            return this.scanCharacter(start, peek);
                        case $SQ:
                        case $DQ:
                            return this.scanString();
                        case $HASH:
                        case $PLUS:
                        case $MINUS:
                        case $STAR:
                        case $SLASH:
                        case $PERCENT:
                        case $CARET:
                            return this.scanOperator(start, lang_107.StringWrapper.fromCharCode(peek));
                        case $QUESTION:
                            return this.scanComplexOperator(start, '?', $PERIOD, '.');
                        case $LT:
                        case $GT:
                            return this.scanComplexOperator(start, lang_107.StringWrapper.fromCharCode(peek), $EQ, '=');
                        case $BANG:
                        case $EQ:
                            return this.scanComplexOperator(start, lang_107.StringWrapper.fromCharCode(peek), $EQ, '=', $EQ, '=');
                        case $AMPERSAND:
                            return this.scanComplexOperator(start, '&', $AMPERSAND, '&');
                        case $BAR:
                            return this.scanComplexOperator(start, '|', $BAR, '|');
                        case $NBSP:
                            while (isWhitespace(this.peek))
                                this.advance();
                            return this.scanToken();
                    }
                    this.error("Unexpected character [" + lang_107.StringWrapper.fromCharCode(peek) + "]", 0);
                    return null;
                };
                _Scanner.prototype.scanCharacter = function (start, code) {
                    this.advance();
                    return newCharacterToken(start, code);
                };
                _Scanner.prototype.scanOperator = function (start, str) {
                    this.advance();
                    return newOperatorToken(start, str);
                };
                /**
                 * Tokenize a 2/3 char long operator
                 *
                 * @param start start index in the expression
                 * @param one first symbol (always part of the operator)
                 * @param twoCode code point for the second symbol
                 * @param two second symbol (part of the operator when the second code point matches)
                 * @param threeCode code point for the third symbol
                 * @param three third symbol (part of the operator when provided and matches source expression)
                 * @returns {Token}
                 */
                _Scanner.prototype.scanComplexOperator = function (start, one, twoCode, two, threeCode, three) {
                    this.advance();
                    var str = one;
                    if (this.peek == twoCode) {
                        this.advance();
                        str += two;
                    }
                    if (lang_107.isPresent(threeCode) && this.peek == threeCode) {
                        this.advance();
                        str += three;
                    }
                    return newOperatorToken(start, str);
                };
                _Scanner.prototype.scanIdentifier = function () {
                    var start = this.index;
                    this.advance();
                    while (isIdentifierPart(this.peek))
                        this.advance();
                    var str = this.input.substring(start, this.index);
                    if (collection_45.SetWrapper.has(KEYWORDS, str)) {
                        return newKeywordToken(start, str);
                    }
                    else {
                        return newIdentifierToken(start, str);
                    }
                };
                _Scanner.prototype.scanNumber = function (start) {
                    var simple = (this.index === start);
                    this.advance(); // Skip initial digit.
                    while (true) {
                        if (isDigit(this.peek)) {
                        }
                        else if (this.peek == $PERIOD) {
                            simple = false;
                        }
                        else if (isExponentStart(this.peek)) {
                            this.advance();
                            if (isExponentSign(this.peek))
                                this.advance();
                            if (!isDigit(this.peek))
                                this.error('Invalid exponent', -1);
                            simple = false;
                        }
                        else {
                            break;
                        }
                        this.advance();
                    }
                    var str = this.input.substring(start, this.index);
                    // TODO
                    var value = simple ? lang_107.NumberWrapper.parseIntAutoRadix(str) : lang_107.NumberWrapper.parseFloat(str);
                    return newNumberToken(start, value);
                };
                _Scanner.prototype.scanString = function () {
                    var start = this.index;
                    var quote = this.peek;
                    this.advance(); // Skip initial quote.
                    var buffer;
                    var marker = this.index;
                    var input = this.input;
                    while (this.peek != quote) {
                        if (this.peek == $BACKSLASH) {
                            if (buffer == null)
                                buffer = new lang_107.StringJoiner();
                            buffer.add(input.substring(marker, this.index));
                            this.advance();
                            var unescapedCode;
                            if (this.peek == $u) {
                                // 4 character hex code for unicode character.
                                var hex = input.substring(this.index + 1, this.index + 5);
                                try {
                                    unescapedCode = lang_107.NumberWrapper.parseInt(hex, 16);
                                }
                                catch (e) {
                                    this.error("Invalid unicode escape [\\u" + hex + "]", 0);
                                }
                                for (var i = 0; i < 5; i++) {
                                    this.advance();
                                }
                            }
                            else {
                                unescapedCode = unescape(this.peek);
                                this.advance();
                            }
                            buffer.add(lang_107.StringWrapper.fromCharCode(unescapedCode));
                            marker = this.index;
                        }
                        else if (this.peek == $EOF) {
                            this.error('Unterminated quote', 0);
                        }
                        else {
                            this.advance();
                        }
                    }
                    var last = input.substring(marker, this.index);
                    this.advance(); // Skip terminating quote.
                    // Compute the unescaped string value.
                    var unescaped = last;
                    if (buffer != null) {
                        buffer.add(last);
                        unescaped = buffer.toString();
                    }
                    return newStringToken(start, unescaped);
                };
                _Scanner.prototype.error = function (message, offset) {
                    var position = this.index + offset;
                    throw new ScannerError("Lexer Error: " + message + " at column " + position + " in expression [" + this.input + "]");
                };
                return _Scanner;
            }());
            OPERATORS = collection_45.SetWrapper.createFromList([
                '+',
                '-',
                '*',
                '/',
                '%',
                '^',
                '=',
                '==',
                '!=',
                '===',
                '!==',
                '<',
                '>',
                '<=',
                '>=',
                '&&',
                '||',
                '&',
                '|',
                '!',
                '?',
                '#',
                '?.'
            ]);
            KEYWORDS = collection_45.SetWrapper.createFromList(['var', 'null', 'undefined', 'true', 'false', 'if', 'else']);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/change_detection/parser/parser", ['angular2/src/core/di/decorators', 'angular2/src/facade/lang', 'angular2/src/facade/exceptions', 'angular2/src/facade/collection', "test/node_modules/angular2/ts/src/core/change_detection/parser/lexer", 'angular2/src/core/reflection/reflection', "test/node_modules/angular2/ts/src/core/change_detection/parser/ast"], function(exports_191, context_191) {
    "use strict";
    var __moduleName = context_191 && context_191.id;
    var decorators_6, lang_108, exceptions_40, collection_46, lexer_1, reflection_9, ast_2;
    var _implicitReceiver, INTERPOLATION_REGEXP, ParseException, Parser, _ParseAST, SimpleExpressionChecker;
    return {
        setters:[
            function (decorators_6_1) {
                decorators_6 = decorators_6_1;
            },
            function (lang_108_1) {
                lang_108 = lang_108_1;
            },
            function (exceptions_40_1) {
                exceptions_40 = exceptions_40_1;
            },
            function (collection_46_1) {
                collection_46 = collection_46_1;
            },
            function (lexer_1_1) {
                lexer_1 = lexer_1_1;
            },
            function (reflection_9_1) {
                reflection_9 = reflection_9_1;
            },
            function (ast_2_1) {
                ast_2 = ast_2_1;
            }],
        execute: function() {
            _implicitReceiver = new ast_2.ImplicitReceiver();
            // TODO(tbosch): Cannot make this const/final right now because of the transpiler...
            INTERPOLATION_REGEXP = /\{\{([\s\S]*?)\}\}/g;
            ParseException = (function (_super) {
                __extends(ParseException, _super);
                function ParseException(message, input, errLocation, ctxLocation) {
                    _super.call(this, "Parser Error: " + message + " " + errLocation + " [" + input + "] in " + ctxLocation);
                }
                return ParseException;
            }(exceptions_40.BaseException));
            Parser = (function () {
                function Parser(/** @internal */ _lexer, providedReflector) {
                    if (providedReflector === void 0) { providedReflector = null; }
                    this._lexer = _lexer;
                    this._reflector = lang_108.isPresent(providedReflector) ? providedReflector : reflection_9.reflector;
                }
                Parser.prototype.parseAction = function (input, location) {
                    this._checkNoInterpolation(input, location);
                    var tokens = this._lexer.tokenize(input);
                    var ast = new _ParseAST(input, location, tokens, this._reflector, true).parseChain();
                    return new ast_2.ASTWithSource(ast, input, location);
                };
                Parser.prototype.parseBinding = function (input, location) {
                    var ast = this._parseBindingAst(input, location);
                    return new ast_2.ASTWithSource(ast, input, location);
                };
                Parser.prototype.parseSimpleBinding = function (input, location) {
                    var ast = this._parseBindingAst(input, location);
                    if (!SimpleExpressionChecker.check(ast)) {
                        throw new ParseException('Host binding expression can only contain field access and constants', input, location);
                    }
                    return new ast_2.ASTWithSource(ast, input, location);
                };
                Parser.prototype._parseBindingAst = function (input, location) {
                    // Quotes expressions use 3rd-party expression language. We don't want to use
                    // our lexer or parser for that, so we check for that ahead of time.
                    var quote = this._parseQuote(input, location);
                    if (lang_108.isPresent(quote)) {
                        return quote;
                    }
                    this._checkNoInterpolation(input, location);
                    var tokens = this._lexer.tokenize(input);
                    return new _ParseAST(input, location, tokens, this._reflector, false).parseChain();
                };
                Parser.prototype._parseQuote = function (input, location) {
                    if (lang_108.isBlank(input))
                        return null;
                    var prefixSeparatorIndex = input.indexOf(':');
                    if (prefixSeparatorIndex == -1)
                        return null;
                    var prefix = input.substring(0, prefixSeparatorIndex).trim();
                    if (!lexer_1.isIdentifier(prefix))
                        return null;
                    var uninterpretedExpression = input.substring(prefixSeparatorIndex + 1);
                    return new ast_2.Quote(prefix, uninterpretedExpression, location);
                };
                Parser.prototype.parseTemplateBindings = function (input, location) {
                    var tokens = this._lexer.tokenize(input);
                    return new _ParseAST(input, location, tokens, this._reflector, false).parseTemplateBindings();
                };
                Parser.prototype.parseInterpolation = function (input, location) {
                    var parts = lang_108.StringWrapper.split(input, INTERPOLATION_REGEXP);
                    if (parts.length <= 1) {
                        return null;
                    }
                    var strings = [];
                    var expressions = [];
                    for (var i = 0; i < parts.length; i++) {
                        var part = parts[i];
                        if (i % 2 === 0) {
                            // fixed string
                            strings.push(part);
                        }
                        else if (part.trim().length > 0) {
                            var tokens = this._lexer.tokenize(part);
                            var ast = new _ParseAST(input, location, tokens, this._reflector, false).parseChain();
                            expressions.push(ast);
                        }
                        else {
                            throw new ParseException('Blank expressions are not allowed in interpolated strings', input, "at column " + this._findInterpolationErrorColumn(parts, i) + " in", location);
                        }
                    }
                    return new ast_2.ASTWithSource(new ast_2.Interpolation(strings, expressions), input, location);
                };
                Parser.prototype.wrapLiteralPrimitive = function (input, location) {
                    return new ast_2.ASTWithSource(new ast_2.LiteralPrimitive(input), input, location);
                };
                Parser.prototype._checkNoInterpolation = function (input, location) {
                    var parts = lang_108.StringWrapper.split(input, INTERPOLATION_REGEXP);
                    if (parts.length > 1) {
                        throw new ParseException('Got interpolation ({{}}) where expression was expected', input, "at column " + this._findInterpolationErrorColumn(parts, 1) + " in", location);
                    }
                };
                Parser.prototype._findInterpolationErrorColumn = function (parts, partInErrIdx) {
                    var errLocation = '';
                    for (var j = 0; j < partInErrIdx; j++) {
                        errLocation += j % 2 === 0 ? parts[j] : "{{" + parts[j] + "}}";
                    }
                    return errLocation.length;
                };
                Parser = __decorate([
                    decorators_6.Injectable(), 
                    __metadata('design:paramtypes', [lexer_1.Lexer, reflection_9.Reflector])
                ], Parser);
                return Parser;
            }());
            exports_191("Parser", Parser);
            _ParseAST = (function () {
                function _ParseAST(input, location, tokens, reflector, parseAction) {
                    this.input = input;
                    this.location = location;
                    this.tokens = tokens;
                    this.reflector = reflector;
                    this.parseAction = parseAction;
                    this.index = 0;
                }
                _ParseAST.prototype.peek = function (offset) {
                    var i = this.index + offset;
                    return i < this.tokens.length ? this.tokens[i] : lexer_1.EOF;
                };
                Object.defineProperty(_ParseAST.prototype, "next", {
                    get: function () { return this.peek(0); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(_ParseAST.prototype, "inputIndex", {
                    get: function () {
                        return (this.index < this.tokens.length) ? this.next.index : this.input.length;
                    },
                    enumerable: true,
                    configurable: true
                });
                _ParseAST.prototype.advance = function () { this.index++; };
                _ParseAST.prototype.optionalCharacter = function (code) {
                    if (this.next.isCharacter(code)) {
                        this.advance();
                        return true;
                    }
                    else {
                        return false;
                    }
                };
                _ParseAST.prototype.optionalKeywordVar = function () {
                    if (this.peekKeywordVar()) {
                        this.advance();
                        return true;
                    }
                    else {
                        return false;
                    }
                };
                _ParseAST.prototype.peekKeywordVar = function () { return this.next.isKeywordVar() || this.next.isOperator('#'); };
                _ParseAST.prototype.expectCharacter = function (code) {
                    if (this.optionalCharacter(code))
                        return;
                    this.error("Missing expected " + lang_108.StringWrapper.fromCharCode(code));
                };
                _ParseAST.prototype.optionalOperator = function (op) {
                    if (this.next.isOperator(op)) {
                        this.advance();
                        return true;
                    }
                    else {
                        return false;
                    }
                };
                _ParseAST.prototype.expectOperator = function (operator) {
                    if (this.optionalOperator(operator))
                        return;
                    this.error("Missing expected operator " + operator);
                };
                _ParseAST.prototype.expectIdentifierOrKeyword = function () {
                    var n = this.next;
                    if (!n.isIdentifier() && !n.isKeyword()) {
                        this.error("Unexpected token " + n + ", expected identifier or keyword");
                    }
                    this.advance();
                    return n.toString();
                };
                _ParseAST.prototype.expectIdentifierOrKeywordOrString = function () {
                    var n = this.next;
                    if (!n.isIdentifier() && !n.isKeyword() && !n.isString()) {
                        this.error("Unexpected token " + n + ", expected identifier, keyword, or string");
                    }
                    this.advance();
                    return n.toString();
                };
                _ParseAST.prototype.parseChain = function () {
                    var exprs = [];
                    while (this.index < this.tokens.length) {
                        var expr = this.parsePipe();
                        exprs.push(expr);
                        if (this.optionalCharacter(lexer_1.$SEMICOLON)) {
                            if (!this.parseAction) {
                                this.error("Binding expression cannot contain chained expression");
                            }
                            while (this.optionalCharacter(lexer_1.$SEMICOLON)) {
                            } // read all semicolons
                        }
                        else if (this.index < this.tokens.length) {
                            this.error("Unexpected token '" + this.next + "'");
                        }
                    }
                    if (exprs.length == 0)
                        return new ast_2.EmptyExpr();
                    if (exprs.length == 1)
                        return exprs[0];
                    return new ast_2.Chain(exprs);
                };
                _ParseAST.prototype.parsePipe = function () {
                    var result = this.parseExpression();
                    if (this.optionalOperator("|")) {
                        if (this.parseAction) {
                            this.error("Cannot have a pipe in an action expression");
                        }
                        do {
                            var name = this.expectIdentifierOrKeyword();
                            var args = [];
                            while (this.optionalCharacter(lexer_1.$COLON)) {
                                args.push(this.parseExpression());
                            }
                            result = new ast_2.BindingPipe(result, name, args);
                        } while (this.optionalOperator("|"));
                    }
                    return result;
                };
                _ParseAST.prototype.parseExpression = function () { return this.parseConditional(); };
                _ParseAST.prototype.parseConditional = function () {
                    var start = this.inputIndex;
                    var result = this.parseLogicalOr();
                    if (this.optionalOperator('?')) {
                        var yes = this.parsePipe();
                        if (!this.optionalCharacter(lexer_1.$COLON)) {
                            var end = this.inputIndex;
                            var expression = this.input.substring(start, end);
                            this.error("Conditional expression " + expression + " requires all 3 expressions");
                        }
                        var no = this.parsePipe();
                        return new ast_2.Conditional(result, yes, no);
                    }
                    else {
                        return result;
                    }
                };
                _ParseAST.prototype.parseLogicalOr = function () {
                    // '||'
                    var result = this.parseLogicalAnd();
                    while (this.optionalOperator('||')) {
                        result = new ast_2.Binary('||', result, this.parseLogicalAnd());
                    }
                    return result;
                };
                _ParseAST.prototype.parseLogicalAnd = function () {
                    // '&&'
                    var result = this.parseEquality();
                    while (this.optionalOperator('&&')) {
                        result = new ast_2.Binary('&&', result, this.parseEquality());
                    }
                    return result;
                };
                _ParseAST.prototype.parseEquality = function () {
                    // '==','!=','===','!=='
                    var result = this.parseRelational();
                    while (true) {
                        if (this.optionalOperator('==')) {
                            result = new ast_2.Binary('==', result, this.parseRelational());
                        }
                        else if (this.optionalOperator('===')) {
                            result = new ast_2.Binary('===', result, this.parseRelational());
                        }
                        else if (this.optionalOperator('!=')) {
                            result = new ast_2.Binary('!=', result, this.parseRelational());
                        }
                        else if (this.optionalOperator('!==')) {
                            result = new ast_2.Binary('!==', result, this.parseRelational());
                        }
                        else {
                            return result;
                        }
                    }
                };
                _ParseAST.prototype.parseRelational = function () {
                    // '<', '>', '<=', '>='
                    var result = this.parseAdditive();
                    while (true) {
                        if (this.optionalOperator('<')) {
                            result = new ast_2.Binary('<', result, this.parseAdditive());
                        }
                        else if (this.optionalOperator('>')) {
                            result = new ast_2.Binary('>', result, this.parseAdditive());
                        }
                        else if (this.optionalOperator('<=')) {
                            result = new ast_2.Binary('<=', result, this.parseAdditive());
                        }
                        else if (this.optionalOperator('>=')) {
                            result = new ast_2.Binary('>=', result, this.parseAdditive());
                        }
                        else {
                            return result;
                        }
                    }
                };
                _ParseAST.prototype.parseAdditive = function () {
                    // '+', '-'
                    var result = this.parseMultiplicative();
                    while (true) {
                        if (this.optionalOperator('+')) {
                            result = new ast_2.Binary('+', result, this.parseMultiplicative());
                        }
                        else if (this.optionalOperator('-')) {
                            result = new ast_2.Binary('-', result, this.parseMultiplicative());
                        }
                        else {
                            return result;
                        }
                    }
                };
                _ParseAST.prototype.parseMultiplicative = function () {
                    // '*', '%', '/'
                    var result = this.parsePrefix();
                    while (true) {
                        if (this.optionalOperator('*')) {
                            result = new ast_2.Binary('*', result, this.parsePrefix());
                        }
                        else if (this.optionalOperator('%')) {
                            result = new ast_2.Binary('%', result, this.parsePrefix());
                        }
                        else if (this.optionalOperator('/')) {
                            result = new ast_2.Binary('/', result, this.parsePrefix());
                        }
                        else {
                            return result;
                        }
                    }
                };
                _ParseAST.prototype.parsePrefix = function () {
                    if (this.optionalOperator('+')) {
                        return this.parsePrefix();
                    }
                    else if (this.optionalOperator('-')) {
                        return new ast_2.Binary('-', new ast_2.LiteralPrimitive(0), this.parsePrefix());
                    }
                    else if (this.optionalOperator('!')) {
                        return new ast_2.PrefixNot(this.parsePrefix());
                    }
                    else {
                        return this.parseCallChain();
                    }
                };
                _ParseAST.prototype.parseCallChain = function () {
                    var result = this.parsePrimary();
                    while (true) {
                        if (this.optionalCharacter(lexer_1.$PERIOD)) {
                            result = this.parseAccessMemberOrMethodCall(result, false);
                        }
                        else if (this.optionalOperator('?.')) {
                            result = this.parseAccessMemberOrMethodCall(result, true);
                        }
                        else if (this.optionalCharacter(lexer_1.$LBRACKET)) {
                            var key = this.parsePipe();
                            this.expectCharacter(lexer_1.$RBRACKET);
                            if (this.optionalOperator("=")) {
                                var value = this.parseConditional();
                                result = new ast_2.KeyedWrite(result, key, value);
                            }
                            else {
                                result = new ast_2.KeyedRead(result, key);
                            }
                        }
                        else if (this.optionalCharacter(lexer_1.$LPAREN)) {
                            var args = this.parseCallArguments();
                            this.expectCharacter(lexer_1.$RPAREN);
                            result = new ast_2.FunctionCall(result, args);
                        }
                        else {
                            return result;
                        }
                    }
                };
                _ParseAST.prototype.parsePrimary = function () {
                    if (this.optionalCharacter(lexer_1.$LPAREN)) {
                        var result = this.parsePipe();
                        this.expectCharacter(lexer_1.$RPAREN);
                        return result;
                    }
                    else if (this.next.isKeywordNull() || this.next.isKeywordUndefined()) {
                        this.advance();
                        return new ast_2.LiteralPrimitive(null);
                    }
                    else if (this.next.isKeywordTrue()) {
                        this.advance();
                        return new ast_2.LiteralPrimitive(true);
                    }
                    else if (this.next.isKeywordFalse()) {
                        this.advance();
                        return new ast_2.LiteralPrimitive(false);
                    }
                    else if (this.optionalCharacter(lexer_1.$LBRACKET)) {
                        var elements = this.parseExpressionList(lexer_1.$RBRACKET);
                        this.expectCharacter(lexer_1.$RBRACKET);
                        return new ast_2.LiteralArray(elements);
                    }
                    else if (this.next.isCharacter(lexer_1.$LBRACE)) {
                        return this.parseLiteralMap();
                    }
                    else if (this.next.isIdentifier()) {
                        return this.parseAccessMemberOrMethodCall(_implicitReceiver, false);
                    }
                    else if (this.next.isNumber()) {
                        var value = this.next.toNumber();
                        this.advance();
                        return new ast_2.LiteralPrimitive(value);
                    }
                    else if (this.next.isString()) {
                        var literalValue = this.next.toString();
                        this.advance();
                        return new ast_2.LiteralPrimitive(literalValue);
                    }
                    else if (this.index >= this.tokens.length) {
                        this.error("Unexpected end of expression: " + this.input);
                    }
                    else {
                        this.error("Unexpected token " + this.next);
                    }
                    // error() throws, so we don't reach here.
                    throw new exceptions_40.BaseException("Fell through all cases in parsePrimary");
                };
                _ParseAST.prototype.parseExpressionList = function (terminator) {
                    var result = [];
                    if (!this.next.isCharacter(terminator)) {
                        do {
                            result.push(this.parsePipe());
                        } while (this.optionalCharacter(lexer_1.$COMMA));
                    }
                    return result;
                };
                _ParseAST.prototype.parseLiteralMap = function () {
                    var keys = [];
                    var values = [];
                    this.expectCharacter(lexer_1.$LBRACE);
                    if (!this.optionalCharacter(lexer_1.$RBRACE)) {
                        do {
                            var key = this.expectIdentifierOrKeywordOrString();
                            keys.push(key);
                            this.expectCharacter(lexer_1.$COLON);
                            values.push(this.parsePipe());
                        } while (this.optionalCharacter(lexer_1.$COMMA));
                        this.expectCharacter(lexer_1.$RBRACE);
                    }
                    return new ast_2.LiteralMap(keys, values);
                };
                _ParseAST.prototype.parseAccessMemberOrMethodCall = function (receiver, isSafe) {
                    if (isSafe === void 0) { isSafe = false; }
                    var id = this.expectIdentifierOrKeyword();
                    if (this.optionalCharacter(lexer_1.$LPAREN)) {
                        var args = this.parseCallArguments();
                        this.expectCharacter(lexer_1.$RPAREN);
                        var fn = this.reflector.method(id);
                        return isSafe ? new ast_2.SafeMethodCall(receiver, id, fn, args) :
                            new ast_2.MethodCall(receiver, id, fn, args);
                    }
                    else {
                        if (isSafe) {
                            if (this.optionalOperator("=")) {
                                this.error("The '?.' operator cannot be used in the assignment");
                            }
                            else {
                                return new ast_2.SafePropertyRead(receiver, id, this.reflector.getter(id));
                            }
                        }
                        else {
                            if (this.optionalOperator("=")) {
                                if (!this.parseAction) {
                                    this.error("Bindings cannot contain assignments");
                                }
                                var value = this.parseConditional();
                                return new ast_2.PropertyWrite(receiver, id, this.reflector.setter(id), value);
                            }
                            else {
                                return new ast_2.PropertyRead(receiver, id, this.reflector.getter(id));
                            }
                        }
                    }
                    return null;
                };
                _ParseAST.prototype.parseCallArguments = function () {
                    if (this.next.isCharacter(lexer_1.$RPAREN))
                        return [];
                    var positionals = [];
                    do {
                        positionals.push(this.parsePipe());
                    } while (this.optionalCharacter(lexer_1.$COMMA));
                    return positionals;
                };
                _ParseAST.prototype.parseBlockContent = function () {
                    if (!this.parseAction) {
                        this.error("Binding expression cannot contain chained expression");
                    }
                    var exprs = [];
                    while (this.index < this.tokens.length && !this.next.isCharacter(lexer_1.$RBRACE)) {
                        var expr = this.parseExpression();
                        exprs.push(expr);
                        if (this.optionalCharacter(lexer_1.$SEMICOLON)) {
                            while (this.optionalCharacter(lexer_1.$SEMICOLON)) {
                            } // read all semicolons
                        }
                    }
                    if (exprs.length == 0)
                        return new ast_2.EmptyExpr();
                    if (exprs.length == 1)
                        return exprs[0];
                    return new ast_2.Chain(exprs);
                };
                /**
                 * An identifier, a keyword, a string with an optional `-` inbetween.
                 */
                _ParseAST.prototype.expectTemplateBindingKey = function () {
                    var result = '';
                    var operatorFound = false;
                    do {
                        result += this.expectIdentifierOrKeywordOrString();
                        operatorFound = this.optionalOperator('-');
                        if (operatorFound) {
                            result += '-';
                        }
                    } while (operatorFound);
                    return result.toString();
                };
                _ParseAST.prototype.parseTemplateBindings = function () {
                    var bindings = [];
                    var prefix = null;
                    while (this.index < this.tokens.length) {
                        var keyIsVar = this.optionalKeywordVar();
                        var key = this.expectTemplateBindingKey();
                        if (!keyIsVar) {
                            if (prefix == null) {
                                prefix = key;
                            }
                            else {
                                key = prefix + key[0].toUpperCase() + key.substring(1);
                            }
                        }
                        this.optionalCharacter(lexer_1.$COLON);
                        var name = null;
                        var expression = null;
                        if (keyIsVar) {
                            if (this.optionalOperator("=")) {
                                name = this.expectTemplateBindingKey();
                            }
                            else {
                                name = '\$implicit';
                            }
                        }
                        else if (this.next !== lexer_1.EOF && !this.peekKeywordVar()) {
                            var start = this.inputIndex;
                            var ast = this.parsePipe();
                            var source = this.input.substring(start, this.inputIndex);
                            expression = new ast_2.ASTWithSource(ast, source, this.location);
                        }
                        bindings.push(new ast_2.TemplateBinding(key, keyIsVar, name, expression));
                        if (!this.optionalCharacter(lexer_1.$SEMICOLON)) {
                            this.optionalCharacter(lexer_1.$COMMA);
                        }
                    }
                    return bindings;
                };
                _ParseAST.prototype.error = function (message, index) {
                    if (index === void 0) { index = null; }
                    if (lang_108.isBlank(index))
                        index = this.index;
                    var location = (index < this.tokens.length) ? "at column " + (this.tokens[index].index + 1) + " in" :
                        "at the end of the expression";
                    throw new ParseException(message, this.input, location, this.location);
                };
                return _ParseAST;
            }());
            exports_191("_ParseAST", _ParseAST);
            SimpleExpressionChecker = (function () {
                function SimpleExpressionChecker() {
                    this.simple = true;
                }
                SimpleExpressionChecker.check = function (ast) {
                    var s = new SimpleExpressionChecker();
                    ast.visit(s);
                    return s.simple;
                };
                SimpleExpressionChecker.prototype.visitImplicitReceiver = function (ast) { };
                SimpleExpressionChecker.prototype.visitInterpolation = function (ast) { this.simple = false; };
                SimpleExpressionChecker.prototype.visitLiteralPrimitive = function (ast) { };
                SimpleExpressionChecker.prototype.visitPropertyRead = function (ast) { };
                SimpleExpressionChecker.prototype.visitPropertyWrite = function (ast) { this.simple = false; };
                SimpleExpressionChecker.prototype.visitSafePropertyRead = function (ast) { this.simple = false; };
                SimpleExpressionChecker.prototype.visitMethodCall = function (ast) { this.simple = false; };
                SimpleExpressionChecker.prototype.visitSafeMethodCall = function (ast) { this.simple = false; };
                SimpleExpressionChecker.prototype.visitFunctionCall = function (ast) { this.simple = false; };
                SimpleExpressionChecker.prototype.visitLiteralArray = function (ast) { this.visitAll(ast.expressions); };
                SimpleExpressionChecker.prototype.visitLiteralMap = function (ast) { this.visitAll(ast.values); };
                SimpleExpressionChecker.prototype.visitBinary = function (ast) { this.simple = false; };
                SimpleExpressionChecker.prototype.visitPrefixNot = function (ast) { this.simple = false; };
                SimpleExpressionChecker.prototype.visitConditional = function (ast) { this.simple = false; };
                SimpleExpressionChecker.prototype.visitPipe = function (ast) { this.simple = false; };
                SimpleExpressionChecker.prototype.visitKeyedRead = function (ast) { this.simple = false; };
                SimpleExpressionChecker.prototype.visitKeyedWrite = function (ast) { this.simple = false; };
                SimpleExpressionChecker.prototype.visitAll = function (asts) {
                    var res = collection_46.ListWrapper.createFixedSize(asts.length);
                    for (var i = 0; i < asts.length; ++i) {
                        res[i] = asts[i].visit(this);
                    }
                    return res;
                };
                SimpleExpressionChecker.prototype.visitChain = function (ast) { this.simple = false; };
                SimpleExpressionChecker.prototype.visitQuote = function (ast) { this.simple = false; };
                return SimpleExpressionChecker;
            }());
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/change_detection/exceptions", ["angular2/src/facade/exceptions"], function(exports_192, context_192) {
    "use strict";
    var __moduleName = context_192 && context_192.id;
    var exceptions_41;
    var ExpressionChangedAfterItHasBeenCheckedException, ChangeDetectionError, DehydratedException, EventEvaluationError, EventEvaluationErrorContext;
    return {
        setters:[
            function (exceptions_41_1) {
                exceptions_41 = exceptions_41_1;
            }],
        execute: function() {
            /**
             * An error thrown if application changes model breaking the top-down data flow.
             *
             * This exception is only thrown in dev mode.
             *
             * <!-- TODO: Add a link once the dev mode option is configurable -->
             *
             * ### Example
             *
             * ```typescript
             * @Component({
             *   selector: 'parent',
             *   template: `
             *     <child [prop]="parentProp"></child>
             *   `,
             *   directives: [forwardRef(() => Child)]
             * })
             * class Parent {
             *   parentProp = "init";
             * }
             *
             * @Directive({selector: 'child', inputs: ['prop']})
             * class Child {
             *   constructor(public parent: Parent) {}
             *
             *   set prop(v) {
             *     // this updates the parent property, which is disallowed during change detection
             *     // this will result in ExpressionChangedAfterItHasBeenCheckedException
             *     this.parent.parentProp = "updated";
             *   }
             * }
             * ```
             */
            ExpressionChangedAfterItHasBeenCheckedException = (function (_super) {
                __extends(ExpressionChangedAfterItHasBeenCheckedException, _super);
                function ExpressionChangedAfterItHasBeenCheckedException(exp, oldValue, currValue, context) {
                    _super.call(this, ("Expression '" + exp + "' has changed after it was checked. ") +
                        ("Previous value: '" + oldValue + "'. Current value: '" + currValue + "'"));
                }
                return ExpressionChangedAfterItHasBeenCheckedException;
            }(exceptions_41.BaseException));
            exports_192("ExpressionChangedAfterItHasBeenCheckedException", ExpressionChangedAfterItHasBeenCheckedException);
            /**
             * Thrown when an expression evaluation raises an exception.
             *
             * This error wraps the original exception to attach additional contextual information that can
             * be useful for debugging.
             *
             * ### Example ([live demo](http://plnkr.co/edit/2Kywoz?p=preview))
             *
             * ```typescript
             * @Directive({selector: 'child', inputs: ['prop']})
             * class Child {
             *   prop;
             * }
             *
             * @Component({
             *   selector: 'app',
             *   template: `
             *     <child [prop]="field.first"></child>
             *   `,
             *   directives: [Child]
             * })
             * class App {
             *   field = null;
             * }
             *
             * bootstrap(App);
             * ```
             *
             * You can access the original exception and stack through the `originalException` and
             * `originalStack` properties.
             */
            ChangeDetectionError = (function (_super) {
                __extends(ChangeDetectionError, _super);
                function ChangeDetectionError(exp, originalException, originalStack, context) {
                    _super.call(this, originalException + " in [" + exp + "]", originalException, originalStack, context);
                    this.location = exp;
                }
                return ChangeDetectionError;
            }(exceptions_41.WrappedException));
            exports_192("ChangeDetectionError", ChangeDetectionError);
            /**
             * Thrown when change detector executes on dehydrated view.
             *
             * This error indicates a bug in the framework.
             *
             * This is an internal Angular error.
             */
            DehydratedException = (function (_super) {
                __extends(DehydratedException, _super);
                function DehydratedException(details) {
                    _super.call(this, "Attempt to use a dehydrated detector: " + details);
                }
                return DehydratedException;
            }(exceptions_41.BaseException));
            exports_192("DehydratedException", DehydratedException);
            /**
             * Wraps an exception thrown by an event handler.
             */
            EventEvaluationError = (function (_super) {
                __extends(EventEvaluationError, _super);
                function EventEvaluationError(eventName, originalException, originalStack, context) {
                    _super.call(this, "Error during evaluation of \"" + eventName + "\"", originalException, originalStack, context);
                }
                return EventEvaluationError;
            }(exceptions_41.WrappedException));
            exports_192("EventEvaluationError", EventEvaluationError);
            /**
             * Error context included when an event handler throws an exception.
             */
            EventEvaluationErrorContext = (function () {
                function EventEvaluationErrorContext(element, componentElement, context, locals, injector) {
                    this.element = element;
                    this.componentElement = componentElement;
                    this.context = context;
                    this.locals = locals;
                    this.injector = injector;
                }
                return EventEvaluationErrorContext;
            }());
            exports_192("EventEvaluationErrorContext", EventEvaluationErrorContext);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/change_detection/proto_record", [], function(exports_193, context_193) {
    "use strict";
    var __moduleName = context_193 && context_193.id;
    var RecordType, ProtoRecord;
    return {
        setters:[],
        execute: function() {
            (function (RecordType) {
                RecordType[RecordType["Self"] = 0] = "Self";
                RecordType[RecordType["Const"] = 1] = "Const";
                RecordType[RecordType["PrimitiveOp"] = 2] = "PrimitiveOp";
                RecordType[RecordType["PropertyRead"] = 3] = "PropertyRead";
                RecordType[RecordType["PropertyWrite"] = 4] = "PropertyWrite";
                RecordType[RecordType["Local"] = 5] = "Local";
                RecordType[RecordType["InvokeMethod"] = 6] = "InvokeMethod";
                RecordType[RecordType["InvokeClosure"] = 7] = "InvokeClosure";
                RecordType[RecordType["KeyedRead"] = 8] = "KeyedRead";
                RecordType[RecordType["KeyedWrite"] = 9] = "KeyedWrite";
                RecordType[RecordType["Pipe"] = 10] = "Pipe";
                RecordType[RecordType["Interpolate"] = 11] = "Interpolate";
                RecordType[RecordType["SafeProperty"] = 12] = "SafeProperty";
                RecordType[RecordType["CollectionLiteral"] = 13] = "CollectionLiteral";
                RecordType[RecordType["SafeMethodInvoke"] = 14] = "SafeMethodInvoke";
                RecordType[RecordType["DirectiveLifecycle"] = 15] = "DirectiveLifecycle";
                RecordType[RecordType["Chain"] = 16] = "Chain";
                RecordType[RecordType["SkipRecordsIf"] = 17] = "SkipRecordsIf";
                RecordType[RecordType["SkipRecordsIfNot"] = 18] = "SkipRecordsIfNot";
                RecordType[RecordType["SkipRecords"] = 19] = "SkipRecords"; // Skip records unconditionally
            })(RecordType || (RecordType = {}));
            exports_193("RecordType", RecordType);
            ProtoRecord = (function () {
                function ProtoRecord(mode, name, funcOrValue, args, fixedArgs, contextIndex, directiveIndex, selfIndex, bindingRecord, lastInBinding, lastInDirective, argumentToPureFunction, referencedBySelf, propertyBindingIndex) {
                    this.mode = mode;
                    this.name = name;
                    this.funcOrValue = funcOrValue;
                    this.args = args;
                    this.fixedArgs = fixedArgs;
                    this.contextIndex = contextIndex;
                    this.directiveIndex = directiveIndex;
                    this.selfIndex = selfIndex;
                    this.bindingRecord = bindingRecord;
                    this.lastInBinding = lastInBinding;
                    this.lastInDirective = lastInDirective;
                    this.argumentToPureFunction = argumentToPureFunction;
                    this.referencedBySelf = referencedBySelf;
                    this.propertyBindingIndex = propertyBindingIndex;
                }
                ProtoRecord.prototype.isPureFunction = function () {
                    return this.mode === RecordType.Interpolate || this.mode === RecordType.CollectionLiteral;
                };
                ProtoRecord.prototype.isUsedByOtherRecord = function () { return !this.lastInBinding || this.referencedBySelf; };
                ProtoRecord.prototype.shouldBeChecked = function () {
                    return this.argumentToPureFunction || this.lastInBinding || this.isPureFunction() ||
                        this.isPipeRecord();
                };
                ProtoRecord.prototype.isPipeRecord = function () { return this.mode === RecordType.Pipe; };
                ProtoRecord.prototype.isConditionalSkipRecord = function () {
                    return this.mode === RecordType.SkipRecordsIfNot || this.mode === RecordType.SkipRecordsIf;
                };
                ProtoRecord.prototype.isUnconditionalSkipRecord = function () { return this.mode === RecordType.SkipRecords; };
                ProtoRecord.prototype.isSkipRecord = function () {
                    return this.isConditionalSkipRecord() || this.isUnconditionalSkipRecord();
                };
                ProtoRecord.prototype.isLifeCycleRecord = function () { return this.mode === RecordType.DirectiveLifecycle; };
                return ProtoRecord;
            }());
            exports_193("ProtoRecord", ProtoRecord);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/change_detection/pipe_lifecycle_reflector", [], function(exports_194, context_194) {
    "use strict";
    var __moduleName = context_194 && context_194.id;
    function implementsOnDestroy(pipe) {
        return pipe.constructor.prototype.ngOnDestroy;
    }
    exports_194("implementsOnDestroy", implementsOnDestroy);
    return {
        setters:[],
        execute: function() {
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/change_detection/pipe_transform", [], function(exports_195, context_195) {
    "use strict";
    var __moduleName = context_195 && context_195.id;
    return {
        setters:[],
        execute: function() {
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/change_detection/pipes", [], function(exports_196, context_196) {
    "use strict";
    var __moduleName = context_196 && context_196.id;
    var SelectedPipe;
    return {
        setters:[],
        execute: function() {
            SelectedPipe = (function () {
                function SelectedPipe(pipe, pure) {
                    this.pipe = pipe;
                    this.pure = pure;
                }
                return SelectedPipe;
            }());
            exports_196("SelectedPipe", SelectedPipe);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/change_detection/change_detection_util", ['angular2/src/facade/lang', 'angular2/src/facade/exceptions', 'angular2/src/facade/collection', "test/node_modules/angular2/ts/src/core/change_detection/constants", "test/node_modules/angular2/ts/src/core/change_detection/pipe_lifecycle_reflector", "test/node_modules/angular2/ts/src/core/change_detection/binding_record", "test/node_modules/angular2/ts/src/core/change_detection/directive_record"], function(exports_197, context_197) {
    "use strict";
    var __moduleName = context_197 && context_197.id;
    var lang_109, exceptions_42, collection_47, constants_4, pipe_lifecycle_reflector_1, binding_record_1, directive_record_1;
    var WrappedValue, _wrappedValues, _wrappedIndex, SimpleChange, ChangeDetectionUtil;
    function _simpleChange(previousValue, currentValue) {
        return new SimpleChange(previousValue, currentValue);
    }
    return {
        setters:[
            function (lang_109_1) {
                lang_109 = lang_109_1;
            },
            function (exceptions_42_1) {
                exceptions_42 = exceptions_42_1;
            },
            function (collection_47_1) {
                collection_47 = collection_47_1;
            },
            function (constants_4_1) {
                constants_4 = constants_4_1;
            },
            function (pipe_lifecycle_reflector_1_1) {
                pipe_lifecycle_reflector_1 = pipe_lifecycle_reflector_1_1;
            },
            function (binding_record_1_1) {
                binding_record_1 = binding_record_1_1;
            },
            function (directive_record_1_1) {
                directive_record_1 = directive_record_1_1;
            }],
        execute: function() {
            /**
             * Indicates that the result of a {@link PipeMetadata} transformation has changed even though the
             * reference
             * has not changed.
             *
             * The wrapped value will be unwrapped by change detection, and the unwrapped value will be stored.
             *
             * Example:
             *
             * ```
             * if (this._latestValue === this._latestReturnedValue) {
             *    return this._latestReturnedValue;
             *  } else {
             *    this._latestReturnedValue = this._latestValue;
             *    return WrappedValue.wrap(this._latestValue); // this will force update
             *  }
             * ```
             */
            WrappedValue = (function () {
                function WrappedValue(wrapped) {
                    this.wrapped = wrapped;
                }
                WrappedValue.wrap = function (value) {
                    var w = _wrappedValues[_wrappedIndex++ % 5];
                    w.wrapped = value;
                    return w;
                };
                return WrappedValue;
            }());
            exports_197("WrappedValue", WrappedValue);
            _wrappedValues = [
                new WrappedValue(null),
                new WrappedValue(null),
                new WrappedValue(null),
                new WrappedValue(null),
                new WrappedValue(null)
            ];
            _wrappedIndex = 0;
            /**
             * Represents a basic change from a previous to a new value.
             */
            SimpleChange = (function () {
                function SimpleChange(previousValue, currentValue) {
                    this.previousValue = previousValue;
                    this.currentValue = currentValue;
                }
                /**
                 * Check whether the new value is the first value assigned.
                 */
                SimpleChange.prototype.isFirstChange = function () { return this.previousValue === ChangeDetectionUtil.uninitialized; };
                return SimpleChange;
            }());
            exports_197("SimpleChange", SimpleChange);
            /* tslint:disable:requireParameterType */
            ChangeDetectionUtil = (function () {
                function ChangeDetectionUtil() {
                }
                ChangeDetectionUtil.arrayFn0 = function () { return []; };
                ChangeDetectionUtil.arrayFn1 = function (a1) { return [a1]; };
                ChangeDetectionUtil.arrayFn2 = function (a1, a2) { return [a1, a2]; };
                ChangeDetectionUtil.arrayFn3 = function (a1, a2, a3) { return [a1, a2, a3]; };
                ChangeDetectionUtil.arrayFn4 = function (a1, a2, a3, a4) { return [a1, a2, a3, a4]; };
                ChangeDetectionUtil.arrayFn5 = function (a1, a2, a3, a4, a5) { return [a1, a2, a3, a4, a5]; };
                ChangeDetectionUtil.arrayFn6 = function (a1, a2, a3, a4, a5, a6) { return [a1, a2, a3, a4, a5, a6]; };
                ChangeDetectionUtil.arrayFn7 = function (a1, a2, a3, a4, a5, a6, a7) { return [a1, a2, a3, a4, a5, a6, a7]; };
                ChangeDetectionUtil.arrayFn8 = function (a1, a2, a3, a4, a5, a6, a7, a8) {
                    return [a1, a2, a3, a4, a5, a6, a7, a8];
                };
                ChangeDetectionUtil.arrayFn9 = function (a1, a2, a3, a4, a5, a6, a7, a8, a9) {
                    return [a1, a2, a3, a4, a5, a6, a7, a8, a9];
                };
                ChangeDetectionUtil.operation_negate = function (value) { return !value; };
                ChangeDetectionUtil.operation_add = function (left, right) { return left + right; };
                ChangeDetectionUtil.operation_subtract = function (left, right) { return left - right; };
                ChangeDetectionUtil.operation_multiply = function (left, right) { return left * right; };
                ChangeDetectionUtil.operation_divide = function (left, right) { return left / right; };
                ChangeDetectionUtil.operation_remainder = function (left, right) { return left % right; };
                ChangeDetectionUtil.operation_equals = function (left, right) { return left == right; };
                ChangeDetectionUtil.operation_not_equals = function (left, right) { return left != right; };
                ChangeDetectionUtil.operation_identical = function (left, right) { return left === right; };
                ChangeDetectionUtil.operation_not_identical = function (left, right) { return left !== right; };
                ChangeDetectionUtil.operation_less_then = function (left, right) { return left < right; };
                ChangeDetectionUtil.operation_greater_then = function (left, right) { return left > right; };
                ChangeDetectionUtil.operation_less_or_equals_then = function (left, right) { return left <= right; };
                ChangeDetectionUtil.operation_greater_or_equals_then = function (left, right) { return left >= right; };
                ChangeDetectionUtil.cond = function (cond, trueVal, falseVal) { return cond ? trueVal : falseVal; };
                ChangeDetectionUtil.mapFn = function (keys) {
                    function buildMap(values) {
                        var res = collection_47.StringMapWrapper.create();
                        for (var i = 0; i < keys.length; ++i) {
                            collection_47.StringMapWrapper.set(res, keys[i], values[i]);
                        }
                        return res;
                    }
                    switch (keys.length) {
                        case 0:
                            return function () { return []; };
                        case 1:
                            return function (a1) { return buildMap([a1]); };
                        case 2:
                            return function (a1, a2) { return buildMap([a1, a2]); };
                        case 3:
                            return function (a1, a2, a3) { return buildMap([a1, a2, a3]); };
                        case 4:
                            return function (a1, a2, a3, a4) { return buildMap([a1, a2, a3, a4]); };
                        case 5:
                            return function (a1, a2, a3, a4, a5) { return buildMap([a1, a2, a3, a4, a5]); };
                        case 6:
                            return function (a1, a2, a3, a4, a5, a6) { return buildMap([a1, a2, a3, a4, a5, a6]); };
                        case 7:
                            return function (a1, a2, a3, a4, a5, a6, a7) { return buildMap([a1, a2, a3, a4, a5, a6, a7]); };
                        case 8:
                            return function (a1, a2, a3, a4, a5, a6, a7, a8) { return buildMap([a1, a2, a3, a4, a5, a6, a7, a8]); };
                        case 9:
                            return function (a1, a2, a3, a4, a5, a6, a7, a8, a9) {
                                return buildMap([a1, a2, a3, a4, a5, a6, a7, a8, a9]);
                            };
                        default:
                            throw new exceptions_42.BaseException("Does not support literal maps with more than 9 elements");
                    }
                };
                ChangeDetectionUtil.keyedAccess = function (obj, args) { return obj[args[0]]; };
                ChangeDetectionUtil.unwrapValue = function (value) {
                    if (value instanceof WrappedValue) {
                        return value.wrapped;
                    }
                    else {
                        return value;
                    }
                };
                ChangeDetectionUtil.changeDetectionMode = function (strategy) {
                    return constants_4.isDefaultChangeDetectionStrategy(strategy) ? constants_4.ChangeDetectionStrategy.CheckAlways :
                        constants_4.ChangeDetectionStrategy.CheckOnce;
                };
                ChangeDetectionUtil.simpleChange = function (previousValue, currentValue) {
                    return _simpleChange(previousValue, currentValue);
                };
                ChangeDetectionUtil.isValueBlank = function (value) { return lang_109.isBlank(value); };
                ChangeDetectionUtil.s = function (value) { return lang_109.isPresent(value) ? "" + value : ''; };
                ChangeDetectionUtil.protoByIndex = function (protos, selfIndex) {
                    return selfIndex < 1 ?
                        null :
                        protos[selfIndex - 1]; // self index is shifted by one because of context
                };
                ChangeDetectionUtil.callPipeOnDestroy = function (selectedPipe) {
                    if (pipe_lifecycle_reflector_1.implementsOnDestroy(selectedPipe.pipe)) {
                        selectedPipe.pipe.ngOnDestroy();
                    }
                };
                ChangeDetectionUtil.bindingTarget = function (mode, elementIndex, name, unit, debug) {
                    return new binding_record_1.BindingTarget(mode, elementIndex, name, unit, debug);
                };
                ChangeDetectionUtil.directiveIndex = function (elementIndex, directiveIndex) {
                    return new directive_record_1.DirectiveIndex(elementIndex, directiveIndex);
                };
                ChangeDetectionUtil.looseNotIdentical = function (a, b) { return !lang_109.looseIdentical(a, b); };
                ChangeDetectionUtil.devModeEqual = function (a, b) {
                    if (collection_47.isListLikeIterable(a) && collection_47.isListLikeIterable(b)) {
                        return collection_47.areIterablesEqual(a, b, ChangeDetectionUtil.devModeEqual);
                    }
                    else if (!collection_47.isListLikeIterable(a) && !lang_109.isPrimitive(a) && !collection_47.isListLikeIterable(b) &&
                        !lang_109.isPrimitive(b)) {
                        return true;
                    }
                    else {
                        return lang_109.looseIdentical(a, b);
                    }
                };
                ChangeDetectionUtil.uninitialized = lang_109.CONST_EXPR(new Object());
                return ChangeDetectionUtil;
            }());
            exports_197("ChangeDetectionUtil", ChangeDetectionUtil);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/change_detection/abstract_change_detector", ['angular2/src/facade/lang', 'angular2/src/facade/collection', "test/node_modules/angular2/ts/src/core/change_detection/change_detection_util", "test/node_modules/angular2/ts/src/core/change_detection/change_detector_ref", "test/node_modules/angular2/ts/src/core/change_detection/exceptions", "test/node_modules/angular2/ts/src/core/change_detection/parser/locals", "test/node_modules/angular2/ts/src/core/change_detection/constants", "test/node_modules/angular2/ts/src/core/profile/profile", 'angular2/src/facade/async'], function(exports_198, context_198) {
    "use strict";
    var __moduleName = context_198 && context_198.id;
    var lang_110, collection_48, change_detection_util_2, change_detector_ref_1, exceptions_43, locals_1, constants_5, profile_3, async_19;
    var _scope_check, _Context, AbstractChangeDetector;
    return {
        setters:[
            function (lang_110_1) {
                lang_110 = lang_110_1;
            },
            function (collection_48_1) {
                collection_48 = collection_48_1;
            },
            function (change_detection_util_2_1) {
                change_detection_util_2 = change_detection_util_2_1;
            },
            function (change_detector_ref_1_1) {
                change_detector_ref_1 = change_detector_ref_1_1;
            },
            function (exceptions_43_1) {
                exceptions_43 = exceptions_43_1;
            },
            function (locals_1_1) {
                locals_1 = locals_1_1;
            },
            function (constants_5_1) {
                constants_5 = constants_5_1;
            },
            function (profile_3_1) {
                profile_3 = profile_3_1;
            },
            function (async_19_1) {
                async_19 = async_19_1;
            }],
        execute: function() {
            _scope_check = profile_3.wtfCreateScope("ChangeDetector#check(ascii id, bool throwOnChange)");
            _Context = (function () {
                function _Context(element, componentElement, context, locals, injector, expression) {
                    this.element = element;
                    this.componentElement = componentElement;
                    this.context = context;
                    this.locals = locals;
                    this.injector = injector;
                    this.expression = expression;
                }
                return _Context;
            }());
            AbstractChangeDetector = (function () {
                function AbstractChangeDetector(id, numberOfPropertyProtoRecords, bindingTargets, directiveIndices, strategy) {
                    this.id = id;
                    this.numberOfPropertyProtoRecords = numberOfPropertyProtoRecords;
                    this.bindingTargets = bindingTargets;
                    this.directiveIndices = directiveIndices;
                    this.strategy = strategy;
                    this.contentChildren = [];
                    this.viewChildren = [];
                    // The names of the below fields must be kept in sync with codegen_name_util.ts or
                    // change detection will fail.
                    this.state = constants_5.ChangeDetectorState.NeverChecked;
                    this.locals = null;
                    this.mode = null;
                    this.pipes = null;
                    this.ref = new change_detector_ref_1.ChangeDetectorRef_(this);
                }
                AbstractChangeDetector.prototype.addContentChild = function (cd) {
                    this.contentChildren.push(cd);
                    cd.parent = this;
                };
                AbstractChangeDetector.prototype.removeContentChild = function (cd) { collection_48.ListWrapper.remove(this.contentChildren, cd); };
                AbstractChangeDetector.prototype.addViewChild = function (cd) {
                    this.viewChildren.push(cd);
                    cd.parent = this;
                };
                AbstractChangeDetector.prototype.removeViewChild = function (cd) { collection_48.ListWrapper.remove(this.viewChildren, cd); };
                AbstractChangeDetector.prototype.remove = function () { this.parent.removeContentChild(this); };
                AbstractChangeDetector.prototype.handleEvent = function (eventName, elIndex, event) {
                    if (!this.hydrated()) {
                        this.throwDehydratedError(this.id + " -> " + eventName);
                    }
                    try {
                        var locals = new Map();
                        locals.set('$event', event);
                        var res = !this.handleEventInternal(eventName, elIndex, new locals_1.Locals(this.locals, locals));
                        this.markPathToRootAsCheckOnce();
                        return res;
                    }
                    catch (e) {
                        var c = this.dispatcher.getDebugContext(null, elIndex, null);
                        var context = lang_110.isPresent(c) ?
                            new exceptions_43.EventEvaluationErrorContext(c.element, c.componentElement, c.context, c.locals, c.injector) :
                            null;
                        throw new exceptions_43.EventEvaluationError(eventName, e, e.stack, context);
                    }
                };
                AbstractChangeDetector.prototype.handleEventInternal = function (eventName, elIndex, locals) { return false; };
                AbstractChangeDetector.prototype.detectChanges = function () { this.runDetectChanges(false); };
                AbstractChangeDetector.prototype.checkNoChanges = function () {
                    if (lang_110.assertionsEnabled()) {
                        this.runDetectChanges(true);
                    }
                };
                AbstractChangeDetector.prototype.runDetectChanges = function (throwOnChange) {
                    if (this.mode === constants_5.ChangeDetectionStrategy.Detached ||
                        this.mode === constants_5.ChangeDetectionStrategy.Checked || this.state === constants_5.ChangeDetectorState.Errored)
                        return;
                    var s = _scope_check(this.id, throwOnChange);
                    this.detectChangesInRecords(throwOnChange);
                    this._detectChangesContentChildren(throwOnChange);
                    if (!throwOnChange)
                        this.afterContentLifecycleCallbacks();
                    this._detectChangesInViewChildren(throwOnChange);
                    if (!throwOnChange)
                        this.afterViewLifecycleCallbacks();
                    if (this.mode === constants_5.ChangeDetectionStrategy.CheckOnce)
                        this.mode = constants_5.ChangeDetectionStrategy.Checked;
                    this.state = constants_5.ChangeDetectorState.CheckedBefore;
                    profile_3.wtfLeave(s);
                };
                // This method is not intended to be overridden. Subclasses should instead provide an
                // implementation of `detectChangesInRecordsInternal` which does the work of detecting changes
                // and which this method will call.
                // This method expects that `detectChangesInRecordsInternal` will set the property
                // `this.propertyBindingIndex` to the propertyBindingIndex of the first proto record. This is to
                // facilitate error reporting.
                AbstractChangeDetector.prototype.detectChangesInRecords = function (throwOnChange) {
                    if (!this.hydrated()) {
                        this.throwDehydratedError(this.id);
                    }
                    try {
                        this.detectChangesInRecordsInternal(throwOnChange);
                    }
                    catch (e) {
                        // throwOnChange errors aren't counted as fatal errors.
                        if (!(e instanceof exceptions_43.ExpressionChangedAfterItHasBeenCheckedException)) {
                            this.state = constants_5.ChangeDetectorState.Errored;
                        }
                        this._throwError(e, e.stack);
                    }
                };
                // Subclasses should override this method to perform any work necessary to detect and report
                // changes. For example, changes should be reported via `ChangeDetectionUtil.addChange`, lifecycle
                // methods should be called, etc.
                // This implementation should also set `this.propertyBindingIndex` to the propertyBindingIndex of
                // the
                // first proto record to facilitate error reporting. See {@link #detectChangesInRecords}.
                AbstractChangeDetector.prototype.detectChangesInRecordsInternal = function (throwOnChange) { };
                // This method is not intended to be overridden. Subclasses should instead provide an
                // implementation of `hydrateDirectives`.
                AbstractChangeDetector.prototype.hydrate = function (context, locals, dispatcher, pipes) {
                    this.dispatcher = dispatcher;
                    this.mode = change_detection_util_2.ChangeDetectionUtil.changeDetectionMode(this.strategy);
                    this.context = context;
                    this.locals = locals;
                    this.pipes = pipes;
                    this.hydrateDirectives(dispatcher);
                    this.state = constants_5.ChangeDetectorState.NeverChecked;
                };
                // Subclasses should override this method to hydrate any directives.
                AbstractChangeDetector.prototype.hydrateDirectives = function (dispatcher) { };
                // This method is not intended to be overridden. Subclasses should instead provide an
                // implementation of `dehydrateDirectives`.
                AbstractChangeDetector.prototype.dehydrate = function () {
                    this.dehydrateDirectives(true);
                    this._unsubscribeFromOutputs();
                    this.dispatcher = null;
                    this.context = null;
                    this.locals = null;
                    this.pipes = null;
                };
                // Subclasses should override this method to dehydrate any directives. This method should reverse
                // any work done in `hydrateDirectives`.
                AbstractChangeDetector.prototype.dehydrateDirectives = function (destroyPipes) { };
                AbstractChangeDetector.prototype.hydrated = function () { return lang_110.isPresent(this.context); };
                AbstractChangeDetector.prototype.destroyRecursive = function () {
                    this.dispatcher.notifyOnDestroy();
                    this.dehydrate();
                    var children = this.contentChildren;
                    for (var i = 0; i < children.length; i++) {
                        children[i].destroyRecursive();
                    }
                    children = this.viewChildren;
                    for (var i = 0; i < children.length; i++) {
                        children[i].destroyRecursive();
                    }
                };
                AbstractChangeDetector.prototype.afterContentLifecycleCallbacks = function () {
                    this.dispatcher.notifyAfterContentChecked();
                    this.afterContentLifecycleCallbacksInternal();
                };
                AbstractChangeDetector.prototype.afterContentLifecycleCallbacksInternal = function () { };
                AbstractChangeDetector.prototype.afterViewLifecycleCallbacks = function () {
                    this.dispatcher.notifyAfterViewChecked();
                    this.afterViewLifecycleCallbacksInternal();
                };
                AbstractChangeDetector.prototype.afterViewLifecycleCallbacksInternal = function () { };
                /** @internal */
                AbstractChangeDetector.prototype._detectChangesContentChildren = function (throwOnChange) {
                    var c = this.contentChildren;
                    for (var i = 0; i < c.length; ++i) {
                        c[i].runDetectChanges(throwOnChange);
                    }
                };
                /** @internal */
                AbstractChangeDetector.prototype._detectChangesInViewChildren = function (throwOnChange) {
                    var c = this.viewChildren;
                    for (var i = 0; i < c.length; ++i) {
                        c[i].runDetectChanges(throwOnChange);
                    }
                };
                AbstractChangeDetector.prototype.markAsCheckOnce = function () { this.mode = constants_5.ChangeDetectionStrategy.CheckOnce; };
                AbstractChangeDetector.prototype.markPathToRootAsCheckOnce = function () {
                    var c = this;
                    while (lang_110.isPresent(c) && c.mode !== constants_5.ChangeDetectionStrategy.Detached) {
                        if (c.mode === constants_5.ChangeDetectionStrategy.Checked)
                            c.mode = constants_5.ChangeDetectionStrategy.CheckOnce;
                        c = c.parent;
                    }
                };
                AbstractChangeDetector.prototype._unsubscribeFromOutputs = function () {
                    if (lang_110.isPresent(this.outputSubscriptions)) {
                        for (var i = 0; i < this.outputSubscriptions.length; ++i) {
                            async_19.ObservableWrapper.dispose(this.outputSubscriptions[i]);
                            this.outputSubscriptions[i] = null;
                        }
                    }
                };
                AbstractChangeDetector.prototype.getDirectiveFor = function (directives, index) {
                    return directives.getDirectiveFor(this.directiveIndices[index]);
                };
                AbstractChangeDetector.prototype.getDetectorFor = function (directives, index) {
                    return directives.getDetectorFor(this.directiveIndices[index]);
                };
                AbstractChangeDetector.prototype.notifyDispatcher = function (value) {
                    this.dispatcher.notifyOnBinding(this._currentBinding(), value);
                };
                AbstractChangeDetector.prototype.logBindingUpdate = function (value) {
                    this.dispatcher.logBindingUpdate(this._currentBinding(), value);
                };
                AbstractChangeDetector.prototype.addChange = function (changes, oldValue, newValue) {
                    if (lang_110.isBlank(changes)) {
                        changes = {};
                    }
                    changes[this._currentBinding().name] = change_detection_util_2.ChangeDetectionUtil.simpleChange(oldValue, newValue);
                    return changes;
                };
                AbstractChangeDetector.prototype._throwError = function (exception, stack) {
                    var error;
                    try {
                        var c = this.dispatcher.getDebugContext(null, this._currentBinding().elementIndex, null);
                        var context = lang_110.isPresent(c) ? new _Context(c.element, c.componentElement, c.context, c.locals, c.injector, this._currentBinding().debug) :
                            null;
                        error = new exceptions_43.ChangeDetectionError(this._currentBinding().debug, exception, stack, context);
                    }
                    catch (e) {
                        // if an error happens during getting the debug context, we throw a ChangeDetectionError
                        // without the extra information.
                        error = new exceptions_43.ChangeDetectionError(null, exception, stack, null);
                    }
                    throw error;
                };
                AbstractChangeDetector.prototype.throwOnChangeError = function (oldValue, newValue) {
                    throw new exceptions_43.ExpressionChangedAfterItHasBeenCheckedException(this._currentBinding().debug, oldValue, newValue, null);
                };
                AbstractChangeDetector.prototype.throwDehydratedError = function (detail) { throw new exceptions_43.DehydratedException(detail); };
                AbstractChangeDetector.prototype._currentBinding = function () {
                    return this.bindingTargets[this.propertyBindingIndex];
                };
                return AbstractChangeDetector;
            }());
            exports_198("AbstractChangeDetector", AbstractChangeDetector);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/change_detection/event_binding", [], function(exports_199, context_199) {
    "use strict";
    var __moduleName = context_199 && context_199.id;
    var EventBinding;
    return {
        setters:[],
        execute: function() {
            EventBinding = (function () {
                function EventBinding(eventName, elIndex, dirIndex, records) {
                    this.eventName = eventName;
                    this.elIndex = elIndex;
                    this.dirIndex = dirIndex;
                    this.records = records;
                }
                return EventBinding;
            }());
            exports_199("EventBinding", EventBinding);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/change_detection/dynamic_change_detector", ['angular2/src/facade/lang', 'angular2/src/facade/exceptions', 'angular2/src/facade/collection', "test/node_modules/angular2/ts/src/core/change_detection/abstract_change_detector", "test/node_modules/angular2/ts/src/core/change_detection/change_detection_util", "test/node_modules/angular2/ts/src/core/change_detection/constants", "test/node_modules/angular2/ts/src/core/change_detection/proto_record", 'angular2/src/core/reflection/reflection', 'angular2/src/facade/async'], function(exports_200, context_200) {
    "use strict";
    var __moduleName = context_200 && context_200.id;
    var lang_111, exceptions_44, collection_49, abstract_change_detector_2, change_detection_util_3, constants_6, proto_record_1, reflection_10, async_20;
    var DynamicChangeDetector;
    return {
        setters:[
            function (lang_111_1) {
                lang_111 = lang_111_1;
            },
            function (exceptions_44_1) {
                exceptions_44 = exceptions_44_1;
            },
            function (collection_49_1) {
                collection_49 = collection_49_1;
            },
            function (abstract_change_detector_2_1) {
                abstract_change_detector_2 = abstract_change_detector_2_1;
            },
            function (change_detection_util_3_1) {
                change_detection_util_3 = change_detection_util_3_1;
            },
            function (constants_6_1) {
                constants_6 = constants_6_1;
            },
            function (proto_record_1_1) {
                proto_record_1 = proto_record_1_1;
            },
            function (reflection_10_1) {
                reflection_10 = reflection_10_1;
            },
            function (async_20_1) {
                async_20 = async_20_1;
            }],
        execute: function() {
            DynamicChangeDetector = (function (_super) {
                __extends(DynamicChangeDetector, _super);
                function DynamicChangeDetector(id, numberOfPropertyProtoRecords, propertyBindingTargets, directiveIndices, strategy, _records, _eventBindings, _directiveRecords, _genConfig) {
                    _super.call(this, id, numberOfPropertyProtoRecords, propertyBindingTargets, directiveIndices, strategy);
                    this._records = _records;
                    this._eventBindings = _eventBindings;
                    this._directiveRecords = _directiveRecords;
                    this._genConfig = _genConfig;
                    var len = _records.length + 1;
                    this.values = collection_49.ListWrapper.createFixedSize(len);
                    this.localPipes = collection_49.ListWrapper.createFixedSize(len);
                    this.prevContexts = collection_49.ListWrapper.createFixedSize(len);
                    this.changes = collection_49.ListWrapper.createFixedSize(len);
                    this.dehydrateDirectives(false);
                }
                DynamicChangeDetector.prototype.handleEventInternal = function (eventName, elIndex, locals) {
                    var _this = this;
                    var preventDefault = false;
                    this._matchingEventBindings(eventName, elIndex)
                        .forEach(function (rec) {
                        var res = _this._processEventBinding(rec, locals);
                        if (res === false) {
                            preventDefault = true;
                        }
                    });
                    return preventDefault;
                };
                /** @internal */
                DynamicChangeDetector.prototype._processEventBinding = function (eb, locals) {
                    var values = collection_49.ListWrapper.createFixedSize(eb.records.length);
                    values[0] = this.values[0];
                    for (var protoIdx = 0; protoIdx < eb.records.length; ++protoIdx) {
                        var proto = eb.records[protoIdx];
                        if (proto.isSkipRecord()) {
                            protoIdx += this._computeSkipLength(protoIdx, proto, values);
                        }
                        else {
                            if (proto.lastInBinding) {
                                this._markPathAsCheckOnce(proto);
                            }
                            var res = this._calculateCurrValue(proto, values, locals);
                            if (proto.lastInBinding) {
                                return res;
                            }
                            else {
                                this._writeSelf(proto, res, values);
                            }
                        }
                    }
                    throw new exceptions_44.BaseException("Cannot be reached");
                };
                DynamicChangeDetector.prototype._computeSkipLength = function (protoIndex, proto, values) {
                    if (proto.mode === proto_record_1.RecordType.SkipRecords) {
                        return proto.fixedArgs[0] - protoIndex - 1;
                    }
                    if (proto.mode === proto_record_1.RecordType.SkipRecordsIf) {
                        var condition = this._readContext(proto, values);
                        return condition ? proto.fixedArgs[0] - protoIndex - 1 : 0;
                    }
                    if (proto.mode === proto_record_1.RecordType.SkipRecordsIfNot) {
                        var condition = this._readContext(proto, values);
                        return condition ? 0 : proto.fixedArgs[0] - protoIndex - 1;
                    }
                    throw new exceptions_44.BaseException("Cannot be reached");
                };
                /** @internal */
                DynamicChangeDetector.prototype._markPathAsCheckOnce = function (proto) {
                    if (!proto.bindingRecord.isDefaultChangeDetection()) {
                        var dir = proto.bindingRecord.directiveRecord;
                        this._getDetectorFor(dir.directiveIndex).markPathToRootAsCheckOnce();
                    }
                };
                /** @internal */
                DynamicChangeDetector.prototype._matchingEventBindings = function (eventName, elIndex) {
                    return this._eventBindings.filter(function (eb) { return eb.eventName == eventName && eb.elIndex === elIndex; });
                };
                DynamicChangeDetector.prototype.hydrateDirectives = function (dispatcher) {
                    var _this = this;
                    this.values[0] = this.context;
                    this.dispatcher = dispatcher;
                    this.outputSubscriptions = [];
                    for (var i = 0; i < this._directiveRecords.length; ++i) {
                        var r = this._directiveRecords[i];
                        if (lang_111.isPresent(r.outputs)) {
                            r.outputs.forEach(function (output) {
                                var eventHandler = _this._createEventHandler(r.directiveIndex.elementIndex, output[1]);
                                var directive = _this._getDirectiveFor(r.directiveIndex);
                                var getter = reflection_10.reflector.getter(output[0]);
                                _this.outputSubscriptions.push(async_20.ObservableWrapper.subscribe(getter(directive), eventHandler));
                            });
                        }
                    }
                };
                DynamicChangeDetector.prototype._createEventHandler = function (boundElementIndex, eventName) {
                    var _this = this;
                    return function (event) { return _this.handleEvent(eventName, boundElementIndex, event); };
                };
                DynamicChangeDetector.prototype.dehydrateDirectives = function (destroyPipes) {
                    if (destroyPipes) {
                        this._destroyPipes();
                        this._destroyDirectives();
                    }
                    this.values[0] = null;
                    collection_49.ListWrapper.fill(this.values, change_detection_util_3.ChangeDetectionUtil.uninitialized, 1);
                    collection_49.ListWrapper.fill(this.changes, false);
                    collection_49.ListWrapper.fill(this.localPipes, null);
                    collection_49.ListWrapper.fill(this.prevContexts, change_detection_util_3.ChangeDetectionUtil.uninitialized);
                };
                /** @internal */
                DynamicChangeDetector.prototype._destroyPipes = function () {
                    for (var i = 0; i < this.localPipes.length; ++i) {
                        if (lang_111.isPresent(this.localPipes[i])) {
                            change_detection_util_3.ChangeDetectionUtil.callPipeOnDestroy(this.localPipes[i]);
                        }
                    }
                };
                /** @internal */
                DynamicChangeDetector.prototype._destroyDirectives = function () {
                    for (var i = 0; i < this._directiveRecords.length; ++i) {
                        var record = this._directiveRecords[i];
                        if (record.callOnDestroy) {
                            this._getDirectiveFor(record.directiveIndex).ngOnDestroy();
                        }
                    }
                };
                DynamicChangeDetector.prototype.checkNoChanges = function () { this.runDetectChanges(true); };
                DynamicChangeDetector.prototype.detectChangesInRecordsInternal = function (throwOnChange) {
                    var protos = this._records;
                    var changes = null;
                    var isChanged = false;
                    for (var protoIdx = 0; protoIdx < protos.length; ++protoIdx) {
                        var proto = protos[protoIdx];
                        var bindingRecord = proto.bindingRecord;
                        var directiveRecord = bindingRecord.directiveRecord;
                        if (this._firstInBinding(proto)) {
                            this.propertyBindingIndex = proto.propertyBindingIndex;
                        }
                        if (proto.isLifeCycleRecord()) {
                            if (proto.name === "DoCheck" && !throwOnChange) {
                                this._getDirectiveFor(directiveRecord.directiveIndex).ngDoCheck();
                            }
                            else if (proto.name === "OnInit" && !throwOnChange &&
                                this.state == constants_6.ChangeDetectorState.NeverChecked) {
                                this._getDirectiveFor(directiveRecord.directiveIndex).ngOnInit();
                            }
                            else if (proto.name === "OnChanges" && lang_111.isPresent(changes) && !throwOnChange) {
                                this._getDirectiveFor(directiveRecord.directiveIndex).ngOnChanges(changes);
                            }
                        }
                        else if (proto.isSkipRecord()) {
                            protoIdx += this._computeSkipLength(protoIdx, proto, this.values);
                        }
                        else {
                            var change = this._check(proto, throwOnChange, this.values, this.locals);
                            if (lang_111.isPresent(change)) {
                                this._updateDirectiveOrElement(change, bindingRecord);
                                isChanged = true;
                                changes = this._addChange(bindingRecord, change, changes);
                            }
                        }
                        if (proto.lastInDirective) {
                            changes = null;
                            if (isChanged && !bindingRecord.isDefaultChangeDetection()) {
                                this._getDetectorFor(directiveRecord.directiveIndex).markAsCheckOnce();
                            }
                            isChanged = false;
                        }
                    }
                };
                /** @internal */
                DynamicChangeDetector.prototype._firstInBinding = function (r) {
                    var prev = change_detection_util_3.ChangeDetectionUtil.protoByIndex(this._records, r.selfIndex - 1);
                    return lang_111.isBlank(prev) || prev.bindingRecord !== r.bindingRecord;
                };
                DynamicChangeDetector.prototype.afterContentLifecycleCallbacksInternal = function () {
                    var dirs = this._directiveRecords;
                    for (var i = dirs.length - 1; i >= 0; --i) {
                        var dir = dirs[i];
                        if (dir.callAfterContentInit && this.state == constants_6.ChangeDetectorState.NeverChecked) {
                            this._getDirectiveFor(dir.directiveIndex).ngAfterContentInit();
                        }
                        if (dir.callAfterContentChecked) {
                            this._getDirectiveFor(dir.directiveIndex).ngAfterContentChecked();
                        }
                    }
                };
                DynamicChangeDetector.prototype.afterViewLifecycleCallbacksInternal = function () {
                    var dirs = this._directiveRecords;
                    for (var i = dirs.length - 1; i >= 0; --i) {
                        var dir = dirs[i];
                        if (dir.callAfterViewInit && this.state == constants_6.ChangeDetectorState.NeverChecked) {
                            this._getDirectiveFor(dir.directiveIndex).ngAfterViewInit();
                        }
                        if (dir.callAfterViewChecked) {
                            this._getDirectiveFor(dir.directiveIndex).ngAfterViewChecked();
                        }
                    }
                };
                /** @internal */
                DynamicChangeDetector.prototype._updateDirectiveOrElement = function (change, bindingRecord) {
                    if (lang_111.isBlank(bindingRecord.directiveRecord)) {
                        _super.prototype.notifyDispatcher.call(this, change.currentValue);
                    }
                    else {
                        var directiveIndex = bindingRecord.directiveRecord.directiveIndex;
                        bindingRecord.setter(this._getDirectiveFor(directiveIndex), change.currentValue);
                    }
                    if (this._genConfig.logBindingUpdate) {
                        _super.prototype.logBindingUpdate.call(this, change.currentValue);
                    }
                };
                /** @internal */
                DynamicChangeDetector.prototype._addChange = function (bindingRecord, change, changes) {
                    if (bindingRecord.callOnChanges()) {
                        return _super.prototype.addChange.call(this, changes, change.previousValue, change.currentValue);
                    }
                    else {
                        return changes;
                    }
                };
                /** @internal */
                DynamicChangeDetector.prototype._getDirectiveFor = function (directiveIndex) {
                    return this.dispatcher.getDirectiveFor(directiveIndex);
                };
                /** @internal */
                DynamicChangeDetector.prototype._getDetectorFor = function (directiveIndex) {
                    return this.dispatcher.getDetectorFor(directiveIndex);
                };
                /** @internal */
                DynamicChangeDetector.prototype._check = function (proto, throwOnChange, values, locals) {
                    if (proto.isPipeRecord()) {
                        return this._pipeCheck(proto, throwOnChange, values);
                    }
                    else {
                        return this._referenceCheck(proto, throwOnChange, values, locals);
                    }
                };
                /** @internal */
                DynamicChangeDetector.prototype._referenceCheck = function (proto, throwOnChange, values, locals) {
                    if (this._pureFuncAndArgsDidNotChange(proto)) {
                        this._setChanged(proto, false);
                        return null;
                    }
                    var currValue = this._calculateCurrValue(proto, values, locals);
                    if (proto.shouldBeChecked()) {
                        var prevValue = this._readSelf(proto, values);
                        var detectedChange = throwOnChange ?
                            !change_detection_util_3.ChangeDetectionUtil.devModeEqual(prevValue, currValue) :
                            change_detection_util_3.ChangeDetectionUtil.looseNotIdentical(prevValue, currValue);
                        if (detectedChange) {
                            if (proto.lastInBinding) {
                                var change = change_detection_util_3.ChangeDetectionUtil.simpleChange(prevValue, currValue);
                                if (throwOnChange)
                                    this.throwOnChangeError(prevValue, currValue);
                                this._writeSelf(proto, currValue, values);
                                this._setChanged(proto, true);
                                return change;
                            }
                            else {
                                this._writeSelf(proto, currValue, values);
                                this._setChanged(proto, true);
                                return null;
                            }
                        }
                        else {
                            this._setChanged(proto, false);
                            return null;
                        }
                    }
                    else {
                        this._writeSelf(proto, currValue, values);
                        this._setChanged(proto, true);
                        return null;
                    }
                };
                DynamicChangeDetector.prototype._calculateCurrValue = function (proto, values, locals) {
                    switch (proto.mode) {
                        case proto_record_1.RecordType.Self:
                            return this._readContext(proto, values);
                        case proto_record_1.RecordType.Const:
                            return proto.funcOrValue;
                        case proto_record_1.RecordType.PropertyRead:
                            var context = this._readContext(proto, values);
                            return proto.funcOrValue(context);
                        case proto_record_1.RecordType.SafeProperty:
                            var context = this._readContext(proto, values);
                            return lang_111.isBlank(context) ? null : proto.funcOrValue(context);
                        case proto_record_1.RecordType.PropertyWrite:
                            var context = this._readContext(proto, values);
                            var value = this._readArgs(proto, values)[0];
                            proto.funcOrValue(context, value);
                            return value;
                        case proto_record_1.RecordType.KeyedWrite:
                            var context = this._readContext(proto, values);
                            var key = this._readArgs(proto, values)[0];
                            var value = this._readArgs(proto, values)[1];
                            context[key] = value;
                            return value;
                        case proto_record_1.RecordType.Local:
                            return locals.get(proto.name);
                        case proto_record_1.RecordType.InvokeMethod:
                            var context = this._readContext(proto, values);
                            var args = this._readArgs(proto, values);
                            return proto.funcOrValue(context, args);
                        case proto_record_1.RecordType.SafeMethodInvoke:
                            var context = this._readContext(proto, values);
                            if (lang_111.isBlank(context)) {
                                return null;
                            }
                            var args = this._readArgs(proto, values);
                            return proto.funcOrValue(context, args);
                        case proto_record_1.RecordType.KeyedRead:
                            var arg = this._readArgs(proto, values)[0];
                            return this._readContext(proto, values)[arg];
                        case proto_record_1.RecordType.Chain:
                            var args = this._readArgs(proto, values);
                            return args[args.length - 1];
                        case proto_record_1.RecordType.InvokeClosure:
                            return lang_111.FunctionWrapper.apply(this._readContext(proto, values), this._readArgs(proto, values));
                        case proto_record_1.RecordType.Interpolate:
                        case proto_record_1.RecordType.PrimitiveOp:
                        case proto_record_1.RecordType.CollectionLiteral:
                            return lang_111.FunctionWrapper.apply(proto.funcOrValue, this._readArgs(proto, values));
                        default:
                            throw new exceptions_44.BaseException("Unknown operation " + proto.mode);
                    }
                };
                DynamicChangeDetector.prototype._pipeCheck = function (proto, throwOnChange, values) {
                    var context = this._readContext(proto, values);
                    var selectedPipe = this._pipeFor(proto, context);
                    if (!selectedPipe.pure || this._argsOrContextChanged(proto)) {
                        var args = this._readArgs(proto, values);
                        var currValue = selectedPipe.pipe.transform(context, args);
                        if (proto.shouldBeChecked()) {
                            var prevValue = this._readSelf(proto, values);
                            var detectedChange = throwOnChange ?
                                !change_detection_util_3.ChangeDetectionUtil.devModeEqual(prevValue, currValue) :
                                change_detection_util_3.ChangeDetectionUtil.looseNotIdentical(prevValue, currValue);
                            if (detectedChange) {
                                currValue = change_detection_util_3.ChangeDetectionUtil.unwrapValue(currValue);
                                if (proto.lastInBinding) {
                                    var change = change_detection_util_3.ChangeDetectionUtil.simpleChange(prevValue, currValue);
                                    if (throwOnChange)
                                        this.throwOnChangeError(prevValue, currValue);
                                    this._writeSelf(proto, currValue, values);
                                    this._setChanged(proto, true);
                                    return change;
                                }
                                else {
                                    this._writeSelf(proto, currValue, values);
                                    this._setChanged(proto, true);
                                    return null;
                                }
                            }
                            else {
                                this._setChanged(proto, false);
                                return null;
                            }
                        }
                        else {
                            this._writeSelf(proto, currValue, values);
                            this._setChanged(proto, true);
                            return null;
                        }
                    }
                };
                DynamicChangeDetector.prototype._pipeFor = function (proto, context) {
                    var storedPipe = this._readPipe(proto);
                    if (lang_111.isPresent(storedPipe))
                        return storedPipe;
                    var pipe = this.pipes.get(proto.name);
                    this._writePipe(proto, pipe);
                    return pipe;
                };
                DynamicChangeDetector.prototype._readContext = function (proto, values) {
                    if (proto.contextIndex == -1) {
                        return this._getDirectiveFor(proto.directiveIndex);
                    }
                    return values[proto.contextIndex];
                };
                DynamicChangeDetector.prototype._readSelf = function (proto, values) { return values[proto.selfIndex]; };
                DynamicChangeDetector.prototype._writeSelf = function (proto, value, values) { values[proto.selfIndex] = value; };
                DynamicChangeDetector.prototype._readPipe = function (proto) { return this.localPipes[proto.selfIndex]; };
                DynamicChangeDetector.prototype._writePipe = function (proto, value) { this.localPipes[proto.selfIndex] = value; };
                DynamicChangeDetector.prototype._setChanged = function (proto, value) {
                    if (proto.argumentToPureFunction)
                        this.changes[proto.selfIndex] = value;
                };
                DynamicChangeDetector.prototype._pureFuncAndArgsDidNotChange = function (proto) {
                    return proto.isPureFunction() && !this._argsChanged(proto);
                };
                DynamicChangeDetector.prototype._argsChanged = function (proto) {
                    var args = proto.args;
                    for (var i = 0; i < args.length; ++i) {
                        if (this.changes[args[i]]) {
                            return true;
                        }
                    }
                    return false;
                };
                DynamicChangeDetector.prototype._argsOrContextChanged = function (proto) {
                    return this._argsChanged(proto) || this.changes[proto.contextIndex];
                };
                DynamicChangeDetector.prototype._readArgs = function (proto, values) {
                    var res = collection_49.ListWrapper.createFixedSize(proto.args.length);
                    var args = proto.args;
                    for (var i = 0; i < args.length; ++i) {
                        res[i] = values[args[i]];
                    }
                    return res;
                };
                return DynamicChangeDetector;
            }(abstract_change_detector_2.AbstractChangeDetector));
            exports_200("DynamicChangeDetector", DynamicChangeDetector);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/change_detection/coalesce", ['angular2/src/facade/lang', 'angular2/src/facade/collection', "test/node_modules/angular2/ts/src/core/change_detection/proto_record"], function(exports_201, context_201) {
    "use strict";
    var __moduleName = context_201 && context_201.id;
    var lang_112, collection_50, proto_record_2;
    /**
     * Removes "duplicate" records. It assumes that record evaluation does not have side-effects.
     *
     * Records that are not last in bindings are removed and all the indices of the records that depend
     * on them are updated.
     *
     * Records that are last in bindings CANNOT be removed, and instead are replaced with very cheap
     * SELF records.
     *
     * @internal
     */
    function coalesce(srcRecords) {
        var dstRecords = [];
        var excludedIdxs = [];
        var indexMap = new collection_50.Map();
        var skipDepth = 0;
        var skipSources = collection_50.ListWrapper.createFixedSize(srcRecords.length);
        for (var protoIndex = 0; protoIndex < srcRecords.length; protoIndex++) {
            var skipRecord = skipSources[protoIndex];
            if (lang_112.isPresent(skipRecord)) {
                skipDepth--;
                skipRecord.fixedArgs[0] = dstRecords.length;
            }
            var src = srcRecords[protoIndex];
            var dst = _cloneAndUpdateIndexes(src, dstRecords, indexMap);
            if (dst.isSkipRecord()) {
                dstRecords.push(dst);
                skipDepth++;
                skipSources[dst.fixedArgs[0]] = dst;
            }
            else {
                var record = _mayBeAddRecord(dst, dstRecords, excludedIdxs, skipDepth > 0);
                indexMap.set(src.selfIndex, record.selfIndex);
            }
        }
        return _optimizeSkips(dstRecords);
    }
    exports_201("coalesce", coalesce);
    /**
     * - Conditional skip of 1 record followed by an unconditional skip of N are replaced by  a
     *   conditional skip of N with the negated condition,
     * - Skips of 0 records are removed
     */
    function _optimizeSkips(srcRecords) {
        var dstRecords = [];
        var skipSources = collection_50.ListWrapper.createFixedSize(srcRecords.length);
        var indexMap = new collection_50.Map();
        for (var protoIndex = 0; protoIndex < srcRecords.length; protoIndex++) {
            var skipRecord = skipSources[protoIndex];
            if (lang_112.isPresent(skipRecord)) {
                skipRecord.fixedArgs[0] = dstRecords.length;
            }
            var src = srcRecords[protoIndex];
            if (src.isSkipRecord()) {
                if (src.isConditionalSkipRecord() && src.fixedArgs[0] === protoIndex + 2 &&
                    protoIndex < srcRecords.length - 1 &&
                    srcRecords[protoIndex + 1].mode === proto_record_2.RecordType.SkipRecords) {
                    src.mode = src.mode === proto_record_2.RecordType.SkipRecordsIf ? proto_record_2.RecordType.SkipRecordsIfNot :
                        proto_record_2.RecordType.SkipRecordsIf;
                    src.fixedArgs[0] = srcRecords[protoIndex + 1].fixedArgs[0];
                    protoIndex++;
                }
                if (src.fixedArgs[0] > protoIndex + 1) {
                    var dst = _cloneAndUpdateIndexes(src, dstRecords, indexMap);
                    dstRecords.push(dst);
                    skipSources[dst.fixedArgs[0]] = dst;
                }
            }
            else {
                var dst = _cloneAndUpdateIndexes(src, dstRecords, indexMap);
                dstRecords.push(dst);
                indexMap.set(src.selfIndex, dst.selfIndex);
            }
        }
        return dstRecords;
    }
    /**
     * Add a new record or re-use one of the existing records.
     */
    function _mayBeAddRecord(record, dstRecords, excludedIdxs, excluded) {
        var match = _findFirstMatch(record, dstRecords, excludedIdxs);
        if (lang_112.isPresent(match)) {
            if (record.lastInBinding) {
                dstRecords.push(_createSelfRecord(record, match.selfIndex, dstRecords.length + 1));
                match.referencedBySelf = true;
            }
            else {
                if (record.argumentToPureFunction) {
                    match.argumentToPureFunction = true;
                }
            }
            return match;
        }
        if (excluded) {
            excludedIdxs.push(record.selfIndex);
        }
        dstRecords.push(record);
        return record;
    }
    /**
     * Returns the first `ProtoRecord` that matches the record.
     */
    function _findFirstMatch(record, dstRecords, excludedIdxs) {
        return dstRecords.find(
        // TODO(vicb): optimize excludedIdxs.indexOf (sorted array)
        function (rr) { return excludedIdxs.indexOf(rr.selfIndex) == -1 && rr.mode !== proto_record_2.RecordType.DirectiveLifecycle &&
            _haveSameDirIndex(rr, record) && rr.mode === record.mode &&
            lang_112.looseIdentical(rr.funcOrValue, record.funcOrValue) &&
            rr.contextIndex === record.contextIndex && lang_112.looseIdentical(rr.name, record.name) &&
            collection_50.ListWrapper.equals(rr.args, record.args); });
    }
    /**
     * Clone the `ProtoRecord` and changes the indexes for the ones in the destination array for:
     * - the arguments,
     * - the context,
     * - self
     */
    function _cloneAndUpdateIndexes(record, dstRecords, indexMap) {
        var args = record.args.map(function (src) { return _srcToDstSelfIndex(indexMap, src); });
        var contextIndex = _srcToDstSelfIndex(indexMap, record.contextIndex);
        var selfIndex = dstRecords.length + 1;
        return new proto_record_2.ProtoRecord(record.mode, record.name, record.funcOrValue, args, record.fixedArgs, contextIndex, record.directiveIndex, selfIndex, record.bindingRecord, record.lastInBinding, record.lastInDirective, record.argumentToPureFunction, record.referencedBySelf, record.propertyBindingIndex);
    }
    /**
     * Returns the index in the destination array corresponding to the index in the src array.
     * When the element is not present in the destination array, return the source index.
     */
    function _srcToDstSelfIndex(indexMap, srcIdx) {
        var dstIdx = indexMap.get(srcIdx);
        return lang_112.isPresent(dstIdx) ? dstIdx : srcIdx;
    }
    function _createSelfRecord(r, contextIndex, selfIndex) {
        return new proto_record_2.ProtoRecord(proto_record_2.RecordType.Self, "self", null, [], r.fixedArgs, contextIndex, r.directiveIndex, selfIndex, r.bindingRecord, r.lastInBinding, r.lastInDirective, false, false, r.propertyBindingIndex);
    }
    function _haveSameDirIndex(a, b) {
        var di1 = lang_112.isBlank(a.directiveIndex) ? null : a.directiveIndex.directiveIndex;
        var ei1 = lang_112.isBlank(a.directiveIndex) ? null : a.directiveIndex.elementIndex;
        var di2 = lang_112.isBlank(b.directiveIndex) ? null : b.directiveIndex.directiveIndex;
        var ei2 = lang_112.isBlank(b.directiveIndex) ? null : b.directiveIndex.elementIndex;
        return di1 === di2 && ei1 === ei2;
    }
    return {
        setters:[
            function (lang_112_1) {
                lang_112 = lang_112_1;
            },
            function (collection_50_1) {
                collection_50 = collection_50_1;
            },
            function (proto_record_2_1) {
                proto_record_2 = proto_record_2_1;
            }],
        execute: function() {
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/change_detection/proto_change_detector", ['angular2/src/facade/lang', 'angular2/src/facade/exceptions', 'angular2/src/facade/collection', "test/node_modules/angular2/ts/src/core/change_detection/parser/ast", "test/node_modules/angular2/ts/src/core/change_detection/change_detection_util", "test/node_modules/angular2/ts/src/core/change_detection/dynamic_change_detector", "test/node_modules/angular2/ts/src/core/change_detection/directive_record", "test/node_modules/angular2/ts/src/core/change_detection/event_binding", "test/node_modules/angular2/ts/src/core/change_detection/coalesce", "test/node_modules/angular2/ts/src/core/change_detection/proto_record"], function(exports_202, context_202) {
    "use strict";
    var __moduleName = context_202 && context_202.id;
    var lang_113, exceptions_45, collection_51, ast_3, change_detection_util_4, dynamic_change_detector_1, directive_record_2, event_binding_1, coalesce_1, proto_record_3;
    var DynamicProtoChangeDetector, ProtoRecordBuilder, _ConvertAstIntoProtoRecords;
    function createPropertyRecords(definition) {
        var recordBuilder = new ProtoRecordBuilder();
        collection_51.ListWrapper.forEachWithIndex(definition.bindingRecords, function (b, index) { return recordBuilder.add(b, definition.variableNames, index); });
        return coalesce_1.coalesce(recordBuilder.records);
    }
    exports_202("createPropertyRecords", createPropertyRecords);
    function createEventRecords(definition) {
        // TODO: vsavkin: remove $event when the compiler handles render-side variables properly
        var varNames = collection_51.ListWrapper.concat(['$event'], definition.variableNames);
        return definition.eventRecords.map(function (er) {
            var records = _ConvertAstIntoProtoRecords.create(er, varNames);
            var dirIndex = er.implicitReceiver instanceof directive_record_2.DirectiveIndex ? er.implicitReceiver : null;
            return new event_binding_1.EventBinding(er.target.name, er.target.elementIndex, dirIndex, records);
        });
    }
    exports_202("createEventRecords", createEventRecords);
    function _arrayFn(length) {
        switch (length) {
            case 0:
                return change_detection_util_4.ChangeDetectionUtil.arrayFn0;
            case 1:
                return change_detection_util_4.ChangeDetectionUtil.arrayFn1;
            case 2:
                return change_detection_util_4.ChangeDetectionUtil.arrayFn2;
            case 3:
                return change_detection_util_4.ChangeDetectionUtil.arrayFn3;
            case 4:
                return change_detection_util_4.ChangeDetectionUtil.arrayFn4;
            case 5:
                return change_detection_util_4.ChangeDetectionUtil.arrayFn5;
            case 6:
                return change_detection_util_4.ChangeDetectionUtil.arrayFn6;
            case 7:
                return change_detection_util_4.ChangeDetectionUtil.arrayFn7;
            case 8:
                return change_detection_util_4.ChangeDetectionUtil.arrayFn8;
            case 9:
                return change_detection_util_4.ChangeDetectionUtil.arrayFn9;
            default:
                throw new exceptions_45.BaseException("Does not support literal maps with more than 9 elements");
        }
    }
    function _mapPrimitiveName(keys) {
        var stringifiedKeys = keys.map(function (k) { return lang_113.isString(k) ? "\"" + k + "\"" : "" + k; }).join(', ');
        return "mapFn([" + stringifiedKeys + "])";
    }
    function _operationToPrimitiveName(operation) {
        switch (operation) {
            case '+':
                return "operation_add";
            case '-':
                return "operation_subtract";
            case '*':
                return "operation_multiply";
            case '/':
                return "operation_divide";
            case '%':
                return "operation_remainder";
            case '==':
                return "operation_equals";
            case '!=':
                return "operation_not_equals";
            case '===':
                return "operation_identical";
            case '!==':
                return "operation_not_identical";
            case '<':
                return "operation_less_then";
            case '>':
                return "operation_greater_then";
            case '<=':
                return "operation_less_or_equals_then";
            case '>=':
                return "operation_greater_or_equals_then";
            default:
                throw new exceptions_45.BaseException("Unsupported operation " + operation);
        }
    }
    function _operationToFunction(operation) {
        switch (operation) {
            case '+':
                return change_detection_util_4.ChangeDetectionUtil.operation_add;
            case '-':
                return change_detection_util_4.ChangeDetectionUtil.operation_subtract;
            case '*':
                return change_detection_util_4.ChangeDetectionUtil.operation_multiply;
            case '/':
                return change_detection_util_4.ChangeDetectionUtil.operation_divide;
            case '%':
                return change_detection_util_4.ChangeDetectionUtil.operation_remainder;
            case '==':
                return change_detection_util_4.ChangeDetectionUtil.operation_equals;
            case '!=':
                return change_detection_util_4.ChangeDetectionUtil.operation_not_equals;
            case '===':
                return change_detection_util_4.ChangeDetectionUtil.operation_identical;
            case '!==':
                return change_detection_util_4.ChangeDetectionUtil.operation_not_identical;
            case '<':
                return change_detection_util_4.ChangeDetectionUtil.operation_less_then;
            case '>':
                return change_detection_util_4.ChangeDetectionUtil.operation_greater_then;
            case '<=':
                return change_detection_util_4.ChangeDetectionUtil.operation_less_or_equals_then;
            case '>=':
                return change_detection_util_4.ChangeDetectionUtil.operation_greater_or_equals_then;
            default:
                throw new exceptions_45.BaseException("Unsupported operation " + operation);
        }
    }
    function s(v) {
        return lang_113.isPresent(v) ? "" + v : '';
    }
    function _interpolationFn(strings) {
        var length = strings.length;
        var c0 = length > 0 ? strings[0] : null;
        var c1 = length > 1 ? strings[1] : null;
        var c2 = length > 2 ? strings[2] : null;
        var c3 = length > 3 ? strings[3] : null;
        var c4 = length > 4 ? strings[4] : null;
        var c5 = length > 5 ? strings[5] : null;
        var c6 = length > 6 ? strings[6] : null;
        var c7 = length > 7 ? strings[7] : null;
        var c8 = length > 8 ? strings[8] : null;
        var c9 = length > 9 ? strings[9] : null;
        switch (length - 1) {
            case 1:
                return function (a1) { return c0 + s(a1) + c1; };
            case 2:
                return function (a1, a2) { return c0 + s(a1) + c1 + s(a2) + c2; };
            case 3:
                return function (a1, a2, a3) { return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3; };
            case 4:
                return function (a1, a2, a3, a4) { return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) + c4; };
            case 5:
                return function (a1, a2, a3, a4, a5) {
                    return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) + c4 + s(a5) + c5;
                };
            case 6:
                return function (a1, a2, a3, a4, a5, a6) {
                    return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) + c4 + s(a5) + c5 + s(a6) + c6;
                };
            case 7:
                return function (a1, a2, a3, a4, a5, a6, a7) { return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) +
                    c4 + s(a5) + c5 + s(a6) + c6 + s(a7) + c7; };
            case 8:
                return function (a1, a2, a3, a4, a5, a6, a7, a8) { return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) +
                    c4 + s(a5) + c5 + s(a6) + c6 + s(a7) + c7 + s(a8) +
                    c8; };
            case 9:
                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9) { return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 +
                    s(a4) + c4 + s(a5) + c5 + s(a6) + c6 + s(a7) +
                    c7 + s(a8) + c8 + s(a9) + c9; };
            default:
                throw new exceptions_45.BaseException("Does not support more than 9 expressions");
        }
    }
    return {
        setters:[
            function (lang_113_1) {
                lang_113 = lang_113_1;
            },
            function (exceptions_45_1) {
                exceptions_45 = exceptions_45_1;
            },
            function (collection_51_1) {
                collection_51 = collection_51_1;
            },
            function (ast_3_1) {
                ast_3 = ast_3_1;
            },
            function (change_detection_util_4_1) {
                change_detection_util_4 = change_detection_util_4_1;
            },
            function (dynamic_change_detector_1_1) {
                dynamic_change_detector_1 = dynamic_change_detector_1_1;
            },
            function (directive_record_2_1) {
                directive_record_2 = directive_record_2_1;
            },
            function (event_binding_1_1) {
                event_binding_1 = event_binding_1_1;
            },
            function (coalesce_1_1) {
                coalesce_1 = coalesce_1_1;
            },
            function (proto_record_3_1) {
                proto_record_3 = proto_record_3_1;
            }],
        execute: function() {
            DynamicProtoChangeDetector = (function () {
                function DynamicProtoChangeDetector(_definition) {
                    this._definition = _definition;
                    this._propertyBindingRecords = createPropertyRecords(_definition);
                    this._eventBindingRecords = createEventRecords(_definition);
                    this._propertyBindingTargets = this._definition.bindingRecords.map(function (b) { return b.target; });
                    this._directiveIndices = this._definition.directiveRecords.map(function (d) { return d.directiveIndex; });
                }
                DynamicProtoChangeDetector.prototype.instantiate = function () {
                    return new dynamic_change_detector_1.DynamicChangeDetector(this._definition.id, this._propertyBindingRecords.length, this._propertyBindingTargets, this._directiveIndices, this._definition.strategy, this._propertyBindingRecords, this._eventBindingRecords, this._definition.directiveRecords, this._definition.genConfig);
                };
                return DynamicProtoChangeDetector;
            }());
            exports_202("DynamicProtoChangeDetector", DynamicProtoChangeDetector);
            ProtoRecordBuilder = (function () {
                function ProtoRecordBuilder() {
                    this.records = [];
                }
                ProtoRecordBuilder.prototype.add = function (b, variableNames, bindingIndex) {
                    var oldLast = collection_51.ListWrapper.last(this.records);
                    if (lang_113.isPresent(oldLast) && oldLast.bindingRecord.directiveRecord == b.directiveRecord) {
                        oldLast.lastInDirective = false;
                    }
                    var numberOfRecordsBefore = this.records.length;
                    this._appendRecords(b, variableNames, bindingIndex);
                    var newLast = collection_51.ListWrapper.last(this.records);
                    if (lang_113.isPresent(newLast) && newLast !== oldLast) {
                        newLast.lastInBinding = true;
                        newLast.lastInDirective = true;
                        this._setArgumentToPureFunction(numberOfRecordsBefore);
                    }
                };
                /** @internal */
                ProtoRecordBuilder.prototype._setArgumentToPureFunction = function (startIndex) {
                    var _this = this;
                    for (var i = startIndex; i < this.records.length; ++i) {
                        var rec = this.records[i];
                        if (rec.isPureFunction()) {
                            rec.args.forEach(function (recordIndex) { return _this.records[recordIndex - 1].argumentToPureFunction =
                                true; });
                        }
                        if (rec.mode === proto_record_3.RecordType.Pipe) {
                            rec.args.forEach(function (recordIndex) { return _this.records[recordIndex - 1].argumentToPureFunction =
                                true; });
                            this.records[rec.contextIndex - 1].argumentToPureFunction = true;
                        }
                    }
                };
                /** @internal */
                ProtoRecordBuilder.prototype._appendRecords = function (b, variableNames, bindingIndex) {
                    if (b.isDirectiveLifecycle()) {
                        this.records.push(new proto_record_3.ProtoRecord(proto_record_3.RecordType.DirectiveLifecycle, b.lifecycleEvent, null, [], [], -1, null, this.records.length + 1, b, false, false, false, false, null));
                    }
                    else {
                        _ConvertAstIntoProtoRecords.append(this.records, b, variableNames, bindingIndex);
                    }
                };
                return ProtoRecordBuilder;
            }());
            exports_202("ProtoRecordBuilder", ProtoRecordBuilder);
            _ConvertAstIntoProtoRecords = (function () {
                function _ConvertAstIntoProtoRecords(_records, _bindingRecord, _variableNames, _bindingIndex) {
                    this._records = _records;
                    this._bindingRecord = _bindingRecord;
                    this._variableNames = _variableNames;
                    this._bindingIndex = _bindingIndex;
                }
                _ConvertAstIntoProtoRecords.append = function (records, b, variableNames, bindingIndex) {
                    var c = new _ConvertAstIntoProtoRecords(records, b, variableNames, bindingIndex);
                    b.ast.visit(c);
                };
                _ConvertAstIntoProtoRecords.create = function (b, variableNames) {
                    var rec = [];
                    _ConvertAstIntoProtoRecords.append(rec, b, variableNames, null);
                    rec[rec.length - 1].lastInBinding = true;
                    return rec;
                };
                _ConvertAstIntoProtoRecords.prototype.visitImplicitReceiver = function (ast) { return this._bindingRecord.implicitReceiver; };
                _ConvertAstIntoProtoRecords.prototype.visitInterpolation = function (ast) {
                    var args = this._visitAll(ast.expressions);
                    return this._addRecord(proto_record_3.RecordType.Interpolate, "interpolate", _interpolationFn(ast.strings), args, ast.strings, 0);
                };
                _ConvertAstIntoProtoRecords.prototype.visitLiteralPrimitive = function (ast) {
                    return this._addRecord(proto_record_3.RecordType.Const, "literal", ast.value, [], null, 0);
                };
                _ConvertAstIntoProtoRecords.prototype.visitPropertyRead = function (ast) {
                    var receiver = ast.receiver.visit(this);
                    if (lang_113.isPresent(this._variableNames) && collection_51.ListWrapper.contains(this._variableNames, ast.name) &&
                        ast.receiver instanceof ast_3.ImplicitReceiver) {
                        return this._addRecord(proto_record_3.RecordType.Local, ast.name, ast.name, [], null, receiver);
                    }
                    else {
                        return this._addRecord(proto_record_3.RecordType.PropertyRead, ast.name, ast.getter, [], null, receiver);
                    }
                };
                _ConvertAstIntoProtoRecords.prototype.visitPropertyWrite = function (ast) {
                    if (lang_113.isPresent(this._variableNames) && collection_51.ListWrapper.contains(this._variableNames, ast.name) &&
                        ast.receiver instanceof ast_3.ImplicitReceiver) {
                        throw new exceptions_45.BaseException("Cannot reassign a variable binding " + ast.name);
                    }
                    else {
                        var receiver = ast.receiver.visit(this);
                        var value = ast.value.visit(this);
                        return this._addRecord(proto_record_3.RecordType.PropertyWrite, ast.name, ast.setter, [value], null, receiver);
                    }
                };
                _ConvertAstIntoProtoRecords.prototype.visitKeyedWrite = function (ast) {
                    var obj = ast.obj.visit(this);
                    var key = ast.key.visit(this);
                    var value = ast.value.visit(this);
                    return this._addRecord(proto_record_3.RecordType.KeyedWrite, null, null, [key, value], null, obj);
                };
                _ConvertAstIntoProtoRecords.prototype.visitSafePropertyRead = function (ast) {
                    var receiver = ast.receiver.visit(this);
                    return this._addRecord(proto_record_3.RecordType.SafeProperty, ast.name, ast.getter, [], null, receiver);
                };
                _ConvertAstIntoProtoRecords.prototype.visitMethodCall = function (ast) {
                    var receiver = ast.receiver.visit(this);
                    var args = this._visitAll(ast.args);
                    if (lang_113.isPresent(this._variableNames) && collection_51.ListWrapper.contains(this._variableNames, ast.name)) {
                        var target = this._addRecord(proto_record_3.RecordType.Local, ast.name, ast.name, [], null, receiver);
                        return this._addRecord(proto_record_3.RecordType.InvokeClosure, "closure", null, args, null, target);
                    }
                    else {
                        return this._addRecord(proto_record_3.RecordType.InvokeMethod, ast.name, ast.fn, args, null, receiver);
                    }
                };
                _ConvertAstIntoProtoRecords.prototype.visitSafeMethodCall = function (ast) {
                    var receiver = ast.receiver.visit(this);
                    var args = this._visitAll(ast.args);
                    return this._addRecord(proto_record_3.RecordType.SafeMethodInvoke, ast.name, ast.fn, args, null, receiver);
                };
                _ConvertAstIntoProtoRecords.prototype.visitFunctionCall = function (ast) {
                    var target = ast.target.visit(this);
                    var args = this._visitAll(ast.args);
                    return this._addRecord(proto_record_3.RecordType.InvokeClosure, "closure", null, args, null, target);
                };
                _ConvertAstIntoProtoRecords.prototype.visitLiteralArray = function (ast) {
                    var primitiveName = "arrayFn" + ast.expressions.length;
                    return this._addRecord(proto_record_3.RecordType.CollectionLiteral, primitiveName, _arrayFn(ast.expressions.length), this._visitAll(ast.expressions), null, 0);
                };
                _ConvertAstIntoProtoRecords.prototype.visitLiteralMap = function (ast) {
                    return this._addRecord(proto_record_3.RecordType.CollectionLiteral, _mapPrimitiveName(ast.keys), change_detection_util_4.ChangeDetectionUtil.mapFn(ast.keys), this._visitAll(ast.values), null, 0);
                };
                _ConvertAstIntoProtoRecords.prototype.visitBinary = function (ast) {
                    var left = ast.left.visit(this);
                    switch (ast.operation) {
                        case '&&':
                            var branchEnd = [null];
                            this._addRecord(proto_record_3.RecordType.SkipRecordsIfNot, "SkipRecordsIfNot", null, [], branchEnd, left);
                            var right = ast.right.visit(this);
                            branchEnd[0] = right;
                            return this._addRecord(proto_record_3.RecordType.PrimitiveOp, "cond", change_detection_util_4.ChangeDetectionUtil.cond, [left, right, left], null, 0);
                        case '||':
                            var branchEnd = [null];
                            this._addRecord(proto_record_3.RecordType.SkipRecordsIf, "SkipRecordsIf", null, [], branchEnd, left);
                            var right = ast.right.visit(this);
                            branchEnd[0] = right;
                            return this._addRecord(proto_record_3.RecordType.PrimitiveOp, "cond", change_detection_util_4.ChangeDetectionUtil.cond, [left, left, right], null, 0);
                        default:
                            var right = ast.right.visit(this);
                            return this._addRecord(proto_record_3.RecordType.PrimitiveOp, _operationToPrimitiveName(ast.operation), _operationToFunction(ast.operation), [left, right], null, 0);
                    }
                };
                _ConvertAstIntoProtoRecords.prototype.visitPrefixNot = function (ast) {
                    var exp = ast.expression.visit(this);
                    return this._addRecord(proto_record_3.RecordType.PrimitiveOp, "operation_negate", change_detection_util_4.ChangeDetectionUtil.operation_negate, [exp], null, 0);
                };
                _ConvertAstIntoProtoRecords.prototype.visitConditional = function (ast) {
                    var condition = ast.condition.visit(this);
                    var startOfFalseBranch = [null];
                    var endOfFalseBranch = [null];
                    this._addRecord(proto_record_3.RecordType.SkipRecordsIfNot, "SkipRecordsIfNot", null, [], startOfFalseBranch, condition);
                    var whenTrue = ast.trueExp.visit(this);
                    var skip = this._addRecord(proto_record_3.RecordType.SkipRecords, "SkipRecords", null, [], endOfFalseBranch, 0);
                    var whenFalse = ast.falseExp.visit(this);
                    startOfFalseBranch[0] = skip;
                    endOfFalseBranch[0] = whenFalse;
                    return this._addRecord(proto_record_3.RecordType.PrimitiveOp, "cond", change_detection_util_4.ChangeDetectionUtil.cond, [condition, whenTrue, whenFalse], null, 0);
                };
                _ConvertAstIntoProtoRecords.prototype.visitPipe = function (ast) {
                    var value = ast.exp.visit(this);
                    var args = this._visitAll(ast.args);
                    return this._addRecord(proto_record_3.RecordType.Pipe, ast.name, ast.name, args, null, value);
                };
                _ConvertAstIntoProtoRecords.prototype.visitKeyedRead = function (ast) {
                    var obj = ast.obj.visit(this);
                    var key = ast.key.visit(this);
                    return this._addRecord(proto_record_3.RecordType.KeyedRead, "keyedAccess", change_detection_util_4.ChangeDetectionUtil.keyedAccess, [key], null, obj);
                };
                _ConvertAstIntoProtoRecords.prototype.visitChain = function (ast) {
                    var _this = this;
                    var args = ast.expressions.map(function (e) { return e.visit(_this); });
                    return this._addRecord(proto_record_3.RecordType.Chain, "chain", null, args, null, 0);
                };
                _ConvertAstIntoProtoRecords.prototype.visitQuote = function (ast) {
                    throw new exceptions_45.BaseException(("Caught uninterpreted expression at " + ast.location + ": " + ast.uninterpretedExpression + ". ") +
                        ("Expression prefix " + ast.prefix + " did not match a template transformer to interpret the expression."));
                };
                _ConvertAstIntoProtoRecords.prototype._visitAll = function (asts) {
                    var res = collection_51.ListWrapper.createFixedSize(asts.length);
                    for (var i = 0; i < asts.length; ++i) {
                        res[i] = asts[i].visit(this);
                    }
                    return res;
                };
                /**
                 * Adds a `ProtoRecord` and returns its selfIndex.
                 */
                _ConvertAstIntoProtoRecords.prototype._addRecord = function (type, name, funcOrValue, args, fixedArgs, context) {
                    var selfIndex = this._records.length + 1;
                    if (context instanceof directive_record_2.DirectiveIndex) {
                        this._records.push(new proto_record_3.ProtoRecord(type, name, funcOrValue, args, fixedArgs, -1, context, selfIndex, this._bindingRecord, false, false, false, false, this._bindingIndex));
                    }
                    else {
                        this._records.push(new proto_record_3.ProtoRecord(type, name, funcOrValue, args, fixedArgs, context, null, selfIndex, this._bindingRecord, false, false, false, false, this._bindingIndex));
                    }
                    return selfIndex;
                };
                return _ConvertAstIntoProtoRecords;
            }());
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/change_detection/codegen_name_util", ['angular2/src/facade/lang', 'angular2/src/facade/collection'], function(exports_203, context_203) {
    "use strict";
    var __moduleName = context_203 && context_203.id;
    var lang_114, collection_52;
    var _STATE_ACCESSOR, _CONTEXT_ACCESSOR, _PROP_BINDING_INDEX, _DIRECTIVES_ACCESSOR, _DISPATCHER_ACCESSOR, _LOCALS_ACCESSOR, _MODE_ACCESSOR, _PIPES_ACCESSOR, _PROTOS_ACCESSOR, CONTEXT_ACCESSOR, CONTEXT_INDEX, _FIELD_PREFIX, _whiteSpaceRegExp, CodegenNameUtil;
    /**
     * Returns `s` with all non-identifier characters removed.
     */
    function sanitizeName(s) {
        return lang_114.StringWrapper.replaceAll(s, _whiteSpaceRegExp, '');
    }
    exports_203("sanitizeName", sanitizeName);
    return {
        setters:[
            function (lang_114_1) {
                lang_114 = lang_114_1;
            },
            function (collection_52_1) {
                collection_52 = collection_52_1;
            }],
        execute: function() {
            // The names of these fields must be kept in sync with abstract_change_detector.ts or change
            // detection will fail.
            _STATE_ACCESSOR = "state";
            _CONTEXT_ACCESSOR = "context";
            _PROP_BINDING_INDEX = "propertyBindingIndex";
            _DIRECTIVES_ACCESSOR = "directiveIndices";
            _DISPATCHER_ACCESSOR = "dispatcher";
            _LOCALS_ACCESSOR = "locals";
            _MODE_ACCESSOR = "mode";
            _PIPES_ACCESSOR = "pipes";
            _PROTOS_ACCESSOR = "protos";
            exports_203("CONTEXT_ACCESSOR", CONTEXT_ACCESSOR = "context");
            // `context` is always first.
            exports_203("CONTEXT_INDEX", CONTEXT_INDEX = 0);
            _FIELD_PREFIX = 'this.';
            _whiteSpaceRegExp = /\W/g;
            /**
             * Class responsible for providing field and local variable names for change detector classes.
             * Also provides some convenience functions, for example, declaring variables, destroying pipes,
             * and dehydrating the detector.
             */
            CodegenNameUtil = (function () {
                function CodegenNameUtil(_records, _eventBindings, _directiveRecords, _utilName) {
                    this._records = _records;
                    this._eventBindings = _eventBindings;
                    this._directiveRecords = _directiveRecords;
                    this._utilName = _utilName;
                    /** @internal */
                    this._sanitizedEventNames = new collection_52.Map();
                    this._sanitizedNames = collection_52.ListWrapper.createFixedSize(this._records.length + 1);
                    this._sanitizedNames[CONTEXT_INDEX] = CONTEXT_ACCESSOR;
                    for (var i = 0, iLen = this._records.length; i < iLen; ++i) {
                        this._sanitizedNames[i + 1] = sanitizeName("" + this._records[i].name + i);
                    }
                    for (var ebIndex = 0; ebIndex < _eventBindings.length; ++ebIndex) {
                        var eb = _eventBindings[ebIndex];
                        var names = [CONTEXT_ACCESSOR];
                        for (var i = 0, iLen = eb.records.length; i < iLen; ++i) {
                            names.push(sanitizeName("" + eb.records[i].name + i + "_" + ebIndex));
                        }
                        this._sanitizedEventNames.set(eb, names);
                    }
                }
                /** @internal */
                CodegenNameUtil.prototype._addFieldPrefix = function (name) { return "" + _FIELD_PREFIX + name; };
                CodegenNameUtil.prototype.getDispatcherName = function () { return this._addFieldPrefix(_DISPATCHER_ACCESSOR); };
                CodegenNameUtil.prototype.getPipesAccessorName = function () { return this._addFieldPrefix(_PIPES_ACCESSOR); };
                CodegenNameUtil.prototype.getProtosName = function () { return this._addFieldPrefix(_PROTOS_ACCESSOR); };
                CodegenNameUtil.prototype.getDirectivesAccessorName = function () { return this._addFieldPrefix(_DIRECTIVES_ACCESSOR); };
                CodegenNameUtil.prototype.getLocalsAccessorName = function () { return this._addFieldPrefix(_LOCALS_ACCESSOR); };
                CodegenNameUtil.prototype.getStateName = function () { return this._addFieldPrefix(_STATE_ACCESSOR); };
                CodegenNameUtil.prototype.getModeName = function () { return this._addFieldPrefix(_MODE_ACCESSOR); };
                CodegenNameUtil.prototype.getPropertyBindingIndex = function () { return this._addFieldPrefix(_PROP_BINDING_INDEX); };
                CodegenNameUtil.prototype.getLocalName = function (idx) { return "l_" + this._sanitizedNames[idx]; };
                CodegenNameUtil.prototype.getEventLocalName = function (eb, idx) {
                    return "l_" + this._sanitizedEventNames.get(eb)[idx];
                };
                CodegenNameUtil.prototype.getChangeName = function (idx) { return "c_" + this._sanitizedNames[idx]; };
                /**
                 * Generate a statement initializing local variables used when detecting changes.
                 */
                CodegenNameUtil.prototype.genInitLocals = function () {
                    var declarations = [];
                    var assignments = [];
                    for (var i = 0, iLen = this.getFieldCount(); i < iLen; ++i) {
                        if (i == CONTEXT_INDEX) {
                            declarations.push(this.getLocalName(i) + " = " + this.getFieldName(i));
                        }
                        else {
                            var rec = this._records[i - 1];
                            if (rec.argumentToPureFunction) {
                                var changeName = this.getChangeName(i);
                                declarations.push(this.getLocalName(i) + "," + changeName);
                                assignments.push(changeName);
                            }
                            else {
                                declarations.push("" + this.getLocalName(i));
                            }
                        }
                    }
                    var assignmentsCode = collection_52.ListWrapper.isEmpty(assignments) ? '' : assignments.join('=') + " = false;";
                    return "var " + declarations.join(',') + ";" + assignmentsCode;
                };
                /**
                 * Generate a statement initializing local variables for event handlers.
                 */
                CodegenNameUtil.prototype.genInitEventLocals = function () {
                    var _this = this;
                    var res = [(this.getLocalName(CONTEXT_INDEX) + " = " + this.getFieldName(CONTEXT_INDEX))];
                    this._sanitizedEventNames.forEach(function (names, eb) {
                        for (var i = 0; i < names.length; ++i) {
                            if (i !== CONTEXT_INDEX) {
                                res.push("" + _this.getEventLocalName(eb, i));
                            }
                        }
                    });
                    return res.length > 1 ? "var " + res.join(',') + ";" : '';
                };
                CodegenNameUtil.prototype.getPreventDefaultAccesor = function () { return "preventDefault"; };
                CodegenNameUtil.prototype.getFieldCount = function () { return this._sanitizedNames.length; };
                CodegenNameUtil.prototype.getFieldName = function (idx) { return this._addFieldPrefix(this._sanitizedNames[idx]); };
                CodegenNameUtil.prototype.getAllFieldNames = function () {
                    var fieldList = [];
                    for (var k = 0, kLen = this.getFieldCount(); k < kLen; ++k) {
                        if (k === 0 || this._records[k - 1].shouldBeChecked()) {
                            fieldList.push(this.getFieldName(k));
                        }
                    }
                    for (var i = 0, iLen = this._records.length; i < iLen; ++i) {
                        var rec = this._records[i];
                        if (rec.isPipeRecord()) {
                            fieldList.push(this.getPipeName(rec.selfIndex));
                        }
                    }
                    for (var j = 0, jLen = this._directiveRecords.length; j < jLen; ++j) {
                        var dRec = this._directiveRecords[j];
                        fieldList.push(this.getDirectiveName(dRec.directiveIndex));
                        if (!dRec.isDefaultChangeDetection()) {
                            fieldList.push(this.getDetectorName(dRec.directiveIndex));
                        }
                    }
                    return fieldList;
                };
                /**
                 * Generates statements which clear all fields so that the change detector is dehydrated.
                 */
                CodegenNameUtil.prototype.genDehydrateFields = function () {
                    var fields = this.getAllFieldNames();
                    collection_52.ListWrapper.removeAt(fields, CONTEXT_INDEX);
                    if (collection_52.ListWrapper.isEmpty(fields))
                        return '';
                    // At least one assignment.
                    fields.push(this._utilName + ".uninitialized;");
                    return fields.join(' = ');
                };
                /**
                 * Generates statements destroying all pipe variables.
                 */
                CodegenNameUtil.prototype.genPipeOnDestroy = function () {
                    var _this = this;
                    return this._records.filter(function (r) { return r.isPipeRecord(); })
                        .map(function (r) { return (_this._utilName + ".callPipeOnDestroy(" + _this.getPipeName(r.selfIndex) + ");"); })
                        .join('\n');
                };
                CodegenNameUtil.prototype.getPipeName = function (idx) {
                    return this._addFieldPrefix(this._sanitizedNames[idx] + "_pipe");
                };
                CodegenNameUtil.prototype.getDirectiveName = function (d) {
                    return this._addFieldPrefix("directive_" + d.name);
                };
                CodegenNameUtil.prototype.getDetectorName = function (d) { return this._addFieldPrefix("detector_" + d.name); };
                return CodegenNameUtil;
            }());
            exports_203("CodegenNameUtil", CodegenNameUtil);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/change_detection/codegen_facade", [], function(exports_204, context_204) {
    "use strict";
    var __moduleName = context_204 && context_204.id;
    /**
     * Converts `funcOrValue` to a string which can be used in generated code.
     */
    function codify(obj) {
        return JSON.stringify(obj);
    }
    exports_204("codify", codify);
    function rawString(str) {
        return "'" + str + "'";
    }
    exports_204("rawString", rawString);
    /**
     * Combine the strings of generated code into a single interpolated string.
     * Each element of `vals` is expected to be a string literal or a codegen'd
     * call to a method returning a string.
     */
    function combineGeneratedStrings(vals) {
        return vals.join(' + ');
    }
    exports_204("combineGeneratedStrings", combineGeneratedStrings);
    return {
        setters:[],
        execute: function() {
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/change_detection/codegen_logic_util", ['angular2/src/facade/lang', "test/node_modules/angular2/ts/src/core/change_detection/codegen_facade", "test/node_modules/angular2/ts/src/core/change_detection/proto_record", 'angular2/src/facade/exceptions'], function(exports_205, context_205) {
    "use strict";
    var __moduleName = context_205 && context_205.id;
    var lang_115, codegen_facade_1, proto_record_4, exceptions_46;
    var CodegenLogicUtil;
    return {
        setters:[
            function (lang_115_1) {
                lang_115 = lang_115_1;
            },
            function (codegen_facade_1_1) {
                codegen_facade_1 = codegen_facade_1_1;
            },
            function (proto_record_4_1) {
                proto_record_4 = proto_record_4_1;
            },
            function (exceptions_46_1) {
                exceptions_46 = exceptions_46_1;
            }],
        execute: function() {
            /**
             * Class responsible for providing change detection logic for change detector classes.
             */
            CodegenLogicUtil = (function () {
                function CodegenLogicUtil(_names, _utilName, _changeDetectorStateName) {
                    this._names = _names;
                    this._utilName = _utilName;
                    this._changeDetectorStateName = _changeDetectorStateName;
                }
                /**
                 * Generates a statement which updates the local variable representing `protoRec` with the current
                 * value of the record. Used by property bindings.
                 */
                CodegenLogicUtil.prototype.genPropertyBindingEvalValue = function (protoRec) {
                    var _this = this;
                    return this._genEvalValue(protoRec, function (idx) { return _this._names.getLocalName(idx); }, this._names.getLocalsAccessorName());
                };
                /**
                 * Generates a statement which updates the local variable representing `protoRec` with the current
                 * value of the record. Used by event bindings.
                 */
                CodegenLogicUtil.prototype.genEventBindingEvalValue = function (eventRecord, protoRec) {
                    var _this = this;
                    return this._genEvalValue(protoRec, function (idx) { return _this._names.getEventLocalName(eventRecord, idx); }, "locals");
                };
                CodegenLogicUtil.prototype._genEvalValue = function (protoRec, getLocalName, localsAccessor) {
                    var context = (protoRec.contextIndex == -1) ?
                        this._names.getDirectiveName(protoRec.directiveIndex) :
                        getLocalName(protoRec.contextIndex);
                    var argString = protoRec.args.map(function (arg) { return getLocalName(arg); }).join(", ");
                    var rhs;
                    switch (protoRec.mode) {
                        case proto_record_4.RecordType.Self:
                            rhs = context;
                            break;
                        case proto_record_4.RecordType.Const:
                            rhs = codegen_facade_1.codify(protoRec.funcOrValue);
                            break;
                        case proto_record_4.RecordType.PropertyRead:
                            rhs = context + "." + protoRec.name;
                            break;
                        case proto_record_4.RecordType.SafeProperty:
                            var read = context + "." + protoRec.name;
                            rhs = this._utilName + ".isValueBlank(" + context + ") ? null : " + read;
                            break;
                        case proto_record_4.RecordType.PropertyWrite:
                            rhs = context + "." + protoRec.name + " = " + getLocalName(protoRec.args[0]);
                            break;
                        case proto_record_4.RecordType.Local:
                            rhs = localsAccessor + ".get(" + codegen_facade_1.rawString(protoRec.name) + ")";
                            break;
                        case proto_record_4.RecordType.InvokeMethod:
                            rhs = context + "." + protoRec.name + "(" + argString + ")";
                            break;
                        case proto_record_4.RecordType.SafeMethodInvoke:
                            var invoke = context + "." + protoRec.name + "(" + argString + ")";
                            rhs = this._utilName + ".isValueBlank(" + context + ") ? null : " + invoke;
                            break;
                        case proto_record_4.RecordType.InvokeClosure:
                            rhs = context + "(" + argString + ")";
                            break;
                        case proto_record_4.RecordType.PrimitiveOp:
                            rhs = this._utilName + "." + protoRec.name + "(" + argString + ")";
                            break;
                        case proto_record_4.RecordType.CollectionLiteral:
                            rhs = this._utilName + "." + protoRec.name + "(" + argString + ")";
                            break;
                        case proto_record_4.RecordType.Interpolate:
                            rhs = this._genInterpolation(protoRec);
                            break;
                        case proto_record_4.RecordType.KeyedRead:
                            rhs = context + "[" + getLocalName(protoRec.args[0]) + "]";
                            break;
                        case proto_record_4.RecordType.KeyedWrite:
                            rhs = context + "[" + getLocalName(protoRec.args[0]) + "] = " + getLocalName(protoRec.args[1]);
                            break;
                        case proto_record_4.RecordType.Chain:
                            rhs = "" + getLocalName(protoRec.args[protoRec.args.length - 1]);
                            break;
                        default:
                            throw new exceptions_46.BaseException("Unknown operation " + protoRec.mode);
                    }
                    return getLocalName(protoRec.selfIndex) + " = " + rhs + ";";
                };
                CodegenLogicUtil.prototype.genPropertyBindingTargets = function (propertyBindingTargets, genDebugInfo) {
                    var _this = this;
                    var bs = propertyBindingTargets.map(function (b) {
                        if (lang_115.isBlank(b))
                            return "null";
                        var debug = genDebugInfo ? codegen_facade_1.codify(b.debug) : "null";
                        return _this._utilName + ".bindingTarget(" + codegen_facade_1.codify(b.mode) + ", " + b.elementIndex + ", " + codegen_facade_1.codify(b.name) + ", " + codegen_facade_1.codify(b.unit) + ", " + debug + ")";
                    });
                    return "[" + bs.join(", ") + "]";
                };
                CodegenLogicUtil.prototype.genDirectiveIndices = function (directiveRecords) {
                    var _this = this;
                    var bs = directiveRecords.map(function (b) {
                        return (_this._utilName + ".directiveIndex(" + b.directiveIndex.elementIndex + ", " + b.directiveIndex.directiveIndex + ")");
                    });
                    return "[" + bs.join(", ") + "]";
                };
                /** @internal */
                CodegenLogicUtil.prototype._genInterpolation = function (protoRec) {
                    var iVals = [];
                    for (var i = 0; i < protoRec.args.length; ++i) {
                        iVals.push(codegen_facade_1.codify(protoRec.fixedArgs[i]));
                        iVals.push(this._utilName + ".s(" + this._names.getLocalName(protoRec.args[i]) + ")");
                    }
                    iVals.push(codegen_facade_1.codify(protoRec.fixedArgs[protoRec.args.length]));
                    return codegen_facade_1.combineGeneratedStrings(iVals);
                };
                CodegenLogicUtil.prototype.genHydrateDirectives = function (directiveRecords) {
                    var _this = this;
                    var res = [];
                    var outputCount = 0;
                    for (var i = 0; i < directiveRecords.length; ++i) {
                        var r = directiveRecords[i];
                        var dirVarName = this._names.getDirectiveName(r.directiveIndex);
                        res.push(dirVarName + " = " + this._genReadDirective(i) + ";");
                        if (lang_115.isPresent(r.outputs)) {
                            r.outputs.forEach(function (output) {
                                var eventHandlerExpr = _this._genEventHandler(r.directiveIndex.elementIndex, output[1]);
                                var statementStart = "this.outputSubscriptions[" + outputCount++ + "] = " + dirVarName + "." + output[0];
                                if (lang_115.IS_DART) {
                                    res.push(statementStart + ".listen(" + eventHandlerExpr + ");");
                                }
                                else {
                                    res.push(statementStart + ".subscribe({next: " + eventHandlerExpr + "});");
                                }
                            });
                        }
                    }
                    if (outputCount > 0) {
                        var statementStart = 'this.outputSubscriptions';
                        if (lang_115.IS_DART) {
                            res.unshift(statementStart + " = new List(" + outputCount + ");");
                        }
                        else {
                            res.unshift(statementStart + " = new Array(" + outputCount + ");");
                        }
                    }
                    return res.join("\n");
                };
                CodegenLogicUtil.prototype.genDirectivesOnDestroy = function (directiveRecords) {
                    var res = [];
                    for (var i = 0; i < directiveRecords.length; ++i) {
                        var r = directiveRecords[i];
                        if (r.callOnDestroy) {
                            var dirVarName = this._names.getDirectiveName(r.directiveIndex);
                            res.push(dirVarName + ".ngOnDestroy();");
                        }
                    }
                    return res.join("\n");
                };
                CodegenLogicUtil.prototype._genEventHandler = function (boundElementIndex, eventName) {
                    if (lang_115.IS_DART) {
                        return "(event) => this.handleEvent('" + eventName + "', " + boundElementIndex + ", event)";
                    }
                    else {
                        return "(function(event) { return this.handleEvent('" + eventName + "', " + boundElementIndex + ", event); }).bind(this)";
                    }
                };
                CodegenLogicUtil.prototype._genReadDirective = function (index) { return "this.getDirectiveFor(directives, " + index + ")"; };
                CodegenLogicUtil.prototype.genHydrateDetectors = function (directiveRecords) {
                    var res = [];
                    for (var i = 0; i < directiveRecords.length; ++i) {
                        var r = directiveRecords[i];
                        if (!r.isDefaultChangeDetection()) {
                            res.push(this._names.getDetectorName(r.directiveIndex) + " = this.getDetectorFor(directives, " + i + ");");
                        }
                    }
                    return res.join("\n");
                };
                CodegenLogicUtil.prototype.genContentLifecycleCallbacks = function (directiveRecords) {
                    var res = [];
                    var eq = lang_115.IS_DART ? '==' : '===';
                    // NOTE(kegluneq): Order is important!
                    for (var i = directiveRecords.length - 1; i >= 0; --i) {
                        var dir = directiveRecords[i];
                        if (dir.callAfterContentInit) {
                            res.push("if(" + this._names.getStateName() + " " + eq + " " + this._changeDetectorStateName + ".NeverChecked) " + this._names.getDirectiveName(dir.directiveIndex) + ".ngAfterContentInit();");
                        }
                        if (dir.callAfterContentChecked) {
                            res.push(this._names.getDirectiveName(dir.directiveIndex) + ".ngAfterContentChecked();");
                        }
                    }
                    return res;
                };
                CodegenLogicUtil.prototype.genViewLifecycleCallbacks = function (directiveRecords) {
                    var res = [];
                    var eq = lang_115.IS_DART ? '==' : '===';
                    // NOTE(kegluneq): Order is important!
                    for (var i = directiveRecords.length - 1; i >= 0; --i) {
                        var dir = directiveRecords[i];
                        if (dir.callAfterViewInit) {
                            res.push("if(" + this._names.getStateName() + " " + eq + " " + this._changeDetectorStateName + ".NeverChecked) " + this._names.getDirectiveName(dir.directiveIndex) + ".ngAfterViewInit();");
                        }
                        if (dir.callAfterViewChecked) {
                            res.push(this._names.getDirectiveName(dir.directiveIndex) + ".ngAfterViewChecked();");
                        }
                    }
                    return res;
                };
                return CodegenLogicUtil;
            }());
            exports_205("CodegenLogicUtil", CodegenLogicUtil);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/change_detection/change_detection_jit_generator", ['angular2/src/facade/lang', 'angular2/src/facade/exceptions', 'angular2/src/facade/collection', "test/node_modules/angular2/ts/src/core/change_detection/abstract_change_detector", "test/node_modules/angular2/ts/src/core/change_detection/change_detection_util", "test/node_modules/angular2/ts/src/core/change_detection/proto_record", "test/node_modules/angular2/ts/src/core/change_detection/codegen_name_util", "test/node_modules/angular2/ts/src/core/change_detection/codegen_logic_util", "test/node_modules/angular2/ts/src/core/change_detection/codegen_facade", "test/node_modules/angular2/ts/src/core/change_detection/constants", "test/node_modules/angular2/ts/src/core/change_detection/proto_change_detector"], function(exports_206, context_206) {
    "use strict";
    var __moduleName = context_206 && context_206.id;
    var lang_116, exceptions_47, collection_53, abstract_change_detector_3, change_detection_util_5, proto_record_5, codegen_name_util_1, codegen_logic_util_1, codegen_facade_2, constants_7, proto_change_detector_1;
    var IS_CHANGED_LOCAL, CHANGES_LOCAL, ChangeDetectorJITGenerator;
    return {
        setters:[
            function (lang_116_1) {
                lang_116 = lang_116_1;
            },
            function (exceptions_47_1) {
                exceptions_47 = exceptions_47_1;
            },
            function (collection_53_1) {
                collection_53 = collection_53_1;
            },
            function (abstract_change_detector_3_1) {
                abstract_change_detector_3 = abstract_change_detector_3_1;
            },
            function (change_detection_util_5_1) {
                change_detection_util_5 = change_detection_util_5_1;
            },
            function (proto_record_5_1) {
                proto_record_5 = proto_record_5_1;
            },
            function (codegen_name_util_1_1) {
                codegen_name_util_1 = codegen_name_util_1_1;
            },
            function (codegen_logic_util_1_1) {
                codegen_logic_util_1 = codegen_logic_util_1_1;
            },
            function (codegen_facade_2_1) {
                codegen_facade_2 = codegen_facade_2_1;
            },
            function (constants_7_1) {
                constants_7 = constants_7_1;
            },
            function (proto_change_detector_1_1) {
                proto_change_detector_1 = proto_change_detector_1_1;
            }],
        execute: function() {
            /**
             * The code generator takes a list of proto records and creates a function/class
             * that "emulates" what the developer would write by hand to implement the same
             * kind of behaviour.
             *
             * This code should be kept in sync with the Dart transformer's
             * `angular2.transform.template_compiler.change_detector_codegen` library. If you make updates
             * here, please make equivalent changes there.
            */
            IS_CHANGED_LOCAL = "isChanged";
            CHANGES_LOCAL = "changes";
            ChangeDetectorJITGenerator = (function () {
                function ChangeDetectorJITGenerator(definition, changeDetectionUtilVarName, abstractChangeDetectorVarName, changeDetectorStateVarName) {
                    this.changeDetectionUtilVarName = changeDetectionUtilVarName;
                    this.abstractChangeDetectorVarName = abstractChangeDetectorVarName;
                    this.changeDetectorStateVarName = changeDetectorStateVarName;
                    var propertyBindingRecords = proto_change_detector_1.createPropertyRecords(definition);
                    var eventBindingRecords = proto_change_detector_1.createEventRecords(definition);
                    var propertyBindingTargets = definition.bindingRecords.map(function (b) { return b.target; });
                    this.id = definition.id;
                    this.changeDetectionStrategy = definition.strategy;
                    this.genConfig = definition.genConfig;
                    this.records = propertyBindingRecords;
                    this.propertyBindingTargets = propertyBindingTargets;
                    this.eventBindings = eventBindingRecords;
                    this.directiveRecords = definition.directiveRecords;
                    this._names = new codegen_name_util_1.CodegenNameUtil(this.records, this.eventBindings, this.directiveRecords, this.changeDetectionUtilVarName);
                    this._logic = new codegen_logic_util_1.CodegenLogicUtil(this._names, this.changeDetectionUtilVarName, this.changeDetectorStateVarName);
                    this.typeName = codegen_name_util_1.sanitizeName("ChangeDetector_" + this.id);
                }
                ChangeDetectorJITGenerator.prototype.generate = function () {
                    var factorySource = "\n      " + this.generateSource() + "\n      return function() {\n        return new " + this.typeName + "();\n      }\n    ";
                    return new Function(this.abstractChangeDetectorVarName, this.changeDetectionUtilVarName, this.changeDetectorStateVarName, factorySource)(abstract_change_detector_3.AbstractChangeDetector, change_detection_util_5.ChangeDetectionUtil, constants_7.ChangeDetectorState);
                };
                ChangeDetectorJITGenerator.prototype.generateSource = function () {
                    return "\n      var " + this.typeName + " = function " + this.typeName + "() {\n        " + this.abstractChangeDetectorVarName + ".call(\n            this, " + JSON.stringify(this.id) + ", " + this.records.length + ",\n            " + this.typeName + ".gen_propertyBindingTargets, " + this.typeName + ".gen_directiveIndices,\n            " + codegen_facade_2.codify(this.changeDetectionStrategy) + ");\n        this.dehydrateDirectives(false);\n      }\n\n      " + this.typeName + ".prototype = Object.create(" + this.abstractChangeDetectorVarName + ".prototype);\n\n      " + this.typeName + ".prototype.detectChangesInRecordsInternal = function(throwOnChange) {\n        " + this._names.genInitLocals() + "\n        var " + IS_CHANGED_LOCAL + " = false;\n        var " + CHANGES_LOCAL + " = null;\n\n        " + this._genAllRecords(this.records) + "\n      }\n\n      " + this._maybeGenHandleEventInternal() + "\n\n      " + this._maybeGenAfterContentLifecycleCallbacks() + "\n\n      " + this._maybeGenAfterViewLifecycleCallbacks() + "\n\n      " + this._maybeGenHydrateDirectives() + "\n\n      " + this._maybeGenDehydrateDirectives() + "\n\n      " + this._genPropertyBindingTargets() + "\n\n      " + this._genDirectiveIndices() + "\n    ";
                };
                /** @internal */
                ChangeDetectorJITGenerator.prototype._genPropertyBindingTargets = function () {
                    var targets = this._logic.genPropertyBindingTargets(this.propertyBindingTargets, this.genConfig.genDebugInfo);
                    return this.typeName + ".gen_propertyBindingTargets = " + targets + ";";
                };
                /** @internal */
                ChangeDetectorJITGenerator.prototype._genDirectiveIndices = function () {
                    var indices = this._logic.genDirectiveIndices(this.directiveRecords);
                    return this.typeName + ".gen_directiveIndices = " + indices + ";";
                };
                /** @internal */
                ChangeDetectorJITGenerator.prototype._maybeGenHandleEventInternal = function () {
                    var _this = this;
                    if (this.eventBindings.length > 0) {
                        var handlers = this.eventBindings.map(function (eb) { return _this._genEventBinding(eb); }).join("\n");
                        return "\n        " + this.typeName + ".prototype.handleEventInternal = function(eventName, elIndex, locals) {\n          var " + this._names.getPreventDefaultAccesor() + " = false;\n          " + this._names.genInitEventLocals() + "\n          " + handlers + "\n          return " + this._names.getPreventDefaultAccesor() + ";\n        }\n      ";
                    }
                    else {
                        return '';
                    }
                };
                /** @internal */
                ChangeDetectorJITGenerator.prototype._genEventBinding = function (eb) {
                    var _this = this;
                    var codes = [];
                    this._endOfBlockIdxs = [];
                    collection_53.ListWrapper.forEachWithIndex(eb.records, function (r, i) {
                        var code;
                        if (r.isConditionalSkipRecord()) {
                            code = _this._genConditionalSkip(r, _this._names.getEventLocalName(eb, i));
                        }
                        else if (r.isUnconditionalSkipRecord()) {
                            code = _this._genUnconditionalSkip(r);
                        }
                        else {
                            code = _this._genEventBindingEval(eb, r);
                        }
                        code += _this._genEndOfSkipBlock(i);
                        codes.push(code);
                    });
                    return "\n    if (eventName === \"" + eb.eventName + "\" && elIndex === " + eb.elIndex + ") {\n      " + codes.join("\n") + "\n    }";
                };
                /** @internal */
                ChangeDetectorJITGenerator.prototype._genEventBindingEval = function (eb, r) {
                    if (r.lastInBinding) {
                        var evalRecord = this._logic.genEventBindingEvalValue(eb, r);
                        var markPath = this._genMarkPathToRootAsCheckOnce(r);
                        var prevDefault = this._genUpdatePreventDefault(eb, r);
                        return markPath + "\n" + evalRecord + "\n" + prevDefault;
                    }
                    else {
                        return this._logic.genEventBindingEvalValue(eb, r);
                    }
                };
                /** @internal */
                ChangeDetectorJITGenerator.prototype._genMarkPathToRootAsCheckOnce = function (r) {
                    var br = r.bindingRecord;
                    if (br.isDefaultChangeDetection()) {
                        return "";
                    }
                    else {
                        return this._names.getDetectorName(br.directiveRecord.directiveIndex) + ".markPathToRootAsCheckOnce();";
                    }
                };
                /** @internal */
                ChangeDetectorJITGenerator.prototype._genUpdatePreventDefault = function (eb, r) {
                    var local = this._names.getEventLocalName(eb, r.selfIndex);
                    return "if (" + local + " === false) { " + this._names.getPreventDefaultAccesor() + " = true};";
                };
                /** @internal */
                ChangeDetectorJITGenerator.prototype._maybeGenDehydrateDirectives = function () {
                    var destroyPipesCode = this._names.genPipeOnDestroy();
                    var destroyDirectivesCode = this._logic.genDirectivesOnDestroy(this.directiveRecords);
                    var dehydrateFieldsCode = this._names.genDehydrateFields();
                    if (!destroyPipesCode && !destroyDirectivesCode && !dehydrateFieldsCode)
                        return '';
                    return this.typeName + ".prototype.dehydrateDirectives = function(destroyPipes) {\n        if (destroyPipes) {\n          " + destroyPipesCode + "\n          " + destroyDirectivesCode + "\n        }\n        " + dehydrateFieldsCode + "\n    }";
                };
                /** @internal */
                ChangeDetectorJITGenerator.prototype._maybeGenHydrateDirectives = function () {
                    var hydrateDirectivesCode = this._logic.genHydrateDirectives(this.directiveRecords);
                    var hydrateDetectorsCode = this._logic.genHydrateDetectors(this.directiveRecords);
                    if (!hydrateDirectivesCode && !hydrateDetectorsCode)
                        return '';
                    return this.typeName + ".prototype.hydrateDirectives = function(directives) {\n      " + hydrateDirectivesCode + "\n      " + hydrateDetectorsCode + "\n    }";
                };
                /** @internal */
                ChangeDetectorJITGenerator.prototype._maybeGenAfterContentLifecycleCallbacks = function () {
                    var notifications = this._logic.genContentLifecycleCallbacks(this.directiveRecords);
                    if (notifications.length > 0) {
                        var directiveNotifications = notifications.join("\n");
                        return "\n        " + this.typeName + ".prototype.afterContentLifecycleCallbacksInternal = function() {\n          " + directiveNotifications + "\n        }\n      ";
                    }
                    else {
                        return '';
                    }
                };
                /** @internal */
                ChangeDetectorJITGenerator.prototype._maybeGenAfterViewLifecycleCallbacks = function () {
                    var notifications = this._logic.genViewLifecycleCallbacks(this.directiveRecords);
                    if (notifications.length > 0) {
                        var directiveNotifications = notifications.join("\n");
                        return "\n        " + this.typeName + ".prototype.afterViewLifecycleCallbacksInternal = function() {\n          " + directiveNotifications + "\n        }\n      ";
                    }
                    else {
                        return '';
                    }
                };
                /** @internal */
                ChangeDetectorJITGenerator.prototype._genAllRecords = function (rs) {
                    var codes = [];
                    this._endOfBlockIdxs = [];
                    for (var i = 0; i < rs.length; i++) {
                        var code = void 0;
                        var r = rs[i];
                        if (r.isLifeCycleRecord()) {
                            code = this._genDirectiveLifecycle(r);
                        }
                        else if (r.isPipeRecord()) {
                            code = this._genPipeCheck(r);
                        }
                        else if (r.isConditionalSkipRecord()) {
                            code = this._genConditionalSkip(r, this._names.getLocalName(r.contextIndex));
                        }
                        else if (r.isUnconditionalSkipRecord()) {
                            code = this._genUnconditionalSkip(r);
                        }
                        else {
                            code = this._genReferenceCheck(r);
                        }
                        code = "\n        " + this._maybeFirstInBinding(r) + "\n        " + code + "\n        " + this._maybeGenLastInDirective(r) + "\n        " + this._genEndOfSkipBlock(i) + "\n      ";
                        codes.push(code);
                    }
                    return codes.join("\n");
                };
                /** @internal */
                ChangeDetectorJITGenerator.prototype._genConditionalSkip = function (r, condition) {
                    var maybeNegate = r.mode === proto_record_5.RecordType.SkipRecordsIf ? '!' : '';
                    this._endOfBlockIdxs.push(r.fixedArgs[0] - 1);
                    return "if (" + maybeNegate + condition + ") {";
                };
                /** @internal */
                ChangeDetectorJITGenerator.prototype._genUnconditionalSkip = function (r) {
                    this._endOfBlockIdxs.pop();
                    this._endOfBlockIdxs.push(r.fixedArgs[0] - 1);
                    return "} else {";
                };
                /** @internal */
                ChangeDetectorJITGenerator.prototype._genEndOfSkipBlock = function (protoIndex) {
                    if (!collection_53.ListWrapper.isEmpty(this._endOfBlockIdxs)) {
                        var endOfBlock = collection_53.ListWrapper.last(this._endOfBlockIdxs);
                        if (protoIndex === endOfBlock) {
                            this._endOfBlockIdxs.pop();
                            return '}';
                        }
                    }
                    return '';
                };
                /** @internal */
                ChangeDetectorJITGenerator.prototype._genDirectiveLifecycle = function (r) {
                    if (r.name === "DoCheck") {
                        return this._genOnCheck(r);
                    }
                    else if (r.name === "OnInit") {
                        return this._genOnInit(r);
                    }
                    else if (r.name === "OnChanges") {
                        return this._genOnChange(r);
                    }
                    else {
                        throw new exceptions_47.BaseException("Unknown lifecycle event '" + r.name + "'");
                    }
                };
                /** @internal */
                ChangeDetectorJITGenerator.prototype._genPipeCheck = function (r) {
                    var _this = this;
                    var context = this._names.getLocalName(r.contextIndex);
                    var argString = r.args.map(function (arg) { return _this._names.getLocalName(arg); }).join(", ");
                    var oldValue = this._names.getFieldName(r.selfIndex);
                    var newValue = this._names.getLocalName(r.selfIndex);
                    var pipe = this._names.getPipeName(r.selfIndex);
                    var pipeName = r.name;
                    var init = "\n      if (" + pipe + " === " + this.changeDetectionUtilVarName + ".uninitialized) {\n        " + pipe + " = " + this._names.getPipesAccessorName() + ".get('" + pipeName + "');\n      }\n    ";
                    var read = newValue + " = " + pipe + ".pipe.transform(" + context + ", [" + argString + "]);";
                    var contexOrArgCheck = r.args.map(function (a) { return _this._names.getChangeName(a); });
                    contexOrArgCheck.push(this._names.getChangeName(r.contextIndex));
                    var condition = "!" + pipe + ".pure || (" + contexOrArgCheck.join(" || ") + ")";
                    var check = "\n      " + this._genThrowOnChangeCheck(oldValue, newValue) + "\n      if (" + this.changeDetectionUtilVarName + ".looseNotIdentical(" + oldValue + ", " + newValue + ")) {\n        " + newValue + " = " + this.changeDetectionUtilVarName + ".unwrapValue(" + newValue + ")\n        " + this._genChangeMarker(r) + "\n        " + this._genUpdateDirectiveOrElement(r) + "\n        " + this._genAddToChanges(r) + "\n        " + oldValue + " = " + newValue + ";\n      }\n    ";
                    var genCode = r.shouldBeChecked() ? "" + read + check : read;
                    if (r.isUsedByOtherRecord()) {
                        return init + " if (" + condition + ") { " + genCode + " } else { " + newValue + " = " + oldValue + "; }";
                    }
                    else {
                        return init + " if (" + condition + ") { " + genCode + " }";
                    }
                };
                /** @internal */
                ChangeDetectorJITGenerator.prototype._genReferenceCheck = function (r) {
                    var _this = this;
                    var oldValue = this._names.getFieldName(r.selfIndex);
                    var newValue = this._names.getLocalName(r.selfIndex);
                    var read = "\n      " + this._logic.genPropertyBindingEvalValue(r) + "\n    ";
                    var check = "\n      " + this._genThrowOnChangeCheck(oldValue, newValue) + "\n      if (" + this.changeDetectionUtilVarName + ".looseNotIdentical(" + oldValue + ", " + newValue + ")) {\n        " + this._genChangeMarker(r) + "\n        " + this._genUpdateDirectiveOrElement(r) + "\n        " + this._genAddToChanges(r) + "\n        " + oldValue + " = " + newValue + ";\n      }\n    ";
                    var genCode = r.shouldBeChecked() ? "" + read + check : read;
                    if (r.isPureFunction()) {
                        var condition = r.args.map(function (a) { return _this._names.getChangeName(a); }).join(" || ");
                        if (r.isUsedByOtherRecord()) {
                            return "if (" + condition + ") { " + genCode + " } else { " + newValue + " = " + oldValue + "; }";
                        }
                        else {
                            return "if (" + condition + ") { " + genCode + " }";
                        }
                    }
                    else {
                        return genCode;
                    }
                };
                /** @internal */
                ChangeDetectorJITGenerator.prototype._genChangeMarker = function (r) {
                    return r.argumentToPureFunction ? this._names.getChangeName(r.selfIndex) + " = true" : "";
                };
                /** @internal */
                ChangeDetectorJITGenerator.prototype._genUpdateDirectiveOrElement = function (r) {
                    if (!r.lastInBinding)
                        return "";
                    var newValue = this._names.getLocalName(r.selfIndex);
                    var notifyDebug = this.genConfig.logBindingUpdate ? "this.logBindingUpdate(" + newValue + ");" : "";
                    var br = r.bindingRecord;
                    if (br.target.isDirective()) {
                        var directiveProperty = this._names.getDirectiveName(br.directiveRecord.directiveIndex) + "." + br.target.name;
                        return "\n        " + directiveProperty + " = " + newValue + ";\n        " + notifyDebug + "\n        " + IS_CHANGED_LOCAL + " = true;\n      ";
                    }
                    else {
                        return "\n        this.notifyDispatcher(" + newValue + ");\n        " + notifyDebug + "\n      ";
                    }
                };
                /** @internal */
                ChangeDetectorJITGenerator.prototype._genThrowOnChangeCheck = function (oldValue, newValue) {
                    if (lang_116.assertionsEnabled()) {
                        return "\n        if (throwOnChange && !" + this.changeDetectionUtilVarName + ".devModeEqual(" + oldValue + ", " + newValue + ")) {\n          this.throwOnChangeError(" + oldValue + ", " + newValue + ");\n        }\n        ";
                    }
                    else {
                        return '';
                    }
                };
                /** @internal */
                ChangeDetectorJITGenerator.prototype._genAddToChanges = function (r) {
                    var newValue = this._names.getLocalName(r.selfIndex);
                    var oldValue = this._names.getFieldName(r.selfIndex);
                    if (!r.bindingRecord.callOnChanges())
                        return "";
                    return CHANGES_LOCAL + " = this.addChange(" + CHANGES_LOCAL + ", " + oldValue + ", " + newValue + ");";
                };
                /** @internal */
                ChangeDetectorJITGenerator.prototype._maybeFirstInBinding = function (r) {
                    var prev = change_detection_util_5.ChangeDetectionUtil.protoByIndex(this.records, r.selfIndex - 1);
                    var firstInBinding = lang_116.isBlank(prev) || prev.bindingRecord !== r.bindingRecord;
                    return firstInBinding && !r.bindingRecord.isDirectiveLifecycle() ?
                        this._names.getPropertyBindingIndex() + " = " + r.propertyBindingIndex + ";" :
                        '';
                };
                /** @internal */
                ChangeDetectorJITGenerator.prototype._maybeGenLastInDirective = function (r) {
                    if (!r.lastInDirective)
                        return "";
                    return "\n      " + CHANGES_LOCAL + " = null;\n      " + this._genNotifyOnPushDetectors(r) + "\n      " + IS_CHANGED_LOCAL + " = false;\n    ";
                };
                /** @internal */
                ChangeDetectorJITGenerator.prototype._genOnCheck = function (r) {
                    var br = r.bindingRecord;
                    return "if (!throwOnChange) " + this._names.getDirectiveName(br.directiveRecord.directiveIndex) + ".ngDoCheck();";
                };
                /** @internal */
                ChangeDetectorJITGenerator.prototype._genOnInit = function (r) {
                    var br = r.bindingRecord;
                    return "if (!throwOnChange && " + this._names.getStateName() + " === " + this.changeDetectorStateVarName + ".NeverChecked) " + this._names.getDirectiveName(br.directiveRecord.directiveIndex) + ".ngOnInit();";
                };
                /** @internal */
                ChangeDetectorJITGenerator.prototype._genOnChange = function (r) {
                    var br = r.bindingRecord;
                    return "if (!throwOnChange && " + CHANGES_LOCAL + ") " + this._names.getDirectiveName(br.directiveRecord.directiveIndex) + ".ngOnChanges(" + CHANGES_LOCAL + ");";
                };
                /** @internal */
                ChangeDetectorJITGenerator.prototype._genNotifyOnPushDetectors = function (r) {
                    var br = r.bindingRecord;
                    if (!r.lastInDirective || br.isDefaultChangeDetection())
                        return "";
                    var retVal = "\n      if(" + IS_CHANGED_LOCAL + ") {\n        " + this._names.getDetectorName(br.directiveRecord.directiveIndex) + ".markAsCheckOnce();\n      }\n    ";
                    return retVal;
                };
                return ChangeDetectorJITGenerator;
            }());
            exports_206("ChangeDetectorJITGenerator", ChangeDetectorJITGenerator);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/change_detection/jit_proto_change_detector", ["test/node_modules/angular2/ts/src/core/change_detection/change_detection_jit_generator"], function(exports_207, context_207) {
    "use strict";
    var __moduleName = context_207 && context_207.id;
    var change_detection_jit_generator_2;
    var JitProtoChangeDetector;
    return {
        setters:[
            function (change_detection_jit_generator_2_1) {
                change_detection_jit_generator_2 = change_detection_jit_generator_2_1;
            }],
        execute: function() {
            JitProtoChangeDetector = (function () {
                function JitProtoChangeDetector(definition) {
                    this.definition = definition;
                    this._factory = this._createFactory(definition);
                }
                JitProtoChangeDetector.isSupported = function () { return true; };
                JitProtoChangeDetector.prototype.instantiate = function () { return this._factory(); };
                /** @internal */
                JitProtoChangeDetector.prototype._createFactory = function (definition) {
                    return new change_detection_jit_generator_2.ChangeDetectorJITGenerator(definition, 'util', 'AbstractChangeDetector', 'ChangeDetectorStatus')
                        .generate();
                };
                return JitProtoChangeDetector;
            }());
            exports_207("JitProtoChangeDetector", JitProtoChangeDetector);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/change_detection/change_detection", ["test/node_modules/angular2/ts/src/core/change_detection/differs/iterable_differs", "test/node_modules/angular2/ts/src/core/change_detection/differs/default_iterable_differ", "test/node_modules/angular2/ts/src/core/change_detection/differs/keyvalue_differs", "test/node_modules/angular2/ts/src/core/change_detection/differs/default_keyvalue_differ", 'angular2/src/facade/lang', "test/node_modules/angular2/ts/src/core/change_detection/parser/ast", "test/node_modules/angular2/ts/src/core/change_detection/parser/lexer", "test/node_modules/angular2/ts/src/core/change_detection/parser/parser", "test/node_modules/angular2/ts/src/core/change_detection/parser/locals", "test/node_modules/angular2/ts/src/core/change_detection/exceptions", "test/node_modules/angular2/ts/src/core/change_detection/interfaces", "test/node_modules/angular2/ts/src/core/change_detection/constants", "test/node_modules/angular2/ts/src/core/change_detection/proto_change_detector", "test/node_modules/angular2/ts/src/core/change_detection/jit_proto_change_detector", "test/node_modules/angular2/ts/src/core/change_detection/binding_record", "test/node_modules/angular2/ts/src/core/change_detection/directive_record", "test/node_modules/angular2/ts/src/core/change_detection/dynamic_change_detector", "test/node_modules/angular2/ts/src/core/change_detection/change_detector_ref", "test/node_modules/angular2/ts/src/core/change_detection/change_detection_util"], function(exports_208, context_208) {
    "use strict";
    var __moduleName = context_208 && context_208.id;
    var iterable_differs_1, default_iterable_differ_1, keyvalue_differs_1, default_keyvalue_differ_1, lang_117;
    var keyValDiff, iterableDiff, defaultIterableDiffers, defaultKeyValueDiffers;
    return {
        setters:[
            function (iterable_differs_1_1) {
                iterable_differs_1 = iterable_differs_1_1;
                exports_208({
                    "IterableDiffers": iterable_differs_1_1["IterableDiffers"],
                    "IterableDiffer": iterable_differs_1_1["IterableDiffer"],
                    "IterableDifferFactory": iterable_differs_1_1["IterableDifferFactory"],
                    "TrackByFn": iterable_differs_1_1["TrackByFn"]
                });
            },
            function (default_iterable_differ_1_1) {
                default_iterable_differ_1 = default_iterable_differ_1_1;
                exports_208({
                    "DefaultIterableDifferFactory": default_iterable_differ_1_1["DefaultIterableDifferFactory"],
                    "CollectionChangeRecord": default_iterable_differ_1_1["CollectionChangeRecord"]
                });
            },
            function (keyvalue_differs_1_1) {
                keyvalue_differs_1 = keyvalue_differs_1_1;
                exports_208({
                    "KeyValueDiffers": keyvalue_differs_1_1["KeyValueDiffers"],
                    "KeyValueDiffer": keyvalue_differs_1_1["KeyValueDiffer"],
                    "KeyValueDifferFactory": keyvalue_differs_1_1["KeyValueDifferFactory"]
                });
            },
            function (default_keyvalue_differ_1_1) {
                default_keyvalue_differ_1 = default_keyvalue_differ_1_1;
                exports_208({
                    "DefaultKeyValueDifferFactory": default_keyvalue_differ_1_1["DefaultKeyValueDifferFactory"],
                    "KeyValueChangeRecord": default_keyvalue_differ_1_1["KeyValueChangeRecord"]
                });
            },
            function (lang_117_1) {
                lang_117 = lang_117_1;
            },
            function (ast_4_1) {
                exports_208({
                    "ASTWithSource": ast_4_1["ASTWithSource"],
                    "AST": ast_4_1["AST"],
                    "AstTransformer": ast_4_1["AstTransformer"],
                    "PropertyRead": ast_4_1["PropertyRead"],
                    "LiteralArray": ast_4_1["LiteralArray"],
                    "ImplicitReceiver": ast_4_1["ImplicitReceiver"]
                });
            },
            function (lexer_2_1) {
                exports_208({
                    "Lexer": lexer_2_1["Lexer"]
                });
            },
            function (parser_1_1) {
                exports_208({
                    "Parser": parser_1_1["Parser"]
                });
            },
            function (locals_2_1) {
                exports_208({
                    "Locals": locals_2_1["Locals"]
                });
            },
            function (exceptions_48_1) {
                exports_208({
                    "DehydratedException": exceptions_48_1["DehydratedException"],
                    "ExpressionChangedAfterItHasBeenCheckedException": exceptions_48_1["ExpressionChangedAfterItHasBeenCheckedException"],
                    "ChangeDetectionError": exceptions_48_1["ChangeDetectionError"]
                });
            },
            function (interfaces_6_1) {
                exports_208({
                    "ProtoChangeDetector": interfaces_6_1["ProtoChangeDetector"],
                    "ChangeDetector": interfaces_6_1["ChangeDetector"],
                    "ChangeDispatcher": interfaces_6_1["ChangeDispatcher"],
                    "ChangeDetectorDefinition": interfaces_6_1["ChangeDetectorDefinition"],
                    "DebugContext": interfaces_6_1["DebugContext"],
                    "ChangeDetectorGenConfig": interfaces_6_1["ChangeDetectorGenConfig"]
                });
            },
            function (constants_8_1) {
                exports_208({
                    "ChangeDetectionStrategy": constants_8_1["ChangeDetectionStrategy"],
                    "CHANGE_DETECTION_STRATEGY_VALUES": constants_8_1["CHANGE_DETECTION_STRATEGY_VALUES"]
                });
            },
            function (proto_change_detector_2_1) {
                exports_208({
                    "DynamicProtoChangeDetector": proto_change_detector_2_1["DynamicProtoChangeDetector"]
                });
            },
            function (jit_proto_change_detector_1_1) {
                exports_208({
                    "JitProtoChangeDetector": jit_proto_change_detector_1_1["JitProtoChangeDetector"]
                });
            },
            function (binding_record_2_1) {
                exports_208({
                    "BindingRecord": binding_record_2_1["BindingRecord"],
                    "BindingTarget": binding_record_2_1["BindingTarget"]
                });
            },
            function (directive_record_3_1) {
                exports_208({
                    "DirectiveIndex": directive_record_3_1["DirectiveIndex"],
                    "DirectiveRecord": directive_record_3_1["DirectiveRecord"]
                });
            },
            function (dynamic_change_detector_2_1) {
                exports_208({
                    "DynamicChangeDetector": dynamic_change_detector_2_1["DynamicChangeDetector"]
                });
            },
            function (change_detector_ref_2_1) {
                exports_208({
                    "ChangeDetectorRef": change_detector_ref_2_1["ChangeDetectorRef"]
                });
            },
            function (change_detection_util_6_1) {
                exports_208({
                    "WrappedValue": change_detection_util_6_1["WrappedValue"],
                    "SimpleChange": change_detection_util_6_1["SimpleChange"]
                });
            }],
        execute: function() {
            /**
             * Structural diffing for `Object`s and `Map`s.
             */
            exports_208("keyValDiff", keyValDiff = lang_117.CONST_EXPR([lang_117.CONST_EXPR(new default_keyvalue_differ_1.DefaultKeyValueDifferFactory())]));
            /**
             * Structural diffing for `Iterable` types such as `Array`s.
             */
            exports_208("iterableDiff", iterableDiff = lang_117.CONST_EXPR([lang_117.CONST_EXPR(new default_iterable_differ_1.DefaultIterableDifferFactory())]));
            exports_208("defaultIterableDiffers", defaultIterableDiffers = lang_117.CONST_EXPR(new iterable_differs_1.IterableDiffers(iterableDiff)));
            exports_208("defaultKeyValueDiffers", defaultKeyValueDiffers = lang_117.CONST_EXPR(new keyvalue_differs_1.KeyValueDiffers(keyValDiff)));
        }
    }
});
/**
 * @module
 * @description
 * Change detection enables data binding in Angular.
 */
System.register("test/node_modules/angular2/ts/src/core/change_detection", ["test/node_modules/angular2/ts/src/core/change_detection/change_detection"], function(exports_209, context_209) {
    "use strict";
    var __moduleName = context_209 && context_209.id;
    return {
        setters:[
            function (change_detection_11_1) {
                exports_209({
                    "ChangeDetectionStrategy": change_detection_11_1["ChangeDetectionStrategy"],
                    "ExpressionChangedAfterItHasBeenCheckedException": change_detection_11_1["ExpressionChangedAfterItHasBeenCheckedException"],
                    "ChangeDetectionError": change_detection_11_1["ChangeDetectionError"],
                    "ChangeDetectorRef": change_detection_11_1["ChangeDetectorRef"],
                    "WrappedValue": change_detection_11_1["WrappedValue"],
                    "SimpleChange": change_detection_11_1["SimpleChange"],
                    "PipeTransform": change_detection_11_1["PipeTransform"],
                    "IterableDiffers": change_detection_11_1["IterableDiffers"],
                    "IterableDiffer": change_detection_11_1["IterableDiffer"],
                    "IterableDifferFactory": change_detection_11_1["IterableDifferFactory"],
                    "KeyValueDiffers": change_detection_11_1["KeyValueDiffers"],
                    "KeyValueDiffer": change_detection_11_1["KeyValueDiffer"],
                    "KeyValueDifferFactory": change_detection_11_1["KeyValueDifferFactory"],
                    "CollectionChangeRecord": change_detection_11_1["CollectionChangeRecord"],
                    "KeyValueChangeRecord": change_detection_11_1["KeyValueChangeRecord"],
                    "TrackByFn": change_detection_11_1["TrackByFn"]
                });
            }],
        execute: function() {
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/platform_directives_and_pipes", ["angular2/src/core/di", "angular2/src/facade/lang"], function(exports_210, context_210) {
    "use strict";
    var __moduleName = context_210 && context_210.id;
    var di_34, lang_118;
    var PLATFORM_DIRECTIVES, PLATFORM_PIPES;
    return {
        setters:[
            function (di_34_1) {
                di_34 = di_34_1;
            },
            function (lang_118_1) {
                lang_118 = lang_118_1;
            }],
        execute: function() {
            /**
             * A token that can be provided when bootstraping an application to make an array of directives
             * available in every component of the application.
             *
             * ### Example
             *
             * ```typescript
             * import {PLATFORM_DIRECTIVES} from 'angular2/core';
             * import {OtherDirective} from './myDirectives';
             *
             * @Component({
             *   selector: 'my-component',
             *   template: `
             *     <!-- can use other directive even though the component does not list it in `directives` -->
             *     <other-directive></other-directive>
             *   `
             * })
             * export class MyComponent {
             *   ...
             * }
             *
             * bootstrap(MyComponent, [provide(PLATFORM_DIRECTIVES, {useValue: [OtherDirective], multi:true})]);
             * ```
             */
            exports_210("PLATFORM_DIRECTIVES", PLATFORM_DIRECTIVES = lang_118.CONST_EXPR(new di_34.OpaqueToken("Platform Directives")));
            /**
             * A token that can be provided when bootstraping an application to make an array of pipes
             * available in every component of the application.
             *
             * ### Example
             *
             * ```typescript
             * import {PLATFORM_PIPES} from 'angular2/core';
             * import {OtherPipe} from './myPipe';
             *
             * @Component({
             *   selector: 'my-component',
             *   template: `
             *     {{123 | other-pipe}}
             *   `
             * })
             * export class MyComponent {
             *   ...
             * }
             *
             * bootstrap(MyComponent, [provide(PLATFORM_PIPES, {useValue: [OtherPipe], multi:true})]);
             * ```
             */
            exports_210("PLATFORM_PIPES", PLATFORM_PIPES = lang_118.CONST_EXPR(new di_34.OpaqueToken("Platform Pipes")));
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/reflection/types", [], function(exports_211, context_211) {
    "use strict";
    var __moduleName = context_211 && context_211.id;
    return {
        setters:[],
        execute: function() {
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/reflection/platform_reflection_capabilities", [], function(exports_212, context_212) {
    "use strict";
    var __moduleName = context_212 && context_212.id;
    return {
        setters:[],
        execute: function() {
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/reflection/reflector", ['angular2/src/facade/lang', 'angular2/src/facade/exceptions', 'angular2/src/facade/collection'], function(exports_213, context_213) {
    "use strict";
    var __moduleName = context_213 && context_213.id;
    var lang_119, exceptions_49, collection_54;
    var ReflectionInfo, Reflector;
    function _mergeMaps(target, config) {
        collection_54.StringMapWrapper.forEach(config, function (v, k) { return target.set(k, v); });
    }
    return {
        setters:[
            function (lang_119_1) {
                lang_119 = lang_119_1;
            },
            function (exceptions_49_1) {
                exceptions_49 = exceptions_49_1;
            },
            function (collection_54_1) {
                collection_54 = collection_54_1;
            }],
        execute: function() {
            /**
             * Reflective information about a symbol, including annotations, interfaces, and other metadata.
             */
            ReflectionInfo = (function () {
                function ReflectionInfo(annotations, parameters, factory, interfaces, propMetadata) {
                    this.annotations = annotations;
                    this.parameters = parameters;
                    this.factory = factory;
                    this.interfaces = interfaces;
                    this.propMetadata = propMetadata;
                }
                return ReflectionInfo;
            }());
            exports_213("ReflectionInfo", ReflectionInfo);
            /**
             * Provides access to reflection data about symbols. Used internally by Angular
             * to power dependency injection and compilation.
             */
            Reflector = (function () {
                function Reflector(reflectionCapabilities) {
                    /** @internal */
                    this._injectableInfo = new collection_54.Map();
                    /** @internal */
                    this._getters = new collection_54.Map();
                    /** @internal */
                    this._setters = new collection_54.Map();
                    /** @internal */
                    this._methods = new collection_54.Map();
                    this._usedKeys = null;
                    this.reflectionCapabilities = reflectionCapabilities;
                }
                Reflector.prototype.isReflectionEnabled = function () { return this.reflectionCapabilities.isReflectionEnabled(); };
                /**
                 * Causes `this` reflector to track keys used to access
                 * {@link ReflectionInfo} objects.
                 */
                Reflector.prototype.trackUsage = function () { this._usedKeys = new collection_54.Set(); };
                /**
                 * Lists types for which reflection information was not requested since
                 * {@link #trackUsage} was called. This list could later be audited as
                 * potential dead code.
                 */
                Reflector.prototype.listUnusedKeys = function () {
                    var _this = this;
                    if (this._usedKeys == null) {
                        throw new exceptions_49.BaseException('Usage tracking is disabled');
                    }
                    var allTypes = collection_54.MapWrapper.keys(this._injectableInfo);
                    return allTypes.filter(function (key) { return !collection_54.SetWrapper.has(_this._usedKeys, key); });
                };
                Reflector.prototype.registerFunction = function (func, funcInfo) {
                    this._injectableInfo.set(func, funcInfo);
                };
                Reflector.prototype.registerType = function (type, typeInfo) {
                    this._injectableInfo.set(type, typeInfo);
                };
                Reflector.prototype.registerGetters = function (getters) { _mergeMaps(this._getters, getters); };
                Reflector.prototype.registerSetters = function (setters) { _mergeMaps(this._setters, setters); };
                Reflector.prototype.registerMethods = function (methods) { _mergeMaps(this._methods, methods); };
                Reflector.prototype.factory = function (type) {
                    if (this._containsReflectionInfo(type)) {
                        var res = this._getReflectionInfo(type).factory;
                        return lang_119.isPresent(res) ? res : null;
                    }
                    else {
                        return this.reflectionCapabilities.factory(type);
                    }
                };
                Reflector.prototype.parameters = function (typeOrFunc) {
                    if (this._injectableInfo.has(typeOrFunc)) {
                        var res = this._getReflectionInfo(typeOrFunc).parameters;
                        return lang_119.isPresent(res) ? res : [];
                    }
                    else {
                        return this.reflectionCapabilities.parameters(typeOrFunc);
                    }
                };
                Reflector.prototype.annotations = function (typeOrFunc) {
                    if (this._injectableInfo.has(typeOrFunc)) {
                        var res = this._getReflectionInfo(typeOrFunc).annotations;
                        return lang_119.isPresent(res) ? res : [];
                    }
                    else {
                        return this.reflectionCapabilities.annotations(typeOrFunc);
                    }
                };
                Reflector.prototype.propMetadata = function (typeOrFunc) {
                    if (this._injectableInfo.has(typeOrFunc)) {
                        var res = this._getReflectionInfo(typeOrFunc).propMetadata;
                        return lang_119.isPresent(res) ? res : {};
                    }
                    else {
                        return this.reflectionCapabilities.propMetadata(typeOrFunc);
                    }
                };
                Reflector.prototype.interfaces = function (type) {
                    if (this._injectableInfo.has(type)) {
                        var res = this._getReflectionInfo(type).interfaces;
                        return lang_119.isPresent(res) ? res : [];
                    }
                    else {
                        return this.reflectionCapabilities.interfaces(type);
                    }
                };
                Reflector.prototype.getter = function (name) {
                    if (this._getters.has(name)) {
                        return this._getters.get(name);
                    }
                    else {
                        return this.reflectionCapabilities.getter(name);
                    }
                };
                Reflector.prototype.setter = function (name) {
                    if (this._setters.has(name)) {
                        return this._setters.get(name);
                    }
                    else {
                        return this.reflectionCapabilities.setter(name);
                    }
                };
                Reflector.prototype.method = function (name) {
                    if (this._methods.has(name)) {
                        return this._methods.get(name);
                    }
                    else {
                        return this.reflectionCapabilities.method(name);
                    }
                };
                /** @internal */
                Reflector.prototype._getReflectionInfo = function (typeOrFunc) {
                    if (lang_119.isPresent(this._usedKeys)) {
                        this._usedKeys.add(typeOrFunc);
                    }
                    return this._injectableInfo.get(typeOrFunc);
                };
                /** @internal */
                Reflector.prototype._containsReflectionInfo = function (typeOrFunc) { return this._injectableInfo.has(typeOrFunc); };
                Reflector.prototype.importUri = function (type) { return this.reflectionCapabilities.importUri(type); };
                return Reflector;
            }());
            exports_213("Reflector", Reflector);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/reflection/reflection_capabilities", ['angular2/src/facade/lang', 'angular2/src/facade/exceptions'], function(exports_214, context_214) {
    "use strict";
    var __moduleName = context_214 && context_214.id;
    var lang_120, exceptions_50;
    var ReflectionCapabilities;
    return {
        setters:[
            function (lang_120_1) {
                lang_120 = lang_120_1;
            },
            function (exceptions_50_1) {
                exceptions_50 = exceptions_50_1;
            }],
        execute: function() {
            ReflectionCapabilities = (function () {
                function ReflectionCapabilities(reflect) {
                    this._reflect = lang_120.isPresent(reflect) ? reflect : lang_120.global.Reflect;
                }
                ReflectionCapabilities.prototype.isReflectionEnabled = function () { return true; };
                ReflectionCapabilities.prototype.factory = function (t) {
                    switch (t.length) {
                        case 0:
                            return function () { return new t(); };
                        case 1:
                            return function (a1) { return new t(a1); };
                        case 2:
                            return function (a1, a2) { return new t(a1, a2); };
                        case 3:
                            return function (a1, a2, a3) { return new t(a1, a2, a3); };
                        case 4:
                            return function (a1, a2, a3, a4) { return new t(a1, a2, a3, a4); };
                        case 5:
                            return function (a1, a2, a3, a4, a5) { return new t(a1, a2, a3, a4, a5); };
                        case 6:
                            return function (a1, a2, a3, a4, a5, a6) {
                                return new t(a1, a2, a3, a4, a5, a6);
                            };
                        case 7:
                            return function (a1, a2, a3, a4, a5, a6, a7) {
                                return new t(a1, a2, a3, a4, a5, a6, a7);
                            };
                        case 8:
                            return function (a1, a2, a3, a4, a5, a6, a7, a8) {
                                return new t(a1, a2, a3, a4, a5, a6, a7, a8);
                            };
                        case 9:
                            return function (a1, a2, a3, a4, a5, a6, a7, a8, a9) {
                                return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9);
                            };
                        case 10:
                            return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10) {
                                return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
                            };
                        case 11:
                            return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11) {
                                return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
                            };
                        case 12:
                            return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12) {
                                return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                            };
                        case 13:
                            return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13) {
                                return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
                            };
                        case 14:
                            return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14) {
                                return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
                            };
                        case 15:
                            return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15) {
                                return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
                            };
                        case 16:
                            return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16) {
                                return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
                            };
                        case 17:
                            return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17) {
                                return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
                            };
                        case 18:
                            return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18) {
                                return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
                            };
                        case 19:
                            return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19) {
                                return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19);
                            };
                        case 20:
                            return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20) {
                                return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
                            };
                    }
                    ;
                    throw new Error("Cannot create a factory for '" + lang_120.stringify(t) + "' because its constructor has more than 20 arguments");
                };
                /** @internal */
                ReflectionCapabilities.prototype._zipTypesAndAnnotations = function (paramTypes, paramAnnotations) {
                    var result;
                    if (typeof paramTypes === 'undefined') {
                        result = new Array(paramAnnotations.length);
                    }
                    else {
                        result = new Array(paramTypes.length);
                    }
                    for (var i = 0; i < result.length; i++) {
                        // TS outputs Object for parameters without types, while Traceur omits
                        // the annotations. For now we preserve the Traceur behavior to aid
                        // migration, but this can be revisited.
                        if (typeof paramTypes === 'undefined') {
                            result[i] = [];
                        }
                        else if (paramTypes[i] != Object) {
                            result[i] = [paramTypes[i]];
                        }
                        else {
                            result[i] = [];
                        }
                        if (lang_120.isPresent(paramAnnotations) && lang_120.isPresent(paramAnnotations[i])) {
                            result[i] = result[i].concat(paramAnnotations[i]);
                        }
                    }
                    return result;
                };
                ReflectionCapabilities.prototype.parameters = function (typeOrFunc) {
                    // Prefer the direct API.
                    if (lang_120.isPresent(typeOrFunc.parameters)) {
                        return typeOrFunc.parameters;
                    }
                    if (lang_120.isPresent(this._reflect) && lang_120.isPresent(this._reflect.getMetadata)) {
                        var paramAnnotations = this._reflect.getMetadata('parameters', typeOrFunc);
                        var paramTypes = this._reflect.getMetadata('design:paramtypes', typeOrFunc);
                        if (lang_120.isPresent(paramTypes) || lang_120.isPresent(paramAnnotations)) {
                            return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
                        }
                    }
                    // The array has to be filled with `undefined` because holes would be skipped by `some`
                    var parameters = new Array(typeOrFunc.length);
                    parameters.fill(undefined);
                    return parameters;
                };
                ReflectionCapabilities.prototype.annotations = function (typeOrFunc) {
                    // Prefer the direct API.
                    if (lang_120.isPresent(typeOrFunc.annotations)) {
                        var annotations = typeOrFunc.annotations;
                        if (lang_120.isFunction(annotations) && annotations.annotations) {
                            annotations = annotations.annotations;
                        }
                        return annotations;
                    }
                    if (lang_120.isPresent(this._reflect) && lang_120.isPresent(this._reflect.getMetadata)) {
                        var annotations = this._reflect.getMetadata('annotations', typeOrFunc);
                        if (lang_120.isPresent(annotations))
                            return annotations;
                    }
                    return [];
                };
                ReflectionCapabilities.prototype.propMetadata = function (typeOrFunc) {
                    // Prefer the direct API.
                    if (lang_120.isPresent(typeOrFunc.propMetadata)) {
                        var propMetadata = typeOrFunc.propMetadata;
                        if (lang_120.isFunction(propMetadata) && propMetadata.propMetadata) {
                            propMetadata = propMetadata.propMetadata;
                        }
                        return propMetadata;
                    }
                    if (lang_120.isPresent(this._reflect) && lang_120.isPresent(this._reflect.getMetadata)) {
                        var propMetadata = this._reflect.getMetadata('propMetadata', typeOrFunc);
                        if (lang_120.isPresent(propMetadata))
                            return propMetadata;
                    }
                    return {};
                };
                ReflectionCapabilities.prototype.interfaces = function (type) {
                    throw new exceptions_50.BaseException("JavaScript does not support interfaces");
                };
                ReflectionCapabilities.prototype.getter = function (name) { return new Function('o', 'return o.' + name + ';'); };
                ReflectionCapabilities.prototype.setter = function (name) {
                    return new Function('o', 'v', 'return o.' + name + ' = v;');
                };
                ReflectionCapabilities.prototype.method = function (name) {
                    var functionBody = "if (!o." + name + ") throw new Error('\"" + name + "\" is undefined');\n        return o." + name + ".apply(o, args);";
                    return new Function('o', 'args', functionBody);
                };
                // There is not a concept of import uri in Js, but this is useful in developing Dart applications.
                ReflectionCapabilities.prototype.importUri = function (type) { return './'; };
                return ReflectionCapabilities;
            }());
            exports_214("ReflectionCapabilities", ReflectionCapabilities);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/reflection/reflection", ["test/node_modules/angular2/ts/src/core/reflection/reflector", "test/node_modules/angular2/ts/src/core/reflection/reflection_capabilities"], function(exports_215, context_215) {
    "use strict";
    var __moduleName = context_215 && context_215.id;
    var reflector_1, reflection_capabilities_1;
    var reflector;
    return {
        setters:[
            function (reflector_1_1) {
                reflector_1 = reflector_1_1;
                exports_215({
                    "Reflector": reflector_1_1["Reflector"],
                    "ReflectionInfo": reflector_1_1["ReflectionInfo"]
                });
            },
            function (reflection_capabilities_1_1) {
                reflection_capabilities_1 = reflection_capabilities_1_1;
            }],
        execute: function() {
            /**
             * The {@link Reflector} used internally in Angular to access metadata
             * about symbols.
             */
            exports_215("reflector", reflector = new reflector_1.Reflector(new reflection_capabilities_1.ReflectionCapabilities()));
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/platform_common_providers", ['angular2/src/facade/lang', 'angular2/src/core/di', 'angular2/src/core/console', "test/node_modules/angular2/ts/src/core/reflection/reflection", 'angular2/src/core/testability/testability'], function(exports_216, context_216) {
    "use strict";
    var __moduleName = context_216 && context_216.id;
    var lang_121, di_35, console_2, reflection_11, testability_2;
    var PLATFORM_COMMON_PROVIDERS;
    function _reflector() {
        return reflection_11.reflector;
    }
    return {
        setters:[
            function (lang_121_1) {
                lang_121 = lang_121_1;
            },
            function (di_35_1) {
                di_35 = di_35_1;
            },
            function (console_2_1) {
                console_2 = console_2_1;
            },
            function (reflection_11_1) {
                reflection_11 = reflection_11_1;
            },
            function (testability_2_1) {
                testability_2 = testability_2_1;
            }],
        execute: function() {
            /**
             * A default set of providers which should be included in any Angular platform.
             */
            exports_216("PLATFORM_COMMON_PROVIDERS", PLATFORM_COMMON_PROVIDERS = lang_121.CONST_EXPR([new di_35.Provider(reflection_11.Reflector, { useFactory: _reflector, deps: [] }), testability_2.TestabilityRegistry, console_2.Console]));
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/application_common_providers", ['angular2/src/facade/lang', 'angular2/src/core/di', "test/node_modules/angular2/ts/src/core/application_tokens", "test/node_modules/angular2/ts/src/core/change_detection/change_detection", 'angular2/src/core/linker/resolved_metadata_cache', "test/node_modules/angular2/ts/src/core/linker/view_manager", "test/node_modules/angular2/ts/src/core/linker/view_resolver", "test/node_modules/angular2/ts/src/core/linker/directive_resolver", "test/node_modules/angular2/ts/src/core/linker/pipe_resolver", "test/node_modules/angular2/ts/src/core/linker/compiler", "test/node_modules/angular2/ts/src/core/linker/dynamic_component_loader"], function(exports_217, context_217) {
    "use strict";
    var __moduleName = context_217 && context_217.id;
    var lang_122, di_36, application_tokens_4, change_detection_12, resolved_metadata_cache_2, view_manager_3, view_manager_4, view_resolver_3, directive_resolver_4, pipe_resolver_3, compiler_6, compiler_7, dynamic_component_loader_4, dynamic_component_loader_5;
    var APPLICATION_COMMON_PROVIDERS;
    return {
        setters:[
            function (lang_122_1) {
                lang_122 = lang_122_1;
            },
            function (di_36_1) {
                di_36 = di_36_1;
            },
            function (application_tokens_4_1) {
                application_tokens_4 = application_tokens_4_1;
            },
            function (change_detection_12_1) {
                change_detection_12 = change_detection_12_1;
            },
            function (resolved_metadata_cache_2_1) {
                resolved_metadata_cache_2 = resolved_metadata_cache_2_1;
            },
            function (view_manager_3_1) {
                view_manager_3 = view_manager_3_1;
                view_manager_4 = view_manager_3_1;
            },
            function (view_resolver_3_1) {
                view_resolver_3 = view_resolver_3_1;
            },
            function (directive_resolver_4_1) {
                directive_resolver_4 = directive_resolver_4_1;
            },
            function (pipe_resolver_3_1) {
                pipe_resolver_3 = pipe_resolver_3_1;
            },
            function (compiler_6_1) {
                compiler_6 = compiler_6_1;
                compiler_7 = compiler_6_1;
            },
            function (dynamic_component_loader_4_1) {
                dynamic_component_loader_4 = dynamic_component_loader_4_1;
                dynamic_component_loader_5 = dynamic_component_loader_4_1;
            }],
        execute: function() {
            /**
             * A default set of providers which should be included in any Angular
             * application, regardless of the platform it runs onto.
             */
            exports_217("APPLICATION_COMMON_PROVIDERS", APPLICATION_COMMON_PROVIDERS = lang_122.CONST_EXPR([
                new di_36.Provider(compiler_6.Compiler, { useClass: compiler_7.Compiler_ }),
                application_tokens_4.APP_ID_RANDOM_PROVIDER,
                resolved_metadata_cache_2.ResolvedMetadataCache,
                new di_36.Provider(view_manager_3.AppViewManager, { useClass: view_manager_4.AppViewManager_ }),
                view_resolver_3.ViewResolver,
                new di_36.Provider(change_detection_12.IterableDiffers, { useValue: change_detection_12.defaultIterableDiffers }),
                new di_36.Provider(change_detection_12.KeyValueDiffers, { useValue: change_detection_12.defaultKeyValueDiffers }),
                directive_resolver_4.DirectiveResolver,
                pipe_resolver_3.PipeResolver,
                new di_36.Provider(dynamic_component_loader_4.DynamicComponentLoader, { useClass: dynamic_component_loader_5.DynamicComponentLoader_ })
            ]));
        }
    }
});
System.register("test/node_modules/angular2/ts/core", ["test/node_modules/angular2/ts/src/core/metadata", "test/node_modules/angular2/ts/src/core/util", "test/node_modules/angular2/ts/src/core/prod_mode", "test/node_modules/angular2/ts/src/core/di", "test/node_modules/angular2/ts/src/facade/facade", 'angular2/src/facade/lang', "test/node_modules/angular2/ts/src/core/application_ref", "test/node_modules/angular2/ts/src/core/application_tokens", "test/node_modules/angular2/ts/src/core/zone", "test/node_modules/angular2/ts/src/core/render", "test/node_modules/angular2/ts/src/core/linker", "test/node_modules/angular2/ts/src/core/debug/debug_node", "test/node_modules/angular2/ts/src/core/testability/testability", "test/node_modules/angular2/ts/src/core/change_detection", "test/node_modules/angular2/ts/src/core/platform_directives_and_pipes", "test/node_modules/angular2/ts/src/core/platform_common_providers", "test/node_modules/angular2/ts/src/core/application_common_providers", "test/node_modules/angular2/ts/src/core/reflection/reflection"], function(exports_218, context_218) {
    "use strict";
    var __moduleName = context_218 && context_218.id;
    var exportedNames_4 = {
        'enableProdMode': true,
        'platform': true,
        'createNgZone': true,
        'PlatformRef': true,
        'ApplicationRef': true,
        'APP_ID': true,
        'APP_COMPONENT': true,
        'APP_INITIALIZER': true,
        'PACKAGE_ROOT_URL': true,
        'PLATFORM_INITIALIZER': true,
        'DebugElement': true,
        'DebugNode': true,
        'asNativeElements': true
    };
    function exportStar_6(m) {
        var exports = {};
        for(var n in m) {
            if (n !== "default"&& !exportedNames_4.hasOwnProperty(n)) exports[n] = m[n];
        }
        exports_218(exports);
    }
    return {
        setters:[
            function (metadata_9_1) {
                exportStar_6(metadata_9_1);
            },
            function (util_11_1) {
                exportStar_6(util_11_1);
            },
            function (prod_mode_1_1) {
                exportStar_6(prod_mode_1_1);
            },
            function (di_37_1) {
                exportStar_6(di_37_1);
            },
            function (facade_1_1) {
                exportStar_6(facade_1_1);
            },
            function (lang_123_1) {
                exports_218({
                    "enableProdMode": lang_123_1["enableProdMode"]
                });
            },
            function (application_ref_1_1) {
                exports_218({
                    "platform": application_ref_1_1["platform"],
                    "createNgZone": application_ref_1_1["createNgZone"],
                    "PlatformRef": application_ref_1_1["PlatformRef"],
                    "ApplicationRef": application_ref_1_1["ApplicationRef"]
                });
            },
            function (application_tokens_5_1) {
                exports_218({
                    "APP_ID": application_tokens_5_1["APP_ID"],
                    "APP_COMPONENT": application_tokens_5_1["APP_COMPONENT"],
                    "APP_INITIALIZER": application_tokens_5_1["APP_INITIALIZER"],
                    "PACKAGE_ROOT_URL": application_tokens_5_1["PACKAGE_ROOT_URL"],
                    "PLATFORM_INITIALIZER": application_tokens_5_1["PLATFORM_INITIALIZER"]
                });
            },
            function (zone_1_1) {
                exportStar_6(zone_1_1);
            },
            function (render_1_1) {
                exportStar_6(render_1_1);
            },
            function (linker_1_1) {
                exportStar_6(linker_1_1);
            },
            function (debug_node_1_1) {
                exports_218({
                    "DebugElement": debug_node_1_1["DebugElement"],
                    "DebugNode": debug_node_1_1["DebugNode"],
                    "asNativeElements": debug_node_1_1["asNativeElements"]
                });
            },
            function (testability_3_1) {
                exportStar_6(testability_3_1);
            },
            function (change_detection_13_1) {
                exportStar_6(change_detection_13_1);
            },
            function (platform_directives_and_pipes_3_1) {
                exportStar_6(platform_directives_and_pipes_3_1);
            },
            function (platform_common_providers_1_1) {
                exportStar_6(platform_common_providers_1_1);
            },
            function (application_common_providers_1_1) {
                exportStar_6(application_common_providers_1_1);
            },
            function (reflection_12_1) {
                exportStar_6(reflection_12_1);
            }],
        execute: function() {
        }
    }
});
System.register("test/node_modules/angular2/ts/src/http/enums", [], function(exports_219, context_219) {
    "use strict";
    var __moduleName = context_219 && context_219.id;
    var RequestMethod, ReadyState, ResponseType;
    return {
        setters:[],
        execute: function() {
            /**
             * Supported http methods.
             */
            (function (RequestMethod) {
                RequestMethod[RequestMethod["Get"] = 0] = "Get";
                RequestMethod[RequestMethod["Post"] = 1] = "Post";
                RequestMethod[RequestMethod["Put"] = 2] = "Put";
                RequestMethod[RequestMethod["Delete"] = 3] = "Delete";
                RequestMethod[RequestMethod["Options"] = 4] = "Options";
                RequestMethod[RequestMethod["Head"] = 5] = "Head";
                RequestMethod[RequestMethod["Patch"] = 6] = "Patch";
            })(RequestMethod || (RequestMethod = {}));
            exports_219("RequestMethod", RequestMethod);
            /**
             * All possible states in which a connection can be, based on
             * [States](http://www.w3.org/TR/XMLHttpRequest/#states) from the `XMLHttpRequest` spec, but with an
             * additional "CANCELLED" state.
             */
            (function (ReadyState) {
                ReadyState[ReadyState["Unsent"] = 0] = "Unsent";
                ReadyState[ReadyState["Open"] = 1] = "Open";
                ReadyState[ReadyState["HeadersReceived"] = 2] = "HeadersReceived";
                ReadyState[ReadyState["Loading"] = 3] = "Loading";
                ReadyState[ReadyState["Done"] = 4] = "Done";
                ReadyState[ReadyState["Cancelled"] = 5] = "Cancelled";
            })(ReadyState || (ReadyState = {}));
            exports_219("ReadyState", ReadyState);
            /**
             * Acceptable response types to be associated with a {@link Response}, based on
             * [ResponseType](https://fetch.spec.whatwg.org/#responsetype) from the Fetch spec.
             */
            (function (ResponseType) {
                ResponseType[ResponseType["Basic"] = 0] = "Basic";
                ResponseType[ResponseType["Cors"] = 1] = "Cors";
                ResponseType[ResponseType["Default"] = 2] = "Default";
                ResponseType[ResponseType["Error"] = 3] = "Error";
                ResponseType[ResponseType["Opaque"] = 4] = "Opaque";
            })(ResponseType || (ResponseType = {}));
            exports_219("ResponseType", ResponseType);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/http/headers", ['angular2/src/facade/lang', 'angular2/src/facade/exceptions', 'angular2/src/facade/collection'], function(exports_220, context_220) {
    "use strict";
    var __moduleName = context_220 && context_220.id;
    var lang_124, exceptions_51, collection_55;
    var Headers;
    return {
        setters:[
            function (lang_124_1) {
                lang_124 = lang_124_1;
            },
            function (exceptions_51_1) {
                exceptions_51 = exceptions_51_1;
            },
            function (collection_55_1) {
                collection_55 = collection_55_1;
            }],
        execute: function() {
            /**
             * Polyfill for [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers), as
             * specified in the [Fetch Spec](https://fetch.spec.whatwg.org/#headers-class).
             *
             * The only known difference between this `Headers` implementation and the spec is the
             * lack of an `entries` method.
             *
             * ### Example ([live demo](http://plnkr.co/edit/MTdwT6?p=preview))
             *
             * ```
             * import {Headers} from 'angular2/http';
             *
             * var firstHeaders = new Headers();
             * firstHeaders.append('Content-Type', 'image/jpeg');
             * console.log(firstHeaders.get('Content-Type')) //'image/jpeg'
             *
             * // Create headers from Plain Old JavaScript Object
             * var secondHeaders = new Headers({
             *   'X-My-Custom-Header': 'Angular'
             * });
             * console.log(secondHeaders.get('X-My-Custom-Header')); //'Angular'
             *
             * var thirdHeaders = new Headers(secondHeaders);
             * console.log(thirdHeaders.get('X-My-Custom-Header')); //'Angular'
             * ```
             */
            Headers = (function () {
                function Headers(headers) {
                    var _this = this;
                    if (headers instanceof Headers) {
                        this._headersMap = headers._headersMap;
                        return;
                    }
                    this._headersMap = new collection_55.Map();
                    if (lang_124.isBlank(headers)) {
                        return;
                    }
                    // headers instanceof StringMap
                    collection_55.StringMapWrapper.forEach(headers, function (v, k) {
                        _this._headersMap.set(k, collection_55.isListLikeIterable(v) ? v : [v]);
                    });
                }
                /**
                 * Returns a new Headers instance from the given DOMString of Response Headers
                 */
                Headers.fromResponseHeaderString = function (headersString) {
                    return headersString.trim()
                        .split('\n')
                        .map(function (val) { return val.split(':'); })
                        .map(function (_a) {
                        var key = _a[0], parts = _a.slice(1);
                        return ([key.trim(), parts.join(':').trim()]);
                    })
                        .reduce(function (headers, _a) {
                        var key = _a[0], value = _a[1];
                        return !headers.set(key, value) && headers;
                    }, new Headers());
                };
                /**
                 * Appends a header to existing list of header values for a given header name.
                 */
                Headers.prototype.append = function (name, value) {
                    var mapName = this._headersMap.get(name);
                    var list = collection_55.isListLikeIterable(mapName) ? mapName : [];
                    list.push(value);
                    this._headersMap.set(name, list);
                };
                /**
                 * Deletes all header values for the given name.
                 */
                Headers.prototype.delete = function (name) { this._headersMap.delete(name); };
                Headers.prototype.forEach = function (fn) {
                    this._headersMap.forEach(fn);
                };
                /**
                 * Returns first header that matches given name.
                 */
                Headers.prototype.get = function (header) { return collection_55.ListWrapper.first(this._headersMap.get(header)); };
                /**
                 * Check for existence of header by given name.
                 */
                Headers.prototype.has = function (header) { return this._headersMap.has(header); };
                /**
                 * Provides names of set headers
                 */
                Headers.prototype.keys = function () { return collection_55.MapWrapper.keys(this._headersMap); };
                /**
                 * Sets or overrides header value for given name.
                 */
                Headers.prototype.set = function (header, value) {
                    var list = [];
                    if (collection_55.isListLikeIterable(value)) {
                        var pushValue = value.join(',');
                        list.push(pushValue);
                    }
                    else {
                        list.push(value);
                    }
                    this._headersMap.set(header, list);
                };
                /**
                 * Returns values of all headers.
                 */
                Headers.prototype.values = function () { return collection_55.MapWrapper.values(this._headersMap); };
                /**
                 * Returns string of all headers.
                 */
                Headers.prototype.toJSON = function () {
                    var serializableHeaders = {};
                    this._headersMap.forEach(function (values, name) {
                        var list = [];
                        collection_55.iterateListLike(values, function (val) { return list = collection_55.ListWrapper.concat(list, val.split(',')); });
                        serializableHeaders[name] = list;
                    });
                    return serializableHeaders;
                };
                /**
                 * Returns list of header values for a given name.
                 */
                Headers.prototype.getAll = function (header) {
                    var headers = this._headersMap.get(header);
                    return collection_55.isListLikeIterable(headers) ? headers : [];
                };
                /**
                 * This method is not implemented.
                 */
                Headers.prototype.entries = function () { throw new exceptions_51.BaseException('"entries" method is not implemented on Headers class'); };
                return Headers;
            }());
            exports_220("Headers", Headers);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/http/base_response_options", ['angular2/core', 'angular2/src/facade/lang', "test/node_modules/angular2/ts/src/http/headers", "test/node_modules/angular2/ts/src/http/enums"], function(exports_221, context_221) {
    "use strict";
    var __moduleName = context_221 && context_221.id;
    var core_75, lang_125, headers_1, enums_1;
    var ResponseOptions, BaseResponseOptions;
    return {
        setters:[
            function (core_75_1) {
                core_75 = core_75_1;
            },
            function (lang_125_1) {
                lang_125 = lang_125_1;
            },
            function (headers_1_1) {
                headers_1 = headers_1_1;
            },
            function (enums_1_1) {
                enums_1 = enums_1_1;
            }],
        execute: function() {
            /**
             * Creates a response options object to be optionally provided when instantiating a
             * {@link Response}.
             *
             * This class is based on the `ResponseInit` description in the [Fetch
             * Spec](https://fetch.spec.whatwg.org/#responseinit).
             *
             * All values are null by default. Typical defaults can be found in the
             * {@link BaseResponseOptions} class, which sub-classes `ResponseOptions`.
             *
             * This class may be used in tests to build {@link Response Responses} for
             * mock responses (see {@link MockBackend}).
             *
             * ### Example ([live demo](http://plnkr.co/edit/P9Jkk8e8cz6NVzbcxEsD?p=preview))
             *
             * ```typescript
             * import {ResponseOptions, Response} from 'angular2/http';
             *
             * var options = new ResponseOptions({
             *   body: '{"name":"Jeff"}'
             * });
             * var res = new Response(options);
             *
             * console.log('res.json():', res.json()); // Object {name: "Jeff"}
             * ```
             */
            ResponseOptions = (function () {
                function ResponseOptions(_a) {
                    var _b = _a === void 0 ? {} : _a, body = _b.body, status = _b.status, headers = _b.headers, statusText = _b.statusText, type = _b.type, url = _b.url;
                    this.body = lang_125.isPresent(body) ? body : null;
                    this.status = lang_125.isPresent(status) ? status : null;
                    this.headers = lang_125.isPresent(headers) ? headers : null;
                    this.statusText = lang_125.isPresent(statusText) ? statusText : null;
                    this.type = lang_125.isPresent(type) ? type : null;
                    this.url = lang_125.isPresent(url) ? url : null;
                }
                /**
                 * Creates a copy of the `ResponseOptions` instance, using the optional input as values to
                 * override
                 * existing values. This method will not change the values of the instance on which it is being
                 * called.
                 *
                 * This may be useful when sharing a base `ResponseOptions` object inside tests,
                 * where certain properties may change from test to test.
                 *
                 * ### Example ([live demo](http://plnkr.co/edit/1lXquqFfgduTFBWjNoRE?p=preview))
                 *
                 * ```typescript
                 * import {ResponseOptions, Response} from 'angular2/http';
                 *
                 * var options = new ResponseOptions({
                 *   body: {name: 'Jeff'}
                 * });
                 * var res = new Response(options.merge({
                 *   url: 'https://google.com'
                 * }));
                 * console.log('options.url:', options.url); // null
                 * console.log('res.json():', res.json()); // Object {name: "Jeff"}
                 * console.log('res.url:', res.url); // https://google.com
                 * ```
                 */
                ResponseOptions.prototype.merge = function (options) {
                    return new ResponseOptions({
                        body: lang_125.isPresent(options) && lang_125.isPresent(options.body) ? options.body : this.body,
                        status: lang_125.isPresent(options) && lang_125.isPresent(options.status) ? options.status : this.status,
                        headers: lang_125.isPresent(options) && lang_125.isPresent(options.headers) ? options.headers : this.headers,
                        statusText: lang_125.isPresent(options) && lang_125.isPresent(options.statusText) ? options.statusText :
                            this.statusText,
                        type: lang_125.isPresent(options) && lang_125.isPresent(options.type) ? options.type : this.type,
                        url: lang_125.isPresent(options) && lang_125.isPresent(options.url) ? options.url : this.url,
                    });
                };
                return ResponseOptions;
            }());
            exports_221("ResponseOptions", ResponseOptions);
            /**
             * Subclass of {@link ResponseOptions}, with default values.
             *
             * Default values:
             *  * status: 200
             *  * headers: empty {@link Headers} object
             *
             * This class could be extended and bound to the {@link ResponseOptions} class
             * when configuring an {@link Injector}, in order to override the default options
             * used by {@link Http} to create {@link Response Responses}.
             *
             * ### Example ([live demo](http://plnkr.co/edit/qv8DLT?p=preview))
             *
             * ```typescript
             * import {provide} from 'angular2/core';
             * import {bootstrap} from 'angular2/platform/browser';
             * import {HTTP_PROVIDERS, Headers, Http, BaseResponseOptions, ResponseOptions} from
             * 'angular2/http';
             * import {App} from './myapp';
             *
             * class MyOptions extends BaseResponseOptions {
             *   headers:Headers = new Headers({network: 'github'});
             * }
             *
             * bootstrap(App, [HTTP_PROVIDERS, provide(ResponseOptions, {useClass: MyOptions})]);
             * ```
             *
             * The options could also be extended when manually creating a {@link Response}
             * object.
             *
             * ### Example ([live demo](http://plnkr.co/edit/VngosOWiaExEtbstDoix?p=preview))
             *
             * ```
             * import {BaseResponseOptions, Response} from 'angular2/http';
             *
             * var options = new BaseResponseOptions();
             * var res = new Response(options.merge({
             *   body: 'Angular2',
             *   headers: new Headers({framework: 'angular'})
             * }));
             * console.log('res.headers.get("framework"):', res.headers.get('framework')); // angular
             * console.log('res.text():', res.text()); // Angular2;
             * ```
             */
            BaseResponseOptions = (function (_super) {
                __extends(BaseResponseOptions, _super);
                function BaseResponseOptions() {
                    _super.call(this, { status: 200, statusText: 'Ok', type: enums_1.ResponseType.Default, headers: new headers_1.Headers() });
                }
                BaseResponseOptions = __decorate([
                    core_75.Injectable(), 
                    __metadata('design:paramtypes', [])
                ], BaseResponseOptions);
                return BaseResponseOptions;
            }(ResponseOptions));
            exports_221("BaseResponseOptions", BaseResponseOptions);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/http/static_response", ['angular2/src/facade/lang', 'angular2/src/facade/exceptions', "test/node_modules/angular2/ts/src/http/http_utils"], function(exports_222, context_222) {
    "use strict";
    var __moduleName = context_222 && context_222.id;
    var lang_126, exceptions_52, http_utils_1;
    var Response;
    return {
        setters:[
            function (lang_126_1) {
                lang_126 = lang_126_1;
            },
            function (exceptions_52_1) {
                exceptions_52 = exceptions_52_1;
            },
            function (http_utils_1_1) {
                http_utils_1 = http_utils_1_1;
            }],
        execute: function() {
            /**
             * Creates `Response` instances from provided values.
             *
             * Though this object isn't
             * usually instantiated by end-users, it is the primary object interacted with when it comes time to
             * add data to a view.
             *
             * ### Example
             *
             * ```
             * http.request('my-friends.txt').subscribe(response => this.friends = response.text());
             * ```
             *
             * The Response's interface is inspired by the Response constructor defined in the [Fetch
             * Spec](https://fetch.spec.whatwg.org/#response-class), but is considered a static value whose body
             * can be accessed many times. There are other differences in the implementation, but this is the
             * most significant.
             */
            Response = (function () {
                function Response(responseOptions) {
                    this._body = responseOptions.body;
                    this.status = responseOptions.status;
                    this.statusText = responseOptions.statusText;
                    this.headers = responseOptions.headers;
                    this.type = responseOptions.type;
                    this.url = responseOptions.url;
                }
                /**
                 * Not yet implemented
                 */
                // TODO: Blob return type
                Response.prototype.blob = function () { throw new exceptions_52.BaseException('"blob()" method not implemented on Response superclass'); };
                /**
                 * Attempts to return body as parsed `JSON` object, or raises an exception.
                 */
                Response.prototype.json = function () {
                    var jsonResponse;
                    if (http_utils_1.isJsObject(this._body)) {
                        jsonResponse = this._body;
                    }
                    else if (lang_126.isString(this._body)) {
                        jsonResponse = lang_126.Json.parse(this._body);
                    }
                    return jsonResponse;
                };
                /**
                 * Returns the body as a string, presuming `toString()` can be called on the response body.
                 */
                Response.prototype.text = function () { return this._body.toString(); };
                /**
                 * Not yet implemented
                 */
                // TODO: ArrayBuffer return type
                Response.prototype.arrayBuffer = function () {
                    throw new exceptions_52.BaseException('"arrayBuffer()" method not implemented on Response superclass');
                };
                return Response;
            }());
            exports_222("Response", Response);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/http/http_utils", ['angular2/src/facade/lang', "test/node_modules/angular2/ts/src/http/enums", 'angular2/src/facade/exceptions'], function(exports_223, context_223) {
    "use strict";
    var __moduleName = context_223 && context_223.id;
    var lang_127, enums_2, exceptions_53;
    var isSuccess;
    function normalizeMethodName(method) {
        if (lang_127.isString(method)) {
            var originalMethod = method;
            method = method
                .replace(/(\w)(\w*)/g, function (g0, g1, g2) {
                return g1.toUpperCase() + g2.toLowerCase();
            });
            method = enums_2.RequestMethod[method];
            if (typeof method !== 'number')
                throw exceptions_53.makeTypeError("Invalid request method. The method \"" + originalMethod + "\" is not supported.");
        }
        return method;
    }
    exports_223("normalizeMethodName", normalizeMethodName);
    function getResponseURL(xhr) {
        if ('responseURL' in xhr) {
            return xhr.responseURL;
        }
        if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {
            return xhr.getResponseHeader('X-Request-URL');
        }
        return;
    }
    exports_223("getResponseURL", getResponseURL);
    return {
        setters:[
            function (lang_127_1) {
                lang_127 = lang_127_1;
                exports_223({
                    "isJsObject": lang_127_1["isJsObject"]
                });
            },
            function (enums_2_1) {
                enums_2 = enums_2_1;
            },
            function (exceptions_53_1) {
                exceptions_53 = exceptions_53_1;
            }],
        execute: function() {
            exports_223("isSuccess", isSuccess = function (status) { return (status >= 200 && status < 300); });
        }
    }
});
System.register("test/node_modules/angular2/ts/src/http/static_request", ["test/node_modules/angular2/ts/src/http/headers", "test/node_modules/angular2/ts/src/http/http_utils", 'angular2/src/facade/lang'], function(exports_224, context_224) {
    "use strict";
    var __moduleName = context_224 && context_224.id;
    var headers_2, http_utils_2, lang_129;
    var Request;
    return {
        setters:[
            function (headers_2_1) {
                headers_2 = headers_2_1;
            },
            function (http_utils_2_1) {
                http_utils_2 = http_utils_2_1;
            },
            function (lang_129_1) {
                lang_129 = lang_129_1;
            }],
        execute: function() {
            // TODO(jeffbcross): properly implement body accessors
            /**
             * Creates `Request` instances from provided values.
             *
             * The Request's interface is inspired by the Request constructor defined in the [Fetch
             * Spec](https://fetch.spec.whatwg.org/#request-class),
             * but is considered a static value whose body can be accessed many times. There are other
             * differences in the implementation, but this is the most significant.
             *
             * `Request` instances are typically created by higher-level classes, like {@link Http} and
             * {@link Jsonp}, but it may occasionally be useful to explicitly create `Request` instances.
             * One such example is when creating services that wrap higher-level services, like {@link Http},
             * where it may be useful to generate a `Request` with arbitrary headers and search params.
             *
             * ```typescript
             * import {Injectable, Injector} from 'angular2/core';
             * import {HTTP_PROVIDERS, Http, Request, RequestMethod} from 'angular2/http';
             *
             * @Injectable()
             * class AutoAuthenticator {
             *   constructor(public http:Http) {}
             *   request(url:string) {
             *     return this.http.request(new Request({
             *       method: RequestMethod.Get,
             *       url: url,
             *       search: 'password=123'
             *     }));
             *   }
             * }
             *
             * var injector = Injector.resolveAndCreate([HTTP_PROVIDERS, AutoAuthenticator]);
             * var authenticator = injector.get(AutoAuthenticator);
             * authenticator.request('people.json').subscribe(res => {
             *   //URL should have included '?password=123'
             *   console.log('people', res.json());
             * });
             * ```
             */
            Request = (function () {
                function Request(requestOptions) {
                    // TODO: assert that url is present
                    var url = requestOptions.url;
                    this.url = requestOptions.url;
                    if (lang_129.isPresent(requestOptions.search)) {
                        var search = requestOptions.search.toString();
                        if (search.length > 0) {
                            var prefix = '?';
                            if (lang_129.StringWrapper.contains(this.url, '?')) {
                                prefix = (this.url[this.url.length - 1] == '&') ? '' : '&';
                            }
                            // TODO: just delete search-query-looking string in url?
                            this.url = url + prefix + search;
                        }
                    }
                    this._body = requestOptions.body;
                    this.method = http_utils_2.normalizeMethodName(requestOptions.method);
                    // TODO(jeffbcross): implement behavior
                    // Defaults to 'omit', consistent with browser
                    // TODO(jeffbcross): implement behavior
                    this.headers = new headers_2.Headers(requestOptions.headers);
                }
                /**
                 * Returns the request's body as string, assuming that body exists. If body is undefined, return
                 * empty
                 * string.
                 */
                Request.prototype.text = function () { return lang_129.isPresent(this._body) ? this._body.toString() : ''; };
                return Request;
            }());
            exports_224("Request", Request);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/http/url_search_params", ['angular2/src/facade/lang', 'angular2/src/facade/collection'], function(exports_225, context_225) {
    "use strict";
    var __moduleName = context_225 && context_225.id;
    var lang_130, collection_56;
    var URLSearchParams;
    function paramParser(rawParams) {
        if (rawParams === void 0) { rawParams = ''; }
        var map = new collection_56.Map();
        if (rawParams.length > 0) {
            var params = rawParams.split('&');
            params.forEach(function (param) {
                var split = param.split('=');
                var key = split[0];
                var val = split[1];
                var list = lang_130.isPresent(map.get(key)) ? map.get(key) : [];
                list.push(val);
                map.set(key, list);
            });
        }
        return map;
    }
    return {
        setters:[
            function (lang_130_1) {
                lang_130 = lang_130_1;
            },
            function (collection_56_1) {
                collection_56 = collection_56_1;
            }],
        execute: function() {
            /**
             * Map-like representation of url search parameters, based on
             * [URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) in the url living standard,
             * with several extensions for merging URLSearchParams objects:
             *   - setAll()
             *   - appendAll()
             *   - replaceAll()
             */
            URLSearchParams = (function () {
                function URLSearchParams(rawParams) {
                    if (rawParams === void 0) { rawParams = ''; }
                    this.rawParams = rawParams;
                    this.paramsMap = paramParser(rawParams);
                }
                URLSearchParams.prototype.clone = function () {
                    var clone = new URLSearchParams();
                    clone.appendAll(this);
                    return clone;
                };
                URLSearchParams.prototype.has = function (param) { return this.paramsMap.has(param); };
                URLSearchParams.prototype.get = function (param) {
                    var storedParam = this.paramsMap.get(param);
                    if (collection_56.isListLikeIterable(storedParam)) {
                        return collection_56.ListWrapper.first(storedParam);
                    }
                    else {
                        return null;
                    }
                };
                URLSearchParams.prototype.getAll = function (param) {
                    var mapParam = this.paramsMap.get(param);
                    return lang_130.isPresent(mapParam) ? mapParam : [];
                };
                URLSearchParams.prototype.set = function (param, val) {
                    var mapParam = this.paramsMap.get(param);
                    var list = lang_130.isPresent(mapParam) ? mapParam : [];
                    collection_56.ListWrapper.clear(list);
                    list.push(val);
                    this.paramsMap.set(param, list);
                };
                // A merge operation
                // For each name-values pair in `searchParams`, perform `set(name, values[0])`
                //
                // E.g: "a=[1,2,3], c=[8]" + "a=[4,5,6], b=[7]" = "a=[4], c=[8], b=[7]"
                //
                // TODO(@caitp): document this better
                URLSearchParams.prototype.setAll = function (searchParams) {
                    var _this = this;
                    searchParams.paramsMap.forEach(function (value, param) {
                        var mapParam = _this.paramsMap.get(param);
                        var list = lang_130.isPresent(mapParam) ? mapParam : [];
                        collection_56.ListWrapper.clear(list);
                        list.push(value[0]);
                        _this.paramsMap.set(param, list);
                    });
                };
                URLSearchParams.prototype.append = function (param, val) {
                    var mapParam = this.paramsMap.get(param);
                    var list = lang_130.isPresent(mapParam) ? mapParam : [];
                    list.push(val);
                    this.paramsMap.set(param, list);
                };
                // A merge operation
                // For each name-values pair in `searchParams`, perform `append(name, value)`
                // for each value in `values`.
                //
                // E.g: "a=[1,2], c=[8]" + "a=[3,4], b=[7]" = "a=[1,2,3,4], c=[8], b=[7]"
                //
                // TODO(@caitp): document this better
                URLSearchParams.prototype.appendAll = function (searchParams) {
                    var _this = this;
                    searchParams.paramsMap.forEach(function (value, param) {
                        var mapParam = _this.paramsMap.get(param);
                        var list = lang_130.isPresent(mapParam) ? mapParam : [];
                        for (var i = 0; i < value.length; ++i) {
                            list.push(value[i]);
                        }
                        _this.paramsMap.set(param, list);
                    });
                };
                // A merge operation
                // For each name-values pair in `searchParams`, perform `delete(name)`,
                // followed by `set(name, values)`
                //
                // E.g: "a=[1,2,3], c=[8]" + "a=[4,5,6], b=[7]" = "a=[4,5,6], c=[8], b=[7]"
                //
                // TODO(@caitp): document this better
                URLSearchParams.prototype.replaceAll = function (searchParams) {
                    var _this = this;
                    searchParams.paramsMap.forEach(function (value, param) {
                        var mapParam = _this.paramsMap.get(param);
                        var list = lang_130.isPresent(mapParam) ? mapParam : [];
                        collection_56.ListWrapper.clear(list);
                        for (var i = 0; i < value.length; ++i) {
                            list.push(value[i]);
                        }
                        _this.paramsMap.set(param, list);
                    });
                };
                URLSearchParams.prototype.toString = function () {
                    var paramsList = [];
                    this.paramsMap.forEach(function (values, k) { values.forEach(function (v) { return paramsList.push(k + '=' + v); }); });
                    return paramsList.join('&');
                };
                URLSearchParams.prototype.delete = function (param) { this.paramsMap.delete(param); };
                return URLSearchParams;
            }());
            exports_225("URLSearchParams", URLSearchParams);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/http/interfaces", [], function(exports_226, context_226) {
    "use strict";
    var __moduleName = context_226 && context_226.id;
    var ConnectionBackend, Connection;
    return {
        setters:[],
        execute: function() {
            /**
             * Abstract class from which real backends are derived.
             *
             * The primary purpose of a `ConnectionBackend` is to create new connections to fulfill a given
             * {@link Request}.
             */
            ConnectionBackend = (function () {
                function ConnectionBackend() {
                }
                return ConnectionBackend;
            }());
            exports_226("ConnectionBackend", ConnectionBackend);
            /**
             * Abstract class from which real connections are derived.
             */
            Connection = (function () {
                function Connection() {
                }
                return Connection;
            }());
            exports_226("Connection", Connection);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/http/base_request_options", ['angular2/src/facade/lang', "test/node_modules/angular2/ts/src/http/headers", "test/node_modules/angular2/ts/src/http/enums", 'angular2/core', "test/node_modules/angular2/ts/src/http/url_search_params", "test/node_modules/angular2/ts/src/http/http_utils"], function(exports_227, context_227) {
    "use strict";
    var __moduleName = context_227 && context_227.id;
    var lang_131, headers_3, enums_3, core_76, url_search_params_1, http_utils_3;
    var RequestOptions, BaseRequestOptions;
    return {
        setters:[
            function (lang_131_1) {
                lang_131 = lang_131_1;
            },
            function (headers_3_1) {
                headers_3 = headers_3_1;
            },
            function (enums_3_1) {
                enums_3 = enums_3_1;
            },
            function (core_76_1) {
                core_76 = core_76_1;
            },
            function (url_search_params_1_1) {
                url_search_params_1 = url_search_params_1_1;
            },
            function (http_utils_3_1) {
                http_utils_3 = http_utils_3_1;
            }],
        execute: function() {
            /**
             * Creates a request options object to be optionally provided when instantiating a
             * {@link Request}.
             *
             * This class is based on the `RequestInit` description in the [Fetch
             * Spec](https://fetch.spec.whatwg.org/#requestinit).
             *
             * All values are null by default. Typical defaults can be found in the {@link BaseRequestOptions}
             * class, which sub-classes `RequestOptions`.
             *
             * ### Example ([live demo](http://plnkr.co/edit/7Wvi3lfLq41aQPKlxB4O?p=preview))
             *
             * ```typescript
             * import {RequestOptions, Request, RequestMethod} from 'angular2/http';
             *
             * var options = new RequestOptions({
             *   method: RequestMethod.Post,
             *   url: 'https://google.com'
             * });
             * var req = new Request(options);
             * console.log('req.method:', RequestMethod[req.method]); // Post
             * console.log('options.url:', options.url); // https://google.com
             * ```
             */
            RequestOptions = (function () {
                function RequestOptions(_a) {
                    var _b = _a === void 0 ? {} : _a, method = _b.method, headers = _b.headers, body = _b.body, url = _b.url, search = _b.search;
                    this.method = lang_131.isPresent(method) ? http_utils_3.normalizeMethodName(method) : null;
                    this.headers = lang_131.isPresent(headers) ? headers : null;
                    this.body = lang_131.isPresent(body) ? body : null;
                    this.url = lang_131.isPresent(url) ? url : null;
                    this.search = lang_131.isPresent(search) ? (lang_131.isString(search) ? new url_search_params_1.URLSearchParams((search)) :
                        (search)) :
                        null;
                }
                /**
                 * Creates a copy of the `RequestOptions` instance, using the optional input as values to override
                 * existing values. This method will not change the values of the instance on which it is being
                 * called.
                 *
                 * Note that `headers` and `search` will override existing values completely if present in
                 * the `options` object. If these values should be merged, it should be done prior to calling
                 * `merge` on the `RequestOptions` instance.
                 *
                 * ### Example ([live demo](http://plnkr.co/edit/6w8XA8YTkDRcPYpdB9dk?p=preview))
                 *
                 * ```typescript
                 * import {RequestOptions, Request, RequestMethod} from 'angular2/http';
                 *
                 * var options = new RequestOptions({
                 *   method: RequestMethod.Post
                 * });
                 * var req = new Request(options.merge({
                 *   url: 'https://google.com'
                 * }));
                 * console.log('req.method:', RequestMethod[req.method]); // Post
                 * console.log('options.url:', options.url); // null
                 * console.log('req.url:', req.url); // https://google.com
                 * ```
                 */
                RequestOptions.prototype.merge = function (options) {
                    return new RequestOptions({
                        method: lang_131.isPresent(options) && lang_131.isPresent(options.method) ? options.method : this.method,
                        headers: lang_131.isPresent(options) && lang_131.isPresent(options.headers) ? options.headers : this.headers,
                        body: lang_131.isPresent(options) && lang_131.isPresent(options.body) ? options.body : this.body,
                        url: lang_131.isPresent(options) && lang_131.isPresent(options.url) ? options.url : this.url,
                        search: lang_131.isPresent(options) && lang_131.isPresent(options.search) ?
                            (lang_131.isString(options.search) ? new url_search_params_1.URLSearchParams((options.search)) :
                                (options.search).clone()) :
                            this.search
                    });
                };
                return RequestOptions;
            }());
            exports_227("RequestOptions", RequestOptions);
            /**
             * Subclass of {@link RequestOptions}, with default values.
             *
             * Default values:
             *  * method: {@link RequestMethod RequestMethod.Get}
             *  * headers: empty {@link Headers} object
             *
             * This class could be extended and bound to the {@link RequestOptions} class
             * when configuring an {@link Injector}, in order to override the default options
             * used by {@link Http} to create and send {@link Request Requests}.
             *
             * ### Example ([live demo](http://plnkr.co/edit/LEKVSx?p=preview))
             *
             * ```typescript
             * import {provide} from 'angular2/core';
             * import {bootstrap} from 'angular2/platform/browser';
             * import {HTTP_PROVIDERS, Http, BaseRequestOptions, RequestOptions} from 'angular2/http';
             * import {App} from './myapp';
             *
             * class MyOptions extends BaseRequestOptions {
             *   search: string = 'coreTeam=true';
             * }
             *
             * bootstrap(App, [HTTP_PROVIDERS, provide(RequestOptions, {useClass: MyOptions})]);
             * ```
             *
             * The options could also be extended when manually creating a {@link Request}
             * object.
             *
             * ### Example ([live demo](http://plnkr.co/edit/oyBoEvNtDhOSfi9YxaVb?p=preview))
             *
             * ```
             * import {BaseRequestOptions, Request, RequestMethod} from 'angular2/http';
             *
             * var options = new BaseRequestOptions();
             * var req = new Request(options.merge({
             *   method: RequestMethod.Post,
             *   url: 'https://google.com'
             * }));
             * console.log('req.method:', RequestMethod[req.method]); // Post
             * console.log('options.url:', options.url); // null
             * console.log('req.url:', req.url); // https://google.com
             * ```
             */
            BaseRequestOptions = (function (_super) {
                __extends(BaseRequestOptions, _super);
                function BaseRequestOptions() {
                    _super.call(this, { method: enums_3.RequestMethod.Get, headers: new headers_3.Headers() });
                }
                BaseRequestOptions = __decorate([
                    core_76.Injectable(), 
                    __metadata('design:paramtypes', [])
                ], BaseRequestOptions);
                return BaseRequestOptions;
            }(RequestOptions));
            exports_227("BaseRequestOptions", BaseRequestOptions);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/http/http", ['angular2/src/facade/lang', 'angular2/src/facade/exceptions', 'angular2/core', "test/node_modules/angular2/ts/src/http/interfaces", "test/node_modules/angular2/ts/src/http/static_request", "test/node_modules/angular2/ts/src/http/base_request_options", "test/node_modules/angular2/ts/src/http/enums"], function(exports_228, context_228) {
    "use strict";
    var __moduleName = context_228 && context_228.id;
    var lang_132, exceptions_54, core_77, interfaces_7, static_request_1, base_request_options_1, enums_4;
    var Http, Jsonp;
    function httpRequest(backend, request) {
        return backend.createConnection(request).response;
    }
    function mergeOptions(defaultOpts, providedOpts, method, url) {
        var newOptions = defaultOpts;
        if (lang_132.isPresent(providedOpts)) {
            // Hack so Dart can used named parameters
            return newOptions.merge(new base_request_options_1.RequestOptions({
                method: providedOpts.method || method,
                url: providedOpts.url || url,
                search: providedOpts.search,
                headers: providedOpts.headers,
                body: providedOpts.body
            }));
        }
        if (lang_132.isPresent(method)) {
            return newOptions.merge(new base_request_options_1.RequestOptions({ method: method, url: url }));
        }
        else {
            return newOptions.merge(new base_request_options_1.RequestOptions({ url: url }));
        }
    }
    return {
        setters:[
            function (lang_132_1) {
                lang_132 = lang_132_1;
            },
            function (exceptions_54_1) {
                exceptions_54 = exceptions_54_1;
            },
            function (core_77_1) {
                core_77 = core_77_1;
            },
            function (interfaces_7_1) {
                interfaces_7 = interfaces_7_1;
            },
            function (static_request_1_1) {
                static_request_1 = static_request_1_1;
            },
            function (base_request_options_1_1) {
                base_request_options_1 = base_request_options_1_1;
            },
            function (enums_4_1) {
                enums_4 = enums_4_1;
            }],
        execute: function() {
            /**
             * Performs http requests using `XMLHttpRequest` as the default backend.
             *
             * `Http` is available as an injectable class, with methods to perform http requests. Calling
             * `request` returns an `Observable` which will emit a single {@link Response} when a
             * response is received.
             *
             * ### Example
             *
             * ```typescript
             * import {Http, HTTP_PROVIDERS} from 'angular2/http';
             * @Component({
             *   selector: 'http-app',
             *   viewProviders: [HTTP_PROVIDERS],
             *   templateUrl: 'people.html'
             * })
             * class PeopleComponent {
             *   constructor(http: Http) {
             *     http.get('people.json')
             *       // Call map on the response observable to get the parsed people object
             *       .map(res => res.json())
             *       // Subscribe to the observable to get the parsed people object and attach it to the
             *       // component
             *       .subscribe(people => this.people = people);
             *   }
             * }
             * ```
             *
             *
             * ### Example
             *
             * ```
             * http.get('people.json').observer({next: (value) => this.people = value});
             * ```
             *
             * The default construct used to perform requests, `XMLHttpRequest`, is abstracted as a "Backend" (
             * {@link XHRBackend} in this case), which could be mocked with dependency injection by replacing
             * the {@link XHRBackend} provider, as in the following example:
             *
             * ### Example
             *
             * ```typescript
             * import {BaseRequestOptions, Http} from 'angular2/http';
             * import {MockBackend} from 'angular2/http/testing';
             * var injector = Injector.resolveAndCreate([
             *   BaseRequestOptions,
             *   MockBackend,
             *   provide(Http, {useFactory:
             *       function(backend, defaultOptions) {
             *         return new Http(backend, defaultOptions);
             *       },
             *       deps: [MockBackend, BaseRequestOptions]})
             * ]);
             * var http = injector.get(Http);
             * http.get('request-from-mock-backend.json').subscribe((res:Response) => doSomething(res));
             * ```
             *
             **/
            Http = (function () {
                function Http(_backend, _defaultOptions) {
                    this._backend = _backend;
                    this._defaultOptions = _defaultOptions;
                }
                /**
                 * Performs any type of http request. First argument is required, and can either be a url or
                 * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}
                 * object can be provided as the 2nd argument. The options object will be merged with the values
                 * of {@link BaseRequestOptions} before performing the request.
                 */
                Http.prototype.request = function (url, options) {
                    var responseObservable;
                    if (lang_132.isString(url)) {
                        responseObservable = httpRequest(this._backend, new static_request_1.Request(mergeOptions(this._defaultOptions, options, enums_4.RequestMethod.Get, url)));
                    }
                    else if (url instanceof static_request_1.Request) {
                        responseObservable = httpRequest(this._backend, url);
                    }
                    else {
                        throw exceptions_54.makeTypeError('First argument must be a url string or Request instance.');
                    }
                    return responseObservable;
                };
                /**
                 * Performs a request with `get` http method.
                 */
                Http.prototype.get = function (url, options) {
                    return httpRequest(this._backend, new static_request_1.Request(mergeOptions(this._defaultOptions, options, enums_4.RequestMethod.Get, url)));
                };
                /**
                 * Performs a request with `post` http method.
                 */
                Http.prototype.post = function (url, body, options) {
                    return httpRequest(this._backend, new static_request_1.Request(mergeOptions(this._defaultOptions.merge(new base_request_options_1.RequestOptions({ body: body })), options, enums_4.RequestMethod.Post, url)));
                };
                /**
                 * Performs a request with `put` http method.
                 */
                Http.prototype.put = function (url, body, options) {
                    return httpRequest(this._backend, new static_request_1.Request(mergeOptions(this._defaultOptions.merge(new base_request_options_1.RequestOptions({ body: body })), options, enums_4.RequestMethod.Put, url)));
                };
                /**
                 * Performs a request with `delete` http method.
                 */
                Http.prototype.delete = function (url, options) {
                    return httpRequest(this._backend, new static_request_1.Request(mergeOptions(this._defaultOptions, options, enums_4.RequestMethod.Delete, url)));
                };
                /**
                 * Performs a request with `patch` http method.
                 */
                Http.prototype.patch = function (url, body, options) {
                    return httpRequest(this._backend, new static_request_1.Request(mergeOptions(this._defaultOptions.merge(new base_request_options_1.RequestOptions({ body: body })), options, enums_4.RequestMethod.Patch, url)));
                };
                /**
                 * Performs a request with `head` http method.
                 */
                Http.prototype.head = function (url, options) {
                    return httpRequest(this._backend, new static_request_1.Request(mergeOptions(this._defaultOptions, options, enums_4.RequestMethod.Head, url)));
                };
                Http = __decorate([
                    core_77.Injectable(), 
                    __metadata('design:paramtypes', [interfaces_7.ConnectionBackend, base_request_options_1.RequestOptions])
                ], Http);
                return Http;
            }());
            exports_228("Http", Http);
            Jsonp = (function (_super) {
                __extends(Jsonp, _super);
                function Jsonp(backend, defaultOptions) {
                    _super.call(this, backend, defaultOptions);
                }
                /**
                 * Performs any type of http request. First argument is required, and can either be a url or
                 * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}
                 * object can be provided as the 2nd argument. The options object will be merged with the values
                 * of {@link BaseRequestOptions} before performing the request.
                 */
                Jsonp.prototype.request = function (url, options) {
                    var responseObservable;
                    if (lang_132.isString(url)) {
                        url =
                            new static_request_1.Request(mergeOptions(this._defaultOptions, options, enums_4.RequestMethod.Get, url));
                    }
                    if (url instanceof static_request_1.Request) {
                        if (url.method !== enums_4.RequestMethod.Get) {
                            exceptions_54.makeTypeError('JSONP requests must use GET request method.');
                        }
                        responseObservable = httpRequest(this._backend, url);
                    }
                    else {
                        throw exceptions_54.makeTypeError('First argument must be a url string or Request instance.');
                    }
                    return responseObservable;
                };
                Jsonp = __decorate([
                    core_77.Injectable(), 
                    __metadata('design:paramtypes', [interfaces_7.ConnectionBackend, base_request_options_1.RequestOptions])
                ], Jsonp);
                return Jsonp;
            }(Http));
            exports_228("Jsonp", Jsonp);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/http/backends/browser_xhr", ['angular2/core'], function(exports_229, context_229) {
    "use strict";
    var __moduleName = context_229 && context_229.id;
    var core_78;
    var BrowserXhr;
    return {
        setters:[
            function (core_78_1) {
                core_78 = core_78_1;
            }],
        execute: function() {
            /**
             * A backend for http that uses the `XMLHttpRequest` browser API.
             *
             * Take care not to evaluate this in non-browser contexts.
             */
            BrowserXhr = (function () {
                function BrowserXhr() {
                }
                BrowserXhr.prototype.build = function () { return (new XMLHttpRequest()); };
                BrowserXhr = __decorate([
                    core_78.Injectable(), 
                    __metadata('design:paramtypes', [])
                ], BrowserXhr);
                return BrowserXhr;
            }());
            exports_229("BrowserXhr", BrowserXhr);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/http/backends/xhr_backend", ["test/node_modules/angular2/ts/src/http/enums", "test/node_modules/angular2/ts/src/http/static_response", "test/node_modules/angular2/ts/src/http/headers", "test/node_modules/angular2/ts/src/http/base_response_options", 'angular2/core', "test/node_modules/angular2/ts/src/http/backends/browser_xhr", 'angular2/src/facade/lang', 'rxjs/Observable', "test/node_modules/angular2/ts/src/http/http_utils"], function(exports_230, context_230) {
    "use strict";
    var __moduleName = context_230 && context_230.id;
    var enums_5, static_response_1, headers_4, base_response_options_1, core_79, browser_xhr_1, lang_133, Observable_2, http_utils_4;
    var XHRConnection, XHRBackend;
    return {
        setters:[
            function (enums_5_1) {
                enums_5 = enums_5_1;
            },
            function (static_response_1_1) {
                static_response_1 = static_response_1_1;
            },
            function (headers_4_1) {
                headers_4 = headers_4_1;
            },
            function (base_response_options_1_1) {
                base_response_options_1 = base_response_options_1_1;
            },
            function (core_79_1) {
                core_79 = core_79_1;
            },
            function (browser_xhr_1_1) {
                browser_xhr_1 = browser_xhr_1_1;
            },
            function (lang_133_1) {
                lang_133 = lang_133_1;
            },
            function (Observable_2_1) {
                Observable_2 = Observable_2_1;
            },
            function (http_utils_4_1) {
                http_utils_4 = http_utils_4_1;
            }],
        execute: function() {
            /**
            * Creates connections using `XMLHttpRequest`. Given a fully-qualified
            * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the
            * request.
            *
            * This class would typically not be created or interacted with directly inside applications, though
            * the {@link MockConnection} may be interacted with in tests.
            */
            XHRConnection = (function () {
                function XHRConnection(req, browserXHR, baseResponseOptions) {
                    var _this = this;
                    this.request = req;
                    this.response = new Observable_2.Observable(function (responseObserver) {
                        var _xhr = browserXHR.build();
                        _xhr.open(enums_5.RequestMethod[req.method].toUpperCase(), req.url);
                        // load event handler
                        var onLoad = function () {
                            // responseText is the old-school way of retrieving response (supported by IE8 & 9)
                            // response/responseType properties were introduced in XHR Level2 spec (supported by
                            // IE10)
                            var body = lang_133.isPresent(_xhr.response) ? _xhr.response : _xhr.responseText;
                            var headers = headers_4.Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());
                            var url = http_utils_4.getResponseURL(_xhr);
                            // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)
                            var status = _xhr.status === 1223 ? 204 : _xhr.status;
                            // fix status code when it is 0 (0 status is undocumented).
                            // Occurs when accessing file resources or on Android 4.1 stock browser
                            // while retrieving files from application cache.
                            if (status === 0) {
                                status = body ? 200 : 0;
                            }
                            var responseOptions = new base_response_options_1.ResponseOptions({ body: body, status: status, headers: headers, url: url });
                            if (lang_133.isPresent(baseResponseOptions)) {
                                responseOptions = baseResponseOptions.merge(responseOptions);
                            }
                            var response = new static_response_1.Response(responseOptions);
                            if (http_utils_4.isSuccess(status)) {
                                responseObserver.next(response);
                                // TODO(gdi2290): defer complete if array buffer until done
                                responseObserver.complete();
                                return;
                            }
                            responseObserver.error(response);
                        };
                        // error event handler
                        var onError = function (err) {
                            var responseOptions = new base_response_options_1.ResponseOptions({ body: err, type: enums_5.ResponseType.Error });
                            if (lang_133.isPresent(baseResponseOptions)) {
                                responseOptions = baseResponseOptions.merge(responseOptions);
                            }
                            responseObserver.error(new static_response_1.Response(responseOptions));
                        };
                        if (lang_133.isPresent(req.headers)) {
                            req.headers.forEach(function (values, name) { return _xhr.setRequestHeader(name, values.join(',')); });
                        }
                        _xhr.addEventListener('load', onLoad);
                        _xhr.addEventListener('error', onError);
                        _xhr.send(_this.request.text());
                        return function () {
                            _xhr.removeEventListener('load', onLoad);
                            _xhr.removeEventListener('error', onError);
                            _xhr.abort();
                        };
                    });
                }
                return XHRConnection;
            }());
            exports_230("XHRConnection", XHRConnection);
            /**
             * Creates {@link XHRConnection} instances.
             *
             * This class would typically not be used by end users, but could be
             * overridden if a different backend implementation should be used,
             * such as in a node backend.
             *
             * ### Example
             *
             * ```
             * import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from 'angular2/http';
             * @Component({
             *   viewProviders: [
             *     HTTP_PROVIDERS,
             *     provide(Http, {useFactory: (backend, options) => {
             *       return new Http(backend, options);
             *     }, deps: [MyNodeBackend, BaseRequestOptions]})]
             * })
             * class MyComponent {
             *   constructor(http:Http) {
             *     http.request('people.json').subscribe(res => this.people = res.json());
             *   }
             * }
             * ```
             *
             **/
            XHRBackend = (function () {
                function XHRBackend(_browserXHR, _baseResponseOptions) {
                    this._browserXHR = _browserXHR;
                    this._baseResponseOptions = _baseResponseOptions;
                }
                XHRBackend.prototype.createConnection = function (request) {
                    return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);
                };
                XHRBackend = __decorate([
                    core_79.Injectable(), 
                    __metadata('design:paramtypes', [browser_xhr_1.BrowserXhr, base_response_options_1.ResponseOptions])
                ], XHRBackend);
                return XHRBackend;
            }());
            exports_230("XHRBackend", XHRBackend);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/http/backends/browser_jsonp", ['angular2/core', 'angular2/src/facade/lang'], function(exports_231, context_231) {
    "use strict";
    var __moduleName = context_231 && context_231.id;
    var core_80, lang_134;
    var _nextRequestId, JSONP_HOME, _jsonpConnections, BrowserJsonp;
    function _getJsonpConnections() {
        if (_jsonpConnections === null) {
            _jsonpConnections = lang_134.global[JSONP_HOME] = {};
        }
        return _jsonpConnections;
    }
    return {
        setters:[
            function (core_80_1) {
                core_80 = core_80_1;
            },
            function (lang_134_1) {
                lang_134 = lang_134_1;
            }],
        execute: function() {
            _nextRequestId = 0;
            exports_231("JSONP_HOME", JSONP_HOME = '__ng_jsonp__');
            _jsonpConnections = null;
            // Make sure not to evaluate this in a non-browser environment!
            BrowserJsonp = (function () {
                function BrowserJsonp() {
                }
                // Construct a <script> element with the specified URL
                BrowserJsonp.prototype.build = function (url) {
                    var node = document.createElement('script');
                    node.src = url;
                    return node;
                };
                BrowserJsonp.prototype.nextRequestID = function () { return "__req" + _nextRequestId++; };
                BrowserJsonp.prototype.requestCallback = function (id) { return JSONP_HOME + "." + id + ".finished"; };
                BrowserJsonp.prototype.exposeConnection = function (id, connection) {
                    var connections = _getJsonpConnections();
                    connections[id] = connection;
                };
                BrowserJsonp.prototype.removeConnection = function (id) {
                    var connections = _getJsonpConnections();
                    connections[id] = null;
                };
                // Attach the <script> element to the DOM
                BrowserJsonp.prototype.send = function (node) { document.body.appendChild((node)); };
                // Remove <script> element from the DOM
                BrowserJsonp.prototype.cleanup = function (node) {
                    if (node.parentNode) {
                        node.parentNode.removeChild((node));
                    }
                };
                BrowserJsonp = __decorate([
                    core_80.Injectable(), 
                    __metadata('design:paramtypes', [])
                ], BrowserJsonp);
                return BrowserJsonp;
            }());
            exports_231("BrowserJsonp", BrowserJsonp);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/http/backends/jsonp_backend", ["test/node_modules/angular2/ts/src/http/interfaces", "test/node_modules/angular2/ts/src/http/enums", "test/node_modules/angular2/ts/src/http/static_response", "test/node_modules/angular2/ts/src/http/base_response_options", 'angular2/core', "test/node_modules/angular2/ts/src/http/backends/browser_jsonp", 'angular2/src/facade/exceptions', 'angular2/src/facade/lang', 'rxjs/Observable'], function(exports_232, context_232) {
    "use strict";
    var __moduleName = context_232 && context_232.id;
    var interfaces_8, enums_6, static_response_2, base_response_options_2, core_81, browser_jsonp_1, exceptions_55, lang_135, Observable_3;
    var JSONP_ERR_NO_CALLBACK, JSONP_ERR_WRONG_METHOD, JSONPConnection, JSONPConnection_, JSONPBackend, JSONPBackend_;
    return {
        setters:[
            function (interfaces_8_1) {
                interfaces_8 = interfaces_8_1;
            },
            function (enums_6_1) {
                enums_6 = enums_6_1;
            },
            function (static_response_2_1) {
                static_response_2 = static_response_2_1;
            },
            function (base_response_options_2_1) {
                base_response_options_2 = base_response_options_2_1;
            },
            function (core_81_1) {
                core_81 = core_81_1;
            },
            function (browser_jsonp_1_1) {
                browser_jsonp_1 = browser_jsonp_1_1;
            },
            function (exceptions_55_1) {
                exceptions_55 = exceptions_55_1;
            },
            function (lang_135_1) {
                lang_135 = lang_135_1;
            },
            function (Observable_3_1) {
                Observable_3 = Observable_3_1;
            }],
        execute: function() {
            JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';
            JSONP_ERR_WRONG_METHOD = 'JSONP requests must use GET request method.';
            /**
             * Abstract base class for an in-flight JSONP request.
             */
            JSONPConnection = (function () {
                function JSONPConnection() {
                }
                return JSONPConnection;
            }());
            exports_232("JSONPConnection", JSONPConnection);
            JSONPConnection_ = (function (_super) {
                __extends(JSONPConnection_, _super);
                function JSONPConnection_(req, _dom, baseResponseOptions) {
                    var _this = this;
                    _super.call(this);
                    this._dom = _dom;
                    this.baseResponseOptions = baseResponseOptions;
                    this._finished = false;
                    if (req.method !== enums_6.RequestMethod.Get) {
                        throw exceptions_55.makeTypeError(JSONP_ERR_WRONG_METHOD);
                    }
                    this.request = req;
                    this.response = new Observable_3.Observable(function (responseObserver) {
                        _this.readyState = enums_6.ReadyState.Loading;
                        var id = _this._id = _dom.nextRequestID();
                        _dom.exposeConnection(id, _this);
                        // Workaround Dart
                        // url = url.replace(/=JSONP_CALLBACK(&|$)/, `generated method`);
                        var callback = _dom.requestCallback(_this._id);
                        var url = req.url;
                        if (url.indexOf('=JSONP_CALLBACK&') > -1) {
                            url = lang_135.StringWrapper.replace(url, '=JSONP_CALLBACK&', "=" + callback + "&");
                        }
                        else if (url.lastIndexOf('=JSONP_CALLBACK') === url.length - '=JSONP_CALLBACK'.length) {
                            url = url.substring(0, url.length - '=JSONP_CALLBACK'.length) + ("=" + callback);
                        }
                        var script = _this._script = _dom.build(url);
                        var onLoad = function (event) {
                            if (_this.readyState === enums_6.ReadyState.Cancelled)
                                return;
                            _this.readyState = enums_6.ReadyState.Done;
                            _dom.cleanup(script);
                            if (!_this._finished) {
                                var responseOptions_1 = new base_response_options_2.ResponseOptions({ body: JSONP_ERR_NO_CALLBACK, type: enums_6.ResponseType.Error, url: url });
                                if (lang_135.isPresent(baseResponseOptions)) {
                                    responseOptions_1 = baseResponseOptions.merge(responseOptions_1);
                                }
                                responseObserver.error(new static_response_2.Response(responseOptions_1));
                                return;
                            }
                            var responseOptions = new base_response_options_2.ResponseOptions({ body: _this._responseData, url: url });
                            if (lang_135.isPresent(_this.baseResponseOptions)) {
                                responseOptions = _this.baseResponseOptions.merge(responseOptions);
                            }
                            responseObserver.next(new static_response_2.Response(responseOptions));
                            responseObserver.complete();
                        };
                        var onError = function (error) {
                            if (_this.readyState === enums_6.ReadyState.Cancelled)
                                return;
                            _this.readyState = enums_6.ReadyState.Done;
                            _dom.cleanup(script);
                            var responseOptions = new base_response_options_2.ResponseOptions({ body: error.message, type: enums_6.ResponseType.Error });
                            if (lang_135.isPresent(baseResponseOptions)) {
                                responseOptions = baseResponseOptions.merge(responseOptions);
                            }
                            responseObserver.error(new static_response_2.Response(responseOptions));
                        };
                        script.addEventListener('load', onLoad);
                        script.addEventListener('error', onError);
                        _dom.send(script);
                        return function () {
                            _this.readyState = enums_6.ReadyState.Cancelled;
                            script.removeEventListener('load', onLoad);
                            script.removeEventListener('error', onError);
                            if (lang_135.isPresent(script)) {
                                _this._dom.cleanup(script);
                            }
                        };
                    });
                }
                JSONPConnection_.prototype.finished = function (data) {
                    // Don't leak connections
                    this._finished = true;
                    this._dom.removeConnection(this._id);
                    if (this.readyState === enums_6.ReadyState.Cancelled)
                        return;
                    this._responseData = data;
                };
                return JSONPConnection_;
            }(JSONPConnection));
            exports_232("JSONPConnection_", JSONPConnection_);
            /**
             * A {@link ConnectionBackend} that uses the JSONP strategy of making requests.
             */
            JSONPBackend = (function (_super) {
                __extends(JSONPBackend, _super);
                function JSONPBackend() {
                    _super.apply(this, arguments);
                }
                return JSONPBackend;
            }(interfaces_8.ConnectionBackend));
            exports_232("JSONPBackend", JSONPBackend);
            JSONPBackend_ = (function (_super) {
                __extends(JSONPBackend_, _super);
                function JSONPBackend_(_browserJSONP, _baseResponseOptions) {
                    _super.call(this);
                    this._browserJSONP = _browserJSONP;
                    this._baseResponseOptions = _baseResponseOptions;
                }
                JSONPBackend_.prototype.createConnection = function (request) {
                    return new JSONPConnection_(request, this._browserJSONP, this._baseResponseOptions);
                };
                JSONPBackend_ = __decorate([
                    core_81.Injectable(), 
                    __metadata('design:paramtypes', [browser_jsonp_1.BrowserJsonp, base_response_options_2.ResponseOptions])
                ], JSONPBackend_);
                return JSONPBackend_;
            }(JSONPBackend));
            exports_232("JSONPBackend_", JSONPBackend_);
        }
    }
});
System.register("test/node_modules/angular2/ts/http", ['angular2/core', "test/node_modules/angular2/ts/src/http/http", "test/node_modules/angular2/ts/src/http/backends/xhr_backend", "test/node_modules/angular2/ts/src/http/backends/jsonp_backend", "test/node_modules/angular2/ts/src/http/backends/browser_xhr", "test/node_modules/angular2/ts/src/http/backends/browser_jsonp", "test/node_modules/angular2/ts/src/http/base_request_options", "test/node_modules/angular2/ts/src/http/base_response_options", "test/node_modules/angular2/ts/src/http/static_request", "test/node_modules/angular2/ts/src/http/static_response", "test/node_modules/angular2/ts/src/http/interfaces", "test/node_modules/angular2/ts/src/http/headers", "test/node_modules/angular2/ts/src/http/enums", "test/node_modules/angular2/ts/src/http/url_search_params"], function(exports_233, context_233) {
    "use strict";
    var __moduleName = context_233 && context_233.id;
    var core_82, http_4, xhr_backend_1, jsonp_backend_1, browser_xhr_2, browser_jsonp_2, base_request_options_2, base_response_options_3;
    var HTTP_PROVIDERS, HTTP_BINDINGS, JSONP_PROVIDERS, JSON_BINDINGS;
    return {
        setters:[
            function (core_82_1) {
                core_82 = core_82_1;
            },
            function (http_4_1) {
                http_4 = http_4_1;
                exports_233({
                    "Http": http_4_1["Http"],
                    "Jsonp": http_4_1["Jsonp"]
                });
            },
            function (xhr_backend_1_1) {
                xhr_backend_1 = xhr_backend_1_1;
                exports_233({
                    "XHRBackend": xhr_backend_1_1["XHRBackend"],
                    "XHRConnection": xhr_backend_1_1["XHRConnection"]
                });
            },
            function (jsonp_backend_1_1) {
                jsonp_backend_1 = jsonp_backend_1_1;
                exports_233({
                    "JSONPBackend": jsonp_backend_1_1["JSONPBackend"],
                    "JSONPConnection": jsonp_backend_1_1["JSONPConnection"]
                });
            },
            function (browser_xhr_2_1) {
                browser_xhr_2 = browser_xhr_2_1;
                exports_233({
                    "BrowserXhr": browser_xhr_2_1["BrowserXhr"]
                });
            },
            function (browser_jsonp_2_1) {
                browser_jsonp_2 = browser_jsonp_2_1;
            },
            function (base_request_options_2_1) {
                base_request_options_2 = base_request_options_2_1;
                exports_233({
                    "BaseRequestOptions": base_request_options_2_1["BaseRequestOptions"],
                    "RequestOptions": base_request_options_2_1["RequestOptions"]
                });
            },
            function (base_response_options_3_1) {
                base_response_options_3 = base_response_options_3_1;
                exports_233({
                    "BaseResponseOptions": base_response_options_3_1["BaseResponseOptions"],
                    "ResponseOptions": base_response_options_3_1["ResponseOptions"]
                });
            },
            function (static_request_2_1) {
                exports_233({
                    "Request": static_request_2_1["Request"]
                });
            },
            function (static_response_3_1) {
                exports_233({
                    "Response": static_response_3_1["Response"]
                });
            },
            function (interfaces_9_1) {
                exports_233({
                    "RequestOptionsArgs": interfaces_9_1["RequestOptionsArgs"],
                    "ResponseOptionsArgs": interfaces_9_1["ResponseOptionsArgs"],
                    "Connection": interfaces_9_1["Connection"],
                    "ConnectionBackend": interfaces_9_1["ConnectionBackend"]
                });
            },
            function (headers_5_1) {
                exports_233({
                    "Headers": headers_5_1["Headers"]
                });
            },
            function (enums_7_1) {
                exports_233({
                    "ResponseType": enums_7_1["ResponseType"],
                    "ReadyState": enums_7_1["ReadyState"],
                    "RequestMethod": enums_7_1["RequestMethod"]
                });
            },
            function (url_search_params_2_1) {
                exports_233({
                    "URLSearchParams": url_search_params_2_1["URLSearchParams"]
                });
            }],
        execute: function() {
            /**
             * Provides a basic set of injectables to use the {@link Http} service in any application.
             *
             * The `HTTP_PROVIDERS` should be included either in a component's injector,
             * or in the root injector when bootstrapping an application.
             *
             * ### Example ([live demo](http://plnkr.co/edit/snj7Nv?p=preview))
             *
             * ```
             * import {Component} from 'angular2/core';
             * import {bootstrap} from 'angular2/platform/browser';
             * import {NgFor} from 'angular2/common';
             * import {HTTP_PROVIDERS, Http} from 'angular2/http';
             *
             * @Component({
             *   selector: 'app',
             *   providers: [HTTP_PROVIDERS],
             *   template: `
             *     <div>
             *       <h1>People</h1>
             *       <ul>
             *         <li *ngFor="#person of people">
             *           {{person.name}}
             *         </li>
             *       </ul>
             *     </div>
             *   `,
             *   directives: [NgFor]
             * })
             * export class App {
             *   people: Object[];
             *   constructor(http:Http) {
             *     http.get('people.json').subscribe(res => {
             *       this.people = res.json();
             *     });
             *   }
             *   active:boolean = false;
             *   toggleActiveState() {
             *     this.active = !this.active;
             *   }
             * }
             *
             * bootstrap(App)
             *   .catch(err => console.error(err));
             * ```
             *
             * The primary public API included in `HTTP_PROVIDERS` is the {@link Http} class.
             * However, other providers required by `Http` are included,
             * which may be beneficial to override in certain cases.
             *
             * The providers included in `HTTP_PROVIDERS` include:
             *  * {@link Http}
             *  * {@link XHRBackend}
             *  * `BrowserXHR` - Private factory to create `XMLHttpRequest` instances
             *  * {@link RequestOptions} - Bound to {@link BaseRequestOptions} class
             *  * {@link ResponseOptions} - Bound to {@link BaseResponseOptions} class
             *
             * There may be cases where it makes sense to extend the base request options,
             * such as to add a search string to be appended to all URLs.
             * To accomplish this, a new provider for {@link RequestOptions} should
             * be added in the same injector as `HTTP_PROVIDERS`.
             *
             * ### Example ([live demo](http://plnkr.co/edit/aCMEXi?p=preview))
             *
             * ```
             * import {provide} from 'angular2/core';
             * import {bootstrap} from 'angular2/platform/browser';
             * import {HTTP_PROVIDERS, BaseRequestOptions, RequestOptions} from 'angular2/http';
             *
             * class MyOptions extends BaseRequestOptions {
             *   search: string = 'coreTeam=true';
             * }
             *
             * bootstrap(App, [HTTP_PROVIDERS, provide(RequestOptions, {useClass: MyOptions})])
             *   .catch(err => console.error(err));
             * ```
             *
             * Likewise, to use a mock backend for unit tests, the {@link XHRBackend}
             * provider should be bound to {@link MockBackend}.
             *
             * ### Example ([live demo](http://plnkr.co/edit/7LWALD?p=preview))
             *
             * ```
             * import {provide} from 'angular2/core';
             * import {bootstrap} from 'angular2/platform/browser';
             * import {HTTP_PROVIDERS, Http, Response, XHRBackend} from 'angular2/http';
             * import {MockBackend} from 'angular2/http/testing';
             *
             * var people = [{name: 'Jeff'}, {name: 'Tobias'}];
             *
             * var injector = Injector.resolveAndCreate([
             *   HTTP_PROVIDERS,
             *   MockBackend,
             *   provide(XHRBackend, {useExisting: MockBackend})
             * ]);
             * var http = injector.get(Http);
             * var backend = injector.get(MockBackend);
             *
             * // Listen for any new requests
             * backend.connections.observer({
             *   next: connection => {
             *     var response = new Response({body: people});
             *     setTimeout(() => {
             *       // Send a response to the request
             *       connection.mockRespond(response);
             *     });
             *   }
             * });
             *
             * http.get('people.json').observer({
             *   next: res => {
             *     // Response came from mock backend
             *     console.log('first person', res.json()[0].name);
             *   }
             * });
             * ```
             */
            exports_233("HTTP_PROVIDERS", HTTP_PROVIDERS = [
                // TODO(pascal): use factory type annotations once supported in DI
                // issue: https://github.com/angular/angular/issues/3183
                core_82.provide(http_4.Http, {
                    useFactory: function (xhrBackend, requestOptions) {
                        return new http_4.Http(xhrBackend, requestOptions);
                    },
                    deps: [xhr_backend_1.XHRBackend, base_request_options_2.RequestOptions]
                }),
                browser_xhr_2.BrowserXhr,
                core_82.provide(base_request_options_2.RequestOptions, { useClass: base_request_options_2.BaseRequestOptions }),
                core_82.provide(base_response_options_3.ResponseOptions, { useClass: base_response_options_3.BaseResponseOptions }),
                xhr_backend_1.XHRBackend
            ]);
            /**
             * See {@link HTTP_PROVIDERS} instead.
             *
             * @deprecated
             */
            exports_233("HTTP_BINDINGS", HTTP_BINDINGS = HTTP_PROVIDERS);
            /**
             * Provides a basic set of providers to use the {@link Jsonp} service in any application.
             *
             * The `JSONP_PROVIDERS` should be included either in a component's injector,
             * or in the root injector when bootstrapping an application.
             *
             * ### Example ([live demo](http://plnkr.co/edit/vmeN4F?p=preview))
             *
             * ```
             * import {Component} from 'angular2/core';
             * import {NgFor} from 'angular2/common';
             * import {JSONP_PROVIDERS, Jsonp} from 'angular2/http';
             *
             * @Component({
             *   selector: 'app',
             *   providers: [JSONP_PROVIDERS],
             *   template: `
             *     <div>
             *       <h1>People</h1>
             *       <ul>
             *         <li *ngFor="#person of people">
             *           {{person.name}}
             *         </li>
             *       </ul>
             *     </div>
             *   `,
             *   directives: [NgFor]
             * })
             * export class App {
             *   people: Array<Object>;
             *   constructor(jsonp:Jsonp) {
             *     jsonp.request('people.json').subscribe(res => {
             *       this.people = res.json();
             *     })
             *   }
             * }
             * ```
             *
             * The primary public API included in `JSONP_PROVIDERS` is the {@link Jsonp} class.
             * However, other providers required by `Jsonp` are included,
             * which may be beneficial to override in certain cases.
             *
             * The providers included in `JSONP_PROVIDERS` include:
             *  * {@link Jsonp}
             *  * {@link JSONPBackend}
             *  * `BrowserJsonp` - Private factory
             *  * {@link RequestOptions} - Bound to {@link BaseRequestOptions} class
             *  * {@link ResponseOptions} - Bound to {@link BaseResponseOptions} class
             *
             * There may be cases where it makes sense to extend the base request options,
             * such as to add a search string to be appended to all URLs.
             * To accomplish this, a new provider for {@link RequestOptions} should
             * be added in the same injector as `JSONP_PROVIDERS`.
             *
             * ### Example ([live demo](http://plnkr.co/edit/TFug7x?p=preview))
             *
             * ```
             * import {provide} from 'angular2/core';
             * import {bootstrap} from 'angular2/platform/browser';
             * import {JSONP_PROVIDERS, BaseRequestOptions, RequestOptions} from 'angular2/http';
             *
             * class MyOptions extends BaseRequestOptions {
             *   search: string = 'coreTeam=true';
             * }
             *
             * bootstrap(App, [JSONP_PROVIDERS, provide(RequestOptions, {useClass: MyOptions})])
             *   .catch(err => console.error(err));
             * ```
             *
             * Likewise, to use a mock backend for unit tests, the {@link JSONPBackend}
             * provider should be bound to {@link MockBackend}.
             *
             * ### Example ([live demo](http://plnkr.co/edit/HDqZWL?p=preview))
             *
             * ```
             * import {provide, Injector} from 'angular2/core';
             * import {JSONP_PROVIDERS, Jsonp, Response, JSONPBackend} from 'angular2/http';
             * import {MockBackend} from 'angular2/http/testing';
             *
             * var people = [{name: 'Jeff'}, {name: 'Tobias'}];
             * var injector = Injector.resolveAndCreate([
             *   JSONP_PROVIDERS,
             *   MockBackend,
             *   provide(JSONPBackend, {useExisting: MockBackend})
             * ]);
             * var jsonp = injector.get(Jsonp);
             * var backend = injector.get(MockBackend);
             *
             * // Listen for any new requests
             * backend.connections.observer({
             *   next: connection => {
             *     var response = new Response({body: people});
             *     setTimeout(() => {
             *       // Send a response to the request
             *       connection.mockRespond(response);
             *     });
             *   }
             * });
            
             * jsonp.get('people.json').observer({
             *   next: res => {
             *     // Response came from mock backend
             *     console.log('first person', res.json()[0].name);
             *   }
             * });
             * ```
             */
            exports_233("JSONP_PROVIDERS", JSONP_PROVIDERS = [
                // TODO(pascal): use factory type annotations once supported in DI
                // issue: https://github.com/angular/angular/issues/3183
                core_82.provide(http_4.Jsonp, {
                    useFactory: function (jsonpBackend, requestOptions) {
                        return new http_4.Jsonp(jsonpBackend, requestOptions);
                    },
                    deps: [jsonp_backend_1.JSONPBackend, base_request_options_2.RequestOptions]
                }),
                browser_jsonp_2.BrowserJsonp,
                core_82.provide(base_request_options_2.RequestOptions, { useClass: base_request_options_2.BaseRequestOptions }),
                core_82.provide(base_response_options_3.ResponseOptions, { useClass: base_response_options_3.BaseResponseOptions }),
                core_82.provide(jsonp_backend_1.JSONPBackend, { useClass: jsonp_backend_1.JSONPBackend_ })
            ]);
            /**
             * See {@link JSONP_PROVIDERS} instead.
             *
             * @deprecated
             */
            exports_233("JSON_BINDINGS", JSON_BINDINGS = JSONP_PROVIDERS);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/i18n/message", ['angular2/src/facade/lang'], function(exports_234, context_234) {
    "use strict";
    var __moduleName = context_234 && context_234.id;
    var lang_136;
    var Message;
    /**
     * Computes the id of a message
     */
    function id(m) {
        var meaning = lang_136.isPresent(m.meaning) ? m.meaning : "";
        var content = lang_136.isPresent(m.content) ? m.content : "";
        return lang_136.escape("$ng|" + meaning + "|" + content);
    }
    exports_234("id", id);
    return {
        setters:[
            function (lang_136_1) {
                lang_136 = lang_136_1;
            }],
        execute: function() {
            /**
             * A message extracted from a template.
             *
             * The identity of a message is comprised of `content` and `meaning`.
             *
             * `description` is additional information provided to the translator.
             */
            Message = (function () {
                function Message(content, meaning, description) {
                    this.content = content;
                    this.meaning = meaning;
                    this.description = description;
                }
                return Message;
            }());
            exports_234("Message", Message);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/i18n/xmb_serializer", ['angular2/src/facade/lang', "test/node_modules/angular2/ts/src/i18n/message"], function(exports_235, context_235) {
    "use strict";
    var __moduleName = context_235 && context_235.id;
    var lang_137, message_1;
    function serialize(messages) {
        var ms = messages.map(function (m) { return _serializeMessage(m); }).join("");
        return "<message-bundle>" + ms + "</message-bundle>";
    }
    exports_235("serialize", serialize);
    function _serializeMessage(m) {
        var desc = lang_137.isPresent(m.description) ? " desc='" + m.description + "'" : "";
        return "<msg id='" + message_1.id(m) + "'" + desc + ">" + m.content + "</msg>";
    }
    return {
        setters:[
            function (lang_137_1) {
                lang_137 = lang_137_1;
            },
            function (message_1_1) {
                message_1 = message_1_1;
            }],
        execute: function() {
        }
    }
});
System.register("test/node_modules/angular2/ts/src/i18n/message_extractor", ['angular2/src/compiler/parse_util', 'angular2/src/compiler/html_ast', 'angular2/src/facade/lang', 'angular2/src/facade/collection', "test/node_modules/angular2/ts/src/i18n/message"], function(exports_236, context_236) {
    "use strict";
    var __moduleName = context_236 && context_236.id;
    var parse_util_4, html_ast_4, lang_138, collection_57, message_2;
    var I18N_ATTR, I18N_ATTR_PREFIX, ExtractionResult, I18nExtractionError, MessageExtractor, _Part, _StringifyVisitor;
    /**
     * Removes duplicate messages.
     *
     * E.g.
     *
     * ```
     *  var m = [new Message("message", "meaning", "desc1"), new Message("message", "meaning",
     * "desc2")];
     *  expect(removeDuplicates(m)).toEqual([new Message("message", "meaning", "desc1")]);
     * ```
     */
    function removeDuplicates(messages) {
        var uniq = {};
        messages.forEach(function (m) {
            if (!collection_57.StringMapWrapper.contains(uniq, message_2.id(m))) {
                uniq[message_2.id(m)] = m;
            }
        });
        return collection_57.StringMapWrapper.values(uniq);
    }
    exports_236("removeDuplicates", removeDuplicates);
    function _isOpeningComment(n) {
        return n instanceof html_ast_4.HtmlCommentAst && lang_138.isPresent(n.value) && n.value.startsWith("i18n:");
    }
    function _isClosingComment(n) {
        return n instanceof html_ast_4.HtmlCommentAst && lang_138.isPresent(n.value) && n.value == "/i18n";
    }
    function _stringifyNodes(nodes, parser) {
        var visitor = new _StringifyVisitor(parser);
        return html_ast_4.htmlVisitAll(visitor, nodes).join("");
    }
    function _removeInterpolation(value, source, parser) {
        try {
            var parsed = parser.parseInterpolation(value, source.toString());
            if (lang_138.isPresent(parsed)) {
                var ast = parsed.ast;
                var res = "";
                for (var i = 0; i < ast.strings.length; ++i) {
                    res += ast.strings[i];
                    if (i != ast.strings.length - 1) {
                        res += "{{I" + i + "}}";
                    }
                }
                return res;
            }
            else {
                return value;
            }
        }
        catch (e) {
            return value;
        }
    }
    function _findI18nAttr(p) {
        var i18n = p.attrs.filter(function (a) { return a.name == I18N_ATTR; });
        return i18n.length == 0 ? null : i18n[0];
    }
    function _meaning(i18n) {
        if (lang_138.isBlank(i18n) || i18n == "")
            return null;
        return i18n.split("|")[0];
    }
    function _description(i18n) {
        if (lang_138.isBlank(i18n) || i18n == "")
            return null;
        var parts = i18n.split("|");
        return parts.length > 1 ? parts[1] : null;
    }
    return {
        setters:[
            function (parse_util_4_1) {
                parse_util_4 = parse_util_4_1;
            },
            function (html_ast_4_1) {
                html_ast_4 = html_ast_4_1;
            },
            function (lang_138_1) {
                lang_138 = lang_138_1;
            },
            function (collection_57_1) {
                collection_57 = collection_57_1;
            },
            function (message_2_1) {
                message_2 = message_2_1;
            }],
        execute: function() {
            I18N_ATTR = "i18n";
            I18N_ATTR_PREFIX = "i18n-";
            /**
             * All messages extracted from a template.
             */
            ExtractionResult = (function () {
                function ExtractionResult(messages, errors) {
                    this.messages = messages;
                    this.errors = errors;
                }
                return ExtractionResult;
            }());
            exports_236("ExtractionResult", ExtractionResult);
            /**
             * An extraction error.
             */
            I18nExtractionError = (function (_super) {
                __extends(I18nExtractionError, _super);
                function I18nExtractionError(span, msg) {
                    _super.call(this, span, msg);
                }
                return I18nExtractionError;
            }(parse_util_4.ParseError));
            exports_236("I18nExtractionError", I18nExtractionError);
            /**
             * Extracts all messages from a template.
             *
             * It works like this. First, the extractor uses the provided html parser to get
             * the html AST of the template. Then it partitions the root nodes into parts.
             * Everything between two i18n comments becomes a single part. Every other nodes becomes
             * a part too.
             *
             * We process every part as follows. Say we have a part A.
             *
             * If the part has the i18n attribute, it gets converted into a message.
             * And we do not recurse into that part, except to extract messages from the attributes.
             *
             * If the part doesn't have the i18n attribute, we recurse into that part and
             * partition its children.
             *
             * While walking the AST we also remove i18n attributes from messages.
             */
            MessageExtractor = (function () {
                function MessageExtractor(_htmlParser, _parser) {
                    this._htmlParser = _htmlParser;
                    this._parser = _parser;
                }
                MessageExtractor.prototype.extract = function (template, sourceUrl) {
                    var _this = this;
                    this.messages = [];
                    this.errors = [];
                    var res = this._htmlParser.parse(template, sourceUrl);
                    if (res.errors.length > 0) {
                        return new ExtractionResult([], res.errors);
                    }
                    else {
                        var ps = this._partition(res.rootNodes);
                        ps.forEach(function (p) { return _this._extractMessagesFromPart(p); });
                        return new ExtractionResult(this.messages, this.errors);
                    }
                };
                MessageExtractor.prototype._extractMessagesFromPart = function (p) {
                    if (p.hasI18n) {
                        this.messages.push(new message_2.Message(_stringifyNodes(p.children, this._parser), _meaning(p.i18n), _description(p.i18n)));
                        this._recurseToExtractMessagesFromAttributes(p.children);
                    }
                    else {
                        this._recurse(p.children);
                    }
                    if (lang_138.isPresent(p.rootElement)) {
                        this._extractMessagesFromAttributes(p.rootElement);
                    }
                };
                MessageExtractor.prototype._recurse = function (nodes) {
                    var _this = this;
                    var ps = this._partition(nodes);
                    ps.forEach(function (p) { return _this._extractMessagesFromPart(p); });
                };
                MessageExtractor.prototype._recurseToExtractMessagesFromAttributes = function (nodes) {
                    var _this = this;
                    nodes.forEach(function (n) {
                        if (n instanceof html_ast_4.HtmlElementAst) {
                            _this._extractMessagesFromAttributes(n);
                            _this._recurseToExtractMessagesFromAttributes(n.children);
                        }
                    });
                };
                MessageExtractor.prototype._extractMessagesFromAttributes = function (p) {
                    var _this = this;
                    p.attrs.forEach(function (attr) {
                        if (attr.name.startsWith(I18N_ATTR_PREFIX)) {
                            var expectedName_1 = attr.name.substring(5);
                            var matching = p.attrs.filter(function (a) { return a.name == expectedName_1; });
                            if (matching.length > 0) {
                                var value = _removeInterpolation(matching[0].value, p.sourceSpan, _this._parser);
                                _this.messages.push(new message_2.Message(value, _meaning(attr.value), _description(attr.value)));
                            }
                            else {
                                _this.errors.push(new I18nExtractionError(p.sourceSpan, "Missing attribute '" + expectedName_1 + "'."));
                            }
                        }
                    });
                };
                // Man, this is so ugly!
                MessageExtractor.prototype._partition = function (nodes) {
                    var res = [];
                    for (var i = 0; i < nodes.length; ++i) {
                        var n = nodes[i];
                        var temp = [];
                        if (_isOpeningComment(n)) {
                            var i18n = n.value.substring(5).trim();
                            i++;
                            while (!_isClosingComment(nodes[i])) {
                                temp.push(nodes[i++]);
                                if (i === nodes.length) {
                                    this.errors.push(new I18nExtractionError(n.sourceSpan, "Missing closing 'i18n' comment."));
                                    break;
                                }
                            }
                            res.push(new _Part(null, temp, i18n, true));
                        }
                        else if (n instanceof html_ast_4.HtmlElementAst) {
                            var i18n = _findI18nAttr(n);
                            res.push(new _Part(n, n.children, lang_138.isPresent(i18n) ? i18n.value : null, lang_138.isPresent(i18n)));
                        }
                    }
                    return res;
                };
                return MessageExtractor;
            }());
            exports_236("MessageExtractor", MessageExtractor);
            _Part = (function () {
                function _Part(rootElement, children, i18n, hasI18n) {
                    this.rootElement = rootElement;
                    this.children = children;
                    this.i18n = i18n;
                    this.hasI18n = hasI18n;
                }
                return _Part;
            }());
            _StringifyVisitor = (function () {
                function _StringifyVisitor(_parser) {
                    this._parser = _parser;
                }
                _StringifyVisitor.prototype.visitElement = function (ast, context) {
                    var attrs = this._join(html_ast_4.htmlVisitAll(this, ast.attrs), " ");
                    var children = this._join(html_ast_4.htmlVisitAll(this, ast.children), "");
                    return "<" + ast.name + " " + attrs + ">" + children + "</" + ast.name + ">";
                };
                _StringifyVisitor.prototype.visitAttr = function (ast, context) {
                    if (ast.name.startsWith(I18N_ATTR_PREFIX)) {
                        return "";
                    }
                    else {
                        return ast.name + "=\"" + ast.value + "\"";
                    }
                };
                _StringifyVisitor.prototype.visitText = function (ast, context) {
                    return _removeInterpolation(ast.value, ast.sourceSpan, this._parser);
                };
                _StringifyVisitor.prototype.visitComment = function (ast, context) { return ""; };
                _StringifyVisitor.prototype._join = function (strs, str) {
                    return strs.filter(function (s) { return s.length > 0; }).join(str);
                };
                return _StringifyVisitor;
            }());
        }
    }
});
System.register("test/node_modules/angular2/ts/i18n", ["test/node_modules/angular2/ts/src/i18n/message", "test/node_modules/angular2/ts/src/i18n/xmb_serializer", "test/node_modules/angular2/ts/src/i18n/message_extractor"], function(exports_237, context_237) {
    "use strict";
    var __moduleName = context_237 && context_237.id;
    function exportStar_7(m) {
        var exports = {};
        for(var n in m) {
            if (n !== "default") exports[n] = m[n];
        }
        exports_237(exports);
    }
    return {
        setters:[
            function (message_3_1) {
                exportStar_7(message_3_1);
            },
            function (xmb_serializer_1_1) {
                exportStar_7(xmb_serializer_1_1);
            },
            function (message_extractor_1_1) {
                exportStar_7(message_extractor_1_1);
            }],
        execute: function() {
        }
    }
});
System.register("test/node_modules/angular2/ts/instrumentation", ["test/node_modules/angular2/ts/src/core/profile/profile"], function(exports_238, context_238) {
    "use strict";
    var __moduleName = context_238 && context_238.id;
    return {
        setters:[
            function (profile_4_1) {
                exports_238({
                    "wtfCreateScope": profile_4_1["wtfCreateScope"],
                    "wtfLeave": profile_4_1["wtfLeave"],
                    "wtfStartTimeRange": profile_4_1["wtfStartTimeRange"],
                    "wtfEndTimeRange": profile_4_1["wtfEndTimeRange"],
                    "WtfScopeFn": profile_4_1["WtfScopeFn"]
                });
            }],
        execute: function() {
        }
    }
});
System.register("test/node_modules/angular2/ts/src/router/url_parser", ['angular2/src/facade/collection', 'angular2/src/facade/lang', 'angular2/src/facade/exceptions'], function(exports_239, context_239) {
    "use strict";
    var __moduleName = context_239 && context_239.id;
    var collection_58, lang_139, exceptions_56;
    var Url, RootUrl, SEGMENT_RE, UrlParser, parser;
    function convertUrlParamsToArray(urlParams) {
        var paramsArray = [];
        if (lang_139.isBlank(urlParams)) {
            return [];
        }
        collection_58.StringMapWrapper.forEach(urlParams, function (value, key) { paramsArray.push((value === true) ? key : key + '=' + value); });
        return paramsArray;
    }
    exports_239("convertUrlParamsToArray", convertUrlParamsToArray);
    // Convert an object of url parameters into a string that can be used in an URL
    function serializeParams(urlParams, joiner) {
        if (joiner === void 0) { joiner = '&'; }
        return convertUrlParamsToArray(urlParams).join(joiner);
    }
    exports_239("serializeParams", serializeParams);
    function pathSegmentsToUrl(pathSegments) {
        var url = new Url(pathSegments[pathSegments.length - 1]);
        for (var i = pathSegments.length - 2; i >= 0; i -= 1) {
            url = new Url(pathSegments[i], url);
        }
        return url;
    }
    exports_239("pathSegmentsToUrl", pathSegmentsToUrl);
    function matchUrlSegment(str) {
        var match = lang_139.RegExpWrapper.firstMatch(SEGMENT_RE, str);
        return lang_139.isPresent(match) ? match[0] : '';
    }
    return {
        setters:[
            function (collection_58_1) {
                collection_58 = collection_58_1;
            },
            function (lang_139_1) {
                lang_139 = lang_139_1;
            },
            function (exceptions_56_1) {
                exceptions_56 = exceptions_56_1;
            }],
        execute: function() {
            /**
             * This class represents a parsed URL
             */
            Url = (function () {
                function Url(path, child, auxiliary, params) {
                    if (child === void 0) { child = null; }
                    if (auxiliary === void 0) { auxiliary = lang_139.CONST_EXPR([]); }
                    if (params === void 0) { params = lang_139.CONST_EXPR({}); }
                    this.path = path;
                    this.child = child;
                    this.auxiliary = auxiliary;
                    this.params = params;
                }
                Url.prototype.toString = function () {
                    return this.path + this._matrixParamsToString() + this._auxToString() + this._childString();
                };
                Url.prototype.segmentToString = function () { return this.path + this._matrixParamsToString(); };
                /** @internal */
                Url.prototype._auxToString = function () {
                    return this.auxiliary.length > 0 ?
                        ('(' + this.auxiliary.map(function (sibling) { return sibling.toString(); }).join('//') + ')') :
                        '';
                };
                Url.prototype._matrixParamsToString = function () {
                    var paramString = serializeParams(this.params, ';');
                    if (paramString.length > 0) {
                        return ';' + paramString;
                    }
                    return '';
                };
                /** @internal */
                Url.prototype._childString = function () { return lang_139.isPresent(this.child) ? ('/' + this.child.toString()) : ''; };
                return Url;
            }());
            exports_239("Url", Url);
            RootUrl = (function (_super) {
                __extends(RootUrl, _super);
                function RootUrl(path, child, auxiliary, params) {
                    if (child === void 0) { child = null; }
                    if (auxiliary === void 0) { auxiliary = lang_139.CONST_EXPR([]); }
                    if (params === void 0) { params = null; }
                    _super.call(this, path, child, auxiliary, params);
                }
                RootUrl.prototype.toString = function () {
                    return this.path + this._auxToString() + this._childString() + this._queryParamsToString();
                };
                RootUrl.prototype.segmentToString = function () { return this.path + this._queryParamsToString(); };
                RootUrl.prototype._queryParamsToString = function () {
                    if (lang_139.isBlank(this.params)) {
                        return '';
                    }
                    return '?' + serializeParams(this.params);
                };
                return RootUrl;
            }(Url));
            exports_239("RootUrl", RootUrl);
            SEGMENT_RE = lang_139.RegExpWrapper.create('^[^\\/\\(\\)\\?;=&#]+');
            UrlParser = (function () {
                function UrlParser() {
                }
                UrlParser.prototype.peekStartsWith = function (str) { return this._remaining.startsWith(str); };
                UrlParser.prototype.capture = function (str) {
                    if (!this._remaining.startsWith(str)) {
                        throw new exceptions_56.BaseException("Expected \"" + str + "\".");
                    }
                    this._remaining = this._remaining.substring(str.length);
                };
                UrlParser.prototype.parse = function (url) {
                    this._remaining = url;
                    if (url == '' || url == '/') {
                        return new Url('');
                    }
                    return this.parseRoot();
                };
                // segment + (aux segments) + (query params)
                UrlParser.prototype.parseRoot = function () {
                    if (this.peekStartsWith('/')) {
                        this.capture('/');
                    }
                    var path = matchUrlSegment(this._remaining);
                    this.capture(path);
                    var aux = [];
                    if (this.peekStartsWith('(')) {
                        aux = this.parseAuxiliaryRoutes();
                    }
                    if (this.peekStartsWith(';')) {
                        // TODO: should these params just be dropped?
                        this.parseMatrixParams();
                    }
                    var child = null;
                    if (this.peekStartsWith('/') && !this.peekStartsWith('//')) {
                        this.capture('/');
                        child = this.parseSegment();
                    }
                    var queryParams = null;
                    if (this.peekStartsWith('?')) {
                        queryParams = this.parseQueryParams();
                    }
                    return new RootUrl(path, child, aux, queryParams);
                };
                // segment + (matrix params) + (aux segments)
                UrlParser.prototype.parseSegment = function () {
                    if (this._remaining.length == 0) {
                        return null;
                    }
                    if (this.peekStartsWith('/')) {
                        this.capture('/');
                    }
                    var path = matchUrlSegment(this._remaining);
                    this.capture(path);
                    var matrixParams = null;
                    if (this.peekStartsWith(';')) {
                        matrixParams = this.parseMatrixParams();
                    }
                    var aux = [];
                    if (this.peekStartsWith('(')) {
                        aux = this.parseAuxiliaryRoutes();
                    }
                    var child = null;
                    if (this.peekStartsWith('/') && !this.peekStartsWith('//')) {
                        this.capture('/');
                        child = this.parseSegment();
                    }
                    return new Url(path, child, aux, matrixParams);
                };
                UrlParser.prototype.parseQueryParams = function () {
                    var params = {};
                    this.capture('?');
                    this.parseParam(params);
                    while (this._remaining.length > 0 && this.peekStartsWith('&')) {
                        this.capture('&');
                        this.parseParam(params);
                    }
                    return params;
                };
                UrlParser.prototype.parseMatrixParams = function () {
                    var params = {};
                    while (this._remaining.length > 0 && this.peekStartsWith(';')) {
                        this.capture(';');
                        this.parseParam(params);
                    }
                    return params;
                };
                UrlParser.prototype.parseParam = function (params) {
                    var key = matchUrlSegment(this._remaining);
                    if (lang_139.isBlank(key)) {
                        return;
                    }
                    this.capture(key);
                    var value = true;
                    if (this.peekStartsWith('=')) {
                        this.capture('=');
                        var valueMatch = matchUrlSegment(this._remaining);
                        if (lang_139.isPresent(valueMatch)) {
                            value = valueMatch;
                            this.capture(value);
                        }
                    }
                    params[key] = value;
                };
                UrlParser.prototype.parseAuxiliaryRoutes = function () {
                    var routes = [];
                    this.capture('(');
                    while (!this.peekStartsWith(')') && this._remaining.length > 0) {
                        routes.push(this.parseSegment());
                        if (this.peekStartsWith('//')) {
                            this.capture('//');
                        }
                    }
                    this.capture(')');
                    return routes;
                };
                return UrlParser;
            }());
            exports_239("UrlParser", UrlParser);
            exports_239("parser", parser = new UrlParser());
        }
    }
});
System.register("test/node_modules/angular2/ts/src/router/rules/route_paths/route_path", [], function(exports_240, context_240) {
    "use strict";
    var __moduleName = context_240 && context_240.id;
    var MatchedUrl, GeneratedUrl;
    return {
        setters:[],
        execute: function() {
            MatchedUrl = (function () {
                function MatchedUrl(urlPath, urlParams, allParams, auxiliary, rest) {
                    this.urlPath = urlPath;
                    this.urlParams = urlParams;
                    this.allParams = allParams;
                    this.auxiliary = auxiliary;
                    this.rest = rest;
                }
                return MatchedUrl;
            }());
            exports_240("MatchedUrl", MatchedUrl);
            GeneratedUrl = (function () {
                function GeneratedUrl(urlPath, urlParams) {
                    this.urlPath = urlPath;
                    this.urlParams = urlParams;
                }
                return GeneratedUrl;
            }());
            exports_240("GeneratedUrl", GeneratedUrl);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/router/rules/route_paths/regex_route_path", ['angular2/src/facade/lang', "test/node_modules/angular2/ts/src/router/rules/route_paths/route_path"], function(exports_241, context_241) {
    "use strict";
    var __moduleName = context_241 && context_241.id;
    var lang_140, route_path_1;
    var RegexRoutePath;
    return {
        setters:[
            function (lang_140_1) {
                lang_140 = lang_140_1;
            },
            function (route_path_1_1) {
                route_path_1 = route_path_1_1;
            }],
        execute: function() {
            RegexRoutePath = (function () {
                function RegexRoutePath(_reString, _serializer) {
                    this._reString = _reString;
                    this._serializer = _serializer;
                    this.terminal = true;
                    this.specificity = '2';
                    this.hash = this._reString;
                    this._regex = lang_140.RegExpWrapper.create(this._reString);
                }
                RegexRoutePath.prototype.matchUrl = function (url) {
                    var urlPath = url.toString();
                    var params = {};
                    var matcher = lang_140.RegExpWrapper.matcher(this._regex, urlPath);
                    var match = lang_140.RegExpMatcherWrapper.next(matcher);
                    if (lang_140.isBlank(match)) {
                        return null;
                    }
                    for (var i = 0; i < match.length; i += 1) {
                        params[i.toString()] = match[i];
                    }
                    return new route_path_1.MatchedUrl(urlPath, [], params, [], null);
                };
                RegexRoutePath.prototype.generateUrl = function (params) { return this._serializer(params); };
                RegexRoutePath.prototype.toString = function () { return this._reString; };
                return RegexRoutePath;
            }());
            exports_241("RegexRoutePath", RegexRoutePath);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/router/route_definition", [], function(exports_242, context_242) {
    "use strict";
    var __moduleName = context_242 && context_242.id;
    return {
        setters:[],
        execute: function() {
        }
    }
});
System.register("test/node_modules/angular2/ts/src/router/route_config/route_config_impl", ['angular2/src/facade/lang'], function(exports_243, context_243) {
    "use strict";
    var __moduleName = context_243 && context_243.id;
    var lang_141;
    var __make_dart_analyzer_happy, RouteConfig, AbstractRoute, Route, AuxRoute, AsyncRoute, Redirect;
    return {
        setters:[
            function (lang_141_1) {
                lang_141 = lang_141_1;
            }],
        execute: function() {
            __make_dart_analyzer_happy = null;
            /**
             * The `RouteConfig` decorator defines routes for a given component.
             *
             * It takes an array of {@link RouteDefinition}s.
             */
            RouteConfig = (function () {
                function RouteConfig(configs) {
                    this.configs = configs;
                }
                RouteConfig = __decorate([
                    lang_141.CONST(), 
                    __metadata('design:paramtypes', [Array])
                ], RouteConfig);
                return RouteConfig;
            }());
            exports_243("RouteConfig", RouteConfig);
            AbstractRoute = (function () {
                function AbstractRoute(_a) {
                    var name = _a.name, useAsDefault = _a.useAsDefault, path = _a.path, regex = _a.regex, serializer = _a.serializer, data = _a.data;
                    this.name = name;
                    this.useAsDefault = useAsDefault;
                    this.path = path;
                    this.regex = regex;
                    this.serializer = serializer;
                    this.data = data;
                }
                AbstractRoute = __decorate([
                    lang_141.CONST(), 
                    __metadata('design:paramtypes', [Object])
                ], AbstractRoute);
                return AbstractRoute;
            }());
            exports_243("AbstractRoute", AbstractRoute);
            /**
             * `Route` is a type of {@link RouteDefinition} used to route a path to a component.
             *
             * It has the following properties:
             * - `path` is a string that uses the route matcher DSL.
             * - `component` a component type.
             * - `name` is an optional `CamelCase` string representing the name of the route.
             * - `data` is an optional property of any type representing arbitrary route metadata for the given
             * route. It is injectable via {@link RouteData}.
             * - `useAsDefault` is a boolean value. If `true`, the child route will be navigated to if no child
             * route is specified during the navigation.
             *
             * ### Example
             * ```
             * import {RouteConfig, Route} from 'angular2/router';
             *
             * @RouteConfig([
             *   new Route({path: '/home', component: HomeCmp, name: 'HomeCmp' })
             * ])
             * class MyApp {}
             * ```
             */
            Route = (function (_super) {
                __extends(Route, _super);
                function Route(_a) {
                    var name = _a.name, useAsDefault = _a.useAsDefault, path = _a.path, regex = _a.regex, serializer = _a.serializer, data = _a.data, component = _a.component;
                    _super.call(this, {
                        name: name,
                        useAsDefault: useAsDefault,
                        path: path,
                        regex: regex,
                        serializer: serializer,
                        data: data
                    });
                    this.aux = null;
                    this.component = component;
                }
                Route = __decorate([
                    lang_141.CONST(), 
                    __metadata('design:paramtypes', [Object])
                ], Route);
                return Route;
            }(AbstractRoute));
            exports_243("Route", Route);
            /**
             * `AuxRoute` is a type of {@link RouteDefinition} used to define an auxiliary route.
             *
             * It takes an object with the following properties:
             * - `path` is a string that uses the route matcher DSL.
             * - `component` a component type.
             * - `name` is an optional `CamelCase` string representing the name of the route.
             * - `data` is an optional property of any type representing arbitrary route metadata for the given
             * route. It is injectable via {@link RouteData}.
             *
             * ### Example
             * ```
             * import {RouteConfig, AuxRoute} from 'angular2/router';
             *
             * @RouteConfig([
             *   new AuxRoute({path: '/home', component: HomeCmp})
             * ])
             * class MyApp {}
             * ```
             */
            AuxRoute = (function (_super) {
                __extends(AuxRoute, _super);
                function AuxRoute(_a) {
                    var name = _a.name, useAsDefault = _a.useAsDefault, path = _a.path, regex = _a.regex, serializer = _a.serializer, data = _a.data, component = _a.component;
                    _super.call(this, {
                        name: name,
                        useAsDefault: useAsDefault,
                        path: path,
                        regex: regex,
                        serializer: serializer,
                        data: data
                    });
                    this.component = component;
                }
                AuxRoute = __decorate([
                    lang_141.CONST(), 
                    __metadata('design:paramtypes', [Object])
                ], AuxRoute);
                return AuxRoute;
            }(AbstractRoute));
            exports_243("AuxRoute", AuxRoute);
            /**
             * `AsyncRoute` is a type of {@link RouteDefinition} used to route a path to an asynchronously
             * loaded component.
             *
             * It has the following properties:
             * - `path` is a string that uses the route matcher DSL.
             * - `loader` is a function that returns a promise that resolves to a component.
             * - `name` is an optional `CamelCase` string representing the name of the route.
             * - `data` is an optional property of any type representing arbitrary route metadata for the given
             * route. It is injectable via {@link RouteData}.
             * - `useAsDefault` is a boolean value. If `true`, the child route will be navigated to if no child
             * route is specified during the navigation.
             *
             * ### Example
             * ```
             * import {RouteConfig, AsyncRoute} from 'angular2/router';
             *
             * @RouteConfig([
             *   new AsyncRoute({path: '/home', loader: () => Promise.resolve(MyLoadedCmp), name:
             * 'MyLoadedCmp'})
             * ])
             * class MyApp {}
             * ```
             */
            AsyncRoute = (function (_super) {
                __extends(AsyncRoute, _super);
                function AsyncRoute(_a) {
                    var name = _a.name, useAsDefault = _a.useAsDefault, path = _a.path, regex = _a.regex, serializer = _a.serializer, data = _a.data, loader = _a.loader;
                    _super.call(this, {
                        name: name,
                        useAsDefault: useAsDefault,
                        path: path,
                        regex: regex,
                        serializer: serializer,
                        data: data
                    });
                    this.aux = null;
                    this.loader = loader;
                }
                AsyncRoute = __decorate([
                    lang_141.CONST(), 
                    __metadata('design:paramtypes', [Object])
                ], AsyncRoute);
                return AsyncRoute;
            }(AbstractRoute));
            exports_243("AsyncRoute", AsyncRoute);
            /**
             * `Redirect` is a type of {@link RouteDefinition} used to route a path to a canonical route.
             *
             * It has the following properties:
             * - `path` is a string that uses the route matcher DSL.
             * - `redirectTo` is an array representing the link DSL.
             *
             * Note that redirects **do not** affect how links are generated. For that, see the `useAsDefault`
             * option.
             *
             * ### Example
             * ```
             * import {RouteConfig, Route, Redirect} from 'angular2/router';
             *
             * @RouteConfig([
             *   new Redirect({path: '/', redirectTo: ['/Home'] }),
             *   new Route({path: '/home', component: HomeCmp, name: 'Home'})
             * ])
             * class MyApp {}
             * ```
             */
            Redirect = (function (_super) {
                __extends(Redirect, _super);
                function Redirect(_a) {
                    var name = _a.name, useAsDefault = _a.useAsDefault, path = _a.path, regex = _a.regex, serializer = _a.serializer, data = _a.data, redirectTo = _a.redirectTo;
                    _super.call(this, {
                        name: name,
                        useAsDefault: useAsDefault,
                        path: path,
                        regex: regex,
                        serializer: serializer,
                        data: data
                    });
                    this.redirectTo = redirectTo;
                }
                Redirect = __decorate([
                    lang_141.CONST(), 
                    __metadata('design:paramtypes', [Object])
                ], Redirect);
                return Redirect;
            }(AbstractRoute));
            exports_243("Redirect", Redirect);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/router/instruction", ['angular2/src/facade/collection', 'angular2/src/facade/lang', 'angular2/src/facade/async'], function(exports_244, context_244) {
    "use strict";
    var __moduleName = context_244 && context_244.id;
    var collection_59, lang_142, async_21;
    var RouteParams, RouteData, BLANK_ROUTE_DATA, Instruction, ResolvedInstruction, DefaultInstruction, UnresolvedInstruction, RedirectInstruction, ComponentInstruction;
    return {
        setters:[
            function (collection_59_1) {
                collection_59 = collection_59_1;
            },
            function (lang_142_1) {
                lang_142 = lang_142_1;
            },
            function (async_21_1) {
                async_21 = async_21_1;
            }],
        execute: function() {
            /**
             * `RouteParams` is an immutable map of parameters for the given route
             * based on the url matcher and optional parameters for that route.
             *
             * You can inject `RouteParams` into the constructor of a component to use it.
             *
             * ### Example
             *
             * ```
             * import {Component} from 'angular2/core';
             * import {bootstrap} from 'angular2/platform/browser';
             * import {Router, ROUTER_DIRECTIVES, ROUTER_PROVIDERS, RouteConfig, RouteParams} from
             * 'angular2/router';
             *
             * @Component({directives: [ROUTER_DIRECTIVES]})
             * @RouteConfig([
             *  {path: '/user/:id', component: UserCmp, name: 'UserCmp'},
             * ])
             * class AppCmp {}
             *
             * @Component({ template: 'user: {{id}}' })
             * class UserCmp {
             *   id: string;
             *   constructor(params: RouteParams) {
             *     this.id = params.get('id');
             *   }
             * }
             *
             * bootstrap(AppCmp, ROUTER_PROVIDERS);
             * ```
             */
            RouteParams = (function () {
                function RouteParams(params) {
                    this.params = params;
                }
                RouteParams.prototype.get = function (param) { return lang_142.normalizeBlank(collection_59.StringMapWrapper.get(this.params, param)); };
                return RouteParams;
            }());
            exports_244("RouteParams", RouteParams);
            /**
             * `RouteData` is an immutable map of additional data you can configure in your {@link Route}.
             *
             * You can inject `RouteData` into the constructor of a component to use it.
             *
             * ### Example
             *
             * ```
             * import {Component} from 'angular2/core';
             * import {bootstrap} from 'angular2/platform/browser';
             * import {Router, ROUTER_DIRECTIVES, ROUTER_PROVIDERS, RouteConfig, RouteData} from
             * 'angular2/router';
             *
             * @Component({directives: [ROUTER_DIRECTIVES]})
             * @RouteConfig([
             *  {path: '/user/:id', component: UserCmp, name: 'UserCmp', data: {isAdmin: true}},
             * ])
             * class AppCmp {}
             *
             * @Component({
             *   ...,
             *   template: 'user: {{isAdmin}}'
             * })
             * class UserCmp {
             *   string: isAdmin;
             *   constructor(data: RouteData) {
             *     this.isAdmin = data.get('isAdmin');
             *   }
             * }
             *
             * bootstrap(AppCmp, ROUTER_PROVIDERS);
             * ```
             */
            RouteData = (function () {
                function RouteData(data) {
                    if (data === void 0) { data = lang_142.CONST_EXPR({}); }
                    this.data = data;
                }
                RouteData.prototype.get = function (key) { return lang_142.normalizeBlank(collection_59.StringMapWrapper.get(this.data, key)); };
                return RouteData;
            }());
            exports_244("RouteData", RouteData);
            exports_244("BLANK_ROUTE_DATA", BLANK_ROUTE_DATA = new RouteData());
            /**
             * `Instruction` is a tree of {@link ComponentInstruction}s with all the information needed
             * to transition each component in the app to a given route, including all auxiliary routes.
             *
             * `Instruction`s can be created using {@link Router#generate}, and can be used to
             * perform route changes with {@link Router#navigateByInstruction}.
             *
             * ### Example
             *
             * ```
             * import {Component} from 'angular2/core';
             * import {bootstrap} from 'angular2/platform/browser';
             * import {Router, ROUTER_DIRECTIVES, ROUTER_PROVIDERS, RouteConfig} from 'angular2/router';
             *
             * @Component({directives: [ROUTER_DIRECTIVES]})
             * @RouteConfig([
             *  {...},
             * ])
             * class AppCmp {
             *   constructor(router: Router) {
             *     var instruction = router.generate(['/MyRoute']);
             *     router.navigateByInstruction(instruction);
             *   }
             * }
             *
             * bootstrap(AppCmp, ROUTER_PROVIDERS);
             * ```
             */
            Instruction = (function () {
                function Instruction(component, child, auxInstruction) {
                    this.component = component;
                    this.child = child;
                    this.auxInstruction = auxInstruction;
                }
                Object.defineProperty(Instruction.prototype, "urlPath", {
                    get: function () { return lang_142.isPresent(this.component) ? this.component.urlPath : ''; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Instruction.prototype, "urlParams", {
                    get: function () { return lang_142.isPresent(this.component) ? this.component.urlParams : []; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Instruction.prototype, "specificity", {
                    get: function () {
                        var total = '';
                        if (lang_142.isPresent(this.component)) {
                            total += this.component.specificity;
                        }
                        if (lang_142.isPresent(this.child)) {
                            total += this.child.specificity;
                        }
                        return total;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * converts the instruction into a URL string
                 */
                Instruction.prototype.toRootUrl = function () { return this.toUrlPath() + this.toUrlQuery(); };
                /** @internal */
                Instruction.prototype._toNonRootUrl = function () {
                    return this._stringifyPathMatrixAuxPrefixed() +
                        (lang_142.isPresent(this.child) ? this.child._toNonRootUrl() : '');
                };
                Instruction.prototype.toUrlQuery = function () { return this.urlParams.length > 0 ? ('?' + this.urlParams.join('&')) : ''; };
                /**
                 * Returns a new instruction that shares the state of the existing instruction, but with
                 * the given child {@link Instruction} replacing the existing child.
                 */
                Instruction.prototype.replaceChild = function (child) {
                    return new ResolvedInstruction(this.component, child, this.auxInstruction);
                };
                /**
                 * If the final URL for the instruction is ``
                 */
                Instruction.prototype.toUrlPath = function () {
                    return this.urlPath + this._stringifyAux() +
                        (lang_142.isPresent(this.child) ? this.child._toNonRootUrl() : '');
                };
                // default instructions override these
                Instruction.prototype.toLinkUrl = function () {
                    return this.urlPath + this._stringifyAux() +
                        (lang_142.isPresent(this.child) ? this.child._toLinkUrl() : '') + this.toUrlQuery();
                };
                // this is the non-root version (called recursively)
                /** @internal */
                Instruction.prototype._toLinkUrl = function () {
                    return this._stringifyPathMatrixAuxPrefixed() +
                        (lang_142.isPresent(this.child) ? this.child._toLinkUrl() : '');
                };
                /** @internal */
                Instruction.prototype._stringifyPathMatrixAuxPrefixed = function () {
                    var primary = this._stringifyPathMatrixAux();
                    if (primary.length > 0) {
                        primary = '/' + primary;
                    }
                    return primary;
                };
                /** @internal */
                Instruction.prototype._stringifyMatrixParams = function () {
                    return this.urlParams.length > 0 ? (';' + this.urlParams.join(';')) : '';
                };
                /** @internal */
                Instruction.prototype._stringifyPathMatrixAux = function () {
                    if (lang_142.isBlank(this.component)) {
                        return '';
                    }
                    return this.urlPath + this._stringifyMatrixParams() + this._stringifyAux();
                };
                /** @internal */
                Instruction.prototype._stringifyAux = function () {
                    var routes = [];
                    collection_59.StringMapWrapper.forEach(this.auxInstruction, function (auxInstruction, _) {
                        routes.push(auxInstruction._stringifyPathMatrixAux());
                    });
                    if (routes.length > 0) {
                        return '(' + routes.join('//') + ')';
                    }
                    return '';
                };
                return Instruction;
            }());
            exports_244("Instruction", Instruction);
            /**
             * a resolved instruction has an outlet instruction for itself, but maybe not for...
             */
            ResolvedInstruction = (function (_super) {
                __extends(ResolvedInstruction, _super);
                function ResolvedInstruction(component, child, auxInstruction) {
                    _super.call(this, component, child, auxInstruction);
                }
                ResolvedInstruction.prototype.resolveComponent = function () {
                    return async_21.PromiseWrapper.resolve(this.component);
                };
                return ResolvedInstruction;
            }(Instruction));
            exports_244("ResolvedInstruction", ResolvedInstruction);
            /**
             * Represents a resolved default route
             */
            DefaultInstruction = (function (_super) {
                __extends(DefaultInstruction, _super);
                function DefaultInstruction(component, child) {
                    _super.call(this, component, child, {});
                }
                DefaultInstruction.prototype.toLinkUrl = function () { return ''; };
                /** @internal */
                DefaultInstruction.prototype._toLinkUrl = function () { return ''; };
                return DefaultInstruction;
            }(ResolvedInstruction));
            exports_244("DefaultInstruction", DefaultInstruction);
            /**
             * Represents a component that may need to do some redirection or lazy loading at a later time.
             */
            UnresolvedInstruction = (function (_super) {
                __extends(UnresolvedInstruction, _super);
                function UnresolvedInstruction(_resolver, _urlPath, _urlParams) {
                    if (_urlPath === void 0) { _urlPath = ''; }
                    if (_urlParams === void 0) { _urlParams = lang_142.CONST_EXPR([]); }
                    _super.call(this, null, null, {});
                    this._resolver = _resolver;
                    this._urlPath = _urlPath;
                    this._urlParams = _urlParams;
                }
                Object.defineProperty(UnresolvedInstruction.prototype, "urlPath", {
                    get: function () {
                        if (lang_142.isPresent(this.component)) {
                            return this.component.urlPath;
                        }
                        if (lang_142.isPresent(this._urlPath)) {
                            return this._urlPath;
                        }
                        return '';
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(UnresolvedInstruction.prototype, "urlParams", {
                    get: function () {
                        if (lang_142.isPresent(this.component)) {
                            return this.component.urlParams;
                        }
                        if (lang_142.isPresent(this._urlParams)) {
                            return this._urlParams;
                        }
                        return [];
                    },
                    enumerable: true,
                    configurable: true
                });
                UnresolvedInstruction.prototype.resolveComponent = function () {
                    var _this = this;
                    if (lang_142.isPresent(this.component)) {
                        return async_21.PromiseWrapper.resolve(this.component);
                    }
                    return this._resolver().then(function (instruction) {
                        _this.child = lang_142.isPresent(instruction) ? instruction.child : null;
                        return _this.component = lang_142.isPresent(instruction) ? instruction.component : null;
                    });
                };
                return UnresolvedInstruction;
            }(Instruction));
            exports_244("UnresolvedInstruction", UnresolvedInstruction);
            RedirectInstruction = (function (_super) {
                __extends(RedirectInstruction, _super);
                function RedirectInstruction(component, child, auxInstruction, _specificity) {
                    _super.call(this, component, child, auxInstruction);
                    this._specificity = _specificity;
                }
                Object.defineProperty(RedirectInstruction.prototype, "specificity", {
                    get: function () { return this._specificity; },
                    enumerable: true,
                    configurable: true
                });
                return RedirectInstruction;
            }(ResolvedInstruction));
            exports_244("RedirectInstruction", RedirectInstruction);
            /**
             * A `ComponentInstruction` represents the route state for a single component.
             *
             * `ComponentInstructions` is a public API. Instances of `ComponentInstruction` are passed
             * to route lifecycle hooks, like {@link CanActivate}.
             *
             * `ComponentInstruction`s are [hash consed](https://en.wikipedia.org/wiki/Hash_consing). You should
             * never construct one yourself with "new." Instead, rely on {@link Router/RouteRecognizer} to
             * construct `ComponentInstruction`s.
             *
             * You should not modify this object. It should be treated as immutable.
             */
            ComponentInstruction = (function () {
                /**
                 * @internal
                 */
                function ComponentInstruction(urlPath, urlParams, data, componentType, terminal, specificity, params) {
                    if (params === void 0) { params = null; }
                    this.urlPath = urlPath;
                    this.urlParams = urlParams;
                    this.componentType = componentType;
                    this.terminal = terminal;
                    this.specificity = specificity;
                    this.params = params;
                    this.reuse = false;
                    this.routeData = lang_142.isPresent(data) ? data : BLANK_ROUTE_DATA;
                }
                return ComponentInstruction;
            }());
            exports_244("ComponentInstruction", ComponentInstruction);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/router/rules/route_handlers/route_handler", [], function(exports_245, context_245) {
    "use strict";
    var __moduleName = context_245 && context_245.id;
    return {
        setters:[],
        execute: function() {
        }
    }
});
System.register("test/node_modules/angular2/ts/src/router/rules/rules", ['angular2/src/facade/lang', 'angular2/src/facade/exceptions', 'angular2/src/facade/promise', 'angular2/src/facade/collection', "test/node_modules/angular2/ts/src/router/url_parser", "test/node_modules/angular2/ts/src/router/instruction"], function(exports_246, context_246) {
    "use strict";
    var __moduleName = context_246 && context_246.id;
    var lang_143, exceptions_57, promise_4, collection_60, url_parser_1, instruction_1;
    var RouteMatch, PathMatch, RedirectMatch, RedirectRule, RouteRule;
    return {
        setters:[
            function (lang_143_1) {
                lang_143 = lang_143_1;
            },
            function (exceptions_57_1) {
                exceptions_57 = exceptions_57_1;
            },
            function (promise_4_1) {
                promise_4 = promise_4_1;
            },
            function (collection_60_1) {
                collection_60 = collection_60_1;
            },
            function (url_parser_1_1) {
                url_parser_1 = url_parser_1_1;
            },
            function (instruction_1_1) {
                instruction_1 = instruction_1_1;
            }],
        execute: function() {
            // RouteMatch objects hold information about a match between a rule and a URL
            RouteMatch = (function () {
                function RouteMatch() {
                }
                return RouteMatch;
            }());
            exports_246("RouteMatch", RouteMatch);
            PathMatch = (function (_super) {
                __extends(PathMatch, _super);
                function PathMatch(instruction, remaining, remainingAux) {
                    _super.call(this);
                    this.instruction = instruction;
                    this.remaining = remaining;
                    this.remainingAux = remainingAux;
                }
                return PathMatch;
            }(RouteMatch));
            exports_246("PathMatch", PathMatch);
            RedirectMatch = (function (_super) {
                __extends(RedirectMatch, _super);
                function RedirectMatch(redirectTo, specificity) {
                    _super.call(this);
                    this.redirectTo = redirectTo;
                    this.specificity = specificity;
                }
                return RedirectMatch;
            }(RouteMatch));
            exports_246("RedirectMatch", RedirectMatch);
            RedirectRule = (function () {
                function RedirectRule(_pathRecognizer, redirectTo) {
                    this._pathRecognizer = _pathRecognizer;
                    this.redirectTo = redirectTo;
                    this.hash = this._pathRecognizer.hash;
                }
                Object.defineProperty(RedirectRule.prototype, "path", {
                    get: function () { return this._pathRecognizer.toString(); },
                    set: function (val) { throw new exceptions_57.BaseException('you cannot set the path of a RedirectRule directly'); },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Returns `null` or a `ParsedUrl` representing the new path to match
                 */
                RedirectRule.prototype.recognize = function (beginningSegment) {
                    var match = null;
                    if (lang_143.isPresent(this._pathRecognizer.matchUrl(beginningSegment))) {
                        match = new RedirectMatch(this.redirectTo, this._pathRecognizer.specificity);
                    }
                    return promise_4.PromiseWrapper.resolve(match);
                };
                RedirectRule.prototype.generate = function (params) {
                    throw new exceptions_57.BaseException("Tried to generate a redirect.");
                };
                return RedirectRule;
            }());
            exports_246("RedirectRule", RedirectRule);
            // represents something like '/foo/:bar'
            RouteRule = (function () {
                // TODO: cache component instruction instances by params and by ParsedUrl instance
                function RouteRule(_routePath, handler) {
                    this._routePath = _routePath;
                    this.handler = handler;
                    this._cache = new collection_60.Map();
                    this.specificity = this._routePath.specificity;
                    this.hash = this._routePath.hash;
                    this.terminal = this._routePath.terminal;
                }
                Object.defineProperty(RouteRule.prototype, "path", {
                    get: function () { return this._routePath.toString(); },
                    set: function (val) { throw new exceptions_57.BaseException('you cannot set the path of a RouteRule directly'); },
                    enumerable: true,
                    configurable: true
                });
                RouteRule.prototype.recognize = function (beginningSegment) {
                    var _this = this;
                    var res = this._routePath.matchUrl(beginningSegment);
                    if (lang_143.isBlank(res)) {
                        return null;
                    }
                    return this.handler.resolveComponentType().then(function (_) {
                        var componentInstruction = _this._getInstruction(res.urlPath, res.urlParams, res.allParams);
                        return new PathMatch(componentInstruction, res.rest, res.auxiliary);
                    });
                };
                RouteRule.prototype.generate = function (params) {
                    var generated = this._routePath.generateUrl(params);
                    var urlPath = generated.urlPath;
                    var urlParams = generated.urlParams;
                    return this._getInstruction(urlPath, url_parser_1.convertUrlParamsToArray(urlParams), params);
                };
                RouteRule.prototype.generateComponentPathValues = function (params) {
                    return this._routePath.generateUrl(params);
                };
                RouteRule.prototype._getInstruction = function (urlPath, urlParams, params) {
                    if (lang_143.isBlank(this.handler.componentType)) {
                        throw new exceptions_57.BaseException("Tried to get instruction before the type was loaded.");
                    }
                    var hashKey = urlPath + '?' + urlParams.join('&');
                    if (this._cache.has(hashKey)) {
                        return this._cache.get(hashKey);
                    }
                    var instruction = new instruction_1.ComponentInstruction(urlPath, urlParams, this.handler.data, this.handler.componentType, this.terminal, this.specificity, params);
                    this._cache.set(hashKey, instruction);
                    return instruction;
                };
                return RouteRule;
            }());
            exports_246("RouteRule", RouteRule);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/router/rules/route_handlers/async_route_handler", ['angular2/src/facade/lang', "test/node_modules/angular2/ts/src/router/instruction"], function(exports_247, context_247) {
    "use strict";
    var __moduleName = context_247 && context_247.id;
    var lang_144, instruction_2;
    var AsyncRouteHandler;
    return {
        setters:[
            function (lang_144_1) {
                lang_144 = lang_144_1;
            },
            function (instruction_2_1) {
                instruction_2 = instruction_2_1;
            }],
        execute: function() {
            AsyncRouteHandler = (function () {
                function AsyncRouteHandler(_loader, data) {
                    if (data === void 0) { data = null; }
                    this._loader = _loader;
                    /** @internal */
                    this._resolvedComponent = null;
                    this.data = lang_144.isPresent(data) ? new instruction_2.RouteData(data) : instruction_2.BLANK_ROUTE_DATA;
                }
                AsyncRouteHandler.prototype.resolveComponentType = function () {
                    var _this = this;
                    if (lang_144.isPresent(this._resolvedComponent)) {
                        return this._resolvedComponent;
                    }
                    return this._resolvedComponent = this._loader().then(function (componentType) {
                        _this.componentType = componentType;
                        return componentType;
                    });
                };
                return AsyncRouteHandler;
            }());
            exports_247("AsyncRouteHandler", AsyncRouteHandler);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/router/rules/route_handlers/sync_route_handler", ['angular2/src/facade/async', 'angular2/src/facade/lang', "test/node_modules/angular2/ts/src/router/instruction"], function(exports_248, context_248) {
    "use strict";
    var __moduleName = context_248 && context_248.id;
    var async_22, lang_145, instruction_3;
    var SyncRouteHandler;
    return {
        setters:[
            function (async_22_1) {
                async_22 = async_22_1;
            },
            function (lang_145_1) {
                lang_145 = lang_145_1;
            },
            function (instruction_3_1) {
                instruction_3 = instruction_3_1;
            }],
        execute: function() {
            SyncRouteHandler = (function () {
                function SyncRouteHandler(componentType, data) {
                    this.componentType = componentType;
                    /** @internal */
                    this._resolvedComponent = null;
                    this._resolvedComponent = async_22.PromiseWrapper.resolve(componentType);
                    this.data = lang_145.isPresent(data) ? new instruction_3.RouteData(data) : instruction_3.BLANK_ROUTE_DATA;
                }
                SyncRouteHandler.prototype.resolveComponentType = function () { return this._resolvedComponent; };
                return SyncRouteHandler;
            }());
            exports_248("SyncRouteHandler", SyncRouteHandler);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/router/utils", ['angular2/src/facade/lang', 'angular2/src/facade/collection'], function(exports_249, context_249) {
    "use strict";
    var __moduleName = context_249 && context_249.id;
    var lang_146, collection_61;
    var TouchMap;
    function normalizeString(obj) {
        if (lang_146.isBlank(obj)) {
            return null;
        }
        else {
            return obj.toString();
        }
    }
    exports_249("normalizeString", normalizeString);
    return {
        setters:[
            function (lang_146_1) {
                lang_146 = lang_146_1;
            },
            function (collection_61_1) {
                collection_61 = collection_61_1;
            }],
        execute: function() {
            TouchMap = (function () {
                function TouchMap(map) {
                    var _this = this;
                    this.map = {};
                    this.keys = {};
                    if (lang_146.isPresent(map)) {
                        collection_61.StringMapWrapper.forEach(map, function (value, key) {
                            _this.map[key] = lang_146.isPresent(value) ? value.toString() : null;
                            _this.keys[key] = true;
                        });
                    }
                }
                TouchMap.prototype.get = function (key) {
                    collection_61.StringMapWrapper.delete(this.keys, key);
                    return this.map[key];
                };
                TouchMap.prototype.getUnused = function () {
                    var _this = this;
                    var unused = {};
                    var keys = collection_61.StringMapWrapper.keys(this.keys);
                    keys.forEach(function (key) { return unused[key] = collection_61.StringMapWrapper.get(_this.map, key); });
                    return unused;
                };
                return TouchMap;
            }());
            exports_249("TouchMap", TouchMap);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/router/rules/route_paths/param_route_path", ['angular2/src/facade/lang', 'angular2/src/facade/exceptions', 'angular2/src/facade/collection', "test/node_modules/angular2/ts/src/router/utils", "test/node_modules/angular2/ts/src/router/url_parser", "test/node_modules/angular2/ts/src/router/rules/route_paths/route_path"], function(exports_250, context_250) {
    "use strict";
    var __moduleName = context_250 && context_250.id;
    var lang_147, exceptions_58, collection_62, utils_1, url_parser_2, route_path_2;
    var ContinuationPathSegment, StaticPathSegment, DynamicPathSegment, StarPathSegment, ParamRoutePath;
    return {
        setters:[
            function (lang_147_1) {
                lang_147 = lang_147_1;
            },
            function (exceptions_58_1) {
                exceptions_58 = exceptions_58_1;
            },
            function (collection_62_1) {
                collection_62 = collection_62_1;
            },
            function (utils_1_1) {
                utils_1 = utils_1_1;
            },
            function (url_parser_2_1) {
                url_parser_2 = url_parser_2_1;
            },
            function (route_path_2_1) {
                route_path_2 = route_path_2_1;
            }],
        execute: function() {
            /**
             * Identified by a `...` URL segment. This indicates that the
             * Route will continue to be matched by child `Router`s.
             */
            ContinuationPathSegment = (function () {
                function ContinuationPathSegment() {
                    this.name = '';
                    this.specificity = '';
                    this.hash = '...';
                }
                ContinuationPathSegment.prototype.generate = function (params) { return ''; };
                ContinuationPathSegment.prototype.match = function (path) { return true; };
                return ContinuationPathSegment;
            }());
            /**
             * Identified by a string not starting with a `:` or `*`.
             * Only matches the URL segments that equal the segment path
             */
            StaticPathSegment = (function () {
                function StaticPathSegment(path) {
                    this.path = path;
                    this.name = '';
                    this.specificity = '2';
                    this.hash = path;
                }
                StaticPathSegment.prototype.match = function (path) { return path == this.path; };
                StaticPathSegment.prototype.generate = function (params) { return this.path; };
                return StaticPathSegment;
            }());
            /**
             * Identified by a string starting with `:`. Indicates a segment
             * that can contain a value that will be extracted and provided to
             * a matching `Instruction`.
             */
            DynamicPathSegment = (function () {
                function DynamicPathSegment(name) {
                    this.name = name;
                    this.specificity = '1';
                    this.hash = ':';
                }
                DynamicPathSegment.prototype.match = function (path) { return path.length > 0; };
                DynamicPathSegment.prototype.generate = function (params) {
                    if (!collection_62.StringMapWrapper.contains(params.map, this.name)) {
                        throw new exceptions_58.BaseException("Route generator for '" + this.name + "' was not included in parameters passed.");
                    }
                    return utils_1.normalizeString(params.get(this.name));
                };
                DynamicPathSegment.paramMatcher = /^:([^\/]+)$/g;
                return DynamicPathSegment;
            }());
            /**
             * Identified by a string starting with `*` Indicates that all the following
             * segments match this route and that the value of these segments should
             * be provided to a matching `Instruction`.
             */
            StarPathSegment = (function () {
                function StarPathSegment(name) {
                    this.name = name;
                    this.specificity = '0';
                    this.hash = '*';
                }
                StarPathSegment.prototype.match = function (path) { return true; };
                StarPathSegment.prototype.generate = function (params) { return utils_1.normalizeString(params.get(this.name)); };
                StarPathSegment.wildcardMatcher = /^\*([^\/]+)$/g;
                return StarPathSegment;
            }());
            /**
             * Parses a URL string using a given matcher DSL, and generates URLs from param maps
             */
            ParamRoutePath = (function () {
                /**
                 * Takes a string representing the matcher DSL
                 */
                function ParamRoutePath(routePath) {
                    this.routePath = routePath;
                    this.terminal = true;
                    this._assertValidPath(routePath);
                    this._parsePathString(routePath);
                    this.specificity = this._calculateSpecificity();
                    this.hash = this._calculateHash();
                    var lastSegment = this._segments[this._segments.length - 1];
                    this.terminal = !(lastSegment instanceof ContinuationPathSegment);
                }
                ParamRoutePath.prototype.matchUrl = function (url) {
                    var nextUrlSegment = url;
                    var currentUrlSegment;
                    var positionalParams = {};
                    var captured = [];
                    for (var i = 0; i < this._segments.length; i += 1) {
                        var pathSegment = this._segments[i];
                        currentUrlSegment = nextUrlSegment;
                        if (pathSegment instanceof ContinuationPathSegment) {
                            break;
                        }
                        if (lang_147.isPresent(currentUrlSegment)) {
                            // the star segment consumes all of the remaining URL, including matrix params
                            if (pathSegment instanceof StarPathSegment) {
                                positionalParams[pathSegment.name] = currentUrlSegment.toString();
                                captured.push(currentUrlSegment.toString());
                                nextUrlSegment = null;
                                break;
                            }
                            captured.push(currentUrlSegment.path);
                            if (pathSegment instanceof DynamicPathSegment) {
                                positionalParams[pathSegment.name] = currentUrlSegment.path;
                            }
                            else if (!pathSegment.match(currentUrlSegment.path)) {
                                return null;
                            }
                            nextUrlSegment = currentUrlSegment.child;
                        }
                        else if (!pathSegment.match('')) {
                            return null;
                        }
                    }
                    if (this.terminal && lang_147.isPresent(nextUrlSegment)) {
                        return null;
                    }
                    var urlPath = captured.join('/');
                    var auxiliary = [];
                    var urlParams = [];
                    var allParams = positionalParams;
                    if (lang_147.isPresent(currentUrlSegment)) {
                        // If this is the root component, read query params. Otherwise, read matrix params.
                        var paramsSegment = url instanceof url_parser_2.RootUrl ? url : currentUrlSegment;
                        if (lang_147.isPresent(paramsSegment.params)) {
                            allParams = collection_62.StringMapWrapper.merge(paramsSegment.params, positionalParams);
                            urlParams = url_parser_2.convertUrlParamsToArray(paramsSegment.params);
                        }
                        else {
                            allParams = positionalParams;
                        }
                        auxiliary = currentUrlSegment.auxiliary;
                    }
                    return new route_path_2.MatchedUrl(urlPath, urlParams, allParams, auxiliary, nextUrlSegment);
                };
                ParamRoutePath.prototype.generateUrl = function (params) {
                    var paramTokens = new utils_1.TouchMap(params);
                    var path = [];
                    for (var i = 0; i < this._segments.length; i++) {
                        var segment = this._segments[i];
                        if (!(segment instanceof ContinuationPathSegment)) {
                            path.push(segment.generate(paramTokens));
                        }
                    }
                    var urlPath = path.join('/');
                    var nonPositionalParams = paramTokens.getUnused();
                    var urlParams = nonPositionalParams;
                    return new route_path_2.GeneratedUrl(urlPath, urlParams);
                };
                ParamRoutePath.prototype.toString = function () { return this.routePath; };
                ParamRoutePath.prototype._parsePathString = function (routePath) {
                    // normalize route as not starting with a "/". Recognition will
                    // also normalize.
                    if (routePath.startsWith("/")) {
                        routePath = routePath.substring(1);
                    }
                    var segmentStrings = routePath.split('/');
                    this._segments = [];
                    var limit = segmentStrings.length - 1;
                    for (var i = 0; i <= limit; i++) {
                        var segment = segmentStrings[i], match;
                        if (lang_147.isPresent(match = lang_147.RegExpWrapper.firstMatch(DynamicPathSegment.paramMatcher, segment))) {
                            this._segments.push(new DynamicPathSegment(match[1]));
                        }
                        else if (lang_147.isPresent(match = lang_147.RegExpWrapper.firstMatch(StarPathSegment.wildcardMatcher, segment))) {
                            this._segments.push(new StarPathSegment(match[1]));
                        }
                        else if (segment == '...') {
                            if (i < limit) {
                                throw new exceptions_58.BaseException("Unexpected \"...\" before the end of the path for \"" + routePath + "\".");
                            }
                            this._segments.push(new ContinuationPathSegment());
                        }
                        else {
                            this._segments.push(new StaticPathSegment(segment));
                        }
                    }
                };
                ParamRoutePath.prototype._calculateSpecificity = function () {
                    // The "specificity" of a path is used to determine which route is used when multiple routes
                    // match
                    // a URL. Static segments (like "/foo") are the most specific, followed by dynamic segments
                    // (like
                    // "/:id"). Star segments add no specificity. Segments at the start of the path are more
                    // specific
                    // than proceeding ones.
                    //
                    // The code below uses place values to combine the different types of segments into a single
                    // string that we can sort later. Each static segment is marked as a specificity of "2," each
                    // dynamic segment is worth "1" specificity, and stars are worth "0" specificity.
                    var i, length = this._segments.length, specificity;
                    if (length == 0) {
                        // a single slash (or "empty segment" is as specific as a static segment
                        specificity += '2';
                    }
                    else {
                        specificity = '';
                        for (i = 0; i < length; i++) {
                            specificity += this._segments[i].specificity;
                        }
                    }
                    return specificity;
                };
                ParamRoutePath.prototype._calculateHash = function () {
                    // this function is used to determine whether a route config path like `/foo/:id` collides with
                    // `/foo/:name`
                    var i, length = this._segments.length;
                    var hashParts = [];
                    for (i = 0; i < length; i++) {
                        hashParts.push(this._segments[i].hash);
                    }
                    return hashParts.join('/');
                };
                ParamRoutePath.prototype._assertValidPath = function (path) {
                    if (lang_147.StringWrapper.contains(path, '#')) {
                        throw new exceptions_58.BaseException("Path \"" + path + "\" should not include \"#\". Use \"HashLocationStrategy\" instead.");
                    }
                    var illegalCharacter = lang_147.RegExpWrapper.firstMatch(ParamRoutePath.RESERVED_CHARS, path);
                    if (lang_147.isPresent(illegalCharacter)) {
                        throw new exceptions_58.BaseException("Path \"" + path + "\" contains \"" + illegalCharacter[0] + "\" which is not allowed in a route config.");
                    }
                };
                ParamRoutePath.RESERVED_CHARS = lang_147.RegExpWrapper.create('//|\\(|\\)|;|\\?|=');
                return ParamRoutePath;
            }());
            exports_250("ParamRoutePath", ParamRoutePath);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/router/rules/rule_set", ['angular2/src/facade/lang', 'angular2/src/facade/exceptions', 'angular2/src/facade/collection', 'angular2/src/facade/async', "test/node_modules/angular2/ts/src/router/rules/rules", "test/node_modules/angular2/ts/src/router/route_config/route_config_impl", "test/node_modules/angular2/ts/src/router/rules/route_handlers/async_route_handler", "test/node_modules/angular2/ts/src/router/rules/route_handlers/sync_route_handler", "test/node_modules/angular2/ts/src/router/rules/route_paths/param_route_path", "test/node_modules/angular2/ts/src/router/rules/route_paths/regex_route_path"], function(exports_251, context_251) {
    "use strict";
    var __moduleName = context_251 && context_251.id;
    var lang_148, exceptions_59, collection_63, async_23, rules_1, route_config_impl_1, async_route_handler_1, sync_route_handler_1, param_route_path_1, regex_route_path_1;
    var RuleSet;
    return {
        setters:[
            function (lang_148_1) {
                lang_148 = lang_148_1;
            },
            function (exceptions_59_1) {
                exceptions_59 = exceptions_59_1;
            },
            function (collection_63_1) {
                collection_63 = collection_63_1;
            },
            function (async_23_1) {
                async_23 = async_23_1;
            },
            function (rules_1_1) {
                rules_1 = rules_1_1;
            },
            function (route_config_impl_1_1) {
                route_config_impl_1 = route_config_impl_1_1;
            },
            function (async_route_handler_1_1) {
                async_route_handler_1 = async_route_handler_1_1;
            },
            function (sync_route_handler_1_1) {
                sync_route_handler_1 = sync_route_handler_1_1;
            },
            function (param_route_path_1_1) {
                param_route_path_1 = param_route_path_1_1;
            },
            function (regex_route_path_1_1) {
                regex_route_path_1 = regex_route_path_1_1;
            }],
        execute: function() {
            /**
             * A `RuleSet` is responsible for recognizing routes for a particular component.
             * It is consumed by `RouteRegistry`, which knows how to recognize an entire hierarchy of
             * components.
             */
            RuleSet = (function () {
                function RuleSet() {
                    this.rulesByName = new collection_63.Map();
                    // map from name to rule
                    this.auxRulesByName = new collection_63.Map();
                    // map from starting path to rule
                    this.auxRulesByPath = new collection_63.Map();
                    // TODO: optimize this into a trie
                    this.rules = [];
                    // the rule to use automatically when recognizing or generating from this rule set
                    this.defaultRule = null;
                }
                /**
                 * Configure additional rules in this rule set from a route definition
                 * @returns {boolean} true if the config is terminal
                 */
                RuleSet.prototype.config = function (config) {
                    var handler;
                    if (lang_148.isPresent(config.name) && config.name[0].toUpperCase() != config.name[0]) {
                        var suggestedName = config.name[0].toUpperCase() + config.name.substring(1);
                        throw new exceptions_59.BaseException("Route \"" + config.path + "\" with name \"" + config.name + "\" does not begin with an uppercase letter. Route names should be CamelCase like \"" + suggestedName + "\".");
                    }
                    if (config instanceof route_config_impl_1.AuxRoute) {
                        handler = new sync_route_handler_1.SyncRouteHandler(config.component, config.data);
                        var routePath_1 = this._getRoutePath(config);
                        var auxRule = new rules_1.RouteRule(routePath_1, handler);
                        this.auxRulesByPath.set(routePath_1.toString(), auxRule);
                        if (lang_148.isPresent(config.name)) {
                            this.auxRulesByName.set(config.name, auxRule);
                        }
                        return auxRule.terminal;
                    }
                    var useAsDefault = false;
                    if (config instanceof route_config_impl_1.Redirect) {
                        var routePath_2 = this._getRoutePath(config);
                        var redirector = new rules_1.RedirectRule(routePath_2, config.redirectTo);
                        this._assertNoHashCollision(redirector.hash, config.path);
                        this.rules.push(redirector);
                        return true;
                    }
                    if (config instanceof route_config_impl_1.Route) {
                        handler = new sync_route_handler_1.SyncRouteHandler(config.component, config.data);
                        useAsDefault = lang_148.isPresent(config.useAsDefault) && config.useAsDefault;
                    }
                    else if (config instanceof route_config_impl_1.AsyncRoute) {
                        handler = new async_route_handler_1.AsyncRouteHandler(config.loader, config.data);
                        useAsDefault = lang_148.isPresent(config.useAsDefault) && config.useAsDefault;
                    }
                    var routePath = this._getRoutePath(config);
                    var newRule = new rules_1.RouteRule(routePath, handler);
                    this._assertNoHashCollision(newRule.hash, config.path);
                    if (useAsDefault) {
                        if (lang_148.isPresent(this.defaultRule)) {
                            throw new exceptions_59.BaseException("Only one route can be default");
                        }
                        this.defaultRule = newRule;
                    }
                    this.rules.push(newRule);
                    if (lang_148.isPresent(config.name)) {
                        this.rulesByName.set(config.name, newRule);
                    }
                    return newRule.terminal;
                };
                /**
                 * Given a URL, returns a list of `RouteMatch`es, which are partial recognitions for some route.
                 */
                RuleSet.prototype.recognize = function (urlParse) {
                    var solutions = [];
                    this.rules.forEach(function (routeRecognizer) {
                        var pathMatch = routeRecognizer.recognize(urlParse);
                        if (lang_148.isPresent(pathMatch)) {
                            solutions.push(pathMatch);
                        }
                    });
                    // handle cases where we are routing just to an aux route
                    if (solutions.length == 0 && lang_148.isPresent(urlParse) && urlParse.auxiliary.length > 0) {
                        return [async_23.PromiseWrapper.resolve(new rules_1.PathMatch(null, null, urlParse.auxiliary))];
                    }
                    return solutions;
                };
                RuleSet.prototype.recognizeAuxiliary = function (urlParse) {
                    var routeRecognizer = this.auxRulesByPath.get(urlParse.path);
                    if (lang_148.isPresent(routeRecognizer)) {
                        return [routeRecognizer.recognize(urlParse)];
                    }
                    return [async_23.PromiseWrapper.resolve(null)];
                };
                RuleSet.prototype.hasRoute = function (name) { return this.rulesByName.has(name); };
                RuleSet.prototype.componentLoaded = function (name) {
                    return this.hasRoute(name) && lang_148.isPresent(this.rulesByName.get(name).handler.componentType);
                };
                RuleSet.prototype.loadComponent = function (name) {
                    return this.rulesByName.get(name).handler.resolveComponentType();
                };
                RuleSet.prototype.generate = function (name, params) {
                    var rule = this.rulesByName.get(name);
                    if (lang_148.isBlank(rule)) {
                        return null;
                    }
                    return rule.generate(params);
                };
                RuleSet.prototype.generateAuxiliary = function (name, params) {
                    var rule = this.auxRulesByName.get(name);
                    if (lang_148.isBlank(rule)) {
                        return null;
                    }
                    return rule.generate(params);
                };
                RuleSet.prototype._assertNoHashCollision = function (hash, path) {
                    this.rules.forEach(function (rule) {
                        if (hash == rule.hash) {
                            throw new exceptions_59.BaseException("Configuration '" + path + "' conflicts with existing route '" + rule.path + "'");
                        }
                    });
                };
                RuleSet.prototype._getRoutePath = function (config) {
                    if (lang_148.isPresent(config.regex)) {
                        if (lang_148.isFunction(config.serializer)) {
                            return new regex_route_path_1.RegexRoutePath(config.regex, config.serializer);
                        }
                        else {
                            throw new exceptions_59.BaseException("Route provides a regex property, '" + config.regex + "', but no serializer property");
                        }
                    }
                    if (lang_148.isPresent(config.path)) {
                        // Auxiliary routes do not have a slash at the start
                        var path = (config instanceof route_config_impl_1.AuxRoute && config.path.startsWith('/')) ?
                            config.path.substring(1) :
                            config.path;
                        return new param_route_path_1.ParamRoutePath(path);
                    }
                    throw new exceptions_59.BaseException('Route must provide either a path or regex property');
                };
                return RuleSet;
            }());
            exports_251("RuleSet", RuleSet);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/router/route_config/route_config_decorator", ["test/node_modules/angular2/ts/src/router/route_config/route_config_impl", 'angular2/src/core/util/decorators'], function(exports_252, context_252) {
    "use strict";
    var __moduleName = context_252 && context_252.id;
    var route_config_impl_2, decorators_7;
    var RouteConfig;
    return {
        setters:[
            function (route_config_impl_2_1) {
                route_config_impl_2 = route_config_impl_2_1;
                exports_252({
                    "Route": route_config_impl_2_1["Route"],
                    "Redirect": route_config_impl_2_1["Redirect"],
                    "AuxRoute": route_config_impl_2_1["AuxRoute"],
                    "AsyncRoute": route_config_impl_2_1["AsyncRoute"],
                    "RouteDefinition": route_config_impl_2_1["RouteDefinition"]
                });
            },
            function (decorators_7_1) {
                decorators_7 = decorators_7_1;
            }],
        execute: function() {
            // Copied from RouteConfig in route_config_impl.
            /**
             * The `RouteConfig` decorator defines routes for a given component.
             *
             * It takes an array of {@link RouteDefinition}s.
             */
            exports_252("RouteConfig", RouteConfig = decorators_7.makeDecorator(route_config_impl_2.RouteConfig));
        }
    }
});
System.register("test/node_modules/angular2/ts/src/router/route_config/route_config_normalizer", ["test/node_modules/angular2/ts/src/router/route_config/route_config_decorator", 'angular2/src/facade/lang', 'angular2/src/facade/exceptions'], function(exports_253, context_253) {
    "use strict";
    var __moduleName = context_253 && context_253.id;
    var route_config_decorator_1, lang_149, exceptions_60;
    /**
     * Given a JS Object that represents a route config, returns a corresponding Route, AsyncRoute,
     * AuxRoute or Redirect object.
     *
     * Also wraps an AsyncRoute's loader function to add the loaded component's route config to the
     * `RouteRegistry`.
     */
    function normalizeRouteConfig(config, registry) {
        if (config instanceof route_config_decorator_1.AsyncRoute) {
            var wrappedLoader = wrapLoaderToReconfigureRegistry(config.loader, registry);
            return new route_config_decorator_1.AsyncRoute({
                path: config.path,
                loader: wrappedLoader,
                name: config.name,
                data: config.data,
                useAsDefault: config.useAsDefault
            });
        }
        if (config instanceof route_config_decorator_1.Route || config instanceof route_config_decorator_1.Redirect || config instanceof route_config_decorator_1.AuxRoute) {
            return config;
        }
        if ((+!!config.component) + (+!!config.redirectTo) + (+!!config.loader) != 1) {
            throw new exceptions_60.BaseException("Route config should contain exactly one \"component\", \"loader\", or \"redirectTo\" property.");
        }
        if (config.as && config.name) {
            throw new exceptions_60.BaseException("Route config should contain exactly one \"as\" or \"name\" property.");
        }
        if (config.as) {
            config.name = config.as;
        }
        if (config.loader) {
            var wrappedLoader = wrapLoaderToReconfigureRegistry(config.loader, registry);
            return new route_config_decorator_1.AsyncRoute({
                path: config.path,
                loader: wrappedLoader,
                name: config.name,
                data: config.data,
                useAsDefault: config.useAsDefault
            });
        }
        if (config.aux) {
            return new route_config_decorator_1.AuxRoute({ path: config.aux, component: config.component, name: config.name });
        }
        if (config.component) {
            if (typeof config.component == 'object') {
                var componentDefinitionObject = config.component;
                if (componentDefinitionObject.type == 'constructor') {
                    return new route_config_decorator_1.Route({
                        path: config.path,
                        component: componentDefinitionObject.constructor,
                        name: config.name,
                        data: config.data,
                        useAsDefault: config.useAsDefault
                    });
                }
                else if (componentDefinitionObject.type == 'loader') {
                    return new route_config_decorator_1.AsyncRoute({
                        path: config.path,
                        loader: componentDefinitionObject.loader,
                        name: config.name,
                        data: config.data,
                        useAsDefault: config.useAsDefault
                    });
                }
                else {
                    throw new exceptions_60.BaseException("Invalid component type \"" + componentDefinitionObject.type + "\". Valid types are \"constructor\" and \"loader\".");
                }
            }
            return new route_config_decorator_1.Route(config);
        }
        if (config.redirectTo) {
            return new route_config_decorator_1.Redirect({ path: config.path, redirectTo: config.redirectTo });
        }
        return config;
    }
    exports_253("normalizeRouteConfig", normalizeRouteConfig);
    function wrapLoaderToReconfigureRegistry(loader, registry) {
        return function () {
            return loader().then(function (componentType) {
                registry.configFromComponent(componentType);
                return componentType;
            });
        };
    }
    function assertComponentExists(component, path) {
        if (!lang_149.isType(component)) {
            throw new exceptions_60.BaseException("Component for route \"" + path + "\" is not defined, or is not a class.");
        }
    }
    exports_253("assertComponentExists", assertComponentExists);
    return {
        setters:[
            function (route_config_decorator_1_1) {
                route_config_decorator_1 = route_config_decorator_1_1;
            },
            function (lang_149_1) {
                lang_149 = lang_149_1;
            },
            function (exceptions_60_1) {
                exceptions_60 = exceptions_60_1;
            }],
        execute: function() {
        }
    }
});
System.register("test/node_modules/angular2/ts/src/router/route_registry", ['angular2/src/facade/collection', 'angular2/src/facade/async', 'angular2/src/facade/lang', 'angular2/src/facade/exceptions', 'angular2/src/core/reflection/reflection', 'angular2/core', "test/node_modules/angular2/ts/src/router/route_config/route_config_impl", "test/node_modules/angular2/ts/src/router/rules/rules", "test/node_modules/angular2/ts/src/router/rules/rule_set", "test/node_modules/angular2/ts/src/router/instruction", "test/node_modules/angular2/ts/src/router/route_config/route_config_normalizer", "test/node_modules/angular2/ts/src/router/url_parser"], function(exports_254, context_254) {
    "use strict";
    var __moduleName = context_254 && context_254.id;
    var collection_64, async_24, lang_150, exceptions_61, reflection_13, core_83, route_config_impl_4, rules_2, rule_set_1, instruction_4, route_config_normalizer_1, url_parser_3;
    var _resolveToNull, ROUTER_PRIMARY_COMPONENT, RouteRegistry;
    /*
     * Given: ['/a/b', {c: 2}]
     * Returns: ['', 'a', 'b', {c: 2}]
     */
    function splitAndFlattenLinkParams(linkParams) {
        var accumulation = [];
        linkParams.forEach(function (item) {
            if (lang_150.isString(item)) {
                var strItem = item;
                accumulation = accumulation.concat(strItem.split('/'));
            }
            else {
                accumulation.push(item);
            }
        });
        return accumulation;
    }
    /*
     * Given a list of instructions, returns the most specific instruction
     */
    function mostSpecific(instructions) {
        instructions = instructions.filter(function (instruction) { return lang_150.isPresent(instruction); });
        if (instructions.length == 0) {
            return null;
        }
        if (instructions.length == 1) {
            return instructions[0];
        }
        var first = instructions[0];
        var rest = instructions.slice(1);
        return rest.reduce(function (instruction, contender) {
            if (compareSpecificityStrings(contender.specificity, instruction.specificity) == -1) {
                return contender;
            }
            return instruction;
        }, first);
    }
    /*
     * Expects strings to be in the form of "[0-2]+"
     * Returns -1 if string A should be sorted above string B, 1 if it should be sorted after,
     * or 0 if they are the same.
     */
    function compareSpecificityStrings(a, b) {
        var l = lang_150.Math.min(a.length, b.length);
        for (var i = 0; i < l; i += 1) {
            var ai = lang_150.StringWrapper.charCodeAt(a, i);
            var bi = lang_150.StringWrapper.charCodeAt(b, i);
            var difference = bi - ai;
            if (difference != 0) {
                return difference;
            }
        }
        return a.length - b.length;
    }
    function assertTerminalComponent(component, path) {
        if (!lang_150.isType(component)) {
            return;
        }
        var annotations = reflection_13.reflector.annotations(component);
        if (lang_150.isPresent(annotations)) {
            for (var i = 0; i < annotations.length; i++) {
                var annotation = annotations[i];
                if (annotation instanceof route_config_impl_4.RouteConfig) {
                    throw new exceptions_61.BaseException("Child routes are not allowed for \"" + path + "\". Use \"...\" on the parent's route path.");
                }
            }
        }
    }
    return {
        setters:[
            function (collection_64_1) {
                collection_64 = collection_64_1;
            },
            function (async_24_1) {
                async_24 = async_24_1;
            },
            function (lang_150_1) {
                lang_150 = lang_150_1;
            },
            function (exceptions_61_1) {
                exceptions_61 = exceptions_61_1;
            },
            function (reflection_13_1) {
                reflection_13 = reflection_13_1;
            },
            function (core_83_1) {
                core_83 = core_83_1;
            },
            function (route_config_impl_4_1) {
                route_config_impl_4 = route_config_impl_4_1;
            },
            function (rules_2_1) {
                rules_2 = rules_2_1;
            },
            function (rule_set_1_1) {
                rule_set_1 = rule_set_1_1;
            },
            function (instruction_4_1) {
                instruction_4 = instruction_4_1;
            },
            function (route_config_normalizer_1_1) {
                route_config_normalizer_1 = route_config_normalizer_1_1;
            },
            function (url_parser_3_1) {
                url_parser_3 = url_parser_3_1;
            }],
        execute: function() {
            _resolveToNull = async_24.PromiseWrapper.resolve(null);
            // A LinkItemArray is an array, which describes a set of routes
            // The items in the array are found in groups:
            // - the first item is the name of the route
            // - the next items are:
            //   - an object containing parameters
            //   - or an array describing an aux route
            // export type LinkRouteItem = string | Object;
            // export type LinkItem = LinkRouteItem | Array<LinkRouteItem>;
            // export type LinkItemArray = Array<LinkItem>;
            /**
             * Token used to bind the component with the top-level {@link RouteConfig}s for the
             * application.
             *
             * ### Example ([live demo](http://plnkr.co/edit/iRUP8B5OUbxCWQ3AcIDm))
             *
             * ```
             * import {Component} from 'angular2/core';
             * import {
             *   ROUTER_DIRECTIVES,
             *   ROUTER_PROVIDERS,
             *   RouteConfig
             * } from 'angular2/router';
             *
             * @Component({directives: [ROUTER_DIRECTIVES]})
             * @RouteConfig([
             *  {...},
             * ])
             * class AppCmp {
             *   // ...
             * }
             *
             * bootstrap(AppCmp, [ROUTER_PROVIDERS]);
             * ```
             */
            exports_254("ROUTER_PRIMARY_COMPONENT", ROUTER_PRIMARY_COMPONENT = lang_150.CONST_EXPR(new core_83.OpaqueToken('RouterPrimaryComponent')));
            /**
             * The RouteRegistry holds route configurations for each component in an Angular app.
             * It is responsible for creating Instructions from URLs, and generating URLs based on route and
             * parameters.
             */
            RouteRegistry = (function () {
                function RouteRegistry(_rootComponent) {
                    this._rootComponent = _rootComponent;
                    this._rules = new collection_64.Map();
                }
                /**
                 * Given a component and a configuration object, add the route to this registry
                 */
                RouteRegistry.prototype.config = function (parentComponent, config) {
                    config = route_config_normalizer_1.normalizeRouteConfig(config, this);
                    // this is here because Dart type guard reasons
                    if (config instanceof route_config_impl_4.Route) {
                        route_config_normalizer_1.assertComponentExists(config.component, config.path);
                    }
                    else if (config instanceof route_config_impl_4.AuxRoute) {
                        route_config_normalizer_1.assertComponentExists(config.component, config.path);
                    }
                    var rules = this._rules.get(parentComponent);
                    if (lang_150.isBlank(rules)) {
                        rules = new rule_set_1.RuleSet();
                        this._rules.set(parentComponent, rules);
                    }
                    var terminal = rules.config(config);
                    if (config instanceof route_config_impl_4.Route) {
                        if (terminal) {
                            assertTerminalComponent(config.component, config.path);
                        }
                        else {
                            this.configFromComponent(config.component);
                        }
                    }
                };
                /**
                 * Reads the annotations of a component and configures the registry based on them
                 */
                RouteRegistry.prototype.configFromComponent = function (component) {
                    var _this = this;
                    if (!lang_150.isType(component)) {
                        return;
                    }
                    // Don't read the annotations from a type more than once –
                    // this prevents an infinite loop if a component routes recursively.
                    if (this._rules.has(component)) {
                        return;
                    }
                    var annotations = reflection_13.reflector.annotations(component);
                    if (lang_150.isPresent(annotations)) {
                        for (var i = 0; i < annotations.length; i++) {
                            var annotation = annotations[i];
                            if (annotation instanceof route_config_impl_4.RouteConfig) {
                                var routeCfgs = annotation.configs;
                                routeCfgs.forEach(function (config) { return _this.config(component, config); });
                            }
                        }
                    }
                };
                /**
                 * Given a URL and a parent component, return the most specific instruction for navigating
                 * the application into the state specified by the url
                 */
                RouteRegistry.prototype.recognize = function (url, ancestorInstructions) {
                    var parsedUrl = url_parser_3.parser.parse(url);
                    return this._recognize(parsedUrl, []);
                };
                /**
                 * Recognizes all parent-child routes, but creates unresolved auxiliary routes
                 */
                RouteRegistry.prototype._recognize = function (parsedUrl, ancestorInstructions, _aux) {
                    var _this = this;
                    if (_aux === void 0) { _aux = false; }
                    var parentInstruction = collection_64.ListWrapper.last(ancestorInstructions);
                    var parentComponent = lang_150.isPresent(parentInstruction) ? parentInstruction.component.componentType :
                        this._rootComponent;
                    var rules = this._rules.get(parentComponent);
                    if (lang_150.isBlank(rules)) {
                        return _resolveToNull;
                    }
                    // Matches some beginning part of the given URL
                    var possibleMatches = _aux ? rules.recognizeAuxiliary(parsedUrl) : rules.recognize(parsedUrl);
                    var matchPromises = possibleMatches.map(function (candidate) { return candidate.then(function (candidate) {
                        if (candidate instanceof rules_2.PathMatch) {
                            var auxParentInstructions = ancestorInstructions.length > 0 ? [collection_64.ListWrapper.last(ancestorInstructions)] : [];
                            var auxInstructions = _this._auxRoutesToUnresolved(candidate.remainingAux, auxParentInstructions);
                            var instruction = new instruction_4.ResolvedInstruction(candidate.instruction, null, auxInstructions);
                            if (lang_150.isBlank(candidate.instruction) || candidate.instruction.terminal) {
                                return instruction;
                            }
                            var newAncestorInstructions = ancestorInstructions.concat([instruction]);
                            return _this._recognize(candidate.remaining, newAncestorInstructions)
                                .then(function (childInstruction) {
                                if (lang_150.isBlank(childInstruction)) {
                                    return null;
                                }
                                // redirect instructions are already absolute
                                if (childInstruction instanceof instruction_4.RedirectInstruction) {
                                    return childInstruction;
                                }
                                instruction.child = childInstruction;
                                return instruction;
                            });
                        }
                        if (candidate instanceof rules_2.RedirectMatch) {
                            var instruction = _this.generate(candidate.redirectTo, ancestorInstructions.concat([null]));
                            return new instruction_4.RedirectInstruction(instruction.component, instruction.child, instruction.auxInstruction, candidate.specificity);
                        }
                    }); });
                    if ((lang_150.isBlank(parsedUrl) || parsedUrl.path == '') && possibleMatches.length == 0) {
                        return async_24.PromiseWrapper.resolve(this.generateDefault(parentComponent));
                    }
                    return async_24.PromiseWrapper.all(matchPromises).then(mostSpecific);
                };
                RouteRegistry.prototype._auxRoutesToUnresolved = function (auxRoutes, parentInstructions) {
                    var _this = this;
                    var unresolvedAuxInstructions = {};
                    auxRoutes.forEach(function (auxUrl) {
                        unresolvedAuxInstructions[auxUrl.path] = new instruction_4.UnresolvedInstruction(function () { return _this._recognize(auxUrl, parentInstructions, true); });
                    });
                    return unresolvedAuxInstructions;
                };
                /**
                 * Given a normalized list with component names and params like: `['user', {id: 3 }]`
                 * generates a url with a leading slash relative to the provided `parentComponent`.
                 *
                 * If the optional param `_aux` is `true`, then we generate starting at an auxiliary
                 * route boundary.
                 */
                RouteRegistry.prototype.generate = function (linkParams, ancestorInstructions, _aux) {
                    if (_aux === void 0) { _aux = false; }
                    var params = splitAndFlattenLinkParams(linkParams);
                    var prevInstruction;
                    // The first segment should be either '.' (generate from parent) or '' (generate from root).
                    // When we normalize above, we strip all the slashes, './' becomes '.' and '/' becomes ''.
                    if (collection_64.ListWrapper.first(params) == '') {
                        params.shift();
                        prevInstruction = collection_64.ListWrapper.first(ancestorInstructions);
                        ancestorInstructions = [];
                    }
                    else {
                        prevInstruction = ancestorInstructions.length > 0 ? ancestorInstructions.pop() : null;
                        if (collection_64.ListWrapper.first(params) == '.') {
                            params.shift();
                        }
                        else if (collection_64.ListWrapper.first(params) == '..') {
                            while (collection_64.ListWrapper.first(params) == '..') {
                                if (ancestorInstructions.length <= 0) {
                                    throw new exceptions_61.BaseException("Link \"" + collection_64.ListWrapper.toJSON(linkParams) + "\" has too many \"../\" segments.");
                                }
                                prevInstruction = ancestorInstructions.pop();
                                params = collection_64.ListWrapper.slice(params, 1);
                            }
                        }
                        else {
                            // we must only peak at the link param, and not consume it
                            var routeName = collection_64.ListWrapper.first(params);
                            var parentComponentType = this._rootComponent;
                            var grandparentComponentType = null;
                            if (ancestorInstructions.length > 1) {
                                var parentComponentInstruction = ancestorInstructions[ancestorInstructions.length - 1];
                                var grandComponentInstruction = ancestorInstructions[ancestorInstructions.length - 2];
                                parentComponentType = parentComponentInstruction.component.componentType;
                                grandparentComponentType = grandComponentInstruction.component.componentType;
                            }
                            else if (ancestorInstructions.length == 1) {
                                parentComponentType = ancestorInstructions[0].component.componentType;
                                grandparentComponentType = this._rootComponent;
                            }
                            // For a link with no leading `./`, `/`, or `../`, we look for a sibling and child.
                            // If both exist, we throw. Otherwise, we prefer whichever exists.
                            var childRouteExists = this.hasRoute(routeName, parentComponentType);
                            var parentRouteExists = lang_150.isPresent(grandparentComponentType) &&
                                this.hasRoute(routeName, grandparentComponentType);
                            if (parentRouteExists && childRouteExists) {
                                var msg = "Link \"" + collection_64.ListWrapper.toJSON(linkParams) + "\" is ambiguous, use \"./\" or \"../\" to disambiguate.";
                                throw new exceptions_61.BaseException(msg);
                            }
                            if (parentRouteExists) {
                                prevInstruction = ancestorInstructions.pop();
                            }
                        }
                    }
                    if (params[params.length - 1] == '') {
                        params.pop();
                    }
                    if (params.length > 0 && params[0] == '') {
                        params.shift();
                    }
                    if (params.length < 1) {
                        var msg = "Link \"" + collection_64.ListWrapper.toJSON(linkParams) + "\" must include a route name.";
                        throw new exceptions_61.BaseException(msg);
                    }
                    var generatedInstruction = this._generate(params, ancestorInstructions, prevInstruction, _aux, linkParams);
                    // we don't clone the first (root) element
                    for (var i = ancestorInstructions.length - 1; i >= 0; i--) {
                        var ancestorInstruction = ancestorInstructions[i];
                        if (lang_150.isBlank(ancestorInstruction)) {
                            break;
                        }
                        generatedInstruction = ancestorInstruction.replaceChild(generatedInstruction);
                    }
                    return generatedInstruction;
                };
                /*
                 * Internal helper that does not make any assertions about the beginning of the link DSL.
                 * `ancestorInstructions` are parents that will be cloned.
                 * `prevInstruction` is the existing instruction that would be replaced, but which might have
                 * aux routes that need to be cloned.
                 */
                RouteRegistry.prototype._generate = function (linkParams, ancestorInstructions, prevInstruction, _aux, _originalLink) {
                    var _this = this;
                    if (_aux === void 0) { _aux = false; }
                    var parentComponentType = this._rootComponent;
                    var componentInstruction = null;
                    var auxInstructions = {};
                    var parentInstruction = collection_64.ListWrapper.last(ancestorInstructions);
                    if (lang_150.isPresent(parentInstruction) && lang_150.isPresent(parentInstruction.component)) {
                        parentComponentType = parentInstruction.component.componentType;
                    }
                    if (linkParams.length == 0) {
                        var defaultInstruction = this.generateDefault(parentComponentType);
                        if (lang_150.isBlank(defaultInstruction)) {
                            throw new exceptions_61.BaseException("Link \"" + collection_64.ListWrapper.toJSON(_originalLink) + "\" does not resolve to a terminal instruction.");
                        }
                        return defaultInstruction;
                    }
                    // for non-aux routes, we want to reuse the predecessor's existing primary and aux routes
                    // and only override routes for which the given link DSL provides
                    if (lang_150.isPresent(prevInstruction) && !_aux) {
                        auxInstructions = collection_64.StringMapWrapper.merge(prevInstruction.auxInstruction, auxInstructions);
                        componentInstruction = prevInstruction.component;
                    }
                    var rules = this._rules.get(parentComponentType);
                    if (lang_150.isBlank(rules)) {
                        throw new exceptions_61.BaseException("Component \"" + lang_150.getTypeNameForDebugging(parentComponentType) + "\" has no route config.");
                    }
                    var linkParamIndex = 0;
                    var routeParams = {};
                    // first, recognize the primary route if one is provided
                    if (linkParamIndex < linkParams.length && lang_150.isString(linkParams[linkParamIndex])) {
                        var routeName = linkParams[linkParamIndex];
                        if (routeName == '' || routeName == '.' || routeName == '..') {
                            throw new exceptions_61.BaseException("\"" + routeName + "/\" is only allowed at the beginning of a link DSL.");
                        }
                        linkParamIndex += 1;
                        if (linkParamIndex < linkParams.length) {
                            var linkParam = linkParams[linkParamIndex];
                            if (lang_150.isStringMap(linkParam) && !lang_150.isArray(linkParam)) {
                                routeParams = linkParam;
                                linkParamIndex += 1;
                            }
                        }
                        var routeRecognizer = (_aux ? rules.auxRulesByName : rules.rulesByName).get(routeName);
                        if (lang_150.isBlank(routeRecognizer)) {
                            throw new exceptions_61.BaseException("Component \"" + lang_150.getTypeNameForDebugging(parentComponentType) + "\" has no route named \"" + routeName + "\".");
                        }
                        // Create an "unresolved instruction" for async routes
                        // we'll figure out the rest of the route when we resolve the instruction and
                        // perform a navigation
                        if (lang_150.isBlank(routeRecognizer.handler.componentType)) {
                            var generatedUrl = routeRecognizer.generateComponentPathValues(routeParams);
                            return new instruction_4.UnresolvedInstruction(function () {
                                return routeRecognizer.handler.resolveComponentType().then(function (_) {
                                    return _this._generate(linkParams, ancestorInstructions, prevInstruction, _aux, _originalLink);
                                });
                            }, generatedUrl.urlPath, url_parser_3.convertUrlParamsToArray(generatedUrl.urlParams));
                        }
                        componentInstruction = _aux ? rules.generateAuxiliary(routeName, routeParams) :
                            rules.generate(routeName, routeParams);
                    }
                    // Next, recognize auxiliary instructions.
                    // If we have an ancestor instruction, we preserve whatever aux routes are active from it.
                    while (linkParamIndex < linkParams.length && lang_150.isArray(linkParams[linkParamIndex])) {
                        var auxParentInstruction = [parentInstruction];
                        var auxInstruction = this._generate(linkParams[linkParamIndex], auxParentInstruction, null, true, _originalLink);
                        // TODO: this will not work for aux routes with parameters or multiple segments
                        auxInstructions[auxInstruction.component.urlPath] = auxInstruction;
                        linkParamIndex += 1;
                    }
                    var instruction = new instruction_4.ResolvedInstruction(componentInstruction, null, auxInstructions);
                    // If the component is sync, we can generate resolved child route instructions
                    // If not, we'll resolve the instructions at navigation time
                    if (lang_150.isPresent(componentInstruction) && lang_150.isPresent(componentInstruction.componentType)) {
                        var childInstruction = null;
                        if (componentInstruction.terminal) {
                            if (linkParamIndex >= linkParams.length) {
                            }
                        }
                        else {
                            var childAncestorComponents = ancestorInstructions.concat([instruction]);
                            var remainingLinkParams = linkParams.slice(linkParamIndex);
                            childInstruction = this._generate(remainingLinkParams, childAncestorComponents, null, false, _originalLink);
                        }
                        instruction.child = childInstruction;
                    }
                    return instruction;
                };
                RouteRegistry.prototype.hasRoute = function (name, parentComponent) {
                    var rules = this._rules.get(parentComponent);
                    if (lang_150.isBlank(rules)) {
                        return false;
                    }
                    return rules.hasRoute(name);
                };
                RouteRegistry.prototype.generateDefault = function (componentCursor) {
                    var _this = this;
                    if (lang_150.isBlank(componentCursor)) {
                        return null;
                    }
                    var rules = this._rules.get(componentCursor);
                    if (lang_150.isBlank(rules) || lang_150.isBlank(rules.defaultRule)) {
                        return null;
                    }
                    var defaultChild = null;
                    if (lang_150.isPresent(rules.defaultRule.handler.componentType)) {
                        var componentInstruction = rules.defaultRule.generate({});
                        if (!rules.defaultRule.terminal) {
                            defaultChild = this.generateDefault(rules.defaultRule.handler.componentType);
                        }
                        return new instruction_4.DefaultInstruction(componentInstruction, defaultChild);
                    }
                    return new instruction_4.UnresolvedInstruction(function () {
                        return rules.defaultRule.handler.resolveComponentType().then(function (_) { return _this.generateDefault(componentCursor); });
                    });
                };
                RouteRegistry = __decorate([
                    core_83.Injectable(),
                    __param(0, core_83.Inject(ROUTER_PRIMARY_COMPONENT)), 
                    __metadata('design:paramtypes', [lang_150.Type])
                ], RouteRegistry);
                return RouteRegistry;
            }());
            exports_254("RouteRegistry", RouteRegistry);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/router/lifecycle/lifecycle_annotations_impl", ['angular2/src/facade/lang'], function(exports_255, context_255) {
    "use strict";
    var __moduleName = context_255 && context_255.id;
    var lang_151;
    var RouteLifecycleHook, CanActivate, routerCanReuse, routerCanDeactivate, routerOnActivate, routerOnReuse, routerOnDeactivate;
    return {
        setters:[
            function (lang_151_1) {
                lang_151 = lang_151_1;
            }],
        execute: function() {
            RouteLifecycleHook = (function () {
                function RouteLifecycleHook(name) {
                    this.name = name;
                }
                RouteLifecycleHook = __decorate([
                    lang_151.CONST(), 
                    __metadata('design:paramtypes', [String])
                ], RouteLifecycleHook);
                return RouteLifecycleHook;
            }());
            exports_255("RouteLifecycleHook", RouteLifecycleHook);
            CanActivate = (function () {
                function CanActivate(fn) {
                    this.fn = fn;
                }
                CanActivate = __decorate([
                    lang_151.CONST(), 
                    __metadata('design:paramtypes', [Function])
                ], CanActivate);
                return CanActivate;
            }());
            exports_255("CanActivate", CanActivate);
            exports_255("routerCanReuse", routerCanReuse = lang_151.CONST_EXPR(new RouteLifecycleHook("routerCanReuse")));
            exports_255("routerCanDeactivate", routerCanDeactivate = lang_151.CONST_EXPR(new RouteLifecycleHook("routerCanDeactivate")));
            exports_255("routerOnActivate", routerOnActivate = lang_151.CONST_EXPR(new RouteLifecycleHook("routerOnActivate")));
            exports_255("routerOnReuse", routerOnReuse = lang_151.CONST_EXPR(new RouteLifecycleHook("routerOnReuse")));
            exports_255("routerOnDeactivate", routerOnDeactivate = lang_151.CONST_EXPR(new RouteLifecycleHook("routerOnDeactivate")));
        }
    }
});
/**
 * This indirection is needed to free up Component, etc symbols in the public API
 * to be used by the decorator versions of these annotations.
 */
System.register("test/node_modules/angular2/ts/src/router/lifecycle/lifecycle_annotations", ['angular2/src/core/util/decorators', "test/node_modules/angular2/ts/src/router/lifecycle/lifecycle_annotations_impl"], function(exports_256, context_256) {
    "use strict";
    var __moduleName = context_256 && context_256.id;
    var decorators_8, lifecycle_annotations_impl_1;
    var CanActivate;
    return {
        setters:[
            function (decorators_8_1) {
                decorators_8 = decorators_8_1;
            },
            function (lifecycle_annotations_impl_1_1) {
                lifecycle_annotations_impl_1 = lifecycle_annotations_impl_1_1;
                exports_256({
                    "routerCanReuse": lifecycle_annotations_impl_1_1["routerCanReuse"],
                    "routerCanDeactivate": lifecycle_annotations_impl_1_1["routerCanDeactivate"],
                    "routerOnActivate": lifecycle_annotations_impl_1_1["routerOnActivate"],
                    "routerOnReuse": lifecycle_annotations_impl_1_1["routerOnReuse"],
                    "routerOnDeactivate": lifecycle_annotations_impl_1_1["routerOnDeactivate"]
                });
            }],
        execute: function() {
            /**
             * Defines route lifecycle hook `CanActivate`, which is called by the router to determine
             * if a component can be instantiated as part of a navigation.
             *
             * <aside class="is-right">
             * Note that unlike other lifecycle hooks, this one uses an annotation rather than an interface.
             * This is because the `CanActivate` function is called before the component is instantiated.
             * </aside>
             *
             * The `CanActivate` hook is called with two {@link ComponentInstruction}s as parameters, the first
             * representing the current route being navigated to, and the second parameter representing the
             * previous route or `null`.
             *
             * ```typescript
             * @CanActivate((next, prev) => boolean | Promise<boolean>)
             * ```
             *
             * If `CanActivate` returns or resolves to `false`, the navigation is cancelled.
             * If `CanActivate` throws or rejects, the navigation is also cancelled.
             * If `CanActivate` returns or resolves to `true`, navigation continues, the component is
             * instantiated, and the {@link OnActivate} hook of that component is called if implemented.
             *
             * ### Example
             *
             * {@example router/ts/can_activate/can_activate_example.ts region='canActivate' }
             */
            exports_256("CanActivate", CanActivate = decorators_8.makeDecorator(lifecycle_annotations_impl_1.CanActivate));
        }
    }
});
System.register("test/node_modules/angular2/ts/src/router/lifecycle/route_lifecycle_reflector", ['angular2/src/facade/lang', "test/node_modules/angular2/ts/src/router/lifecycle/lifecycle_annotations_impl", 'angular2/src/core/reflection/reflection'], function(exports_257, context_257) {
    "use strict";
    var __moduleName = context_257 && context_257.id;
    var lang_152, lifecycle_annotations_impl_3, reflection_14;
    function hasLifecycleHook(e, type) {
        if (!(type instanceof lang_152.Type))
            return false;
        return e.name in type.prototype;
    }
    exports_257("hasLifecycleHook", hasLifecycleHook);
    function getCanActivateHook(type) {
        var annotations = reflection_14.reflector.annotations(type);
        for (var i = 0; i < annotations.length; i += 1) {
            var annotation = annotations[i];
            if (annotation instanceof lifecycle_annotations_impl_3.CanActivate) {
                return annotation.fn;
            }
        }
        return null;
    }
    exports_257("getCanActivateHook", getCanActivateHook);
    return {
        setters:[
            function (lang_152_1) {
                lang_152 = lang_152_1;
            },
            function (lifecycle_annotations_impl_3_1) {
                lifecycle_annotations_impl_3 = lifecycle_annotations_impl_3_1;
            },
            function (reflection_14_1) {
                reflection_14 = reflection_14_1;
            }],
        execute: function() {
        }
    }
});
System.register("test/node_modules/angular2/ts/src/router/interfaces", ['angular2/src/facade/lang'], function(exports_258, context_258) {
    "use strict";
    var __moduleName = context_258 && context_258.id;
    var lang_153;
    var __ignore_me, __make_dart_analyzer_happy;
    return {
        setters:[
            function (lang_153_1) {
                lang_153 = lang_153_1;
            }],
        execute: function() {
            // This is here only so that after TS transpilation the file is not empty.
            // TODO(rado): find a better way to fix this, or remove if likely culprit
            // https://github.com/systemjs/systemjs/issues/487 gets closed.
            __ignore_me = lang_153.global;
            __make_dart_analyzer_happy = null;
        }
    }
});
System.register("test/node_modules/angular2/ts/src/router/directives/router_outlet", ['angular2/src/facade/async', 'angular2/src/facade/collection', 'angular2/src/facade/lang', 'angular2/core', "test/node_modules/angular2/ts/src/router/router", "test/node_modules/angular2/ts/src/router/instruction", "test/node_modules/angular2/ts/src/router/lifecycle/lifecycle_annotations", "test/node_modules/angular2/ts/src/router/lifecycle/route_lifecycle_reflector"], function(exports_259, context_259) {
    "use strict";
    var __moduleName = context_259 && context_259.id;
    var async_25, collection_65, lang_154, core_84, routerMod, instruction_5, hookMod, route_lifecycle_reflector_1;
    var _resolveToTrue, RouterOutlet;
    return {
        setters:[
            function (async_25_1) {
                async_25 = async_25_1;
            },
            function (collection_65_1) {
                collection_65 = collection_65_1;
            },
            function (lang_154_1) {
                lang_154 = lang_154_1;
            },
            function (core_84_1) {
                core_84 = core_84_1;
            },
            function (routerMod_1) {
                routerMod = routerMod_1;
            },
            function (instruction_5_1) {
                instruction_5 = instruction_5_1;
            },
            function (hookMod_1) {
                hookMod = hookMod_1;
            },
            function (route_lifecycle_reflector_1_1) {
                route_lifecycle_reflector_1 = route_lifecycle_reflector_1_1;
            }],
        execute: function() {
            _resolveToTrue = async_25.PromiseWrapper.resolve(true);
            /**
             * A router outlet is a placeholder that Angular dynamically fills based on the application's route.
             *
             * ## Use
             *
             * ```
             * <router-outlet></router-outlet>
             * ```
             */
            RouterOutlet = (function () {
                function RouterOutlet(_elementRef, _loader, _parentRouter, nameAttr) {
                    this._elementRef = _elementRef;
                    this._loader = _loader;
                    this._parentRouter = _parentRouter;
                    this.name = null;
                    this._componentRef = null;
                    this._currentInstruction = null;
                    if (lang_154.isPresent(nameAttr)) {
                        this.name = nameAttr;
                        this._parentRouter.registerAuxOutlet(this);
                    }
                    else {
                        this._parentRouter.registerPrimaryOutlet(this);
                    }
                }
                /**
                 * Called by the Router to instantiate a new component during the commit phase of a navigation.
                 * This method in turn is responsible for calling the `routerOnActivate` hook of its child.
                 */
                RouterOutlet.prototype.activate = function (nextInstruction) {
                    var _this = this;
                    var previousInstruction = this._currentInstruction;
                    this._currentInstruction = nextInstruction;
                    var componentType = nextInstruction.componentType;
                    var childRouter = this._parentRouter.childRouter(componentType);
                    var providers = core_84.Injector.resolve([
                        core_84.provide(instruction_5.RouteData, { useValue: nextInstruction.routeData }),
                        core_84.provide(instruction_5.RouteParams, { useValue: new instruction_5.RouteParams(nextInstruction.params) }),
                        core_84.provide(routerMod.Router, { useValue: childRouter })
                    ]);
                    this._componentRef =
                        this._loader.loadNextToLocation(componentType, this._elementRef, providers);
                    return this._componentRef.then(function (componentRef) {
                        if (route_lifecycle_reflector_1.hasLifecycleHook(hookMod.routerOnActivate, componentType)) {
                            return _this._componentRef.then(function (ref) {
                                return ref.instance.routerOnActivate(nextInstruction, previousInstruction);
                            });
                        }
                        else {
                            return componentRef;
                        }
                    });
                };
                /**
                 * Called by the {@link Router} during the commit phase of a navigation when an outlet
                 * reuses a component between different routes.
                 * This method in turn is responsible for calling the `routerOnReuse` hook of its child.
                 */
                RouterOutlet.prototype.reuse = function (nextInstruction) {
                    var previousInstruction = this._currentInstruction;
                    this._currentInstruction = nextInstruction;
                    // it's possible the component is removed before it can be reactivated (if nested withing
                    // another dynamically loaded component, for instance). In that case, we simply activate
                    // a new one.
                    if (lang_154.isBlank(this._componentRef)) {
                        return this.activate(nextInstruction);
                    }
                    else {
                        return async_25.PromiseWrapper.resolve(route_lifecycle_reflector_1.hasLifecycleHook(hookMod.routerOnReuse, this._currentInstruction.componentType) ?
                            this._componentRef.then(function (ref) {
                                return ref.instance.routerOnReuse(nextInstruction, previousInstruction);
                            }) :
                            true);
                    }
                };
                /**
                 * Called by the {@link Router} when an outlet disposes of a component's contents.
                 * This method in turn is responsible for calling the `routerOnDeactivate` hook of its child.
                 */
                RouterOutlet.prototype.deactivate = function (nextInstruction) {
                    var _this = this;
                    var next = _resolveToTrue;
                    if (lang_154.isPresent(this._componentRef) && lang_154.isPresent(this._currentInstruction) &&
                        route_lifecycle_reflector_1.hasLifecycleHook(hookMod.routerOnDeactivate, this._currentInstruction.componentType)) {
                        next = this._componentRef.then(function (ref) {
                            return ref.instance
                                .routerOnDeactivate(nextInstruction, _this._currentInstruction);
                        });
                    }
                    return next.then(function (_) {
                        if (lang_154.isPresent(_this._componentRef)) {
                            var onDispose = _this._componentRef.then(function (ref) { return ref.dispose(); });
                            _this._componentRef = null;
                            return onDispose;
                        }
                    });
                };
                /**
                 * Called by the {@link Router} during recognition phase of a navigation.
                 *
                 * If this resolves to `false`, the given navigation is cancelled.
                 *
                 * This method delegates to the child component's `routerCanDeactivate` hook if it exists,
                 * and otherwise resolves to true.
                 */
                RouterOutlet.prototype.routerCanDeactivate = function (nextInstruction) {
                    var _this = this;
                    if (lang_154.isBlank(this._currentInstruction)) {
                        return _resolveToTrue;
                    }
                    if (route_lifecycle_reflector_1.hasLifecycleHook(hookMod.routerCanDeactivate, this._currentInstruction.componentType)) {
                        return this._componentRef.then(function (ref) {
                            return ref.instance
                                .routerCanDeactivate(nextInstruction, _this._currentInstruction);
                        });
                    }
                    else {
                        return _resolveToTrue;
                    }
                };
                /**
                 * Called by the {@link Router} during recognition phase of a navigation.
                 *
                 * If the new child component has a different Type than the existing child component,
                 * this will resolve to `false`. You can't reuse an old component when the new component
                 * is of a different Type.
                 *
                 * Otherwise, this method delegates to the child component's `routerCanReuse` hook if it exists,
                 * or resolves to true if the hook is not present.
                 */
                RouterOutlet.prototype.routerCanReuse = function (nextInstruction) {
                    var _this = this;
                    var result;
                    if (lang_154.isBlank(this._currentInstruction) ||
                        this._currentInstruction.componentType != nextInstruction.componentType) {
                        result = false;
                    }
                    else if (route_lifecycle_reflector_1.hasLifecycleHook(hookMod.routerCanReuse, this._currentInstruction.componentType)) {
                        result = this._componentRef.then(function (ref) {
                            return ref.instance.routerCanReuse(nextInstruction, _this._currentInstruction);
                        });
                    }
                    else {
                        result = nextInstruction == this._currentInstruction ||
                            (lang_154.isPresent(nextInstruction.params) && lang_154.isPresent(this._currentInstruction.params) &&
                                collection_65.StringMapWrapper.equals(nextInstruction.params, this._currentInstruction.params));
                    }
                    return async_25.PromiseWrapper.resolve(result);
                };
                RouterOutlet.prototype.ngOnDestroy = function () { this._parentRouter.unregisterPrimaryOutlet(this); };
                RouterOutlet = __decorate([
                    core_84.Directive({ selector: 'router-outlet' }),
                    __param(3, core_84.Attribute('name')), 
                    __metadata('design:paramtypes', [core_84.ElementRef, core_84.DynamicComponentLoader, routerMod.Router, String])
                ], RouterOutlet);
                return RouterOutlet;
            }());
            exports_259("RouterOutlet", RouterOutlet);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/router/location/platform_location", [], function(exports_260, context_260) {
    "use strict";
    var __moduleName = context_260 && context_260.id;
    var PlatformLocation;
    return {
        setters:[],
        execute: function() {
            PlatformLocation = (function () {
                function PlatformLocation() {
                }
                Object.defineProperty(PlatformLocation.prototype, "pathname", {
                    /* abstract */ get: function () { return null; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PlatformLocation.prototype, "search", {
                    /* abstract */ get: function () { return null; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PlatformLocation.prototype, "hash", {
                    /* abstract */ get: function () { return null; },
                    enumerable: true,
                    configurable: true
                });
                return PlatformLocation;
            }());
            exports_260("PlatformLocation", PlatformLocation);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/router/location/location_strategy", ['angular2/src/facade/lang', 'angular2/core'], function(exports_261, context_261) {
    "use strict";
    var __moduleName = context_261 && context_261.id;
    var lang_155, core_85;
    var LocationStrategy, APP_BASE_HREF;
    function normalizeQueryParams(params) {
        return (params.length > 0 && params.substring(0, 1) != '?') ? ('?' + params) : params;
    }
    exports_261("normalizeQueryParams", normalizeQueryParams);
    function joinWithSlash(start, end) {
        if (start.length == 0) {
            return end;
        }
        if (end.length == 0) {
            return start;
        }
        var slashes = 0;
        if (start.endsWith('/')) {
            slashes++;
        }
        if (end.startsWith('/')) {
            slashes++;
        }
        if (slashes == 2) {
            return start + end.substring(1);
        }
        if (slashes == 1) {
            return start + end;
        }
        return start + '/' + end;
    }
    exports_261("joinWithSlash", joinWithSlash);
    return {
        setters:[
            function (lang_155_1) {
                lang_155 = lang_155_1;
            },
            function (core_85_1) {
                core_85 = core_85_1;
            }],
        execute: function() {
            /**
             * `LocationStrategy` is responsible for representing and reading route state
             * from the browser's URL. Angular provides two strategies:
             * {@link HashLocationStrategy} and {@link PathLocationStrategy} (default).
             *
             * This is used under the hood of the {@link Location} service.
             *
             * Applications should use the {@link Router} or {@link Location} services to
             * interact with application route state.
             *
             * For instance, {@link HashLocationStrategy} produces URLs like
             * `http://example.com#/foo`, and {@link PathLocationStrategy} produces
             * `http://example.com/foo` as an equivalent URL.
             *
             * See these two classes for more.
             */
            LocationStrategy = (function () {
                function LocationStrategy() {
                }
                return LocationStrategy;
            }());
            exports_261("LocationStrategy", LocationStrategy);
            /**
             * The `APP_BASE_HREF` token represents the base href to be used with the
             * {@link PathLocationStrategy}.
             *
             * If you're using {@link PathLocationStrategy}, you must provide a provider to a string
             * representing the URL prefix that should be preserved when generating and recognizing
             * URLs.
             *
             * ### Example
             *
             * ```
             * import {Component} from 'angular2/core';
             * import {ROUTER_DIRECTIVES, ROUTER_PROVIDERS, RouteConfig} from 'angular2/router';
             *
             * @Component({directives: [ROUTER_DIRECTIVES]})
             * @RouteConfig([
             *  {...},
             * ])
             * class AppCmp {
             *   // ...
             * }
             *
             * bootstrap(AppCmp, [
             *   ROUTER_PROVIDERS,
             *   provide(APP_BASE_HREF, {useValue: '/my/app'})
             * ]);
             * ```
             */
            exports_261("APP_BASE_HREF", APP_BASE_HREF = lang_155.CONST_EXPR(new core_85.OpaqueToken('appBaseHref')));
        }
    }
});
System.register("test/node_modules/angular2/ts/src/router/location/location", ["test/node_modules/angular2/ts/src/router/location/location_strategy", 'angular2/src/facade/async', 'angular2/core'], function(exports_262, context_262) {
    "use strict";
    var __moduleName = context_262 && context_262.id;
    var location_strategy_1, async_26, core_86;
    var Location;
    function _stripBaseHref(baseHref, url) {
        if (baseHref.length > 0 && url.startsWith(baseHref)) {
            return url.substring(baseHref.length);
        }
        return url;
    }
    function stripIndexHtml(url) {
        if (/\/index.html$/g.test(url)) {
            // '/index.html'.length == 11
            return url.substring(0, url.length - 11);
        }
        return url;
    }
    function stripTrailingSlash(url) {
        if (/\/$/g.test(url)) {
            url = url.substring(0, url.length - 1);
        }
        return url;
    }
    return {
        setters:[
            function (location_strategy_1_1) {
                location_strategy_1 = location_strategy_1_1;
            },
            function (async_26_1) {
                async_26 = async_26_1;
            },
            function (core_86_1) {
                core_86 = core_86_1;
            }],
        execute: function() {
            /**
             * `Location` is a service that applications can use to interact with a browser's URL.
             * Depending on which {@link LocationStrategy} is used, `Location` will either persist
             * to the URL's path or the URL's hash segment.
             *
             * Note: it's better to use {@link Router#navigate} service to trigger route changes. Use
             * `Location` only if you need to interact with or create normalized URLs outside of
             * routing.
             *
             * `Location` is responsible for normalizing the URL against the application's base href.
             * A normalized URL is absolute from the URL host, includes the application's base href, and has no
             * trailing slash:
             * - `/my/app/user/123` is normalized
             * - `my/app/user/123` **is not** normalized
             * - `/my/app/user/123/` **is not** normalized
             *
             * ### Example
             *
             * ```
             * import {Component} from 'angular2/core';
             * import {
             *   ROUTER_DIRECTIVES,
             *   ROUTER_PROVIDERS,
             *   RouteConfig,
             *   Location
             * } from 'angular2/router';
             *
             * @Component({directives: [ROUTER_DIRECTIVES]})
             * @RouteConfig([
             *  {...},
             * ])
             * class AppCmp {
             *   constructor(location: Location) {
             *     location.go('/foo');
             *   }
             * }
             *
             * bootstrap(AppCmp, [ROUTER_PROVIDERS]);
             * ```
             */
            Location = (function () {
                function Location(platformStrategy) {
                    var _this = this;
                    this.platformStrategy = platformStrategy;
                    /** @internal */
                    this._subject = new async_26.EventEmitter();
                    var browserBaseHref = this.platformStrategy.getBaseHref();
                    this._baseHref = stripTrailingSlash(stripIndexHtml(browserBaseHref));
                    this.platformStrategy.onPopState(function (ev) {
                        async_26.ObservableWrapper.callEmit(_this._subject, { 'url': _this.path(), 'pop': true, 'type': ev.type });
                    });
                }
                /**
                 * Returns the normalized URL path.
                 */
                Location.prototype.path = function () { return this.normalize(this.platformStrategy.path()); };
                /**
                 * Given a string representing a URL, returns the normalized URL path without leading or
                 * trailing slashes
                 */
                Location.prototype.normalize = function (url) {
                    return stripTrailingSlash(_stripBaseHref(this._baseHref, stripIndexHtml(url)));
                };
                /**
                 * Given a string representing a URL, returns the platform-specific external URL path.
                 * If the given URL doesn't begin with a leading slash (`'/'`), this method adds one
                 * before normalizing. This method will also add a hash if `HashLocationStrategy` is
                 * used, or the `APP_BASE_HREF` if the `PathLocationStrategy` is in use.
                 */
                Location.prototype.prepareExternalUrl = function (url) {
                    if (url.length > 0 && !url.startsWith('/')) {
                        url = '/' + url;
                    }
                    return this.platformStrategy.prepareExternalUrl(url);
                };
                // TODO: rename this method to pushState
                /**
                 * Changes the browsers URL to the normalized version of the given URL, and pushes a
                 * new item onto the platform's history.
                 */
                Location.prototype.go = function (path, query) {
                    if (query === void 0) { query = ''; }
                    this.platformStrategy.pushState(null, '', path, query);
                };
                /**
                 * Changes the browsers URL to the normalized version of the given URL, and replaces
                 * the top item on the platform's history stack.
                 */
                Location.prototype.replaceState = function (path, query) {
                    if (query === void 0) { query = ''; }
                    this.platformStrategy.replaceState(null, '', path, query);
                };
                /**
                 * Navigates forward in the platform's history.
                 */
                Location.prototype.forward = function () { this.platformStrategy.forward(); };
                /**
                 * Navigates back in the platform's history.
                 */
                Location.prototype.back = function () { this.platformStrategy.back(); };
                /**
                 * Subscribe to the platform's `popState` events.
                 */
                Location.prototype.subscribe = function (onNext, onThrow, onReturn) {
                    if (onThrow === void 0) { onThrow = null; }
                    if (onReturn === void 0) { onReturn = null; }
                    return async_26.ObservableWrapper.subscribe(this._subject, onNext, onThrow, onReturn);
                };
                Location = __decorate([
                    core_86.Injectable(), 
                    __metadata('design:paramtypes', [location_strategy_1.LocationStrategy])
                ], Location);
                return Location;
            }());
            exports_262("Location", Location);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/router/router", ['angular2/src/facade/async', 'angular2/src/facade/collection', 'angular2/src/facade/lang', 'angular2/src/facade/exceptions', 'angular2/core', "test/node_modules/angular2/ts/src/router/route_registry", "test/node_modules/angular2/ts/src/router/location/location", "test/node_modules/angular2/ts/src/router/lifecycle/route_lifecycle_reflector"], function(exports_263, context_263) {
    "use strict";
    var __moduleName = context_263 && context_263.id;
    var async_27, collection_66, lang_156, exceptions_62, core_87, route_registry_1, location_1, route_lifecycle_reflector_2;
    var _resolveToTrue, _resolveToFalse, Router, RootRouter, ChildRouter;
    function canActivateOne(nextInstruction, prevInstruction) {
        var next = _resolveToTrue;
        if (lang_156.isBlank(nextInstruction.component)) {
            return next;
        }
        if (lang_156.isPresent(nextInstruction.child)) {
            next = canActivateOne(nextInstruction.child, lang_156.isPresent(prevInstruction) ? prevInstruction.child : null);
        }
        return next.then(function (result) {
            if (result == false) {
                return false;
            }
            if (nextInstruction.component.reuse) {
                return true;
            }
            var hook = route_lifecycle_reflector_2.getCanActivateHook(nextInstruction.component.componentType);
            if (lang_156.isPresent(hook)) {
                return hook(nextInstruction.component, lang_156.isPresent(prevInstruction) ? prevInstruction.component : null);
            }
            return true;
        });
    }
    return {
        setters:[
            function (async_27_1) {
                async_27 = async_27_1;
            },
            function (collection_66_1) {
                collection_66 = collection_66_1;
            },
            function (lang_156_1) {
                lang_156 = lang_156_1;
            },
            function (exceptions_62_1) {
                exceptions_62 = exceptions_62_1;
            },
            function (core_87_1) {
                core_87 = core_87_1;
            },
            function (route_registry_1_1) {
                route_registry_1 = route_registry_1_1;
            },
            function (location_1_1) {
                location_1 = location_1_1;
            },
            function (route_lifecycle_reflector_2_1) {
                route_lifecycle_reflector_2 = route_lifecycle_reflector_2_1;
            }],
        execute: function() {
            _resolveToTrue = async_27.PromiseWrapper.resolve(true);
            _resolveToFalse = async_27.PromiseWrapper.resolve(false);
            /**
             * The `Router` is responsible for mapping URLs to components.
             *
             * You can see the state of the router by inspecting the read-only field `router.navigating`.
             * This may be useful for showing a spinner, for instance.
             *
             * ## Concepts
             *
             * Routers and component instances have a 1:1 correspondence.
             *
             * The router holds reference to a number of {@link RouterOutlet}.
             * An outlet is a placeholder that the router dynamically fills in depending on the current URL.
             *
             * When the router navigates from a URL, it must first recognize it and serialize it into an
             * `Instruction`.
             * The router uses the `RouteRegistry` to get an `Instruction`.
             */
            Router = (function () {
                function Router(registry, parent, hostComponent, root) {
                    this.registry = registry;
                    this.parent = parent;
                    this.hostComponent = hostComponent;
                    this.root = root;
                    this.navigating = false;
                    /**
                     * The current `Instruction` for the router
                     */
                    this.currentInstruction = null;
                    this._currentNavigation = _resolveToTrue;
                    this._outlet = null;
                    this._auxRouters = new collection_66.Map();
                    this._subject = new async_27.EventEmitter();
                }
                /**
                 * Constructs a child router. You probably don't need to use this unless you're writing a reusable
                 * component.
                 */
                Router.prototype.childRouter = function (hostComponent) {
                    return this._childRouter = new ChildRouter(this, hostComponent);
                };
                /**
                 * Constructs a child router. You probably don't need to use this unless you're writing a reusable
                 * component.
                 */
                Router.prototype.auxRouter = function (hostComponent) { return new ChildRouter(this, hostComponent); };
                /**
                 * Register an outlet to be notified of primary route changes.
                 *
                 * You probably don't need to use this unless you're writing a reusable component.
                 */
                Router.prototype.registerPrimaryOutlet = function (outlet) {
                    if (lang_156.isPresent(outlet.name)) {
                        throw new exceptions_62.BaseException("registerPrimaryOutlet expects to be called with an unnamed outlet.");
                    }
                    if (lang_156.isPresent(this._outlet)) {
                        throw new exceptions_62.BaseException("Primary outlet is already registered.");
                    }
                    this._outlet = outlet;
                    if (lang_156.isPresent(this.currentInstruction)) {
                        return this.commit(this.currentInstruction, false);
                    }
                    return _resolveToTrue;
                };
                /**
                 * Unregister an outlet (because it was destroyed, etc).
                 *
                 * You probably don't need to use this unless you're writing a custom outlet implementation.
                 */
                Router.prototype.unregisterPrimaryOutlet = function (outlet) {
                    if (lang_156.isPresent(outlet.name)) {
                        throw new exceptions_62.BaseException("registerPrimaryOutlet expects to be called with an unnamed outlet.");
                    }
                    this._outlet = null;
                };
                /**
                 * Register an outlet to notified of auxiliary route changes.
                 *
                 * You probably don't need to use this unless you're writing a reusable component.
                 */
                Router.prototype.registerAuxOutlet = function (outlet) {
                    var outletName = outlet.name;
                    if (lang_156.isBlank(outletName)) {
                        throw new exceptions_62.BaseException("registerAuxOutlet expects to be called with an outlet with a name.");
                    }
                    var router = this.auxRouter(this.hostComponent);
                    this._auxRouters.set(outletName, router);
                    router._outlet = outlet;
                    var auxInstruction;
                    if (lang_156.isPresent(this.currentInstruction) &&
                        lang_156.isPresent(auxInstruction = this.currentInstruction.auxInstruction[outletName])) {
                        return router.commit(auxInstruction);
                    }
                    return _resolveToTrue;
                };
                /**
                 * Given an instruction, returns `true` if the instruction is currently active,
                 * otherwise `false`.
                 */
                Router.prototype.isRouteActive = function (instruction) {
                    var router = this;
                    while (lang_156.isPresent(router.parent) && lang_156.isPresent(instruction.child)) {
                        router = router.parent;
                        instruction = instruction.child;
                    }
                    return lang_156.isPresent(this.currentInstruction) &&
                        this.currentInstruction.component == instruction.component;
                };
                /**
                 * Dynamically update the routing configuration and trigger a navigation.
                 *
                 * ### Usage
                 *
                 * ```
                 * router.config([
                 *   { 'path': '/', 'component': IndexComp },
                 *   { 'path': '/user/:id', 'component': UserComp },
                 * ]);
                 * ```
                 */
                Router.prototype.config = function (definitions) {
                    var _this = this;
                    definitions.forEach(function (routeDefinition) { _this.registry.config(_this.hostComponent, routeDefinition); });
                    return this.renavigate();
                };
                /**
                 * Navigate based on the provided Route Link DSL. It's preferred to navigate with this method
                 * over `navigateByUrl`.
                 *
                 * ### Usage
                 *
                 * This method takes an array representing the Route Link DSL:
                 * ```
                 * ['./MyCmp', {param: 3}]
                 * ```
                 * See the {@link RouterLink} directive for more.
                 */
                Router.prototype.navigate = function (linkParams) {
                    var instruction = this.generate(linkParams);
                    return this.navigateByInstruction(instruction, false);
                };
                /**
                 * Navigate to a URL. Returns a promise that resolves when navigation is complete.
                 * It's preferred to navigate with `navigate` instead of this method, since URLs are more brittle.
                 *
                 * If the given URL begins with a `/`, router will navigate absolutely.
                 * If the given URL does not begin with `/`, the router will navigate relative to this component.
                 */
                Router.prototype.navigateByUrl = function (url, _skipLocationChange) {
                    var _this = this;
                    if (_skipLocationChange === void 0) { _skipLocationChange = false; }
                    return this._currentNavigation = this._currentNavigation.then(function (_) {
                        _this.lastNavigationAttempt = url;
                        _this._startNavigating();
                        return _this._afterPromiseFinishNavigating(_this.recognize(url).then(function (instruction) {
                            if (lang_156.isBlank(instruction)) {
                                return false;
                            }
                            return _this._navigate(instruction, _skipLocationChange);
                        }));
                    });
                };
                /**
                 * Navigate via the provided instruction. Returns a promise that resolves when navigation is
                 * complete.
                 */
                Router.prototype.navigateByInstruction = function (instruction, _skipLocationChange) {
                    var _this = this;
                    if (_skipLocationChange === void 0) { _skipLocationChange = false; }
                    if (lang_156.isBlank(instruction)) {
                        return _resolveToFalse;
                    }
                    return this._currentNavigation = this._currentNavigation.then(function (_) {
                        _this._startNavigating();
                        return _this._afterPromiseFinishNavigating(_this._navigate(instruction, _skipLocationChange));
                    });
                };
                /** @internal */
                Router.prototype._settleInstruction = function (instruction) {
                    var _this = this;
                    return instruction.resolveComponent().then(function (_) {
                        var unsettledInstructions = [];
                        if (lang_156.isPresent(instruction.component)) {
                            instruction.component.reuse = false;
                        }
                        if (lang_156.isPresent(instruction.child)) {
                            unsettledInstructions.push(_this._settleInstruction(instruction.child));
                        }
                        collection_66.StringMapWrapper.forEach(instruction.auxInstruction, function (instruction, _) {
                            unsettledInstructions.push(_this._settleInstruction(instruction));
                        });
                        return async_27.PromiseWrapper.all(unsettledInstructions);
                    });
                };
                /** @internal */
                Router.prototype._navigate = function (instruction, _skipLocationChange) {
                    var _this = this;
                    return this._settleInstruction(instruction)
                        .then(function (_) { return _this._routerCanReuse(instruction); })
                        .then(function (_) { return _this._canActivate(instruction); })
                        .then(function (result) {
                        if (!result) {
                            return false;
                        }
                        return _this._routerCanDeactivate(instruction)
                            .then(function (result) {
                            if (result) {
                                return _this.commit(instruction, _skipLocationChange)
                                    .then(function (_) {
                                    _this._emitNavigationFinish(instruction.toRootUrl());
                                    return true;
                                });
                            }
                        });
                    });
                };
                Router.prototype._emitNavigationFinish = function (url) { async_27.ObservableWrapper.callEmit(this._subject, url); };
                Router.prototype._emitNavigationFail = function (url) { async_27.ObservableWrapper.callError(this._subject, url); };
                Router.prototype._afterPromiseFinishNavigating = function (promise) {
                    var _this = this;
                    return async_27.PromiseWrapper.catchError(promise.then(function (_) { return _this._finishNavigating(); }), function (err) {
                        _this._finishNavigating();
                        throw err;
                    });
                };
                /*
                 * Recursively set reuse flags
                 */
                /** @internal */
                Router.prototype._routerCanReuse = function (instruction) {
                    var _this = this;
                    if (lang_156.isBlank(this._outlet)) {
                        return _resolveToFalse;
                    }
                    if (lang_156.isBlank(instruction.component)) {
                        return _resolveToTrue;
                    }
                    return this._outlet.routerCanReuse(instruction.component)
                        .then(function (result) {
                        instruction.component.reuse = result;
                        if (result && lang_156.isPresent(_this._childRouter) && lang_156.isPresent(instruction.child)) {
                            return _this._childRouter._routerCanReuse(instruction.child);
                        }
                    });
                };
                Router.prototype._canActivate = function (nextInstruction) {
                    return canActivateOne(nextInstruction, this.currentInstruction);
                };
                Router.prototype._routerCanDeactivate = function (instruction) {
                    var _this = this;
                    if (lang_156.isBlank(this._outlet)) {
                        return _resolveToTrue;
                    }
                    var next;
                    var childInstruction = null;
                    var reuse = false;
                    var componentInstruction = null;
                    if (lang_156.isPresent(instruction)) {
                        childInstruction = instruction.child;
                        componentInstruction = instruction.component;
                        reuse = lang_156.isBlank(instruction.component) || instruction.component.reuse;
                    }
                    if (reuse) {
                        next = _resolveToTrue;
                    }
                    else {
                        next = this._outlet.routerCanDeactivate(componentInstruction);
                    }
                    // TODO: aux route lifecycle hooks
                    return next.then(function (result) {
                        if (result == false) {
                            return false;
                        }
                        if (lang_156.isPresent(_this._childRouter)) {
                            return _this._childRouter._routerCanDeactivate(childInstruction);
                        }
                        return true;
                    });
                };
                /**
                 * Updates this router and all descendant routers according to the given instruction
                 */
                Router.prototype.commit = function (instruction, _skipLocationChange) {
                    var _this = this;
                    if (_skipLocationChange === void 0) { _skipLocationChange = false; }
                    this.currentInstruction = instruction;
                    var next = _resolveToTrue;
                    if (lang_156.isPresent(this._outlet) && lang_156.isPresent(instruction.component)) {
                        var componentInstruction = instruction.component;
                        if (componentInstruction.reuse) {
                            next = this._outlet.reuse(componentInstruction);
                        }
                        else {
                            next =
                                this.deactivate(instruction).then(function (_) { return _this._outlet.activate(componentInstruction); });
                        }
                        if (lang_156.isPresent(instruction.child)) {
                            next = next.then(function (_) {
                                if (lang_156.isPresent(_this._childRouter)) {
                                    return _this._childRouter.commit(instruction.child);
                                }
                            });
                        }
                    }
                    var promises = [];
                    this._auxRouters.forEach(function (router, name) {
                        if (lang_156.isPresent(instruction.auxInstruction[name])) {
                            promises.push(router.commit(instruction.auxInstruction[name]));
                        }
                    });
                    return next.then(function (_) { return async_27.PromiseWrapper.all(promises); });
                };
                /** @internal */
                Router.prototype._startNavigating = function () { this.navigating = true; };
                /** @internal */
                Router.prototype._finishNavigating = function () { this.navigating = false; };
                /**
                 * Subscribe to URL updates from the router
                 */
                Router.prototype.subscribe = function (onNext, onError) {
                    return async_27.ObservableWrapper.subscribe(this._subject, onNext, onError);
                };
                /**
                 * Removes the contents of this router's outlet and all descendant outlets
                 */
                Router.prototype.deactivate = function (instruction) {
                    var _this = this;
                    var childInstruction = null;
                    var componentInstruction = null;
                    if (lang_156.isPresent(instruction)) {
                        childInstruction = instruction.child;
                        componentInstruction = instruction.component;
                    }
                    var next = _resolveToTrue;
                    if (lang_156.isPresent(this._childRouter)) {
                        next = this._childRouter.deactivate(childInstruction);
                    }
                    if (lang_156.isPresent(this._outlet)) {
                        next = next.then(function (_) { return _this._outlet.deactivate(componentInstruction); });
                    }
                    // TODO: handle aux routes
                    return next;
                };
                /**
                 * Given a URL, returns an instruction representing the component graph
                 */
                Router.prototype.recognize = function (url) {
                    var ancestorComponents = this._getAncestorInstructions();
                    return this.registry.recognize(url, ancestorComponents);
                };
                Router.prototype._getAncestorInstructions = function () {
                    var ancestorInstructions = [this.currentInstruction];
                    var ancestorRouter = this;
                    while (lang_156.isPresent(ancestorRouter = ancestorRouter.parent)) {
                        ancestorInstructions.unshift(ancestorRouter.currentInstruction);
                    }
                    return ancestorInstructions;
                };
                /**
                 * Navigates to either the last URL successfully navigated to, or the last URL requested if the
                 * router has yet to successfully navigate.
                 */
                Router.prototype.renavigate = function () {
                    if (lang_156.isBlank(this.lastNavigationAttempt)) {
                        return this._currentNavigation;
                    }
                    return this.navigateByUrl(this.lastNavigationAttempt);
                };
                /**
                 * Generate an `Instruction` based on the provided Route Link DSL.
                 */
                Router.prototype.generate = function (linkParams) {
                    var ancestorInstructions = this._getAncestorInstructions();
                    return this.registry.generate(linkParams, ancestorInstructions);
                };
                Router = __decorate([
                    core_87.Injectable(), 
                    __metadata('design:paramtypes', [route_registry_1.RouteRegistry, Router, Object, Router])
                ], Router);
                return Router;
            }());
            exports_263("Router", Router);
            RootRouter = (function (_super) {
                __extends(RootRouter, _super);
                function RootRouter(registry, location, primaryComponent) {
                    var _this = this;
                    _super.call(this, registry, null, primaryComponent);
                    this.root = this;
                    this._location = location;
                    this._locationSub = this._location.subscribe(function (change) {
                        // we call recognize ourselves
                        _this.recognize(change['url'])
                            .then(function (instruction) {
                            if (lang_156.isPresent(instruction)) {
                                _this.navigateByInstruction(instruction, lang_156.isPresent(change['pop']))
                                    .then(function (_) {
                                    // this is a popstate event; no need to change the URL
                                    if (lang_156.isPresent(change['pop']) && change['type'] != 'hashchange') {
                                        return;
                                    }
                                    var emitPath = instruction.toUrlPath();
                                    var emitQuery = instruction.toUrlQuery();
                                    if (emitPath.length > 0 && emitPath[0] != '/') {
                                        emitPath = '/' + emitPath;
                                    }
                                    // Because we've opted to use All hashchange events occur outside Angular.
                                    // However, apps that are migrating might have hash links that operate outside
                                    // angular to which routing must respond.
                                    // To support these cases where we respond to hashchanges and redirect as a
                                    // result, we need to replace the top item on the stack.
                                    if (change['type'] == 'hashchange') {
                                        if (instruction.toRootUrl() != _this._location.path()) {
                                            _this._location.replaceState(emitPath, emitQuery);
                                        }
                                    }
                                    else {
                                        _this._location.go(emitPath, emitQuery);
                                    }
                                });
                            }
                            else {
                                _this._emitNavigationFail(change['url']);
                            }
                        });
                    });
                    this.registry.configFromComponent(primaryComponent);
                    this.navigateByUrl(location.path());
                }
                RootRouter.prototype.commit = function (instruction, _skipLocationChange) {
                    var _this = this;
                    if (_skipLocationChange === void 0) { _skipLocationChange = false; }
                    var emitPath = instruction.toUrlPath();
                    var emitQuery = instruction.toUrlQuery();
                    if (emitPath.length > 0 && emitPath[0] != '/') {
                        emitPath = '/' + emitPath;
                    }
                    var promise = _super.prototype.commit.call(this, instruction);
                    if (!_skipLocationChange) {
                        promise = promise.then(function (_) { _this._location.go(emitPath, emitQuery); });
                    }
                    return promise;
                };
                RootRouter.prototype.dispose = function () {
                    if (lang_156.isPresent(this._locationSub)) {
                        async_27.ObservableWrapper.dispose(this._locationSub);
                        this._locationSub = null;
                    }
                };
                RootRouter = __decorate([
                    core_87.Injectable(),
                    __param(2, core_87.Inject(route_registry_1.ROUTER_PRIMARY_COMPONENT)), 
                    __metadata('design:paramtypes', [route_registry_1.RouteRegistry, location_1.Location, lang_156.Type])
                ], RootRouter);
                return RootRouter;
            }(Router));
            exports_263("RootRouter", RootRouter);
            ChildRouter = (function (_super) {
                __extends(ChildRouter, _super);
                function ChildRouter(parent, hostComponent) {
                    _super.call(this, parent.registry, parent, hostComponent, parent.root);
                    this.parent = parent;
                }
                ChildRouter.prototype.navigateByUrl = function (url, _skipLocationChange) {
                    if (_skipLocationChange === void 0) { _skipLocationChange = false; }
                    // Delegate navigation to the root router
                    return this.parent.navigateByUrl(url, _skipLocationChange);
                };
                ChildRouter.prototype.navigateByInstruction = function (instruction, _skipLocationChange) {
                    if (_skipLocationChange === void 0) { _skipLocationChange = false; }
                    // Delegate navigation to the root router
                    return this.parent.navigateByInstruction(instruction, _skipLocationChange);
                };
                return ChildRouter;
            }(Router));
        }
    }
});
System.register("test/node_modules/angular2/ts/src/router/directives/router_link", ['angular2/core', 'angular2/src/facade/lang', "test/node_modules/angular2/ts/src/router/router", "test/node_modules/angular2/ts/src/router/location/location"], function(exports_264, context_264) {
    "use strict";
    var __moduleName = context_264 && context_264.id;
    var core_88, lang_157, router_1, location_2;
    var RouterLink;
    return {
        setters:[
            function (core_88_1) {
                core_88 = core_88_1;
            },
            function (lang_157_1) {
                lang_157 = lang_157_1;
            },
            function (router_1_1) {
                router_1 = router_1_1;
            },
            function (location_2_1) {
                location_2 = location_2_1;
            }],
        execute: function() {
            /**
             * The RouterLink directive lets you link to specific parts of your app.
             *
             * Consider the following route configuration:
            
             * ```
             * @RouteConfig([
             *   { path: '/user', component: UserCmp, as: 'User' }
             * ]);
             * class MyComp {}
             * ```
             *
             * When linking to this `User` route, you can write:
             *
             * ```
             * <a [routerLink]="['./User']">link to user component</a>
             * ```
             *
             * RouterLink expects the value to be an array of route names, followed by the params
             * for that level of routing. For instance `['/Team', {teamId: 1}, 'User', {userId: 2}]`
             * means that we want to generate a link for the `Team` route with params `{teamId: 1}`,
             * and with a child route `User` with params `{userId: 2}`.
             *
             * The first route name should be prepended with `/`, `./`, or `../`.
             * If the route begins with `/`, the router will look up the route from the root of the app.
             * If the route begins with `./`, the router will instead look in the current component's
             * children for the route. And if the route begins with `../`, the router will look at the
             * current component's parent.
             */
            RouterLink = (function () {
                function RouterLink(_router, _location) {
                    var _this = this;
                    this._router = _router;
                    this._location = _location;
                    // we need to update the link whenever a route changes to account for aux routes
                    this._router.subscribe(function (_) { return _this._updateLink(); });
                }
                // because auxiliary links take existing primary and auxiliary routes into account,
                // we need to update the link whenever params or other routes change.
                RouterLink.prototype._updateLink = function () {
                    this._navigationInstruction = this._router.generate(this._routeParams);
                    var navigationHref = this._navigationInstruction.toLinkUrl();
                    this.visibleHref = this._location.prepareExternalUrl(navigationHref);
                };
                Object.defineProperty(RouterLink.prototype, "isRouteActive", {
                    get: function () { return this._router.isRouteActive(this._navigationInstruction); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(RouterLink.prototype, "routeParams", {
                    set: function (changes) {
                        this._routeParams = changes;
                        this._updateLink();
                    },
                    enumerable: true,
                    configurable: true
                });
                RouterLink.prototype.onClick = function () {
                    // If no target, or if target is _self, prevent default browser behavior
                    if (!lang_157.isString(this.target) || this.target == '_self') {
                        this._router.navigateByInstruction(this._navigationInstruction);
                        return false;
                    }
                    return true;
                };
                RouterLink = __decorate([
                    core_88.Directive({
                        selector: '[routerLink]',
                        inputs: ['routeParams: routerLink', 'target: target'],
                        host: {
                            '(click)': 'onClick()',
                            '[attr.href]': 'visibleHref',
                            '[class.router-link-active]': 'isRouteActive'
                        }
                    }), 
                    __metadata('design:paramtypes', [router_1.Router, location_2.Location])
                ], RouterLink);
                return RouterLink;
            }());
            exports_264("RouterLink", RouterLink);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/router/location/hash_location_strategy", ['angular2/core', "test/node_modules/angular2/ts/src/router/location/location_strategy", 'angular2/src/facade/lang', "test/node_modules/angular2/ts/src/router/location/platform_location"], function(exports_265, context_265) {
    "use strict";
    var __moduleName = context_265 && context_265.id;
    var core_89, location_strategy_2, lang_158, platform_location_1;
    var HashLocationStrategy;
    return {
        setters:[
            function (core_89_1) {
                core_89 = core_89_1;
            },
            function (location_strategy_2_1) {
                location_strategy_2 = location_strategy_2_1;
            },
            function (lang_158_1) {
                lang_158 = lang_158_1;
            },
            function (platform_location_1_1) {
                platform_location_1 = platform_location_1_1;
            }],
        execute: function() {
            /**
             * `HashLocationStrategy` is a {@link LocationStrategy} used to configure the
             * {@link Location} service to represent its state in the
             * [hash fragment](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax)
             * of the browser's URL.
             *
             * For instance, if you call `location.go('/foo')`, the browser's URL will become
             * `example.com#/foo`.
             *
             * ### Example
             *
             * ```
             * import {Component, provide} from 'angular2/core';
             * import {
             *   ROUTER_DIRECTIVES,
             *   ROUTER_PROVIDERS,
             *   RouteConfig,
             *   Location,
             *   LocationStrategy,
             *   HashLocationStrategy
             * } from 'angular2/router';
             *
             * @Component({directives: [ROUTER_DIRECTIVES]})
             * @RouteConfig([
             *  {...},
             * ])
             * class AppCmp {
             *   constructor(location: Location) {
             *     location.go('/foo');
             *   }
             * }
             *
             * bootstrap(AppCmp, [
             *   ROUTER_PROVIDERS,
             *   provide(LocationStrategy, {useClass: HashLocationStrategy})
             * ]);
             * ```
             */
            HashLocationStrategy = (function (_super) {
                __extends(HashLocationStrategy, _super);
                function HashLocationStrategy(_platformLocation, _baseHref) {
                    _super.call(this);
                    this._platformLocation = _platformLocation;
                    this._baseHref = '';
                    if (lang_158.isPresent(_baseHref)) {
                        this._baseHref = _baseHref;
                    }
                }
                HashLocationStrategy.prototype.onPopState = function (fn) {
                    this._platformLocation.onPopState(fn);
                    this._platformLocation.onHashChange(fn);
                };
                HashLocationStrategy.prototype.getBaseHref = function () { return this._baseHref; };
                HashLocationStrategy.prototype.path = function () {
                    // the hash value is always prefixed with a `#`
                    // and if it is empty then it will stay empty
                    var path = this._platformLocation.hash;
                    if (!lang_158.isPresent(path))
                        path = '#';
                    // Dart will complain if a call to substring is
                    // executed with a position value that extends the
                    // length of string.
                    return (path.length > 0 ? path.substring(1) : path);
                };
                HashLocationStrategy.prototype.prepareExternalUrl = function (internal) {
                    var url = location_strategy_2.joinWithSlash(this._baseHref, internal);
                    return url.length > 0 ? ('#' + url) : url;
                };
                HashLocationStrategy.prototype.pushState = function (state, title, path, queryParams) {
                    var url = this.prepareExternalUrl(path + location_strategy_2.normalizeQueryParams(queryParams));
                    if (url.length == 0) {
                        url = this._platformLocation.pathname;
                    }
                    this._platformLocation.pushState(state, title, url);
                };
                HashLocationStrategy.prototype.replaceState = function (state, title, path, queryParams) {
                    var url = this.prepareExternalUrl(path + location_strategy_2.normalizeQueryParams(queryParams));
                    if (url.length == 0) {
                        url = this._platformLocation.pathname;
                    }
                    this._platformLocation.replaceState(state, title, url);
                };
                HashLocationStrategy.prototype.forward = function () { this._platformLocation.forward(); };
                HashLocationStrategy.prototype.back = function () { this._platformLocation.back(); };
                HashLocationStrategy = __decorate([
                    core_89.Injectable(),
                    __param(1, core_89.Optional()),
                    __param(1, core_89.Inject(location_strategy_2.APP_BASE_HREF)), 
                    __metadata('design:paramtypes', [platform_location_1.PlatformLocation, String])
                ], HashLocationStrategy);
                return HashLocationStrategy;
            }(location_strategy_2.LocationStrategy));
            exports_265("HashLocationStrategy", HashLocationStrategy);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/router/location/path_location_strategy", ['angular2/core', 'angular2/src/facade/lang', 'angular2/src/facade/exceptions', "test/node_modules/angular2/ts/src/router/location/location_strategy", "test/node_modules/angular2/ts/src/router/location/platform_location"], function(exports_266, context_266) {
    "use strict";
    var __moduleName = context_266 && context_266.id;
    var core_90, lang_159, exceptions_63, location_strategy_3, platform_location_2;
    var PathLocationStrategy;
    return {
        setters:[
            function (core_90_1) {
                core_90 = core_90_1;
            },
            function (lang_159_1) {
                lang_159 = lang_159_1;
            },
            function (exceptions_63_1) {
                exceptions_63 = exceptions_63_1;
            },
            function (location_strategy_3_1) {
                location_strategy_3 = location_strategy_3_1;
            },
            function (platform_location_2_1) {
                platform_location_2 = platform_location_2_1;
            }],
        execute: function() {
            /**
             * `PathLocationStrategy` is a {@link LocationStrategy} used to configure the
             * {@link Location} service to represent its state in the
             * [path](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax) of the
             * browser's URL.
             *
             * `PathLocationStrategy` is the default binding for {@link LocationStrategy}
             * provided in {@link ROUTER_PROVIDERS}.
             *
             * If you're using `PathLocationStrategy`, you must provide a provider for
             * {@link APP_BASE_HREF} to a string representing the URL prefix that should
             * be preserved when generating and recognizing URLs.
             *
             * For instance, if you provide an `APP_BASE_HREF` of `'/my/app'` and call
             * `location.go('/foo')`, the browser's URL will become
             * `example.com/my/app/foo`.
             *
             * ### Example
             *
             * ```
             * import {Component, provide} from 'angular2/core';
             * import {
             *   APP_BASE_HREF
             *   ROUTER_DIRECTIVES,
             *   ROUTER_PROVIDERS,
             *   RouteConfig,
             *   Location
             * } from 'angular2/router';
             *
             * @Component({directives: [ROUTER_DIRECTIVES]})
             * @RouteConfig([
             *  {...},
             * ])
             * class AppCmp {
             *   constructor(location: Location) {
             *     location.go('/foo');
             *   }
             * }
             *
             * bootstrap(AppCmp, [
             *   ROUTER_PROVIDERS, // includes binding to PathLocationStrategy
             *   provide(APP_BASE_HREF, {useValue: '/my/app'})
             * ]);
             * ```
             */
            PathLocationStrategy = (function (_super) {
                __extends(PathLocationStrategy, _super);
                function PathLocationStrategy(_platformLocation, href) {
                    _super.call(this);
                    this._platformLocation = _platformLocation;
                    if (lang_159.isBlank(href)) {
                        href = this._platformLocation.getBaseHrefFromDOM();
                    }
                    if (lang_159.isBlank(href)) {
                        throw new exceptions_63.BaseException("No base href set. Please provide a value for the APP_BASE_HREF token or add a base element to the document.");
                    }
                    this._baseHref = href;
                }
                PathLocationStrategy.prototype.onPopState = function (fn) {
                    this._platformLocation.onPopState(fn);
                    this._platformLocation.onHashChange(fn);
                };
                PathLocationStrategy.prototype.getBaseHref = function () { return this._baseHref; };
                PathLocationStrategy.prototype.prepareExternalUrl = function (internal) { return location_strategy_3.joinWithSlash(this._baseHref, internal); };
                PathLocationStrategy.prototype.path = function () {
                    return this._platformLocation.pathname + location_strategy_3.normalizeQueryParams(this._platformLocation.search);
                };
                PathLocationStrategy.prototype.pushState = function (state, title, url, queryParams) {
                    var externalUrl = this.prepareExternalUrl(url + location_strategy_3.normalizeQueryParams(queryParams));
                    this._platformLocation.pushState(state, title, externalUrl);
                };
                PathLocationStrategy.prototype.replaceState = function (state, title, url, queryParams) {
                    var externalUrl = this.prepareExternalUrl(url + location_strategy_3.normalizeQueryParams(queryParams));
                    this._platformLocation.replaceState(state, title, externalUrl);
                };
                PathLocationStrategy.prototype.forward = function () { this._platformLocation.forward(); };
                PathLocationStrategy.prototype.back = function () { this._platformLocation.back(); };
                PathLocationStrategy = __decorate([
                    core_90.Injectable(),
                    __param(1, core_90.Optional()),
                    __param(1, core_90.Inject(location_strategy_3.APP_BASE_HREF)), 
                    __metadata('design:paramtypes', [platform_location_2.PlatformLocation, String])
                ], PathLocationStrategy);
                return PathLocationStrategy;
            }(location_strategy_3.LocationStrategy));
            exports_266("PathLocationStrategy", PathLocationStrategy);
        }
    }
});
/**
 * @module
 * @description
 * Maps application URLs into application states, to support deep-linking and navigation.
 */
System.register("test/node_modules/angular2/ts/router", ["test/node_modules/angular2/ts/src/router/router", "test/node_modules/angular2/ts/src/router/directives/router_outlet", "test/node_modules/angular2/ts/src/router/directives/router_link", "test/node_modules/angular2/ts/src/router/instruction", "test/node_modules/angular2/ts/src/router/location/platform_location", "test/node_modules/angular2/ts/src/router/route_registry", "test/node_modules/angular2/ts/src/router/location/location_strategy", "test/node_modules/angular2/ts/src/router/location/hash_location_strategy", "test/node_modules/angular2/ts/src/router/location/path_location_strategy", "test/node_modules/angular2/ts/src/router/location/location", "test/node_modules/angular2/ts/src/router/route_config/route_config_decorator", "test/node_modules/angular2/ts/src/router/lifecycle/lifecycle_annotations", 'angular2/core', 'angular2/src/router/router_providers_common', 'angular2/src/router/router_providers', "test/node_modules/angular2/ts/src/facade/lang"], function(exports_267, context_267) {
    "use strict";
    var __moduleName = context_267 && context_267.id;
    var router_outlet_1, router_link_1, lang_160;
    var ROUTER_DIRECTIVES;
    var exportedNames_5 = {
        'ROUTER_DIRECTIVES': true,
        'Router': true,
        'RouterOutlet': true,
        'RouterLink': true,
        'RouteParams': true,
        'RouteData': true,
        'PlatformLocation': true,
        'RouteRegistry': true,
        'ROUTER_PRIMARY_COMPONENT': true,
        'LocationStrategy': true,
        'APP_BASE_HREF': true,
        'HashLocationStrategy': true,
        'PathLocationStrategy': true,
        'Location': true,
        'CanActivate': true,
        'Instruction': true,
        'ComponentInstruction': true,
        'OpaqueToken': true,
        'ROUTER_PROVIDERS_COMMON': true,
        'ROUTER_PROVIDERS': true,
        'ROUTER_BINDINGS': true
    };
    function exportStar_8(m) {
        var exports = {};
        for(var n in m) {
            if (n !== "default"&& !exportedNames_5.hasOwnProperty(n)) exports[n] = m[n];
        }
        exports_267(exports);
    }
    return {
        setters:[
            function (router_2_1) {
                exports_267({
                    "Router": router_2_1["Router"]
                });
            },
            function (router_outlet_2_1) {
                exports_267({
                    "RouterOutlet": router_outlet_2_1["RouterOutlet"]
                });
                router_outlet_1 = router_outlet_2_1;
            },
            function (router_link_2_1) {
                exports_267({
                    "RouterLink": router_link_2_1["RouterLink"]
                });
                router_link_1 = router_link_2_1;
            },
            function (instruction_6_1) {
                exports_267({
                    "RouteParams": instruction_6_1["RouteParams"],
                    "RouteData": instruction_6_1["RouteData"]
                });
                exports_267({
                    "Instruction": instruction_6_1["Instruction"],
                    "ComponentInstruction": instruction_6_1["ComponentInstruction"]
                });
            },
            function (platform_location_3_1) {
                exports_267({
                    "PlatformLocation": platform_location_3_1["PlatformLocation"]
                });
            },
            function (route_registry_2_1) {
                exports_267({
                    "RouteRegistry": route_registry_2_1["RouteRegistry"],
                    "ROUTER_PRIMARY_COMPONENT": route_registry_2_1["ROUTER_PRIMARY_COMPONENT"]
                });
            },
            function (location_strategy_4_1) {
                exports_267({
                    "LocationStrategy": location_strategy_4_1["LocationStrategy"],
                    "APP_BASE_HREF": location_strategy_4_1["APP_BASE_HREF"]
                });
            },
            function (hash_location_strategy_1_1) {
                exports_267({
                    "HashLocationStrategy": hash_location_strategy_1_1["HashLocationStrategy"]
                });
            },
            function (path_location_strategy_1_1) {
                exports_267({
                    "PathLocationStrategy": path_location_strategy_1_1["PathLocationStrategy"]
                });
            },
            function (location_3_1) {
                exports_267({
                    "Location": location_3_1["Location"]
                });
            },
            function (route_config_decorator_2_1) {
                exportStar_8(route_config_decorator_2_1);
            },
            function (lifecycle_annotations_1_1) {
                exports_267({
                    "CanActivate": lifecycle_annotations_1_1["CanActivate"]
                });
            },
            function (core_91_1) {
                exports_267({
                    "OpaqueToken": core_91_1["OpaqueToken"]
                });
            },
            function (router_providers_common_1_1) {
                exports_267({
                    "ROUTER_PROVIDERS_COMMON": router_providers_common_1_1["ROUTER_PROVIDERS_COMMON"]
                });
            },
            function (router_providers_1_1) {
                exports_267({
                    "ROUTER_PROVIDERS": router_providers_1_1["ROUTER_PROVIDERS"],
                    "ROUTER_BINDINGS": router_providers_1_1["ROUTER_BINDINGS"]
                });
            },
            function (lang_160_1) {
                lang_160 = lang_160_1;
            }],
        execute: function() {
            /**
             * A list of directives. To use the router directives like {@link RouterOutlet} and
             * {@link RouterLink}, add this to your `directives` array in the {@link View} decorator of your
             * component.
             *
             * ### Example ([live demo](http://plnkr.co/edit/iRUP8B5OUbxCWQ3AcIDm))
             *
             * ```
             * import {Component} from 'angular2/core';
             * import {ROUTER_DIRECTIVES, ROUTER_PROVIDERS, RouteConfig} from 'angular2/router';
             *
             * @Component({directives: [ROUTER_DIRECTIVES]})
             * @RouteConfig([
             *  {...},
             * ])
             * class AppCmp {
             *    // ...
             * }
             *
             * bootstrap(AppCmp, [ROUTER_PROVIDERS]);
             * ```
             */
            exports_267("ROUTER_DIRECTIVES", ROUTER_DIRECTIVES = lang_160.CONST_EXPR([router_outlet_1.RouterOutlet, router_link_1.RouterLink]));
        }
    }
});
System.register("test/node_modules/angular2/ts/src/testing/test_injector", ['angular2/core', 'angular2/src/facade/exceptions', 'angular2/src/facade/collection', 'angular2/src/facade/lang'], function(exports_268, context_268) {
    "use strict";
    var __moduleName = context_268 && context_268.id;
    var core_92, exceptions_64, collection_67, lang_161;
    var TestInjector, _testInjector, InjectSetupWrapper, FunctionWithParamTokens;
    function getTestInjector() {
        if (_testInjector == null) {
            _testInjector = new TestInjector();
        }
        return _testInjector;
    }
    exports_268("getTestInjector", getTestInjector);
    /**
     * Set the providers that the test injector should use. These should be providers
     * common to every test in the suite.
     *
     * This may only be called once, to set up the common providers for the current test
     * suite on teh current platform. If you absolutely need to change the providers,
     * first use `resetBaseTestProviders`.
     *
     * Test Providers for individual platforms are available from
     * 'angular2/platform/testing/<platform_name>'.
     */
    function setBaseTestProviders(platformProviders, applicationProviders) {
        var testInjector = getTestInjector();
        if (testInjector.platformProviders.length > 0 || testInjector.applicationProviders.length > 0) {
            throw new exceptions_64.BaseException('Cannot set base providers because it has already been called');
        }
        testInjector.platformProviders = platformProviders;
        testInjector.applicationProviders = applicationProviders;
        var injector = testInjector.createInjector();
        var inits = injector.getOptional(core_92.PLATFORM_INITIALIZER);
        if (lang_161.isPresent(inits)) {
            inits.forEach(function (init) { return init(); });
        }
        testInjector.reset();
    }
    exports_268("setBaseTestProviders", setBaseTestProviders);
    /**
     * Reset the providers for the test injector.
     */
    function resetBaseTestProviders() {
        var testInjector = getTestInjector();
        testInjector.platformProviders = [];
        testInjector.applicationProviders = [];
        testInjector.reset();
    }
    exports_268("resetBaseTestProviders", resetBaseTestProviders);
    /**
     * Allows injecting dependencies in `beforeEach()` and `it()`.
     *
     * Example:
     *
     * ```
     * beforeEach(inject([Dependency, AClass], (dep, object) => {
     *   // some code that uses `dep` and `object`
     *   // ...
     * }));
     *
     * it('...', inject([AClass], (object) => {
     *   object.doSomething();
     *   expect(...);
     * })
     * ```
     *
     * Notes:
     * - inject is currently a function because of some Traceur limitation the syntax should
     * eventually
     *   becomes `it('...', @Inject (object: AClass, async: AsyncTestCompleter) => { ... });`
     *
     * @param {Array} tokens
     * @param {Function} fn
     * @return {FunctionWithParamTokens}
     */
    function inject(tokens, fn) {
        return new FunctionWithParamTokens(tokens, fn, false);
    }
    exports_268("inject", inject);
    function withProviders(providers) {
        return new InjectSetupWrapper(providers);
    }
    exports_268("withProviders", withProviders);
    /**
     * Allows injecting dependencies in `beforeEach()` and `it()`. The test must return
     * a promise which will resolve when all asynchronous activity is complete.
     *
     * Example:
     *
     * ```
     * it('...', injectAsync([AClass], (object) => {
     *   return object.doSomething().then(() => {
     *     expect(...);
     *   });
     * })
     * ```
     *
     * @param {Array} tokens
     * @param {Function} fn
     * @return {FunctionWithParamTokens}
     */
    function injectAsync(tokens, fn) {
        return new FunctionWithParamTokens(tokens, fn, true);
    }
    exports_268("injectAsync", injectAsync);
    function emptyArray() {
        return [];
    }
    return {
        setters:[
            function (core_92_1) {
                core_92 = core_92_1;
            },
            function (exceptions_64_1) {
                exceptions_64 = exceptions_64_1;
            },
            function (collection_67_1) {
                collection_67 = collection_67_1;
            },
            function (lang_161_1) {
                lang_161 = lang_161_1;
            }],
        execute: function() {
            TestInjector = (function () {
                function TestInjector() {
                    this._instantiated = false;
                    this._injector = null;
                    this._providers = [];
                    this.platformProviders = [];
                    this.applicationProviders = [];
                }
                TestInjector.prototype.reset = function () {
                    this._injector = null;
                    this._providers = [];
                    this._instantiated = false;
                };
                TestInjector.prototype.addProviders = function (providers) {
                    if (this._instantiated) {
                        throw new exceptions_64.BaseException('Cannot add providers after test injector is instantiated');
                    }
                    this._providers = collection_67.ListWrapper.concat(this._providers, providers);
                };
                TestInjector.prototype.createInjector = function () {
                    var rootInjector = core_92.Injector.resolveAndCreate(this.platformProviders);
                    this._injector = rootInjector.resolveAndCreateChild(collection_67.ListWrapper.concat(this.applicationProviders, this._providers));
                    this._instantiated = true;
                    return this._injector;
                };
                TestInjector.prototype.execute = function (fn) {
                    var additionalProviders = fn.additionalProviders();
                    if (additionalProviders.length > 0) {
                        this.addProviders(additionalProviders);
                    }
                    if (!this._instantiated) {
                        this.createInjector();
                    }
                    return fn.execute(this._injector);
                };
                return TestInjector;
            }());
            exports_268("TestInjector", TestInjector);
            _testInjector = null;
            InjectSetupWrapper = (function () {
                function InjectSetupWrapper(_providers) {
                    this._providers = _providers;
                }
                InjectSetupWrapper.prototype.inject = function (tokens, fn) {
                    return new FunctionWithParamTokens(tokens, fn, false, this._providers);
                };
                InjectSetupWrapper.prototype.injectAsync = function (tokens, fn) {
                    return new FunctionWithParamTokens(tokens, fn, true, this._providers);
                };
                return InjectSetupWrapper;
            }());
            exports_268("InjectSetupWrapper", InjectSetupWrapper);
            FunctionWithParamTokens = (function () {
                function FunctionWithParamTokens(_tokens, _fn, isAsync, additionalProviders) {
                    if (additionalProviders === void 0) { additionalProviders = emptyArray; }
                    this._tokens = _tokens;
                    this._fn = _fn;
                    this.isAsync = isAsync;
                    this.additionalProviders = additionalProviders;
                }
                /**
                 * Returns the value of the executed function.
                 */
                FunctionWithParamTokens.prototype.execute = function (injector) {
                    var params = this._tokens.map(function (t) { return injector.get(t); });
                    return lang_161.FunctionWrapper.apply(this._fn, params);
                };
                FunctionWithParamTokens.prototype.hasToken = function (token) { return this._tokens.indexOf(token) > -1; };
                return FunctionWithParamTokens;
            }());
            exports_268("FunctionWithParamTokens", FunctionWithParamTokens);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/testing/matchers", ['angular2/src/platform/dom/dom_adapter', 'angular2/src/facade/lang', 'angular2/src/facade/collection'], function(exports_269, context_269) {
    "use strict";
    var __moduleName = context_269 && context_269.id;
    var dom_adapter_3, lang_162, collection_68;
    var _global, expect;
    function elementText(n) {
        var hasNodes = function (n) {
            var children = dom_adapter_3.DOM.childNodes(n);
            return children && children.length > 0;
        };
        if (n instanceof Array) {
            return n.map(elementText).join("");
        }
        if (dom_adapter_3.DOM.isCommentNode(n)) {
            return '';
        }
        if (dom_adapter_3.DOM.isElementNode(n) && dom_adapter_3.DOM.tagName(n) == 'CONTENT') {
            return elementText(Array.prototype.slice.apply(dom_adapter_3.DOM.getDistributedNodes(n)));
        }
        if (dom_adapter_3.DOM.hasShadowRoot(n)) {
            return elementText(dom_adapter_3.DOM.childNodesAsList(dom_adapter_3.DOM.getShadowRoot(n)));
        }
        if (hasNodes(n)) {
            return elementText(dom_adapter_3.DOM.childNodesAsList(n));
        }
        return dom_adapter_3.DOM.getText(n);
    }
    return {
        setters:[
            function (dom_adapter_3_1) {
                dom_adapter_3 = dom_adapter_3_1;
            },
            function (lang_162_1) {
                lang_162 = lang_162_1;
            },
            function (collection_68_1) {
                collection_68 = collection_68_1;
            }],
        execute: function() {
            _global = (typeof window === 'undefined' ? lang_162.global : window);
            /**
             * Jasmine matching function with Angular matchers mixed in.
             *
             * ## Example
             *
             * {@example testing/ts/matchers.ts region='toHaveText'}
             */
            exports_269("expect", expect = _global.expect);
            // Some Map polyfills don't polyfill Map.toString correctly, which
            // gives us bad error messages in tests.
            // The only way to do this in Jasmine is to monkey patch a method
            // to the object :-(
            Map.prototype['jasmineToString'] = function () {
                var m = this;
                if (!m) {
                    return '' + m;
                }
                var res = [];
                m.forEach(function (v, k) { res.push(k + ":" + v); });
                return "{ " + res.join(',') + " }";
            };
            _global.beforeEach(function () {
                jasmine.addMatchers({
                    // Custom handler for Map as Jasmine does not support it yet
                    toEqual: function (util, customEqualityTesters) {
                        return {
                            compare: function (actual, expected) {
                                return { pass: util.equals(actual, expected, [compareMap]) };
                            }
                        };
                        function compareMap(actual, expected) {
                            if (actual instanceof Map) {
                                var pass = actual.size === expected.size;
                                if (pass) {
                                    actual.forEach(function (v, k) { pass = pass && util.equals(v, expected.get(k)); });
                                }
                                return pass;
                            }
                            else {
                                return undefined;
                            }
                        }
                    },
                    toBePromise: function () {
                        return {
                            compare: function (actual, expectedClass) {
                                var pass = typeof actual === 'object' && typeof actual.then === 'function';
                                return { pass: pass, get message() { return 'Expected ' + actual + ' to be a promise'; } };
                            }
                        };
                    },
                    toBeAnInstanceOf: function () {
                        return {
                            compare: function (actual, expectedClass) {
                                var pass = typeof actual === 'object' && actual instanceof expectedClass;
                                return {
                                    pass: pass,
                                    get message() {
                                        return 'Expected ' + actual + ' to be an instance of ' + expectedClass;
                                    }
                                };
                            }
                        };
                    },
                    toHaveText: function () {
                        return {
                            compare: function (actual, expectedText) {
                                var actualText = elementText(actual);
                                return {
                                    pass: actualText == expectedText,
                                    get message() { return 'Expected ' + actualText + ' to be equal to ' + expectedText; }
                                };
                            }
                        };
                    },
                    toHaveCssClass: function () {
                        return { compare: buildError(false), negativeCompare: buildError(true) };
                        function buildError(isNot) {
                            return function (actual, className) {
                                return {
                                    pass: dom_adapter_3.DOM.hasClass(actual, className) == !isNot,
                                    get message() {
                                        return "Expected " + actual.outerHTML + " " + (isNot ? 'not ' : '') + "to contain the CSS class \"" + className + "\"";
                                    }
                                };
                            };
                        }
                    },
                    toHaveCssStyle: function () {
                        return {
                            compare: function (actual, styles) {
                                var allPassed;
                                if (lang_162.isString(styles)) {
                                    allPassed = dom_adapter_3.DOM.hasStyle(actual, styles);
                                }
                                else {
                                    allPassed = !collection_68.StringMapWrapper.isEmpty(styles);
                                    collection_68.StringMapWrapper.forEach(styles, function (style, prop) {
                                        allPassed = allPassed && dom_adapter_3.DOM.hasStyle(actual, prop, style);
                                    });
                                }
                                return {
                                    pass: allPassed,
                                    get message() {
                                        var expectedValueStr = lang_162.isString(styles) ? styles : JSON.stringify(styles);
                                        return "Expected " + actual.outerHTML + " " + (!allPassed ? ' ' : 'not ') + "to contain the\n                      CSS " + (lang_162.isString(styles) ? 'property' : 'styles') + " \"" + expectedValueStr + "\"";
                                    }
                                };
                            }
                        };
                    },
                    toContainError: function () {
                        return {
                            compare: function (actual, expectedText) {
                                var errorMessage = actual.toString();
                                return {
                                    pass: errorMessage.indexOf(expectedText) > -1,
                                    get message() { return 'Expected ' + errorMessage + ' to contain ' + expectedText; }
                                };
                            }
                        };
                    },
                    toThrowErrorWith: function () {
                        return {
                            compare: function (actual, expectedText) {
                                try {
                                    actual();
                                    return {
                                        pass: false,
                                        get message() { return "Was expected to throw, but did not throw"; }
                                    };
                                }
                                catch (e) {
                                    var errorMessage = e.toString();
                                    return {
                                        pass: errorMessage.indexOf(expectedText) > -1,
                                        get message() { return 'Expected ' + errorMessage + ' to contain ' + expectedText; }
                                    };
                                }
                            }
                        };
                    },
                    toMatchPattern: function () {
                        return { compare: buildError(false), negativeCompare: buildError(true) };
                        function buildError(isNot) {
                            return function (actual, regex) {
                                return {
                                    pass: regex.test(actual) == !isNot,
                                    get message() {
                                        return "Expected " + actual + " " + (isNot ? 'not ' : '') + "to match " + regex.toString();
                                    }
                                };
                            };
                        }
                    },
                    toImplement: function () {
                        return {
                            compare: function (actualObject, expectedInterface) {
                                var objProps = Object.keys(actualObject.constructor.prototype);
                                var intProps = Object.keys(expectedInterface.prototype);
                                var missedMethods = [];
                                intProps.forEach(function (k) {
                                    if (!actualObject.constructor.prototype[k])
                                        missedMethods.push(k);
                                });
                                return {
                                    pass: missedMethods.length == 0,
                                    get message() {
                                        return 'Expected ' + actualObject + ' to have the following methods: ' +
                                            missedMethods.join(", ");
                                    }
                                };
                            }
                        };
                    }
                });
            });
        }
    }
});
System.register("test/node_modules/angular2/ts/src/testing/testing", ['angular2/src/facade/lang', "test/node_modules/angular2/ts/src/testing/test_injector", "test/node_modules/angular2/ts/src/testing/matchers"], function(exports_270, context_270) {
    "use strict";
    var __moduleName = context_270 && context_270.id;
    var lang_163, test_injector_1;
    var _global, afterEach, describe, ddescribe, fdescribe, xdescribe, jsmBeforeEach, jsmIt, jsmIIt, jsmXIt, testInjector;
    /**
     * Allows overriding default providers of the test injector,
     * which are defined in test_injector.js.
     *
     * The given function must return a list of DI providers.
     *
     * ## Example:
     *
     * {@example testing/ts/testing.ts region='beforeEachProviders'}
     */
    function beforeEachProviders(fn) {
        jsmBeforeEach(function () {
            var providers = fn();
            if (!providers)
                return;
            try {
                testInjector.addProviders(providers);
            }
            catch (e) {
                throw new Error('beforeEachProviders was called after the injector had ' +
                    'been used in a beforeEach or it block. This invalidates the ' +
                    'test injector');
            }
        });
    }
    exports_270("beforeEachProviders", beforeEachProviders);
    function _isPromiseLike(input) {
        return input && !!(input.then);
    }
    function _it(jsmFn, name, testFn, testTimeOut) {
        var timeOut = testTimeOut;
        if (testFn instanceof test_injector_1.FunctionWithParamTokens) {
            jsmFn(name, function (done) {
                var returnedTestValue;
                try {
                    returnedTestValue = testInjector.execute(testFn);
                }
                catch (err) {
                    done.fail(err);
                    return;
                }
                if (testFn.isAsync) {
                    if (_isPromiseLike(returnedTestValue)) {
                        returnedTestValue.then(function () { done(); }, function (err) { done.fail(err); });
                    }
                    else {
                        done.fail('Error: injectAsync was expected to return a promise, but the ' +
                            ' returned value was: ' + returnedTestValue);
                    }
                }
                else {
                    if (!(returnedTestValue === undefined)) {
                        done.fail('Error: inject returned a value. Did you mean to use injectAsync? Returned ' +
                            'value was: ' + returnedTestValue);
                    }
                    done();
                }
            }, timeOut);
        }
        else {
            // The test case doesn't use inject(). ie `it('test', (done) => { ... }));`
            jsmFn(name, testFn, timeOut);
        }
    }
    /**
     * Wrapper around Jasmine beforeEach function.
     *
     * beforeEach may be used with the `inject` function to fetch dependencies.
     * The test will automatically wait for any asynchronous calls inside the
     * injected test function to complete.
     *
     * See http://jasmine.github.io/ for more details.
     *
     * ## Example:
     *
     * {@example testing/ts/testing.ts region='beforeEach'}
     */
    function beforeEach(fn) {
        if (fn instanceof test_injector_1.FunctionWithParamTokens) {
            // The test case uses inject(). ie `beforeEach(inject([ClassA], (a) => { ...
            // }));`
            jsmBeforeEach(function (done) {
                var returnedTestValue;
                try {
                    returnedTestValue = testInjector.execute(fn);
                }
                catch (err) {
                    done.fail(err);
                    return;
                }
                if (fn.isAsync) {
                    if (_isPromiseLike(returnedTestValue)) {
                        returnedTestValue.then(function () { done(); }, function (err) { done.fail(err); });
                    }
                    else {
                        done.fail('Error: injectAsync was expected to return a promise, but the ' +
                            ' returned value was: ' + returnedTestValue);
                    }
                }
                else {
                    if (!(returnedTestValue === undefined)) {
                        done.fail('Error: inject returned a value. Did you mean to use injectAsync? Returned ' +
                            'value was: ' + returnedTestValue);
                    }
                    done();
                }
            });
        }
        else {
            // The test case doesn't use inject(). ie `beforeEach((done) => { ... }));`
            if (fn.length === 0) {
                jsmBeforeEach(function () { fn(); });
            }
            else {
                jsmBeforeEach(function (done) { fn(done); });
            }
        }
    }
    exports_270("beforeEach", beforeEach);
    /**
     * Define a single test case with the given test name and execution function.
     *
     * The test function can be either a synchronous function, an asynchronous function
     * that takes a completion callback, or an injected function created via {@link inject}
     * or {@link injectAsync}. The test will automatically wait for any asynchronous calls
     * inside the injected test function to complete.
     *
     * Wrapper around Jasmine it function. See http://jasmine.github.io/ for more details.
     *
     * ## Example:
     *
     * {@example testing/ts/testing.ts region='describeIt'}
     */
    function it(name, fn, timeOut) {
        if (timeOut === void 0) { timeOut = null; }
        return _it(jsmIt, name, fn, timeOut);
    }
    exports_270("it", it);
    /**
     * Like {@link it}, but instructs the test runner to exclude this test
     * entirely. Useful for debugging or for excluding broken tests until
     * they can be fixed.
     *
     * Wrapper around Jasmine xit function. See http://jasmine.github.io/ for more details.
     *
     * ## Example:
     *
     * {@example testing/ts/testing.ts region='xit'}
     */
    function xit(name, fn, timeOut) {
        if (timeOut === void 0) { timeOut = null; }
        return _it(jsmXIt, name, fn, timeOut);
    }
    exports_270("xit", xit);
    /**
     * See {@link fit}.
     */
    function iit(name, fn, timeOut) {
        if (timeOut === void 0) { timeOut = null; }
        return _it(jsmIIt, name, fn, timeOut);
    }
    exports_270("iit", iit);
    /**
     * Like {@link it}, but instructs the test runner to only run this test.
     * Useful for debugging.
     *
     * Wrapper around Jasmine fit function. See http://jasmine.github.io/ for more details.
     *
     * ## Example:
     *
     * {@example testing/ts/testing.ts region='fit'}
     */
    function fit(name, fn, timeOut) {
        if (timeOut === void 0) { timeOut = null; }
        return _it(jsmIIt, name, fn, timeOut);
    }
    exports_270("fit", fit);
    return {
        setters:[
            function (lang_163_1) {
                lang_163 = lang_163_1;
            },
            function (test_injector_1_1) {
                test_injector_1 = test_injector_1_1;
                exports_270({
                    "inject": test_injector_1_1["inject"],
                    "injectAsync": test_injector_1_1["injectAsync"]
                });
            },
            function (matchers_1_1) {
                exports_270({
                    "expect": matchers_1_1["expect"],
                    "NgMatchers": matchers_1_1["NgMatchers"]
                });
            }],
        execute: function() {
            _global = (typeof window === 'undefined' ? lang_163.global : window);
            /**
             * Run a function (with an optional asynchronous callback) after each test case.
             *
             * See http://jasmine.github.io/ for more details.
             *
             * ## Example:
             *
             * {@example testing/ts/testing.ts region='afterEach'}
             */
            exports_270("afterEach", afterEach = _global.afterEach);
            /**
             * Group test cases together under a common description prefix.
             *
             * See http://jasmine.github.io/ for more details.
             *
             * ## Example:
             *
             * {@example testing/ts/testing.ts region='describeIt'}
             */
            exports_270("describe", describe = _global.describe);
            /**
             * See {@link fdescribe}.
             */
            exports_270("ddescribe", ddescribe = _global.fdescribe);
            /**
             * Like {@link describe}, but instructs the test runner to only run
             * the test cases in this group. This is useful for debugging.
             *
             * See http://jasmine.github.io/ for more details.
             *
             * ## Example:
             *
             * {@example testing/ts/testing.ts region='fdescribe'}
             */
            exports_270("fdescribe", fdescribe = _global.fdescribe);
            /**
             * Like {@link describe}, but instructs the test runner to exclude
             * this group of test cases from execution. This is useful for
             * debugging, or for excluding broken tests until they can be fixed.
             *
             * See http://jasmine.github.io/ for more details.
             *
             * ## Example:
             *
             * {@example testing/ts/testing.ts region='xdescribe'}
             */
            exports_270("xdescribe", xdescribe = _global.xdescribe);
            jsmBeforeEach = _global.beforeEach;
            jsmIt = _global.it;
            jsmIIt = _global.fit;
            jsmXIt = _global.xit;
            testInjector = test_injector_1.getTestInjector();
            // Reset the test providers before each test.
            jsmBeforeEach(function () { testInjector.reset(); });
        }
    }
});
System.register("test/node_modules/angular2/ts/src/testing/utils", ['angular2/core', 'angular2/src/facade/collection', 'angular2/src/platform/dom/dom_adapter', 'angular2/src/facade/lang'], function(exports_271, context_271) {
    "use strict";
    var __moduleName = context_271 && context_271.id;
    var core_93, collection_69, dom_adapter_4, lang_164;
    var Log, browserDetection, BrowserDetection, _RE_SPECIAL_CHARS, _ESCAPE_RE, _singleTagWhitelist;
    function dispatchEvent(element, eventType) {
        dom_adapter_4.DOM.dispatchEvent(element, dom_adapter_4.DOM.createEvent(eventType));
    }
    exports_271("dispatchEvent", dispatchEvent);
    function el(html) {
        return dom_adapter_4.DOM.firstChild(dom_adapter_4.DOM.content(dom_adapter_4.DOM.createTemplate(html)));
    }
    exports_271("el", el);
    function containsRegexp(input) {
        return lang_164.RegExpWrapper.create(lang_164.StringWrapper.replaceAllMapped(input, _ESCAPE_RE, function (match) { return ("\\" + match[0]); }));
    }
    exports_271("containsRegexp", containsRegexp);
    function normalizeCSS(css) {
        css = lang_164.StringWrapper.replaceAll(css, /\s+/g, ' ');
        css = lang_164.StringWrapper.replaceAll(css, /:\s/g, ':');
        css = lang_164.StringWrapper.replaceAll(css, /'/g, '"');
        css = lang_164.StringWrapper.replaceAll(css, / }/g, '}');
        css = lang_164.StringWrapper.replaceAllMapped(css, /url\((\"|\s)(.+)(\"|\s)\)(\s*)/g, function (match) { return ("url(\"" + match[2] + "\")"); });
        css = lang_164.StringWrapper.replaceAllMapped(css, /\[(.+)=([^"\]]+)\]/g, function (match) { return ("[" + match[1] + "=\"" + match[2] + "\"]"); });
        return css;
    }
    exports_271("normalizeCSS", normalizeCSS);
    function stringifyElement(el) {
        var result = '';
        if (dom_adapter_4.DOM.isElementNode(el)) {
            var tagName = dom_adapter_4.DOM.tagName(el).toLowerCase();
            // Opening tag
            result += "<" + tagName;
            // Attributes in an ordered way
            var attributeMap = dom_adapter_4.DOM.attributeMap(el);
            var keys = [];
            attributeMap.forEach(function (v, k) { return keys.push(k); });
            collection_69.ListWrapper.sort(keys);
            for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                var attValue = attributeMap.get(key);
                if (!lang_164.isString(attValue)) {
                    result += " " + key;
                }
                else {
                    result += " " + key + "=\"" + attValue + "\"";
                }
            }
            result += '>';
            // Children
            var childrenRoot = dom_adapter_4.DOM.templateAwareRoot(el);
            var children = lang_164.isPresent(childrenRoot) ? dom_adapter_4.DOM.childNodes(childrenRoot) : [];
            for (var j = 0; j < children.length; j++) {
                result += stringifyElement(children[j]);
            }
            // Closing tag
            if (!collection_69.ListWrapper.contains(_singleTagWhitelist, tagName)) {
                result += "</" + tagName + ">";
            }
        }
        else if (dom_adapter_4.DOM.isCommentNode(el)) {
            result += "<!--" + dom_adapter_4.DOM.nodeValue(el) + "-->";
        }
        else {
            result += dom_adapter_4.DOM.getText(el);
        }
        return result;
    }
    exports_271("stringifyElement", stringifyElement);
    return {
        setters:[
            function (core_93_1) {
                core_93 = core_93_1;
            },
            function (collection_69_1) {
                collection_69 = collection_69_1;
            },
            function (dom_adapter_4_1) {
                dom_adapter_4 = dom_adapter_4_1;
            },
            function (lang_164_1) {
                lang_164 = lang_164_1;
            }],
        execute: function() {
            Log = (function () {
                function Log() {
                    this.logItems = [];
                }
                Log.prototype.add = function (value) { this.logItems.push(value); };
                Log.prototype.fn = function (value) {
                    var _this = this;
                    return function (a1, a2, a3, a4, a5) {
                        if (a1 === void 0) { a1 = null; }
                        if (a2 === void 0) { a2 = null; }
                        if (a3 === void 0) { a3 = null; }
                        if (a4 === void 0) { a4 = null; }
                        if (a5 === void 0) { a5 = null; }
                        _this.logItems.push(value);
                    };
                };
                Log.prototype.clear = function () { this.logItems = []; };
                Log.prototype.result = function () { return this.logItems.join("; "); };
                Log = __decorate([
                    core_93.Injectable(), 
                    __metadata('design:paramtypes', [])
                ], Log);
                return Log;
            }());
            exports_271("Log", Log);
            exports_271("browserDetection", browserDetection = null);
            BrowserDetection = (function () {
                function BrowserDetection(ua) {
                    if (lang_164.isPresent(ua)) {
                        this._ua = ua;
                    }
                    else {
                        this._ua = lang_164.isPresent(dom_adapter_4.DOM) ? dom_adapter_4.DOM.getUserAgent() : '';
                    }
                }
                BrowserDetection.setup = function () { exports_271("browserDetection", browserDetection = new BrowserDetection(null)); };
                Object.defineProperty(BrowserDetection.prototype, "isFirefox", {
                    get: function () { return this._ua.indexOf('Firefox') > -1; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(BrowserDetection.prototype, "isAndroid", {
                    get: function () {
                        return this._ua.indexOf('Mozilla/5.0') > -1 && this._ua.indexOf('Android') > -1 &&
                            this._ua.indexOf('AppleWebKit') > -1 && this._ua.indexOf('Chrome') == -1;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(BrowserDetection.prototype, "isEdge", {
                    get: function () { return this._ua.indexOf('Edge') > -1; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(BrowserDetection.prototype, "isIE", {
                    get: function () { return this._ua.indexOf('Trident') > -1; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(BrowserDetection.prototype, "isWebkit", {
                    get: function () {
                        return this._ua.indexOf('AppleWebKit') > -1 && this._ua.indexOf('Edge') == -1;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(BrowserDetection.prototype, "isIOS7", {
                    get: function () {
                        return this._ua.indexOf('iPhone OS 7') > -1 || this._ua.indexOf('iPad OS 7') > -1;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(BrowserDetection.prototype, "isSlow", {
                    get: function () { return this.isAndroid || this.isIE || this.isIOS7; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(BrowserDetection.prototype, "supportsIntlApi", {
                    // The Intl API is only properly supported in recent Chrome and Opera.
                    // Note: Edge is disguised as Chrome 42, so checking the "Edge" part is needed,
                    // see https://msdn.microsoft.com/en-us/library/hh869301(v=vs.85).aspx
                    get: function () {
                        return this._ua.indexOf('Chrome/4') > -1 && this._ua.indexOf('Edge') == -1;
                    },
                    enumerable: true,
                    configurable: true
                });
                return BrowserDetection;
            }());
            exports_271("BrowserDetection", BrowserDetection);
            _RE_SPECIAL_CHARS = ['-', '[', ']', '/', '{', '}', '\\', '(', ')', '*', '+', '?', '.', '^', '$', '|'];
            _ESCAPE_RE = lang_164.RegExpWrapper.create("[\\" + _RE_SPECIAL_CHARS.join('\\') + "]");
            _singleTagWhitelist = ['br', 'hr', 'input'];
        }
    }
});
System.register("test/node_modules/angular2/ts/src/testing/test_component_builder", ['angular2/core', 'angular2/src/facade/lang', 'angular2/src/facade/collection', "test/node_modules/angular2/ts/src/testing/utils", 'angular2/src/platform/dom/dom_tokens', 'angular2/src/platform/dom/dom_adapter', 'angular2/src/core/debug/debug_node'], function(exports_272, context_272) {
    "use strict";
    var __moduleName = context_272 && context_272.id;
    var core_94, lang_165, collection_70, utils_2, dom_tokens_1, dom_adapter_5, debug_node_2;
    var ComponentFixture, ComponentFixture_, _nextRootElementId, TestComponentBuilder;
    return {
        setters:[
            function (core_94_1) {
                core_94 = core_94_1;
            },
            function (lang_165_1) {
                lang_165 = lang_165_1;
            },
            function (collection_70_1) {
                collection_70 = collection_70_1;
            },
            function (utils_2_1) {
                utils_2 = utils_2_1;
            },
            function (dom_tokens_1_1) {
                dom_tokens_1 = dom_tokens_1_1;
            },
            function (dom_adapter_5_1) {
                dom_adapter_5 = dom_adapter_5_1;
            },
            function (debug_node_2_1) {
                debug_node_2 = debug_node_2_1;
            }],
        execute: function() {
            /**
             * Fixture for debugging and testing a component.
             */
            ComponentFixture = (function () {
                function ComponentFixture() {
                }
                return ComponentFixture;
            }());
            exports_272("ComponentFixture", ComponentFixture);
            ComponentFixture_ = (function (_super) {
                __extends(ComponentFixture_, _super);
                function ComponentFixture_(componentRef) {
                    _super.call(this);
                    this._componentParentView = componentRef.hostView.internalView;
                    this.elementRef = this._componentParentView.appElements[0].ref;
                    this.debugElement = debug_node_2.getDebugNode(this._componentParentView.rootNodesOrAppElements[0].nativeElement);
                    this.componentInstance = this.debugElement.componentInstance;
                    this.nativeElement = this.debugElement.nativeElement;
                    this._componentRef = componentRef;
                }
                ComponentFixture_.prototype.detectChanges = function () {
                    this._componentParentView.changeDetector.detectChanges();
                    this._componentParentView.changeDetector.checkNoChanges();
                };
                ComponentFixture_.prototype.destroy = function () { this._componentRef.dispose(); };
                return ComponentFixture_;
            }(ComponentFixture));
            exports_272("ComponentFixture_", ComponentFixture_);
            _nextRootElementId = 0;
            /**
             * Builds a ComponentFixture for use in component level tests.
             */
            TestComponentBuilder = (function () {
                function TestComponentBuilder(_injector) {
                    this._injector = _injector;
                    /** @internal */
                    this._bindingsOverrides = new Map();
                    /** @internal */
                    this._directiveOverrides = new Map();
                    /** @internal */
                    this._templateOverrides = new Map();
                    /** @internal */
                    this._viewBindingsOverrides = new Map();
                    /** @internal */
                    this._viewOverrides = new Map();
                }
                /** @internal */
                TestComponentBuilder.prototype._clone = function () {
                    var clone = new TestComponentBuilder(this._injector);
                    clone._viewOverrides = collection_70.MapWrapper.clone(this._viewOverrides);
                    clone._directiveOverrides = collection_70.MapWrapper.clone(this._directiveOverrides);
                    clone._templateOverrides = collection_70.MapWrapper.clone(this._templateOverrides);
                    return clone;
                };
                /**
                 * Overrides only the html of a {@link ComponentMetadata}.
                 * All the other properties of the component's {@link ViewMetadata} are preserved.
                 *
                 * @param {Type} component
                 * @param {string} html
                 *
                 * @return {TestComponentBuilder}
                 */
                TestComponentBuilder.prototype.overrideTemplate = function (componentType, template) {
                    var clone = this._clone();
                    clone._templateOverrides.set(componentType, template);
                    return clone;
                };
                /**
                 * Overrides a component's {@link ViewMetadata}.
                 *
                 * @param {Type} component
                 * @param {view} View
                 *
                 * @return {TestComponentBuilder}
                 */
                TestComponentBuilder.prototype.overrideView = function (componentType, view) {
                    var clone = this._clone();
                    clone._viewOverrides.set(componentType, view);
                    return clone;
                };
                /**
                 * Overrides the directives from the component {@link ViewMetadata}.
                 *
                 * @param {Type} component
                 * @param {Type} from
                 * @param {Type} to
                 *
                 * @return {TestComponentBuilder}
                 */
                TestComponentBuilder.prototype.overrideDirective = function (componentType, from, to) {
                    var clone = this._clone();
                    var overridesForComponent = clone._directiveOverrides.get(componentType);
                    if (!lang_165.isPresent(overridesForComponent)) {
                        clone._directiveOverrides.set(componentType, new Map());
                        overridesForComponent = clone._directiveOverrides.get(componentType);
                    }
                    overridesForComponent.set(from, to);
                    return clone;
                };
                /**
                 * Overrides one or more injectables configured via `providers` metadata property of a directive
                 * or
                 * component.
                 * Very useful when certain providers need to be mocked out.
                 *
                 * The providers specified via this method are appended to the existing `providers` causing the
                 * duplicated providers to
                 * be overridden.
                 *
                 * @param {Type} component
                 * @param {any[]} providers
                 *
                 * @return {TestComponentBuilder}
                 */
                TestComponentBuilder.prototype.overrideProviders = function (type, providers) {
                    var clone = this._clone();
                    clone._bindingsOverrides.set(type, providers);
                    return clone;
                };
                /**
                 * @deprecated
                 */
                TestComponentBuilder.prototype.overrideBindings = function (type, providers) {
                    return this.overrideProviders(type, providers);
                };
                /**
                 * Overrides one or more injectables configured via `providers` metadata property of a directive
                 * or
                 * component.
                 * Very useful when certain providers need to be mocked out.
                 *
                 * The providers specified via this method are appended to the existing `providers` causing the
                 * duplicated providers to
                 * be overridden.
                 *
                 * @param {Type} component
                 * @param {any[]} providers
                 *
                 * @return {TestComponentBuilder}
                 */
                TestComponentBuilder.prototype.overrideViewProviders = function (type, providers) {
                    var clone = this._clone();
                    clone._viewBindingsOverrides.set(type, providers);
                    return clone;
                };
                /**
                 * @deprecated
                 */
                TestComponentBuilder.prototype.overrideViewBindings = function (type, providers) {
                    return this.overrideViewProviders(type, providers);
                };
                /**
                 * Builds and returns a ComponentFixture.
                 *
                 * @return {Promise<ComponentFixture>}
                 */
                TestComponentBuilder.prototype.createAsync = function (rootComponentType) {
                    var mockDirectiveResolver = this._injector.get(core_94.DirectiveResolver);
                    var mockViewResolver = this._injector.get(core_94.ViewResolver);
                    this._viewOverrides.forEach(function (view, type) { return mockViewResolver.setView(type, view); });
                    this._templateOverrides.forEach(function (template, type) {
                        return mockViewResolver.setInlineTemplate(type, template);
                    });
                    this._directiveOverrides.forEach(function (overrides, component) {
                        overrides.forEach(function (to, from) { mockViewResolver.overrideViewDirective(component, from, to); });
                    });
                    this._bindingsOverrides.forEach(function (bindings, type) {
                        return mockDirectiveResolver.setBindingsOverride(type, bindings);
                    });
                    this._viewBindingsOverrides.forEach(function (bindings, type) { return mockDirectiveResolver.setViewBindingsOverride(type, bindings); });
                    var rootElId = "root" + _nextRootElementId++;
                    var rootEl = utils_2.el("<div id=\"" + rootElId + "\"></div>");
                    var doc = this._injector.get(dom_tokens_1.DOCUMENT);
                    // TODO(juliemr): can/should this be optional?
                    var oldRoots = dom_adapter_5.DOM.querySelectorAll(doc, '[id^=root]');
                    for (var i = 0; i < oldRoots.length; i++) {
                        dom_adapter_5.DOM.remove(oldRoots[i]);
                    }
                    dom_adapter_5.DOM.appendChild(doc.body, rootEl);
                    var promise = this._injector.get(core_94.DynamicComponentLoader)
                        .loadAsRoot(rootComponentType, "#" + rootElId, this._injector);
                    return promise.then(function (componentRef) { return new ComponentFixture_(componentRef); });
                };
                TestComponentBuilder = __decorate([
                    core_94.Injectable(), 
                    __metadata('design:paramtypes', [core_94.Injector])
                ], TestComponentBuilder);
                return TestComponentBuilder;
            }());
            exports_272("TestComponentBuilder", TestComponentBuilder);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/testing/fake_async", ['angular2/src/facade/lang', 'angular2/src/facade/exceptions', 'angular2/src/facade/collection'], function(exports_273, context_273) {
    "use strict";
    var __moduleName = context_273 && context_273.id;
    var lang_166, exceptions_65, collection_71;
    var _scheduler, _microtasks, _pendingPeriodicTimers, _pendingTimers, FakeAsyncZoneSpec;
    /**
     * Wraps a function to be executed in the fakeAsync zone:
     * - microtasks are manually executed by calling `flushMicrotasks()`,
     * - timers are synchronous, `tick()` simulates the asynchronous passage of time.
     *
     * If there are any pending timers at the end of the function, an exception will be thrown.
     *
     * ## Example
     *
     * {@example testing/ts/fake_async.ts region='basic'}
     *
     * @param fn
     * @returns {Function} The function wrapped to be executed in the fakeAsync zone
     */
    function fakeAsync(fn) {
        if (Zone.current.get('inFakeAsyncZone')) {
            throw new Error('fakeAsync() calls can not be nested');
        }
        var fakeAsyncZone = Zone.current.fork(new FakeAsyncZoneSpec());
        return function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            // TODO(tbosch): This class should already be part of the jasmine typings but it is not...
            _scheduler = new jasmine.DelayedFunctionScheduler();
            clearPendingTimers();
            var res = fakeAsyncZone.run(function () {
                var res = fn.apply(void 0, args);
                flushMicrotasks();
                return res;
            });
            if (_pendingPeriodicTimers.length > 0) {
                throw new exceptions_65.BaseException(_pendingPeriodicTimers.length + " periodic timer(s) still in the queue.");
            }
            if (_pendingTimers.length > 0) {
                throw new exceptions_65.BaseException(_pendingTimers.length + " timer(s) still in the queue.");
            }
            _scheduler = null;
            collection_71.ListWrapper.clear(_microtasks);
            return res;
        };
    }
    exports_273("fakeAsync", fakeAsync);
    /**
     * Clear the queue of pending timers and microtasks.
     *
     * Useful for cleaning up after an asynchronous test passes.
     *
     * ## Example
     *
     * {@example testing/ts/fake_async.ts region='pending'}
     */
    function clearPendingTimers() {
        // TODO we should fix tick to dequeue the failed timer instead of relying on clearPendingTimers
        collection_71.ListWrapper.clear(_microtasks);
        collection_71.ListWrapper.clear(_pendingPeriodicTimers);
        collection_71.ListWrapper.clear(_pendingTimers);
    }
    exports_273("clearPendingTimers", clearPendingTimers);
    /**
     * Simulates the asynchronous passage of time for the timers in the fakeAsync zone.
     *
     * The microtasks queue is drained at the very start of this function and after any timer callback
     * has been executed.
     *
     * ## Example
     *
     * {@example testing/ts/fake_async.ts region='basic'}
     *
     * @param {number} millis Number of millisecond, defaults to 0
     */
    function tick(millis) {
        if (millis === void 0) { millis = 0; }
        FakeAsyncZoneSpec.assertInZone();
        flushMicrotasks();
        _scheduler.tick(millis);
    }
    exports_273("tick", tick);
    /**
     * Flush any pending microtasks.
     */
    function flushMicrotasks() {
        FakeAsyncZoneSpec.assertInZone();
        while (_microtasks.length > 0) {
            var microtask = collection_71.ListWrapper.removeAt(_microtasks, 0);
            microtask();
        }
    }
    exports_273("flushMicrotasks", flushMicrotasks);
    function _setTimeout(fn, delay, args) {
        var cb = _fnAndFlush(fn);
        var id = _scheduler.scheduleFunction(cb, delay, args);
        _pendingTimers.push(id);
        _scheduler.scheduleFunction(_dequeueTimer(id), delay);
        return id;
    }
    function _clearTimeout(id) {
        _dequeueTimer(id);
        return _scheduler.removeFunctionWithId(id);
    }
    function _setInterval(fn, interval) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        var cb = _fnAndFlush(fn);
        var id = _scheduler.scheduleFunction(cb, interval, args, true);
        _pendingPeriodicTimers.push(id);
        return id;
    }
    function _clearInterval(id) {
        collection_71.ListWrapper.remove(_pendingPeriodicTimers, id);
        return _scheduler.removeFunctionWithId(id);
    }
    function _fnAndFlush(fn) {
        return function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            fn.apply(lang_166.global, args);
            flushMicrotasks();
        };
    }
    function _dequeueTimer(id) {
        return function () { collection_71.ListWrapper.remove(_pendingTimers, id); };
    }
    return {
        setters:[
            function (lang_166_1) {
                lang_166 = lang_166_1;
            },
            function (exceptions_65_1) {
                exceptions_65 = exceptions_65_1;
            },
            function (collection_71_1) {
                collection_71 = collection_71_1;
            }],
        execute: function() {
            _microtasks = [];
            _pendingPeriodicTimers = [];
            _pendingTimers = [];
            FakeAsyncZoneSpec = (function () {
                function FakeAsyncZoneSpec() {
                    this.name = 'fakeAsync';
                    this.properties = { 'inFakeAsyncZone': true };
                }
                FakeAsyncZoneSpec.assertInZone = function () {
                    if (!Zone.current.get('inFakeAsyncZone')) {
                        throw new Error('The code should be running in the fakeAsync zone to call this function');
                    }
                };
                FakeAsyncZoneSpec.prototype.onScheduleTask = function (delegate, current, target, task) {
                    switch (task.type) {
                        case 'microTask':
                            _microtasks.push(task.invoke);
                            break;
                        case 'macroTask':
                            switch (task.source) {
                                case 'setTimeout':
                                    task.data['handleId'] = _setTimeout(task.invoke, task.data['delay'], task.data['args']);
                                    break;
                                case 'setInterval':
                                    task.data['handleId'] =
                                        _setInterval(task.invoke, task.data['delay'], task.data['args']);
                                    break;
                                default:
                                    task = delegate.scheduleTask(target, task);
                            }
                            break;
                        case 'eventTask':
                            task = delegate.scheduleTask(target, task);
                            break;
                    }
                    return task;
                };
                FakeAsyncZoneSpec.prototype.onCancelTask = function (delegate, current, target, task) {
                    switch (task.source) {
                        case 'setTimeout':
                            return _clearTimeout(task.data['handleId']);
                        case 'setInterval':
                            return _clearInterval(task.data['handleId']);
                        default:
                            return delegate.scheduleTask(target, task);
                    }
                };
                return FakeAsyncZoneSpec;
            }());
        }
    }
});
System.register("test/node_modules/angular2/ts/testing", ["test/node_modules/angular2/ts/src/testing/testing", "test/node_modules/angular2/ts/src/testing/test_component_builder", "test/node_modules/angular2/ts/src/testing/test_injector", "test/node_modules/angular2/ts/src/testing/fake_async", 'angular2/src/mock/view_resolver_mock', 'angular2/src/compiler/xhr_mock', 'angular2/src/mock/ng_zone_mock', 'angular2/src/mock/mock_application_ref', 'angular2/src/mock/directive_resolver_mock'], function(exports_274, context_274) {
    "use strict";
    var __moduleName = context_274 && context_274.id;
    var exportedNames_6 = {
        'ComponentFixture': true,
        'TestComponentBuilder': true,
        'MockViewResolver': true,
        'MockXHR': true,
        'MockNgZone': true,
        'MockApplicationRef': true,
        'MockDirectiveResolver': true
    };
    function exportStar_9(m) {
        var exports = {};
        for(var n in m) {
            if (n !== "default"&& !exportedNames_6.hasOwnProperty(n)) exports[n] = m[n];
        }
        exports_274(exports);
    }
    return {
        setters:[
            function (testing_1_1) {
                exportStar_9(testing_1_1);
            },
            function (test_component_builder_1_1) {
                exports_274({
                    "ComponentFixture": test_component_builder_1_1["ComponentFixture"],
                    "TestComponentBuilder": test_component_builder_1_1["TestComponentBuilder"]
                });
            },
            function (test_injector_3_1) {
                exportStar_9(test_injector_3_1);
            },
            function (fake_async_1_1) {
                exportStar_9(fake_async_1_1);
            },
            function (view_resolver_mock_1_1) {
                exports_274({
                    "MockViewResolver": view_resolver_mock_1_1["MockViewResolver"]
                });
            },
            function (xhr_mock_1_1) {
                exports_274({
                    "MockXHR": xhr_mock_1_1["MockXHR"]
                });
            },
            function (ng_zone_mock_1_1) {
                exports_274({
                    "MockNgZone": ng_zone_mock_1_1["MockNgZone"]
                });
            },
            function (mock_application_ref_1_1) {
                exports_274({
                    "MockApplicationRef": mock_application_ref_1_1["MockApplicationRef"]
                });
            },
            function (directive_resolver_mock_1_1) {
                exports_274({
                    "MockDirectiveResolver": directive_resolver_mock_1_1["MockDirectiveResolver"]
                });
            }],
        execute: function() {
        }
    }
});
System.register("test/node_modules/angular2/ts/src/testing/testing_internal", ['angular2/src/facade/collection', 'angular2/src/facade/lang', 'angular2/core', "test/node_modules/angular2/ts/src/testing/test_injector", "test/node_modules/angular2/ts/src/testing/utils", "test/node_modules/angular2/ts/src/testing/matchers"], function(exports_275, context_275) {
    "use strict";
    var __moduleName = context_275 && context_275.id;
    var collection_72, lang_167, core_95, test_injector_4, utils_3;
    var proxy, _global, afterEach, AsyncTestCompleter, jsmBeforeEach, jsmDescribe, jsmDDescribe, jsmXDescribe, jsmIt, jsmIIt, jsmXIt, runnerStack, inIt, globalTimeOut, testInjector, BeforeEachRunner, SpyObject;
    function _describe(jsmFn) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var parentRunner = runnerStack.length === 0 ? null : runnerStack[runnerStack.length - 1];
        var runner = new BeforeEachRunner(parentRunner);
        runnerStack.push(runner);
        var suite = jsmFn.apply(void 0, args);
        runnerStack.pop();
        return suite;
    }
    function describe() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i - 0] = arguments[_i];
        }
        return _describe.apply(void 0, [jsmDescribe].concat(args));
    }
    exports_275("describe", describe);
    function ddescribe() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i - 0] = arguments[_i];
        }
        return _describe.apply(void 0, [jsmDDescribe].concat(args));
    }
    exports_275("ddescribe", ddescribe);
    function xdescribe() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i - 0] = arguments[_i];
        }
        return _describe.apply(void 0, [jsmXDescribe].concat(args));
    }
    exports_275("xdescribe", xdescribe);
    function beforeEach(fn) {
        if (runnerStack.length > 0) {
            // Inside a describe block, beforeEach() uses a BeforeEachRunner
            runnerStack[runnerStack.length - 1].beforeEach(fn);
        }
        else {
            // Top level beforeEach() are delegated to jasmine
            jsmBeforeEach(fn);
        }
    }
    exports_275("beforeEach", beforeEach);
    /**
     * Allows overriding default providers defined in test_injector.js.
     *
     * The given function must return a list of DI providers.
     *
     * Example:
     *
     *   beforeEachProviders(() => [
     *     provide(Compiler, {useClass: MockCompiler}),
     *     provide(SomeToken, {useValue: myValue}),
     *   ]);
     */
    function beforeEachProviders(fn) {
        jsmBeforeEach(function () {
            var providers = fn();
            if (!providers)
                return;
            testInjector.addProviders(providers);
        });
    }
    exports_275("beforeEachProviders", beforeEachProviders);
    /**
     * @deprecated
     */
    function beforeEachBindings(fn) {
        beforeEachProviders(fn);
    }
    exports_275("beforeEachBindings", beforeEachBindings);
    function _it(jsmFn, name, testFn, testTimeOut) {
        var runner = runnerStack[runnerStack.length - 1];
        var timeOut = lang_167.Math.max(globalTimeOut, testTimeOut);
        if (testFn instanceof test_injector_4.FunctionWithParamTokens) {
            // The test case uses inject(). ie `it('test', inject([AsyncTestCompleter], (async) => { ...
            // }));`
            if (testFn.hasToken(AsyncTestCompleter)) {
                jsmFn(name, function (done) {
                    var completerProvider = core_95.provide(AsyncTestCompleter, {
                        useFactory: function () {
                            // Mark the test as async when an AsyncTestCompleter is injected in an it()
                            if (!inIt)
                                throw new Error('AsyncTestCompleter can only be injected in an "it()"');
                            return new AsyncTestCompleter(done);
                        }
                    });
                    testInjector.addProviders([completerProvider]);
                    runner.run();
                    inIt = true;
                    testInjector.execute(testFn);
                    inIt = false;
                }, timeOut);
            }
            else {
                jsmFn(name, function () {
                    runner.run();
                    testInjector.execute(testFn);
                }, timeOut);
            }
        }
        else {
            // The test case doesn't use inject(). ie `it('test', (done) => { ... }));`
            if (testFn.length === 0) {
                jsmFn(name, function () {
                    runner.run();
                    testFn();
                }, timeOut);
            }
            else {
                jsmFn(name, function (done) {
                    runner.run();
                    testFn(done);
                }, timeOut);
            }
        }
    }
    function it(name, fn, timeOut) {
        if (timeOut === void 0) { timeOut = null; }
        return _it(jsmIt, name, fn, timeOut);
    }
    exports_275("it", it);
    function xit(name, fn, timeOut) {
        if (timeOut === void 0) { timeOut = null; }
        return _it(jsmXIt, name, fn, timeOut);
    }
    exports_275("xit", xit);
    function iit(name, fn, timeOut) {
        if (timeOut === void 0) { timeOut = null; }
        return _it(jsmIIt, name, fn, timeOut);
    }
    exports_275("iit", iit);
    return {
        setters:[
            function (collection_72_1) {
                collection_72 = collection_72_1;
            },
            function (lang_167_1) {
                lang_167 = lang_167_1;
            },
            function (core_95_1) {
                core_95 = core_95_1;
            },
            function (test_injector_4_1) {
                test_injector_4 = test_injector_4_1;
                exports_275({
                    "inject": test_injector_4_1["inject"]
                });
            },
            function (utils_3_1) {
                utils_3 = utils_3_1;
            },
            function (matchers_2_1) {
                exports_275({
                    "expect": matchers_2_1["expect"],
                    "NgMatchers": matchers_2_1["NgMatchers"]
                });
            }],
        execute: function() {
            exports_275("proxy", proxy = function (t) { return t; });
            _global = (typeof window === 'undefined' ? lang_167.global : window);
            exports_275("afterEach", afterEach = _global.afterEach);
            /**
             * Injectable completer that allows signaling completion of an asynchronous test. Used internally.
             */
            AsyncTestCompleter = (function () {
                function AsyncTestCompleter(_done) {
                    this._done = _done;
                }
                AsyncTestCompleter.prototype.done = function () { this._done(); };
                return AsyncTestCompleter;
            }());
            exports_275("AsyncTestCompleter", AsyncTestCompleter);
            jsmBeforeEach = _global.beforeEach;
            jsmDescribe = _global.describe;
            jsmDDescribe = _global.fdescribe;
            jsmXDescribe = _global.xdescribe;
            jsmIt = _global.it;
            jsmIIt = _global.fit;
            jsmXIt = _global.xit;
            runnerStack = [];
            inIt = false;
            jasmine.DEFAULT_TIMEOUT_INTERVAL = 500;
            globalTimeOut = utils_3.browserDetection.isSlow ? 3000 : jasmine.DEFAULT_TIMEOUT_INTERVAL;
            testInjector = test_injector_4.getTestInjector();
            /**
             * Mechanism to run `beforeEach()` functions of Angular tests.
             *
             * Note: Jasmine own `beforeEach` is used by this library to handle DI providers.
             */
            BeforeEachRunner = (function () {
                function BeforeEachRunner(_parent) {
                    this._parent = _parent;
                    this._fns = [];
                }
                BeforeEachRunner.prototype.beforeEach = function (fn) { this._fns.push(fn); };
                BeforeEachRunner.prototype.run = function () {
                    if (this._parent)
                        this._parent.run();
                    this._fns.forEach(function (fn) {
                        return lang_167.isFunction(fn) ? fn() :
                            (testInjector.execute(fn));
                    });
                };
                return BeforeEachRunner;
            }());
            // Reset the test providers before each test
            jsmBeforeEach(function () { testInjector.reset(); });
            SpyObject = (function () {
                function SpyObject(type) {
                    if (type === void 0) { type = null; }
                    if (type) {
                        for (var prop in type.prototype) {
                            var m = null;
                            try {
                                m = type.prototype[prop];
                            }
                            catch (e) {
                            }
                            if (typeof m === 'function') {
                                this.spy(prop);
                            }
                        }
                    }
                }
                // Noop so that SpyObject has the same interface as in Dart
                SpyObject.prototype.noSuchMethod = function (args) { };
                SpyObject.prototype.spy = function (name) {
                    if (!this[name]) {
                        this[name] = this._createGuinnessCompatibleSpy(name);
                    }
                    return this[name];
                };
                SpyObject.prototype.prop = function (name, value) { this[name] = value; };
                SpyObject.stub = function (object, config, overrides) {
                    if (object === void 0) { object = null; }
                    if (config === void 0) { config = null; }
                    if (overrides === void 0) { overrides = null; }
                    if (!(object instanceof SpyObject)) {
                        overrides = config;
                        config = object;
                        object = new SpyObject();
                    }
                    var m = collection_72.StringMapWrapper.merge(config, overrides);
                    collection_72.StringMapWrapper.forEach(m, function (value, key) { object.spy(key).andReturn(value); });
                    return object;
                };
                /** @internal */
                SpyObject.prototype._createGuinnessCompatibleSpy = function (name) {
                    var newSpy = jasmine.createSpy(name);
                    newSpy.andCallFake = newSpy.and.callFake;
                    newSpy.andReturn = newSpy.and.returnValue;
                    newSpy.reset = newSpy.calls.reset;
                    // revisit return null here (previously needed for rtts_assert).
                    newSpy.and.returnValue(null);
                    return newSpy;
                };
                return SpyObject;
            }());
            exports_275("SpyObject", SpyObject);
        }
    }
});
System.register("test/node_modules/angular2/ts/testing_internal", ["test/node_modules/angular2/ts/src/testing/testing_internal", "test/node_modules/angular2/ts/src/testing/test_component_builder", "test/node_modules/angular2/ts/src/testing/test_injector", "test/node_modules/angular2/ts/src/testing/fake_async", "test/node_modules/angular2/ts/src/testing/utils"], function(exports_276, context_276) {
    "use strict";
    var __moduleName = context_276 && context_276.id;
    function exportStar_10(m) {
        var exports = {};
        for(var n in m) {
            if (n !== "default") exports[n] = m[n];
        }
        exports_276(exports);
    }
    return {
        setters:[
            function (testing_internal_1_1) {
                exportStar_10(testing_internal_1_1);
            },
            function (test_component_builder_2_1) {
                exportStar_10(test_component_builder_2_1);
            },
            function (test_injector_6_1) {
                exportStar_10(test_injector_6_1);
            },
            function (fake_async_2_1) {
                exportStar_10(fake_async_2_1);
            },
            function (utils_4_1) {
                exportStar_10(utils_4_1);
            }],
        execute: function() {
        }
    }
});
System.register("test/node_modules/angular2/ts/src/upgrade/util", [], function(exports_277, context_277) {
    "use strict";
    var __moduleName = context_277 && context_277.id;
    function stringify(obj) {
        if (typeof obj == 'function')
            return obj.name || obj.toString();
        return '' + obj;
    }
    exports_277("stringify", stringify);
    function onError(e) {
        // TODO: (misko): We seem to not have a stack trace here!
        console.log(e, e.stack);
        throw e;
    }
    exports_277("onError", onError);
    function controllerKey(name) {
        return '$' + name + 'Controller';
    }
    exports_277("controllerKey", controllerKey);
    return {
        setters:[],
        execute: function() {
        }
    }
});
System.register("test/node_modules/angular2/ts/src/upgrade/metadata", ['angular2/core'], function(exports_278, context_278) {
    "use strict";
    var __moduleName = context_278 && context_278.id;
    var core_96;
    var COMPONENT_SELECTOR, SKEWER_CASE, directiveResolver;
    function getComponentInfo(type) {
        var resolvedMetadata = directiveResolver.resolve(type);
        var selector = resolvedMetadata.selector;
        if (!selector.match(COMPONENT_SELECTOR)) {
            throw new Error('Only selectors matching element names are supported, got: ' + selector);
        }
        var selector = selector.replace(SKEWER_CASE, function (all, letter) { return letter.toUpperCase(); });
        return {
            type: type,
            selector: selector,
            inputs: parseFields(resolvedMetadata.inputs),
            outputs: parseFields(resolvedMetadata.outputs)
        };
    }
    exports_278("getComponentInfo", getComponentInfo);
    function parseFields(names) {
        var attrProps = [];
        if (names) {
            for (var i = 0; i < names.length; i++) {
                var parts = names[i].split(':');
                var prop = parts[0].trim();
                var attr = (parts[1] || parts[0]).trim();
                var capitalAttr = attr.charAt(0).toUpperCase() + attr.substr(1);
                attrProps.push({
                    prop: prop,
                    attr: attr,
                    bracketAttr: "[" + attr + "]",
                    parenAttr: "(" + attr + ")",
                    bracketParenAttr: "[(" + attr + ")]",
                    onAttr: "on" + capitalAttr,
                    bindAttr: "bind" + capitalAttr,
                    bindonAttr: "bindon" + capitalAttr
                });
            }
        }
        return attrProps;
    }
    exports_278("parseFields", parseFields);
    return {
        setters:[
            function (core_96_1) {
                core_96 = core_96_1;
            }],
        execute: function() {
            COMPONENT_SELECTOR = /^[\w|-]*$/;
            SKEWER_CASE = /-(\w)/g;
            directiveResolver = new core_96.DirectiveResolver();
        }
    }
});
System.register("test/node_modules/angular2/ts/src/upgrade/constants", [], function(exports_279, context_279) {
    "use strict";
    var __moduleName = context_279 && context_279.id;
    var NG2_APP_VIEW_MANAGER, NG2_COMPILER, NG2_INJECTOR, NG2_HOST_VIEW_FACTORY_REF_MAP, NG2_ZONE, NG1_CONTROLLER, NG1_SCOPE, NG1_ROOT_SCOPE, NG1_COMPILE, NG1_HTTP_BACKEND, NG1_INJECTOR, NG1_PARSE, NG1_TEMPLATE_CACHE, REQUIRE_INJECTOR;
    return {
        setters:[],
        execute: function() {
            exports_279("NG2_APP_VIEW_MANAGER", NG2_APP_VIEW_MANAGER = 'ng2.AppViewManager');
            exports_279("NG2_COMPILER", NG2_COMPILER = 'ng2.Compiler');
            exports_279("NG2_INJECTOR", NG2_INJECTOR = 'ng2.Injector');
            exports_279("NG2_HOST_VIEW_FACTORY_REF_MAP", NG2_HOST_VIEW_FACTORY_REF_MAP = 'ng2.HostViewFactoryRefMap');
            exports_279("NG2_ZONE", NG2_ZONE = 'ng2.NgZone');
            exports_279("NG1_CONTROLLER", NG1_CONTROLLER = '$controller');
            exports_279("NG1_SCOPE", NG1_SCOPE = '$scope');
            exports_279("NG1_ROOT_SCOPE", NG1_ROOT_SCOPE = '$rootScope');
            exports_279("NG1_COMPILE", NG1_COMPILE = '$compile');
            exports_279("NG1_HTTP_BACKEND", NG1_HTTP_BACKEND = '$httpBackend');
            exports_279("NG1_INJECTOR", NG1_INJECTOR = '$injector');
            exports_279("NG1_PARSE", NG1_PARSE = '$parse');
            exports_279("NG1_TEMPLATE_CACHE", NG1_TEMPLATE_CACHE = '$templateCache');
            exports_279("REQUIRE_INJECTOR", REQUIRE_INJECTOR = '^' + NG2_INJECTOR);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/upgrade/angular_js", [], function(exports_280, context_280) {
    "use strict";
    var __moduleName = context_280 && context_280.id;
    var angular, e, bootstrap, module, element, version;
    function noNg() {
        throw new Error('AngularJS v1.x is not loaded!');
    }
    return {
        setters:[],
        execute: function() {
            angular = { bootstrap: noNg, module: noNg, element: noNg, version: noNg };
            try {
                if (window.hasOwnProperty('angular')) {
                    angular = window.angular;
                }
            }
            catch (e) {
            }
            exports_280("bootstrap", bootstrap = angular.bootstrap);
            exports_280("module", module = angular.module);
            exports_280("element", element = angular.element);
            exports_280("version", version = angular.version);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/upgrade/downgrade_ng2_adapter", ['angular2/core', "test/node_modules/angular2/ts/src/upgrade/constants"], function(exports_281, context_281) {
    "use strict";
    var __moduleName = context_281 && context_281.id;
    var core_97, constants_9;
    var INITIAL_VALUE, DowngradeNg2ComponentAdapter, Ng1Change;
    return {
        setters:[
            function (core_97_1) {
                core_97 = core_97_1;
            },
            function (constants_9_1) {
                constants_9 = constants_9_1;
            }],
        execute: function() {
            INITIAL_VALUE = {
                __UNINITIALIZED__: true
            };
            DowngradeNg2ComponentAdapter = (function () {
                function DowngradeNg2ComponentAdapter(id, info, element, attrs, scope, parentInjector, parse, viewManager, hostViewFactory) {
                    this.id = id;
                    this.info = info;
                    this.element = element;
                    this.attrs = attrs;
                    this.scope = scope;
                    this.parentInjector = parentInjector;
                    this.parse = parse;
                    this.viewManager = viewManager;
                    this.hostViewFactory = hostViewFactory;
                    this.component = null;
                    this.inputChangeCount = 0;
                    this.inputChanges = null;
                    this.hostViewRef = null;
                    this.changeDetector = null;
                    this.contentInsertionPoint = null;
                    this.element[0].id = id;
                    this.componentScope = scope.$new();
                    this.childNodes = element.contents();
                }
                DowngradeNg2ComponentAdapter.prototype.bootstrapNg2 = function () {
                    var childInjector = this.parentInjector.resolveAndCreateChild([core_97.provide(constants_9.NG1_SCOPE, { useValue: this.componentScope })]);
                    this.contentInsertionPoint = document.createComment('ng1 insertion point');
                    this.hostViewRef = this.viewManager.createRootHostView(this.hostViewFactory, '#' + this.id, childInjector, [[this.contentInsertionPoint]]);
                    var hostElement = this.viewManager.getHostElement(this.hostViewRef);
                    this.changeDetector = this.hostViewRef.changeDetectorRef;
                    this.component = this.viewManager.getComponent(hostElement);
                };
                DowngradeNg2ComponentAdapter.prototype.setupInputs = function () {
                    var _this = this;
                    var attrs = this.attrs;
                    var inputs = this.info.inputs;
                    for (var i = 0; i < inputs.length; i++) {
                        var input = inputs[i];
                        var expr = null;
                        if (attrs.hasOwnProperty(input.attr)) {
                            var observeFn = (function (prop) {
                                var prevValue = INITIAL_VALUE;
                                return function (value) {
                                    if (_this.inputChanges !== null) {
                                        _this.inputChangeCount++;
                                        _this.inputChanges[prop] =
                                            new Ng1Change(value, prevValue === INITIAL_VALUE ? value : prevValue);
                                        prevValue = value;
                                    }
                                    _this.component[prop] = value;
                                };
                            })(input.prop);
                            attrs.$observe(input.attr, observeFn);
                        }
                        else if (attrs.hasOwnProperty(input.bindAttr)) {
                            expr = attrs[input.bindAttr];
                        }
                        else if (attrs.hasOwnProperty(input.bracketAttr)) {
                            expr = attrs[input.bracketAttr];
                        }
                        else if (attrs.hasOwnProperty(input.bindonAttr)) {
                            expr = attrs[input.bindonAttr];
                        }
                        else if (attrs.hasOwnProperty(input.bracketParenAttr)) {
                            expr = attrs[input.bracketParenAttr];
                        }
                        if (expr != null) {
                            var watchFn = (function (prop) { return function (value, prevValue) {
                                if (_this.inputChanges != null) {
                                    _this.inputChangeCount++;
                                    _this.inputChanges[prop] = new Ng1Change(prevValue, value);
                                }
                                _this.component[prop] = value;
                            }; })(input.prop);
                            this.componentScope.$watch(expr, watchFn);
                        }
                    }
                    var prototype = this.info.type.prototype;
                    if (prototype && prototype.ngOnChanges) {
                        // Detect: OnChanges interface
                        this.inputChanges = {};
                        this.componentScope.$watch(function () { return _this.inputChangeCount; }, function () {
                            var inputChanges = _this.inputChanges;
                            _this.inputChanges = {};
                            _this.component.ngOnChanges(inputChanges);
                        });
                    }
                    this.componentScope.$watch(function () { return _this.changeDetector && _this.changeDetector.detectChanges(); });
                };
                DowngradeNg2ComponentAdapter.prototype.projectContent = function () {
                    var childNodes = this.childNodes;
                    var parent = this.contentInsertionPoint.parentNode;
                    if (parent) {
                        for (var i = 0, ii = childNodes.length; i < ii; i++) {
                            parent.insertBefore(childNodes[i], this.contentInsertionPoint);
                        }
                    }
                };
                DowngradeNg2ComponentAdapter.prototype.setupOutputs = function () {
                    var _this = this;
                    var attrs = this.attrs;
                    var outputs = this.info.outputs;
                    for (var j = 0; j < outputs.length; j++) {
                        var output = outputs[j];
                        var expr = null;
                        var assignExpr = false;
                        var bindonAttr = output.bindonAttr ? output.bindonAttr.substring(0, output.bindonAttr.length - 6) : null;
                        var bracketParenAttr = output.bracketParenAttr ?
                            "[(" + output.bracketParenAttr.substring(2, output.bracketParenAttr.length - 8) + ")]" :
                            null;
                        if (attrs.hasOwnProperty(output.onAttr)) {
                            expr = attrs[output.onAttr];
                        }
                        else if (attrs.hasOwnProperty(output.parenAttr)) {
                            expr = attrs[output.parenAttr];
                        }
                        else if (attrs.hasOwnProperty(bindonAttr)) {
                            expr = attrs[bindonAttr];
                            assignExpr = true;
                        }
                        else if (attrs.hasOwnProperty(bracketParenAttr)) {
                            expr = attrs[bracketParenAttr];
                            assignExpr = true;
                        }
                        if (expr != null && assignExpr != null) {
                            var getter = this.parse(expr);
                            var setter = getter.assign;
                            if (assignExpr && !setter) {
                                throw new Error("Expression '" + expr + "' is not assignable!");
                            }
                            var emitter = this.component[output.prop];
                            if (emitter) {
                                emitter.subscribe({
                                    next: assignExpr ? (function (setter) { return function (value) { return setter(_this.scope, value); }; })(setter) :
                                        (function (getter) { return function (value) { return getter(_this.scope, { $event: value }); }; })(getter)
                                });
                            }
                            else {
                                throw new Error("Missing emitter '" + output.prop + "' on component '" + this.info.selector + "'!");
                            }
                        }
                    }
                };
                DowngradeNg2ComponentAdapter.prototype.registerCleanup = function () {
                    var _this = this;
                    this.element.bind('$remove', function () { return _this.viewManager.destroyRootHostView(_this.hostViewRef); });
                };
                return DowngradeNg2ComponentAdapter;
            }());
            exports_281("DowngradeNg2ComponentAdapter", DowngradeNg2ComponentAdapter);
            Ng1Change = (function () {
                function Ng1Change(previousValue, currentValue) {
                    this.previousValue = previousValue;
                    this.currentValue = currentValue;
                }
                Ng1Change.prototype.isFirstChange = function () { return this.previousValue === this.currentValue; };
                return Ng1Change;
            }());
        }
    }
});
System.register("test/node_modules/angular2/ts/src/upgrade/upgrade_ng1_adapter", ['angular2/core', "test/node_modules/angular2/ts/src/upgrade/constants", "test/node_modules/angular2/ts/src/upgrade/util", "test/node_modules/angular2/ts/src/upgrade/angular_js"], function(exports_282, context_282) {
    "use strict";
    var __moduleName = context_282 && context_282.id;
    var core_98, constants_10, util_12, angular;
    var CAMEL_CASE, INITIAL_VALUE, NOT_SUPPORTED, UpgradeNg1ComponentAdapterBuilder, UpgradeNg1ComponentAdapter;
    return {
        setters:[
            function (core_98_1) {
                core_98 = core_98_1;
            },
            function (constants_10_1) {
                constants_10 = constants_10_1;
            },
            function (util_12_1) {
                util_12 = util_12_1;
            },
            function (angular_1) {
                angular = angular_1;
            }],
        execute: function() {
            CAMEL_CASE = /([A-Z])/g;
            INITIAL_VALUE = {
                __UNINITIALIZED__: true
            };
            NOT_SUPPORTED = 'NOT_SUPPORTED';
            UpgradeNg1ComponentAdapterBuilder = (function () {
                function UpgradeNg1ComponentAdapterBuilder(name) {
                    this.name = name;
                    this.inputs = [];
                    this.inputsRename = [];
                    this.outputs = [];
                    this.outputsRename = [];
                    this.propertyOutputs = [];
                    this.checkProperties = [];
                    this.propertyMap = {};
                    this.linkFn = null;
                    this.directive = null;
                    this.$controller = null;
                    var selector = name.replace(CAMEL_CASE, function (all, next) { return '-' + next.toLowerCase(); });
                    var self = this;
                    this.type =
                        core_98.Directive({ selector: selector, inputs: this.inputsRename, outputs: this.outputsRename })
                            .Class({
                            constructor: [
                                new core_98.Inject(constants_10.NG1_SCOPE),
                                core_98.ElementRef,
                                function (scope, elementRef) {
                                    return new UpgradeNg1ComponentAdapter(self.linkFn, scope, self.directive, elementRef, self.$controller, self.inputs, self.outputs, self.propertyOutputs, self.checkProperties, self.propertyMap);
                                }
                            ],
                            ngOnChanges: function () { },
                            ngDoCheck: function () { }
                        });
                }
                UpgradeNg1ComponentAdapterBuilder.prototype.extractDirective = function (injector) {
                    var directives = injector.get(this.name + 'Directive');
                    if (directives.length > 1) {
                        throw new Error('Only support single directive definition for: ' + this.name);
                    }
                    var directive = directives[0];
                    if (directive.replace)
                        this.notSupported('replace');
                    if (directive.terminal)
                        this.notSupported('terminal');
                    var link = directive.link;
                    if (typeof link == 'object') {
                        if (link.post)
                            this.notSupported('link.post');
                    }
                    return directive;
                };
                UpgradeNg1ComponentAdapterBuilder.prototype.notSupported = function (feature) {
                    throw new Error("Upgraded directive '" + this.name + "' does not support '" + feature + "'.");
                };
                UpgradeNg1ComponentAdapterBuilder.prototype.extractBindings = function () {
                    var btcIsObject = typeof this.directive.bindToController === 'object';
                    if (btcIsObject && Object.keys(this.directive.scope).length) {
                        throw new Error("Binding definitions on scope and controller at the same time are not supported.");
                    }
                    var context = (btcIsObject) ? this.directive.bindToController : this.directive.scope;
                    if (typeof context == 'object') {
                        for (var name in context) {
                            if (context.hasOwnProperty(name)) {
                                var localName = context[name];
                                var type = localName.charAt(0);
                                localName = localName.substr(1) || name;
                                var outputName = 'output_' + name;
                                var outputNameRename = outputName + ': ' + name;
                                var outputNameRenameChange = outputName + ': ' + name + 'Change';
                                var inputName = 'input_' + name;
                                var inputNameRename = inputName + ': ' + name;
                                switch (type) {
                                    case '=':
                                        this.propertyOutputs.push(outputName);
                                        this.checkProperties.push(localName);
                                        this.outputs.push(outputName);
                                        this.outputsRename.push(outputNameRenameChange);
                                        this.propertyMap[outputName] = localName;
                                    // don't break; let it fall through to '@'
                                    case '@':
                                        this.inputs.push(inputName);
                                        this.inputsRename.push(inputNameRename);
                                        this.propertyMap[inputName] = localName;
                                        break;
                                    case '&':
                                        this.outputs.push(outputName);
                                        this.outputsRename.push(outputNameRename);
                                        this.propertyMap[outputName] = localName;
                                        break;
                                    default:
                                        var json = JSON.stringify(context);
                                        throw new Error("Unexpected mapping '" + type + "' in '" + json + "' in '" + this.name + "' directive.");
                                }
                            }
                        }
                    }
                };
                UpgradeNg1ComponentAdapterBuilder.prototype.compileTemplate = function (compile, templateCache, httpBackend) {
                    var _this = this;
                    if (this.directive.template !== undefined) {
                        this.linkFn = compileHtml(this.directive.template);
                    }
                    else if (this.directive.templateUrl) {
                        var url = this.directive.templateUrl;
                        var html = templateCache.get(url);
                        if (html !== undefined) {
                            this.linkFn = compileHtml(html);
                        }
                        else {
                            return new Promise(function (resolve, err) {
                                httpBackend('GET', url, null, function (status, response) {
                                    if (status == 200) {
                                        resolve(_this.linkFn = compileHtml(templateCache.put(url, response)));
                                    }
                                    else {
                                        err("GET " + url + " returned " + status + ": " + response);
                                    }
                                });
                            });
                        }
                    }
                    else {
                        throw new Error("Directive '" + this.name + "' is not a component, it is missing template.");
                    }
                    return null;
                    function compileHtml(html) {
                        var div = document.createElement('div');
                        div.innerHTML = html;
                        return compile(div.childNodes);
                    }
                };
                UpgradeNg1ComponentAdapterBuilder.resolve = function (exportedComponents, injector) {
                    var promises = [];
                    var compile = injector.get(constants_10.NG1_COMPILE);
                    var templateCache = injector.get(constants_10.NG1_TEMPLATE_CACHE);
                    var httpBackend = injector.get(constants_10.NG1_HTTP_BACKEND);
                    var $controller = injector.get(constants_10.NG1_CONTROLLER);
                    for (var name in exportedComponents) {
                        if (exportedComponents.hasOwnProperty(name)) {
                            var exportedComponent = exportedComponents[name];
                            exportedComponent.directive = exportedComponent.extractDirective(injector);
                            exportedComponent.$controller = $controller;
                            exportedComponent.extractBindings();
                            var promise = exportedComponent.compileTemplate(compile, templateCache, httpBackend);
                            if (promise)
                                promises.push(promise);
                        }
                    }
                    return Promise.all(promises);
                };
                return UpgradeNg1ComponentAdapterBuilder;
            }());
            exports_282("UpgradeNg1ComponentAdapterBuilder", UpgradeNg1ComponentAdapterBuilder);
            UpgradeNg1ComponentAdapter = (function () {
                function UpgradeNg1ComponentAdapter(linkFn, scope, directive, elementRef, $controller, inputs, outputs, propOuts, checkProperties, propertyMap) {
                    this.directive = directive;
                    this.inputs = inputs;
                    this.outputs = outputs;
                    this.propOuts = propOuts;
                    this.checkProperties = checkProperties;
                    this.propertyMap = propertyMap;
                    this.destinationObj = null;
                    this.checkLastValues = [];
                    var element = elementRef.nativeElement;
                    var childNodes = [];
                    var childNode;
                    while (childNode = element.firstChild) {
                        element.removeChild(childNode);
                        childNodes.push(childNode);
                    }
                    var componentScope = scope.$new(!!directive.scope);
                    var $element = angular.element(element);
                    var controllerType = directive.controller;
                    var controller = null;
                    if (controllerType) {
                        var locals = { $scope: componentScope, $element: $element };
                        controller = $controller(controllerType, locals, null, directive.controllerAs);
                        $element.data(util_12.controllerKey(directive.name), controller);
                    }
                    var link = directive.link;
                    if (typeof link == 'object')
                        link = link.pre;
                    if (link) {
                        var attrs = NOT_SUPPORTED;
                        var transcludeFn = NOT_SUPPORTED;
                        var linkController = this.resolveRequired($element, directive.require);
                        directive.link(componentScope, $element, attrs, linkController, transcludeFn);
                    }
                    this.destinationObj = directive.bindToController && controller ? controller : componentScope;
                    linkFn(componentScope, function (clonedElement, scope) {
                        for (var i = 0, ii = clonedElement.length; i < ii; i++) {
                            element.appendChild(clonedElement[i]);
                        }
                    }, { parentBoundTranscludeFn: function (scope, cloneAttach) { cloneAttach(childNodes); } });
                    for (var i = 0; i < inputs.length; i++) {
                        this[inputs[i]] = null;
                    }
                    for (var j = 0; j < outputs.length; j++) {
                        var emitter = this[outputs[j]] = new core_98.EventEmitter();
                        this.setComponentProperty(outputs[j], (function (emitter) { return function (value) { return emitter.emit(value); }; })(emitter));
                    }
                    for (var k = 0; k < propOuts.length; k++) {
                        this[propOuts[k]] = new core_98.EventEmitter();
                        this.checkLastValues.push(INITIAL_VALUE);
                    }
                }
                UpgradeNg1ComponentAdapter.prototype.ngOnChanges = function (changes) {
                    for (var name in changes) {
                        if (changes.hasOwnProperty(name)) {
                            var change = changes[name];
                            this.setComponentProperty(name, change.currentValue);
                        }
                    }
                };
                UpgradeNg1ComponentAdapter.prototype.ngDoCheck = function () {
                    var count = 0;
                    var destinationObj = this.destinationObj;
                    var lastValues = this.checkLastValues;
                    var checkProperties = this.checkProperties;
                    for (var i = 0; i < checkProperties.length; i++) {
                        var value = destinationObj[checkProperties[i]];
                        var last = lastValues[i];
                        if (value !== last) {
                            if (typeof value == 'number' && isNaN(value) && typeof last == 'number' && isNaN(last)) {
                            }
                            else {
                                var eventEmitter = this[this.propOuts[i]];
                                eventEmitter.emit(lastValues[i] = value);
                            }
                        }
                    }
                    return count;
                };
                UpgradeNg1ComponentAdapter.prototype.setComponentProperty = function (name, value) {
                    this.destinationObj[this.propertyMap[name]] = value;
                };
                UpgradeNg1ComponentAdapter.prototype.resolveRequired = function ($element, require) {
                    if (!require) {
                        return undefined;
                    }
                    else if (typeof require == 'string') {
                        var name = require;
                        var isOptional = false;
                        var startParent = false;
                        var searchParents = false;
                        var ch;
                        if (name.charAt(0) == '?') {
                            isOptional = true;
                            name = name.substr(1);
                        }
                        if (name.charAt(0) == '^') {
                            searchParents = true;
                            name = name.substr(1);
                        }
                        if (name.charAt(0) == '^') {
                            startParent = true;
                            name = name.substr(1);
                        }
                        var key = util_12.controllerKey(name);
                        if (startParent)
                            $element = $element.parent();
                        var dep = searchParents ? $element.inheritedData(key) : $element.data(key);
                        if (!dep && !isOptional) {
                            throw new Error("Can not locate '" + require + "' in '" + this.directive.name + "'.");
                        }
                        return dep;
                    }
                    else if (require instanceof Array) {
                        var deps = [];
                        for (var i = 0; i < require.length; i++) {
                            deps.push(this.resolveRequired($element, require[i]));
                        }
                        return deps;
                    }
                    throw new Error("Directive '" + this.directive.name + "' require syntax unrecognized: " + this.directive.require);
                };
                return UpgradeNg1ComponentAdapter;
            }());
        }
    }
});
System.register("test/node_modules/angular2/ts/src/upgrade/upgrade_adapter", ['angular2/core', 'angular2/src/facade/async', 'angular2/platform/browser', "test/node_modules/angular2/ts/src/upgrade/metadata", "test/node_modules/angular2/ts/src/upgrade/util", "test/node_modules/angular2/ts/src/upgrade/constants", "test/node_modules/angular2/ts/src/upgrade/downgrade_ng2_adapter", "test/node_modules/angular2/ts/src/upgrade/upgrade_ng1_adapter", "test/node_modules/angular2/ts/src/upgrade/angular_js"], function(exports_283, context_283) {
    "use strict";
    var __moduleName = context_283 && context_283.id;
    var core_99, async_28, browser_4, metadata_10, util_13, constants_11, downgrade_ng2_adapter_1, upgrade_ng1_adapter_1, angular;
    var upgradeCount, UpgradeAdapter, UpgradeAdapterRef;
    function ng1ComponentDirective(info, idPrefix) {
        directiveFactory.$inject =
            [constants_11.NG2_HOST_VIEW_FACTORY_REF_MAP, constants_11.NG2_APP_VIEW_MANAGER, constants_11.NG1_PARSE];
        function directiveFactory(hostViewFactoryRefMap, viewManager, parse) {
            var hostViewFactory = hostViewFactoryRefMap[info.selector];
            if (!hostViewFactory)
                throw new Error('Expecting HostViewFactoryRef for: ' + info.selector);
            var idCount = 0;
            return {
                restrict: 'E',
                require: constants_11.REQUIRE_INJECTOR,
                link: {
                    post: function (scope, element, attrs, parentInjector, transclude) {
                        var domElement = element[0];
                        var facade = new downgrade_ng2_adapter_1.DowngradeNg2ComponentAdapter(idPrefix + (idCount++), info, element, attrs, scope, parentInjector, parse, viewManager, hostViewFactory);
                        facade.setupInputs();
                        facade.bootstrapNg2();
                        facade.projectContent();
                        facade.setupOutputs();
                        facade.registerCleanup();
                    }
                }
            };
        }
        return directiveFactory;
    }
    return {
        setters:[
            function (core_99_1) {
                core_99 = core_99_1;
            },
            function (async_28_1) {
                async_28 = async_28_1;
            },
            function (browser_4_1) {
                browser_4 = browser_4_1;
            },
            function (metadata_10_1) {
                metadata_10 = metadata_10_1;
            },
            function (util_13_1) {
                util_13 = util_13_1;
            },
            function (constants_11_1) {
                constants_11 = constants_11_1;
            },
            function (downgrade_ng2_adapter_1_1) {
                downgrade_ng2_adapter_1 = downgrade_ng2_adapter_1_1;
            },
            function (upgrade_ng1_adapter_1_1) {
                upgrade_ng1_adapter_1 = upgrade_ng1_adapter_1_1;
            },
            function (angular_2) {
                angular = angular_2;
            }],
        execute: function() {
            upgradeCount = 0;
            /**
             * Use `UpgradeAdapter` to allow AngularJS v1 and Angular v2 to coexist in a single application.
             *
             * The `UpgradeAdapter` allows:
             * 1. creation of Angular v2 component from AngularJS v1 component directive
             *    (See [UpgradeAdapter#upgradeNg1Component()])
             * 2. creation of AngularJS v1 directive from Angular v2 component.
             *    (See [UpgradeAdapter#downgradeNg2Component()])
             * 3. Bootstrapping of a hybrid Angular application which contains both of the frameworks
             *    coexisting in a single application.
             *
             * ## Mental Model
             *
             * When reasoning about how a hybrid application works it is useful to have a mental model which
             * describes what is happening and explains what is happening at the lowest level.
             *
             * 1. There are two independent frameworks running in a single application, each framework treats
             *    the other as a black box.
             * 2. Each DOM element on the page is owned exactly by one framework. Whichever framework
             *    instantiated the element is the owner. Each framework only updates/interacts with its own
             *    DOM elements and ignores others.
             * 3. AngularJS v1 directives always execute inside AngularJS v1 framework codebase regardless of
             *    where they are instantiated.
             * 4. Angular v2 components always execute inside Angular v2 framework codebase regardless of
             *    where they are instantiated.
             * 5. An AngularJS v1 component can be upgraded to an Angular v2 component. This creates an
             *    Angular v2 directive, which bootstraps the AngularJS v1 component directive in that location.
             * 6. An Angular v2 component can be downgraded to an AngularJS v1 component directive. This creates
             *    an AngularJS v1 directive, which bootstraps the Angular v2 component in that location.
             * 7. Whenever an adapter component is instantiated the host element is owned by the framework
             *    doing the instantiation. The other framework then instantiates and owns the view for that
             *    component. This implies that component bindings will always follow the semantics of the
             *    instantiation framework. The syntax is always that of Angular v2 syntax.
             * 8. AngularJS v1 is always bootstrapped first and owns the bottom most view.
             * 9. The new application is running in Angular v2 zone, and therefore it no longer needs calls to
             *    `$apply()`.
             *
             * ### Example
             *
             * ```
             * var adapter = new UpgradeAdapter();
             * var module = angular.module('myExample', []);
             * module.directive('ng2', adapter.downgradeNg2Component(Ng2));
             *
             * module.directive('ng1', function() {
             *   return {
             *      scope: { title: '=' },
             *      template: 'ng1[Hello {{title}}!](<span ng-transclude></span>)'
             *   };
             * });
             *
             *
             * @Component({
             *   selector: 'ng2',
             *   inputs: ['name'],
             *   template: 'ng2[<ng1 [title]="name">transclude</ng1>](<ng-content></ng-content>)',
             *   directives: [adapter.upgradeNg1Component('ng1')]
             * })
             * class Ng2 {
             * }
             *
             * document.body.innerHTML = '<ng2 name="World">project</ng2>';
             *
             * adapter.bootstrap(document.body, ['myExample']).ready(function() {
             *   expect(document.body.textContent).toEqual(
             *       "ng2[ng1[Hello World!](transclude)](project)");
             * });
             * ```
             */
            UpgradeAdapter = (function () {
                function UpgradeAdapter() {
                    /* @internal */
                    this.idPrefix = "NG2_UPGRADE_" + upgradeCount++ + "_";
                    /* @internal */
                    this.upgradedComponents = [];
                    /* @internal */
                    this.downgradedComponents = {};
                    /* @internal */
                    this.providers = [];
                }
                /**
                 * Allows Angular v2 Component to be used from AngularJS v1.
                 *
                 * Use `downgradeNg2Component` to create an AngularJS v1 Directive Definition Factory from
                 * Angular v2 Component. The adapter will bootstrap Angular v2 component from within the
                 * AngularJS v1 template.
                 *
                 * ## Mental Model
                 *
                 * 1. The component is instantiated by being listed in AngularJS v1 template. This means that the
                 *    host element is controlled by AngularJS v1, but the component's view will be controlled by
                 *    Angular v2.
                 * 2. Even thought the component is instantiated in AngularJS v1, it will be using Angular v2
                 *    syntax. This has to be done, this way because we must follow Angular v2 components do not
                 *    declare how the attributes should be interpreted.
                 *
                 * ## Supported Features
                 *
                 * - Bindings:
                 *   - Attribute: `<comp name="World">`
                 *   - Interpolation:  `<comp greeting="Hello {{name}}!">`
                 *   - Expression:  `<comp [name]="username">`
                 *   - Event:  `<comp (close)="doSomething()">`
                 * - Content projection: yes
                 *
                 * ### Example
                 *
                 * ```
                 * var adapter = new UpgradeAdapter();
                 * var module = angular.module('myExample', []);
                 * module.directive('greet', adapter.downgradeNg2Component(Greeter));
                 *
                 * @Component({
                 *   selector: 'greet',
                 *   template: '{{salutation}} {{name}}! - <ng-content></ng-content>'
                 * })
                 * class Greeter {
                 *   @Input() salutation: string;
                 *   @Input() name: string;
                 * }
                 *
                 * document.body.innerHTML =
                 *   'ng1 template: <greet salutation="Hello" [name]="world">text</greet>';
                 *
                 * adapter.bootstrap(document.body, ['myExample']).ready(function() {
                 *   expect(document.body.textContent).toEqual("ng1 template: Hello world! - text");
                 * });
                 * ```
                 */
                UpgradeAdapter.prototype.downgradeNg2Component = function (type) {
                    this.upgradedComponents.push(type);
                    var info = metadata_10.getComponentInfo(type);
                    return ng1ComponentDirective(info, "" + this.idPrefix + info.selector + "_c");
                };
                /**
                 * Allows AngularJS v1 Component to be used from Angular v2.
                 *
                 * Use `upgradeNg1Component` to create an Angular v2 component from AngularJS v1 Component
                 * directive. The adapter will bootstrap AngularJS v1 component from within the Angular v2
                 * template.
                 *
                 * ## Mental Model
                 *
                 * 1. The component is instantiated by being listed in Angular v2 template. This means that the
                 *    host element is controlled by Angular v2, but the component's view will be controlled by
                 *    AngularJS v1.
                 *
                 * ## Supported Features
                 *
                 * - Bindings:
                 *   - Attribute: `<comp name="World">`
                 *   - Interpolation:  `<comp greeting="Hello {{name}}!">`
                 *   - Expression:  `<comp [name]="username">`
                 *   - Event:  `<comp (close)="doSomething()">`
                 * - Transclusion: yes
                 * - Only some of the features of
                 *   [Directive Definition Object](https://docs.angularjs.org/api/ng/service/$compile) are
                 *   supported:
                 *   - `compile`: not supported because the host element is owned by Angular v2, which does
                 *     not allow modifying DOM structure during compilation.
                 *   - `controller`: supported. (NOTE: injection of `$attrs` and `$transclude` is not supported.)
                 *   - `controllerAs': supported.
                 *   - `bindToController': supported.
                 *   - `link': supported. (NOTE: only pre-link function is supported.)
                 *   - `name': supported.
                 *   - `priority': ignored.
                 *   - `replace': not supported.
                 *   - `require`: supported.
                 *   - `restrict`: must be set to 'E'.
                 *   - `scope`: supported.
                 *   - `template`: supported.
                 *   - `templateUrl`: supported.
                 *   - `terminal`: ignored.
                 *   - `transclude`: supported.
                 *
                 *
                 * ### Example
                 *
                 * ```
                 * var adapter = new UpgradeAdapter();
                 * var module = angular.module('myExample', []);
                 *
                 * module.directive('greet', function() {
                 *   return {
                 *     scope: {salutation: '=', name: '=' },
                 *     template: '{{salutation}} {{name}}! - <span ng-transclude></span>'
                 *   };
                 * });
                 *
                 * module.directive('ng2', adapter.downgradeNg2Component(Ng2));
                 *
                 * @Component({
                 *   selector: 'ng2',
                 *   template: 'ng2 template: <greet salutation="Hello" [name]="world">text</greet>'
                 *   directives: [adapter.upgradeNg1Component('greet')]
                 * })
                 * class Ng2 {
                 * }
                 *
                 * document.body.innerHTML = '<ng2></ng2>';
                 *
                 * adapter.bootstrap(document.body, ['myExample']).ready(function() {
                 *   expect(document.body.textContent).toEqual("ng2 template: Hello world! - text");
                 * });
                 * ```
                 */
                UpgradeAdapter.prototype.upgradeNg1Component = function (name) {
                    if (this.downgradedComponents.hasOwnProperty(name)) {
                        return this.downgradedComponents[name].type;
                    }
                    else {
                        return (this.downgradedComponents[name] = new upgrade_ng1_adapter_1.UpgradeNg1ComponentAdapterBuilder(name)).type;
                    }
                };
                /**
                 * Bootstrap a hybrid AngularJS v1 / Angular v2 application.
                 *
                 * This `bootstrap` method is a direct replacement (takes same arguments) for AngularJS v1
                 * [`bootstrap`](https://docs.angularjs.org/api/ng/function/angular.bootstrap) method. Unlike
                 * AngularJS v1, this bootstrap is asynchronous.
                 *
                 * ### Example
                 *
                 * ```
                 * var adapter = new UpgradeAdapter();
                 * var module = angular.module('myExample', []);
                 * module.directive('ng2', adapter.downgradeNg2Component(Ng2));
                 *
                 * module.directive('ng1', function() {
                 *   return {
                 *      scope: { title: '=' },
                 *      template: 'ng1[Hello {{title}}!](<span ng-transclude></span>)'
                 *   };
                 * });
                 *
                 *
                 * @Component({
                 *   selector: 'ng2',
                 *   inputs: ['name'],
                 *   template: 'ng2[<ng1 [title]="name">transclude</ng1>](<ng-content></ng-content>)',
                 *   directives: [adapter.upgradeNg1Component('ng1')]
                 * })
                 * class Ng2 {
                 * }
                 *
                 * document.body.innerHTML = '<ng2 name="World">project</ng2>';
                 *
                 * adapter.bootstrap(document.body, ['myExample']).ready(function() {
                 *   expect(document.body.textContent).toEqual(
                 *       "ng2[ng1[Hello World!](transclude)](project)");
                 * });
                 * ```
                 */
                UpgradeAdapter.prototype.bootstrap = function (element, modules, config) {
                    var _this = this;
                    var upgrade = new UpgradeAdapterRef();
                    var ng1Injector = null;
                    var platformRef = core_99.platform(browser_4.BROWSER_PROVIDERS);
                    var applicationRef = platformRef.application([
                        browser_4.BROWSER_APP_PROVIDERS,
                        core_99.provide(constants_11.NG1_INJECTOR, { useFactory: function () { return ng1Injector; } }),
                        core_99.provide(constants_11.NG1_COMPILE, { useFactory: function () { return ng1Injector.get(constants_11.NG1_COMPILE); } }),
                        this.providers
                    ]);
                    var injector = applicationRef.injector;
                    var ngZone = injector.get(core_99.NgZone);
                    var compiler = injector.get(core_99.Compiler);
                    var delayApplyExps = [];
                    var original$applyFn;
                    var rootScopePrototype;
                    var rootScope;
                    var hostViewFactoryRefMap = {};
                    var ng1Module = angular.module(this.idPrefix, modules);
                    var ng1compilePromise = null;
                    ng1Module.value(constants_11.NG2_INJECTOR, injector)
                        .value(constants_11.NG2_ZONE, ngZone)
                        .value(constants_11.NG2_COMPILER, compiler)
                        .value(constants_11.NG2_HOST_VIEW_FACTORY_REF_MAP, hostViewFactoryRefMap)
                        .value(constants_11.NG2_APP_VIEW_MANAGER, injector.get(core_99.AppViewManager))
                        .config([
                        '$provide',
                        function (provide) {
                            provide.decorator(constants_11.NG1_ROOT_SCOPE, [
                                '$delegate',
                                function (rootScopeDelegate) {
                                    rootScopePrototype = rootScopeDelegate.constructor.prototype;
                                    if (rootScopePrototype.hasOwnProperty('$apply')) {
                                        original$applyFn = rootScopePrototype.$apply;
                                        rootScopePrototype.$apply = function (exp) { return delayApplyExps.push(exp); };
                                    }
                                    else {
                                        throw new Error("Failed to find '$apply' on '$rootScope'!");
                                    }
                                    return rootScope = rootScopeDelegate;
                                }
                            ]);
                        }
                    ])
                        .run([
                        '$injector',
                        '$rootScope',
                        function (injector, rootScope) {
                            ng1Injector = injector;
                            async_28.ObservableWrapper.subscribe(ngZone.onMicrotaskEmpty, function (_) { return ngZone.runOutsideAngular(function () { return rootScope.$apply(); }); });
                            ng1compilePromise =
                                upgrade_ng1_adapter_1.UpgradeNg1ComponentAdapterBuilder.resolve(_this.downgradedComponents, injector);
                        }
                    ]);
                    angular.element(element).data(util_13.controllerKey(constants_11.NG2_INJECTOR), injector);
                    ngZone.run(function () { angular.bootstrap(element, [_this.idPrefix], config); });
                    Promise.all([this.compileNg2Components(compiler, hostViewFactoryRefMap), ng1compilePromise])
                        .then(function () {
                        ngZone.run(function () {
                            if (rootScopePrototype) {
                                rootScopePrototype.$apply = original$applyFn; // restore original $apply
                                while (delayApplyExps.length) {
                                    rootScope.$apply(delayApplyExps.shift());
                                }
                                upgrade._bootstrapDone(applicationRef, ng1Injector);
                                rootScopePrototype = null;
                            }
                        });
                    }, util_13.onError);
                    return upgrade;
                };
                /**
                 * Adds a provider to the top level environment of a hybrid AngularJS v1 / Angular v2 application.
                 *
                 * In hybrid AngularJS v1 / Angular v2 application, there is no one root Angular v2 component,
                 * for this reason we provide an application global way of registering providers which is
                 * consistent with single global injection in AngularJS v1.
                 *
                 * ### Example
                 *
                 * ```
                 * class Greeter {
                 *   greet(name) {
                 *     alert('Hello ' + name + '!');
                 *   }
                 * }
                 *
                 * @Component({
                 *   selector: 'app',
                 *   template: ''
                 * })
                 * class App {
                 *   constructor(greeter: Greeter) {
                 *     this.greeter('World');
                 *   }
                 * }
                 *
                 * var adapter = new UpgradeAdapter();
                 * adapter.addProvider(Greeter);
                 *
                 * var module = angular.module('myExample', []);
                 * module.directive('app', adapter.downgradeNg2Component(App));
                 *
                 * document.body.innerHTML = '<app></app>'
                 * adapter.bootstrap(document.body, ['myExample']);
                 *```
                 */
                UpgradeAdapter.prototype.addProvider = function (provider) { this.providers.push(provider); };
                /**
                 * Allows AngularJS v1 service to be accessible from Angular v2.
                 *
                 *
                 * ### Example
                 *
                 * ```
                 * class Login { ... }
                 * class Server { ... }
                 *
                 * @Injectable()
                 * class Example {
                 *   constructor(@Inject('server') server, login: Login) {
                 *     ...
                 *   }
                 * }
                 *
                 * var module = angular.module('myExample', []);
                 * module.service('server', Server);
                 * module.service('login', Login);
                 *
                 * var adapter = new UpgradeAdapter();
                 * adapter.upgradeNg1Provider('server');
                 * adapter.upgradeNg1Provider('login', {asToken: Login});
                 * adapter.addProvider(Example);
                 *
                 * adapter.bootstrap(document.body, ['myExample']).ready((ref) => {
                 *   var example: Example = ref.ng2Injector.get(Example);
                 * });
                 *
                 * ```
                 */
                UpgradeAdapter.prototype.upgradeNg1Provider = function (name, options) {
                    var token = options && options.asToken || name;
                    this.providers.push(core_99.provide(token, {
                        useFactory: function (ng1Injector) { return ng1Injector.get(name); },
                        deps: [constants_11.NG1_INJECTOR]
                    }));
                };
                /**
                 * Allows Angular v2 service to be accessible from AngularJS v1.
                 *
                 *
                 * ### Example
                 *
                 * ```
                 * class Example {
                 * }
                 *
                 * var adapter = new UpgradeAdapter();
                 * adapter.addProvider(Example);
                 *
                 * var module = angular.module('myExample', []);
                 * module.factory('example', adapter.downgradeNg2Provider(Example));
                 *
                 * adapter.bootstrap(document.body, ['myExample']).ready((ref) => {
                 *   var example: Example = ref.ng1Injector.get('example');
                 * });
                 *
                 * ```
                 */
                UpgradeAdapter.prototype.downgradeNg2Provider = function (token) {
                    var factory = function (injector) { return injector.get(token); };
                    factory.$inject = [constants_11.NG2_INJECTOR];
                    return factory;
                };
                /* @internal */
                UpgradeAdapter.prototype.compileNg2Components = function (compiler, hostViewFactoryRefMap) {
                    var _this = this;
                    var promises = [];
                    var types = this.upgradedComponents;
                    for (var i = 0; i < types.length; i++) {
                        promises.push(compiler.compileInHost(types[i]));
                    }
                    return Promise.all(promises).then(function (hostViewFactories) {
                        var types = _this.upgradedComponents;
                        for (var i = 0; i < hostViewFactories.length; i++) {
                            hostViewFactoryRefMap[metadata_10.getComponentInfo(types[i]).selector] = hostViewFactories[i];
                        }
                        return hostViewFactoryRefMap;
                    }, util_13.onError);
                };
                return UpgradeAdapter;
            }());
            exports_283("UpgradeAdapter", UpgradeAdapter);
            /**
             * Use `UgradeAdapterRef` to control a hybrid AngularJS v1 / Angular v2 application.
             */
            UpgradeAdapterRef = (function () {
                function UpgradeAdapterRef() {
                    /* @internal */
                    this._readyFn = null;
                    this.ng1RootScope = null;
                    this.ng1Injector = null;
                    this.ng2ApplicationRef = null;
                    this.ng2Injector = null;
                }
                /* @internal */
                UpgradeAdapterRef.prototype._bootstrapDone = function (applicationRef, ng1Injector) {
                    this.ng2ApplicationRef = applicationRef;
                    this.ng2Injector = applicationRef.injector;
                    this.ng1Injector = ng1Injector;
                    this.ng1RootScope = ng1Injector.get(constants_11.NG1_ROOT_SCOPE);
                    this._readyFn && this._readyFn(this);
                };
                /**
                 * Register a callback function which is notified upon successful hybrid AngularJS v1 / Angular v2
                 * application has been bootstrapped.
                 *
                 * The `ready` callback function is invoked inside the Angular v2 zone, therefore it does not
                 * require a call to `$apply()`.
                 */
                UpgradeAdapterRef.prototype.ready = function (fn) { this._readyFn = fn; };
                /**
                 * Dispose of running hybrid AngularJS v1 / Angular v2 application.
                 */
                UpgradeAdapterRef.prototype.dispose = function () {
                    this.ng1Injector.get(constants_11.NG1_ROOT_SCOPE).$destroy();
                    this.ng2ApplicationRef.dispose();
                };
                return UpgradeAdapterRef;
            }());
            exports_283("UpgradeAdapterRef", UpgradeAdapterRef);
        }
    }
});
System.register("test/node_modules/angular2/ts/upgrade", ["test/node_modules/angular2/ts/src/upgrade/upgrade_adapter"], function(exports_284, context_284) {
    "use strict";
    var __moduleName = context_284 && context_284.id;
    return {
        setters:[
            function (upgrade_adapter_1_1) {
                exports_284({
                    "UpgradeAdapter": upgrade_adapter_1_1["UpgradeAdapter"],
                    "UpgradeAdapterRef": upgrade_adapter_1_1["UpgradeAdapterRef"]
                });
            }],
        execute: function() {
        }
    }
});
System.register("test/node_modules/angular2/ts/animate/testing", ['angular2/src/mock/animation_builder_mock'], function(exports_285, context_285) {
    "use strict";
    var __moduleName = context_285 && context_285.id;
    function exportStar_11(m) {
        var exports = {};
        for(var n in m) {
            if (n !== "default") exports[n] = m[n];
        }
        exports_285(exports);
    }
    return {
        setters:[
            function (animation_builder_mock_1_1) {
                exportStar_11(animation_builder_mock_1_1);
            }],
        execute: function() {
        }
    }
});
System.register("test/node_modules/angular2/ts/examples/common/forms/ts/validators/validators", ['angular2/core', 'angular2/common'], function(exports_286, context_286) {
    "use strict";
    var __moduleName = context_286 && context_286.id;
    var core_100, common_1;
    var MinLengthTestComponent, MaxLengthTestComponent;
    return {
        setters:[
            function (core_100_1) {
                core_100 = core_100_1;
            },
            function (common_1_1) {
                common_1 = common_1_1;
            }],
        execute: function() {
            // #docregion min
            MinLengthTestComponent = (function () {
                function MinLengthTestComponent() {
                }
                MinLengthTestComponent = __decorate([
                    core_100.Component({
                        selector: 'min-cmp',
                        directives: [common_1.MinLengthValidator],
                        template: "\n<form>\n  <p>Year: <input ngControl=\"year\" minlength=\"2\"></p>\n</form>\n"
                    }), 
                    __metadata('design:paramtypes', [])
                ], MinLengthTestComponent);
                return MinLengthTestComponent;
            }());
            // #enddocregion
            // #docregion max
            MaxLengthTestComponent = (function () {
                function MaxLengthTestComponent() {
                }
                MaxLengthTestComponent = __decorate([
                    core_100.Component({
                        selector: 'max-cmp',
                        directives: [common_1.MaxLengthValidator],
                        template: "\n<form>\n  <p>Year: <input ngControl=\"year\" maxlength=\"4\"></p>\n</form>\n"
                    }), 
                    __metadata('design:paramtypes', [])
                ], MaxLengthTestComponent);
                return MaxLengthTestComponent;
            }());
        }
    }
});
// #enddocregion
System.register("test/node_modules/angular2/ts/examples/compiler/ts/url_resolver/url_resolver", ['angular2/core', 'angular2/bootstrap', 'angular2/compiler'], function(exports_287, context_287) {
    "use strict";
    var __moduleName = context_287 && context_287.id;
    var core_101, bootstrap_1, compiler_8;
    var MyApp, MyUrlResolver;
    return {
        setters:[
            function (core_101_1) {
                core_101 = core_101_1;
            },
            function (bootstrap_1_1) {
                bootstrap_1 = bootstrap_1_1;
            },
            function (compiler_8_1) {
                compiler_8 = compiler_8_1;
            }],
        execute: function() {
            // #docregion url_resolver
            MyUrlResolver = (function (_super) {
                __extends(MyUrlResolver, _super);
                function MyUrlResolver() {
                    _super.apply(this, arguments);
                }
                MyUrlResolver.prototype.resolve = function (baseUrl, url) {
                    // Serve CSS files from a special CDN.
                    if (url.substr(-4) === '.css') {
                        return _super.prototype.resolve.call(this, 'http://cdn.myapp.com/css/', url);
                    }
                    return _super.prototype.resolve.call(this, baseUrl, url);
                };
                return MyUrlResolver;
            }(compiler_8.UrlResolver));
            bootstrap_1.bootstrap(MyApp, [core_101.provide(compiler_8.UrlResolver, { useClass: MyUrlResolver })]);
        }
    }
});
// #enddocregion
System.register("test/node_modules/angular2/ts/examples/core/debug/ts/debug_element/debug_element", [], function(exports_288, context_288) {
    "use strict";
    var __moduleName = context_288 && context_288.id;
    var debugElement, predicate;
    return {
        setters:[],
        execute: function() {
            // #docregion scope_all
            debugElement.query(predicate);
        }
    }
});
// #enddocregion
System.register("test/node_modules/angular2/ts/examples/core/di/ts/forward_ref/forward_ref", ['angular2/core'], function(exports_289, context_289) {
    "use strict";
    var __moduleName = context_289 && context_289.id;
    var core_102;
    var ref, Door, Lock, injector, door;
    return {
        setters:[
            function (core_102_1) {
                core_102 = core_102_1;
            }],
        execute: function() {
            // #docregion forward_ref_fn
            ref = core_102.forwardRef(function () { return Lock; });
            // #enddocregion
            // #docregion forward_ref
            Door = (function () {
                function Door(lock) {
                    this.lock = lock;
                }
                Door = __decorate([
                    __param(0, core_102.Inject(core_102.forwardRef(function () { return Lock; }))), 
                    __metadata('design:paramtypes', [Lock])
                ], Door);
                return Door;
            }());
            // Only at this point Lock is defined.
            Lock = (function () {
                function Lock() {
                }
                return Lock;
            }());
            injector = core_102.Injector.resolveAndCreate([Door, Lock]);
            door = injector.get(Door);
            expect(door instanceof Door).toBe(true);
            expect(door.lock instanceof Lock).toBe(true);
            // #enddocregion
            // #docregion resolve_forward_ref
            ref = core_102.forwardRef(function () { return "refValue"; });
            expect(core_102.resolveForwardRef(ref)).toEqual("refValue");
            expect(core_102.resolveForwardRef("regularValue")).toEqual("regularValue");
        }
    }
});
// #enddocregion 
System.register("test/node_modules/angular2/ts/examples/core/forms/ts/ng_validators/ng_validators", ['angular2/bootstrap', 'angular2/common', 'angular2/core'], function(exports_290, context_290) {
    "use strict";
    var __moduleName = context_290 && context_290.id;
    var bootstrap_2, common_2, core_103;
    var MyApp, myValidator;
    return {
        setters:[
            function (bootstrap_2_1) {
                bootstrap_2 = bootstrap_2_1;
            },
            function (common_2_1) {
                common_2 = common_2_1;
            },
            function (core_103_1) {
                core_103 = core_103_1;
            }],
        execute: function() {
            MyApp = null;
            myValidator = null;
            // #docregion ng_validators
            bootstrap_2.bootstrap(MyApp, [new core_103.Provider(common_2.NG_VALIDATORS, { useValue: myValidator, multi: true })]);
        }
    }
});
// #enddocregion
System.register("test/node_modules/angular2/ts/examples/core/pipes/ts/async_pipe/async_pipe_example", ['angular2/core', 'angular2/bootstrap', 'rxjs/Rx'], function(exports_291, context_291) {
    "use strict";
    var __moduleName = context_291 && context_291.id;
    var core_104, bootstrap_3, Rx_1;
    var AsyncPipeExample, Task, AppCmp;
    function main() {
        bootstrap_3.bootstrap(AppCmp);
    }
    exports_291("main", main);
    return {
        setters:[
            function (core_104_1) {
                core_104 = core_104_1;
            },
            function (bootstrap_3_1) {
                bootstrap_3 = bootstrap_3_1;
            },
            function (Rx_1_1) {
                Rx_1 = Rx_1_1;
            }],
        execute: function() {
            // #docregion AsyncPipe
            AsyncPipeExample = (function () {
                function AsyncPipeExample() {
                    this.greeting = null;
                    this.arrived = false;
                    this.resolve = null;
                    this.reset();
                }
                AsyncPipeExample.prototype.reset = function () {
                    var _this = this;
                    this.arrived = false;
                    this.greeting = new Promise(function (resolve, reject) { _this.resolve = resolve; });
                };
                AsyncPipeExample.prototype.clicked = function () {
                    if (this.arrived) {
                        this.reset();
                    }
                    else {
                        this.resolve("hi there!");
                        this.arrived = true;
                    }
                };
                AsyncPipeExample = __decorate([
                    core_104.Component({
                        selector: 'async-example',
                        template: "<div>\n    <p>Wait for it... {{ greeting | async }}</p>\n    <button (click)=\"clicked()\">{{ arrived ? 'Reset' : 'Resolve' }}</button>\n  </div>"
                    }), 
                    __metadata('design:paramtypes', [])
                ], AsyncPipeExample);
                return AsyncPipeExample;
            }());
            exports_291("AsyncPipeExample", AsyncPipeExample);
            // #enddocregion
            // #docregion AsyncPipeObservable
            Task = (function () {
                function Task() {
                    this.time = new Rx_1.Observable(function (observer) {
                        setInterval(function (_) { return observer.next(new Date().getTime()); }, 500);
                    });
                }
                Task = __decorate([
                    core_104.Component({ selector: "task-cmp", template: "Time: {{ time | async }}" }), 
                    __metadata('design:paramtypes', [])
                ], Task);
                return Task;
            }());
            // #enddocregion
            AppCmp = (function () {
                function AppCmp() {
                }
                AppCmp = __decorate([
                    core_104.Component({
                        selector: 'example-app',
                        directives: [AsyncPipeExample],
                        template: "\n    <h1>AsyncPipe Example</h1>\n    <async-example></async-example>\n  "
                    }), 
                    __metadata('design:paramtypes', [])
                ], AppCmp);
                return AppCmp;
            }());
            exports_291("AppCmp", AppCmp);
        }
    }
});
System.register("test/node_modules/angular2/ts/examples/core/pipes/ts/date_pipe/date_pipe_example", ['angular2/core', 'angular2/bootstrap'], function(exports_292, context_292) {
    "use strict";
    var __moduleName = context_292 && context_292.id;
    var core_105, bootstrap_4;
    var DatePipeExample, AppCmp;
    function main() {
        bootstrap_4.bootstrap(AppCmp);
    }
    exports_292("main", main);
    return {
        setters:[
            function (core_105_1) {
                core_105 = core_105_1;
            },
            function (bootstrap_4_1) {
                bootstrap_4 = bootstrap_4_1;
            }],
        execute: function() {
            // #docregion DatePipe
            DatePipeExample = (function () {
                function DatePipeExample() {
                    this.today = Date.now();
                }
                DatePipeExample = __decorate([
                    core_105.Component({
                        selector: 'date-example',
                        template: "<div>\n    <p>Today is {{today | date}}</p>\n    <p>Or if you prefer, {{today | date:'fullDate'}}</p>\n    <p>The time is {{today | date:'jmZ'}}</p>\n  </div>"
                    }), 
                    __metadata('design:paramtypes', [])
                ], DatePipeExample);
                return DatePipeExample;
            }());
            exports_292("DatePipeExample", DatePipeExample);
            // #enddocregion
            AppCmp = (function () {
                function AppCmp() {
                }
                AppCmp = __decorate([
                    core_105.Component({
                        selector: 'example-app',
                        directives: [DatePipeExample],
                        template: "\n    <h1>DatePipe Example</h1>\n    <date-example></date-example>\n  "
                    }), 
                    __metadata('design:paramtypes', [])
                ], AppCmp);
                return AppCmp;
            }());
            exports_292("AppCmp", AppCmp);
        }
    }
});
System.register("test/node_modules/angular2/ts/examples/core/pipes/ts/json_pipe/json_pipe_example", ['angular2/core', 'angular2/bootstrap'], function(exports_293, context_293) {
    "use strict";
    var __moduleName = context_293 && context_293.id;
    var core_106, bootstrap_5;
    var JsonPipeExample, AppCmp;
    function main() {
        bootstrap_5.bootstrap(AppCmp);
    }
    exports_293("main", main);
    return {
        setters:[
            function (core_106_1) {
                core_106 = core_106_1;
            },
            function (bootstrap_5_1) {
                bootstrap_5 = bootstrap_5_1;
            }],
        execute: function() {
            // #docregion JsonPipe
            JsonPipeExample = (function () {
                function JsonPipeExample() {
                    this.object = { foo: 'bar', baz: 'qux', nested: { xyz: 3, numbers: [1, 2, 3, 4, 5] } };
                }
                JsonPipeExample = __decorate([
                    core_106.Component({
                        selector: 'json-example',
                        template: "<div>\n    <p>Without JSON pipe:</p>\n    <pre>{{object}}</pre>\n    <p>With JSON pipe:</p>\n    <pre>{{object | json}}</pre>\n  </div>"
                    }), 
                    __metadata('design:paramtypes', [])
                ], JsonPipeExample);
                return JsonPipeExample;
            }());
            exports_293("JsonPipeExample", JsonPipeExample);
            // #enddocregion
            AppCmp = (function () {
                function AppCmp() {
                }
                AppCmp = __decorate([
                    core_106.Component({
                        selector: 'example-app',
                        directives: [JsonPipeExample],
                        template: "\n    <h1>JsonPipe Example</h1>\n    <json-example></json-example>\n  "
                    }), 
                    __metadata('design:paramtypes', [])
                ], AppCmp);
                return AppCmp;
            }());
            exports_293("AppCmp", AppCmp);
        }
    }
});
System.register("test/node_modules/angular2/ts/examples/core/pipes/ts/lowerupper_pipe/lowerupper_pipe_example", ['angular2/core', 'angular2/bootstrap'], function(exports_294, context_294) {
    "use strict";
    var __moduleName = context_294 && context_294.id;
    var core_107, bootstrap_6;
    var LowerUpperPipeExample, AppCmp;
    function main() {
        bootstrap_6.bootstrap(AppCmp);
    }
    exports_294("main", main);
    return {
        setters:[
            function (core_107_1) {
                core_107 = core_107_1;
            },
            function (bootstrap_6_1) {
                bootstrap_6 = bootstrap_6_1;
            }],
        execute: function() {
            // #docregion LowerUpperPipe
            LowerUpperPipeExample = (function () {
                function LowerUpperPipeExample() {
                }
                LowerUpperPipeExample.prototype.change = function (value) { this.value = value; };
                LowerUpperPipeExample = __decorate([
                    core_107.Component({
                        selector: 'lowerupper-example',
                        template: "<div>\n    <label>Name: </label><input #name (keyup)=\"change(name.value)\" type=\"text\">\n    <p>In lowercase: <pre>'{{value | lowercase}}'</pre></p>\n    <p>In uppercase: <pre>'{{value | uppercase}}'</pre></p>\n  </div>"
                    }), 
                    __metadata('design:paramtypes', [])
                ], LowerUpperPipeExample);
                return LowerUpperPipeExample;
            }());
            exports_294("LowerUpperPipeExample", LowerUpperPipeExample);
            // #enddocregion
            AppCmp = (function () {
                function AppCmp() {
                }
                AppCmp = __decorate([
                    core_107.Component({
                        selector: 'example-app',
                        directives: [LowerUpperPipeExample],
                        template: "\n    <h1>LowercasePipe &amp; UppercasePipe Example</h1>\n    <lowerupper-example></lowerupper-example>\n  "
                    }), 
                    __metadata('design:paramtypes', [])
                ], AppCmp);
                return AppCmp;
            }());
            exports_294("AppCmp", AppCmp);
        }
    }
});
System.register("test/node_modules/angular2/ts/examples/core/pipes/ts/number_pipe/number_pipe_example", ['angular2/core', 'angular2/bootstrap'], function(exports_295, context_295) {
    "use strict";
    var __moduleName = context_295 && context_295.id;
    var core_108, bootstrap_7;
    var NumberPipeExample, PercentPipeExample, CurrencyPipeExample, AppCmp;
    function main() {
        bootstrap_7.bootstrap(AppCmp);
    }
    exports_295("main", main);
    return {
        setters:[
            function (core_108_1) {
                core_108 = core_108_1;
            },
            function (bootstrap_7_1) {
                bootstrap_7 = bootstrap_7_1;
            }],
        execute: function() {
            // #docregion NumberPipe
            NumberPipeExample = (function () {
                function NumberPipeExample() {
                    this.pi = 3.141;
                    this.e = 2.718281828459045;
                }
                NumberPipeExample = __decorate([
                    core_108.Component({
                        selector: 'number-example',
                        template: "<div>\n    <p>e (no formatting): {{e}}</p>\n    <p>e (3.1-5): {{e | number:'3.1-5'}}</p>\n    <p>pi (no formatting): {{pi}}</p>\n    <p>pi (3.5-5): {{pi | number:'3.5-5'}}</p>\n  </div>"
                    }), 
                    __metadata('design:paramtypes', [])
                ], NumberPipeExample);
                return NumberPipeExample;
            }());
            exports_295("NumberPipeExample", NumberPipeExample);
            // #enddocregion
            // #docregion PercentPipe
            PercentPipeExample = (function () {
                function PercentPipeExample() {
                    this.a = 0.259;
                    this.b = 1.3495;
                }
                PercentPipeExample = __decorate([
                    core_108.Component({
                        selector: 'percent-example',
                        template: "<div>\n    <p>A: {{a | percent}}</p>\n    <p>B: {{b | percent:'4.3-5'}}</p>\n  </div>"
                    }), 
                    __metadata('design:paramtypes', [])
                ], PercentPipeExample);
                return PercentPipeExample;
            }());
            exports_295("PercentPipeExample", PercentPipeExample);
            // #enddocregion
            // #docregion CurrencyPipe
            CurrencyPipeExample = (function () {
                function CurrencyPipeExample() {
                    this.a = 0.259;
                    this.b = 1.3495;
                }
                CurrencyPipeExample = __decorate([
                    core_108.Component({
                        selector: 'currency-example',
                        template: "<div>\n    <p>A: {{a | currency:'USD':false}}</p>\n    <p>B: {{b | currency:'USD':true:'4.2-2'}}</p>\n  </div>"
                    }), 
                    __metadata('design:paramtypes', [])
                ], CurrencyPipeExample);
                return CurrencyPipeExample;
            }());
            exports_295("CurrencyPipeExample", CurrencyPipeExample);
            // #enddocregion
            AppCmp = (function () {
                function AppCmp() {
                }
                AppCmp = __decorate([
                    core_108.Component({
                        selector: 'example-app',
                        directives: [NumberPipeExample, PercentPipeExample, CurrencyPipeExample],
                        template: "\n    <h1>Numeric Pipe Examples</h1>\n    <h2>NumberPipe Example</h2>\n    <number-example></number-example>\n    <h2>PercentPipe Example</h2>\n    <percent-example></percent-example>\n    <h2>CurrencyPipeExample</h2>\n    <currency-example></currency-example>\n  "
                    }), 
                    __metadata('design:paramtypes', [])
                ], AppCmp);
                return AppCmp;
            }());
            exports_295("AppCmp", AppCmp);
        }
    }
});
System.register("test/node_modules/angular2/ts/examples/core/pipes/ts/slice_pipe/slice_pipe_example", ['angular2/core', 'angular2/bootstrap'], function(exports_296, context_296) {
    "use strict";
    var __moduleName = context_296 && context_296.id;
    var core_109, bootstrap_8;
    var SlicePipeStringExample, SlicePipeListExample, AppCmp;
    function main() {
        bootstrap_8.bootstrap(AppCmp);
    }
    exports_296("main", main);
    return {
        setters:[
            function (core_109_1) {
                core_109 = core_109_1;
            },
            function (bootstrap_8_1) {
                bootstrap_8 = bootstrap_8_1;
            }],
        execute: function() {
            // #docregion SlicePipe_string
            SlicePipeStringExample = (function () {
                function SlicePipeStringExample() {
                    this.str = 'abcdefghij';
                }
                SlicePipeStringExample = __decorate([
                    core_109.Component({
                        selector: 'slice-string-example',
                        template: "<div>\n    <p>{{str}}[0:4]: '{{str | slice:0:4}}' - output is expected to be 'abcd'</p>\n    <p>{{str}}[4:0]: '{{str | slice:4:0}}' - output is expected to be ''</p>\n    <p>{{str}}[-4]: '{{str | slice:-4}}' - output is expected to be 'ghij'</p>\n    <p>{{str}}[-4:-2]: '{{str | slice:-4:-2}}' - output is expected to be 'gh'</p>\n    <p>{{str}}[-100]: '{{str | slice:-100}}' - output is expected to be 'abcdefghij'</p>\n    <p>{{str}}[100]: '{{str | slice:100}}' - output is expected to be ''</p>\n  </div>"
                    }), 
                    __metadata('design:paramtypes', [])
                ], SlicePipeStringExample);
                return SlicePipeStringExample;
            }());
            exports_296("SlicePipeStringExample", SlicePipeStringExample);
            // #enddocregion
            // #docregion SlicePipe_list
            SlicePipeListExample = (function () {
                function SlicePipeListExample() {
                    this.collection = ['a', 'b', 'c', 'd'];
                }
                SlicePipeListExample = __decorate([
                    core_109.Component({
                        selector: 'slice-list-example',
                        template: "<div>\n    <li *ngFor=\"var i of collection | slice:1:3\">{{i}}</li>\n  </div>"
                    }), 
                    __metadata('design:paramtypes', [])
                ], SlicePipeListExample);
                return SlicePipeListExample;
            }());
            exports_296("SlicePipeListExample", SlicePipeListExample);
            // #enddocregion
            AppCmp = (function () {
                function AppCmp() {
                }
                AppCmp = __decorate([
                    core_109.Component({
                        selector: 'example-app',
                        directives: [SlicePipeListExample, SlicePipeStringExample],
                        template: "\n    <h1>SlicePipe Examples</h1>\n    <slice-list-example></slice-list-example>\n    <slice-string-example></slice-string-example>\n  "
                    }), 
                    __metadata('design:paramtypes', [])
                ], AppCmp);
                return AppCmp;
            }());
            exports_296("AppCmp", AppCmp);
        }
    }
});
System.register("test/node_modules/angular2/ts/examples/core/ts/bootstrap/bootstrap", ['angular2/core', 'angular2/platform/browser'], function(exports_297, context_297) {
    "use strict";
    var __moduleName = context_297 && context_297.id;
    var core_110, browser_5;
    var MyApp;
    function main() {
        return browser_5.bootstrap(MyApp);
    }
    return {
        setters:[
            function (core_110_1) {
                core_110 = core_110_1;
            },
            function (browser_5_1) {
                browser_5 = browser_5_1;
            }],
        execute: function() {
            // #docregion bootstrap
            MyApp = (function () {
                function MyApp() {
                    this.name = 'World';
                }
                MyApp = __decorate([
                    core_110.Component({ selector: 'my-app', template: 'Hello {{ name }}!' }), 
                    __metadata('design:paramtypes', [])
                ], MyApp);
                return MyApp;
            }());
        }
    }
});
// #enddocregion
System.register("test/node_modules/angular2/ts/examples/core/ts/metadata/metadata", ['angular2/core'], function(exports_298, context_298) {
    "use strict";
    var __moduleName = context_298 && context_298.id;
    var core_111;
    var CustomDirective, Greet, Page, InputAttrDirective, InputDirective, Lowercase;
    return {
        setters:[
            function (core_111_1) {
                core_111 = core_111_1;
            }],
        execute: function() {
            // #docregion component
            Greet = (function () {
                function Greet() {
                    this.name = 'World';
                }
                Greet = __decorate([
                    core_111.Component({ selector: 'greet', template: 'Hello {{name}}!', directives: [CustomDirective] }), 
                    __metadata('design:paramtypes', [])
                ], Greet);
                return Greet;
            }());
            // #enddocregion
            // #docregion attributeFactory
            Page = (function () {
                function Page(title) {
                    this.title = title;
                }
                Page = __decorate([
                    core_111.Component({ selector: 'page', template: 'Title: {{title}}' }),
                    __param(0, core_111.Attribute('title')), 
                    __metadata('design:paramtypes', [String])
                ], Page);
                return Page;
            }());
            // #enddocregion
            // #docregion attributeMetadata
            InputAttrDirective = (function () {
                function InputAttrDirective(type) {
                    // type would be 'text' in this example
                }
                InputAttrDirective = __decorate([
                    core_111.Directive({ selector: 'input' }),
                    __param(0, core_111.Attribute('type')), 
                    __metadata('design:paramtypes', [String])
                ], InputAttrDirective);
                return InputAttrDirective;
            }());
            // #enddocregion
            // #docregion directive
            InputDirective = (function () {
                function InputDirective() {
                    // Add some logic.
                }
                InputDirective = __decorate([
                    core_111.Directive({ selector: 'input' }), 
                    __metadata('design:paramtypes', [])
                ], InputDirective);
                return InputDirective;
            }());
            // #enddocregion
            // #docregion pipe
            Lowercase = (function () {
                function Lowercase() {
                }
                Lowercase.prototype.transform = function (v, args) { return v.toLowerCase(); };
                Lowercase = __decorate([
                    core_111.Pipe({ name: 'lowercase' }), 
                    __metadata('design:paramtypes', [])
                ], Lowercase);
                return Lowercase;
            }());
        }
    }
});
// #enddocregion
System.register("test/node_modules/angular2/ts/examples/core/ts/platform/platform", ['angular2/core', 'angular2/platform/browser'], function(exports_299, context_299) {
    "use strict";
    var __moduleName = context_299 && context_299.id;
    var core_112, browser_6;
    var appProviders, MyApp, app;
    return {
        setters:[
            function (core_112_1) {
                core_112 = core_112_1;
            },
            function (browser_6_1) {
                browser_6 = browser_6_1;
            }],
        execute: function() {
            appProviders = [];
            // #docregion longform
            MyApp = (function () {
                function MyApp() {
                }
                MyApp = __decorate([
                    core_112.Component({ selector: 'my-app', template: 'Hello World' }), 
                    __metadata('design:paramtypes', [])
                ], MyApp);
                return MyApp;
            }());
            app = core_112.platform(browser_6.BROWSER_PROVIDERS).application([browser_6.BROWSER_APP_PROVIDERS, appProviders]);
            app.bootstrap(MyApp);
        }
    }
});
// #enddocregion
System.register("test/node_modules/angular2/ts/examples/core/ts/prod_mode/my_component", ['angular2/core'], function(exports_300, context_300) {
    "use strict";
    var __moduleName = context_300 && context_300.id;
    var core_113;
    var MyComponent;
    return {
        setters:[
            function (core_113_1) {
                core_113 = core_113_1;
            }],
        execute: function() {
            MyComponent = (function () {
                function MyComponent() {
                }
                MyComponent = __decorate([
                    core_113.Component({ selector: 'my-component', template: '<h1>My Component</h1>' }), 
                    __metadata('design:paramtypes', [])
                ], MyComponent);
                return MyComponent;
            }());
            exports_300("MyComponent", MyComponent);
        }
    }
});
System.register("test/node_modules/angular2/ts/examples/core/ts/prod_mode/prod_mode_example", ['angular2/core', 'angular2/bootstrap', "test/node_modules/angular2/ts/examples/core/ts/prod_mode/my_component"], function(exports_301, context_301) {
    "use strict";
    var __moduleName = context_301 && context_301.id;
    var core_114, bootstrap_9, my_component_1;
    return {
        setters:[
            function (core_114_1) {
                core_114 = core_114_1;
            },
            function (bootstrap_9_1) {
                bootstrap_9 = bootstrap_9_1;
            },
            function (my_component_1_1) {
                my_component_1 = my_component_1_1;
            }],
        execute: function() {
            core_114.enableProdMode();
            bootstrap_9.bootstrap(my_component_1.MyComponent);
        }
    }
});
// #enddocregion
System.register("test/node_modules/angular2/ts/examples/facade/ts/async/observable", ['rxjs/Rx'], function(exports_302, context_302) {
    "use strict";
    var __moduleName = context_302 && context_302.id;
    var Rx_2;
    var obs;
    return {
        setters:[
            function (Rx_2_1) {
                Rx_2 = Rx_2_1;
            }],
        execute: function() {
            obs = new Rx_2.Observable(function (obs) {
                var i = 0;
                setInterval(function (_) { obs.next(++i); }, 1000);
            });
            obs.subscribe(function (i) { return console.log(i + " seconds elapsed"); });
        }
    }
});
// #enddocregion
System.register("test/node_modules/angular2/ts/examples/facade/ts/async/observable_all", ['rxjs'], function(exports_303, context_303) {
    "use strict";
    var __moduleName = context_303 && context_303.id;
    return {
        setters:[
            function (_2) {}],
        execute: function() {
        }
    }
});
// #enddocregion
System.register("test/node_modules/angular2/ts/examples/facade/ts/async/observable_patched", ['rxjs/Rx', 'rxjs/add/operator/map'], function(exports_304, context_304) {
    "use strict";
    var __moduleName = context_304 && context_304.id;
    var Rx_3;
    var obs;
    return {
        setters:[
            function (Rx_3_1) {
                Rx_3 = Rx_3_1;
            },
            function (_3) {}],
        execute: function() {
            obs = new Rx_3.Observable(function (obs) {
                var i = 0;
                setInterval(function (_) { return obs.next(++i); }, 1000);
            });
            obs.map(function (i) { return (i + " seconds elapsed"); }).subscribe(function (msg) { return console.log(msg); });
        }
    }
});
// #enddocregion
System.register("test/node_modules/angular2/ts/examples/facade/ts/async/observable_pure", ['rxjs/Rx', 'rxjs/operator/map'], function(exports_305, context_305) {
    "use strict";
    var __moduleName = context_305 && context_305.id;
    var Rx_4, map_1;
    var obs;
    return {
        setters:[
            function (Rx_4_1) {
                Rx_4 = Rx_4_1;
            },
            function (map_1_1) {
                map_1 = map_1_1;
            }],
        execute: function() {
            obs = new Rx_4.Observable(function (sub) {
                var i = 0;
                setInterval(function (_) { return sub.next(++i); }, 1000);
            });
            map_1.map.call(obs, function (i) { return (i + " seconds elapsed"); }).subscribe(function (msg) { return console.log(msg); });
        }
    }
});
// #enddocregion
System.register("test/node_modules/angular2/ts/examples/platform/dom/debug/ts/by/by", ['angular2/platform/browser'], function(exports_306, context_306) {
    "use strict";
    var __moduleName = context_306 && context_306.id;
    var browser_7;
    var debugElement, MyDirective;
    return {
        setters:[
            function (browser_7_1) {
                browser_7 = browser_7_1;
            }],
        execute: function() {
            MyDirective = (function () {
                function MyDirective() {
                }
                return MyDirective;
            }());
            // #docregion by_all
            debugElement.query(browser_7.By.all());
            // #enddocregion
            // #docregion by_css
            debugElement.query(browser_7.By.css('[attribute]'));
            // #enddocregion
            // #docregion by_directive
            debugElement.query(browser_7.By.directive(MyDirective));
        }
    }
});
// #enddocregion
System.register("test/node_modules/angular2/ts/examples/platform/dom/debug/ts/debug_element_view_listener/providers", ['angular2/core', 'angular2/platform/browser'], function(exports_307, context_307) {
    "use strict";
    var __moduleName = context_307 && context_307.id;
    var core_115, browser_8;
    var MyAppComponent;
    return {
        setters:[
            function (core_115_1) {
                core_115 = core_115_1;
            },
            function (browser_8_1) {
                browser_8 = browser_8_1;
            }],
        execute: function() {
            MyAppComponent = (function () {
                function MyAppComponent() {
                }
                MyAppComponent = __decorate([
                    core_115.Component({ selector: 'my-component' }), 
                    __metadata('design:paramtypes', [])
                ], MyAppComponent);
                return MyAppComponent;
            }());
            // #docregion providers
            browser_8.bootstrap(MyAppComponent, [browser_8.ELEMENT_PROBE_PROVIDERS]);
        }
    }
});
// #enddocregion 
System.register("test/node_modules/angular2/ts/examples/router/ts/can_activate/can_activate_example", ['angular2/core', 'angular2/bootstrap', 'angular2/router'], function(exports_308, context_308) {
    "use strict";
    var __moduleName = context_308 && context_308.id;
    var core_116, bootstrap_10, router_3;
    var ControlPanelCmp, HomeCmp, AppCmp;
    function checkIfWeHavePermission(instruction) {
        return instruction.params['id'] == '1';
    }
    function main() {
        return bootstrap_10.bootstrap(AppCmp, [core_116.provide(router_3.APP_BASE_HREF, { useValue: '/angular2/examples/router/ts/can_activate' })]);
    }
    exports_308("main", main);
    return {
        setters:[
            function (core_116_1) {
                core_116 = core_116_1;
            },
            function (bootstrap_10_1) {
                bootstrap_10 = bootstrap_10_1;
            },
            function (router_3_1) {
                router_3 = router_3_1;
            }],
        execute: function() {
            // #docregion canActivate
            ControlPanelCmp = (function () {
                function ControlPanelCmp() {
                }
                ControlPanelCmp = __decorate([
                    core_116.Component({ selector: 'control-panel-cmp', template: "<div>Settings: ...</div>" }),
                    router_3.CanActivate(checkIfWeHavePermission), 
                    __metadata('design:paramtypes', [])
                ], ControlPanelCmp);
                return ControlPanelCmp;
            }());
            // #enddocregion
            HomeCmp = (function () {
                function HomeCmp() {
                }
                HomeCmp = __decorate([
                    core_116.Component({
                        selector: 'home-cmp',
                        template: "\n    <h1>Welcome Home!</h1>\n    <div>\n      Edit <a [routerLink]=\"['/ControlPanelCmp', {id: 1}]\" id=\"user-1-link\">User 1</a> |\n      Edit <a [routerLink]=\"['/ControlPanelCmp', {id: 2}]\" id=\"user-2-link\">User 2</a>\n    </div>\n  ",
                        directives: [router_3.ROUTER_DIRECTIVES]
                    }), 
                    __metadata('design:paramtypes', [])
                ], HomeCmp);
                return HomeCmp;
            }());
            AppCmp = (function () {
                function AppCmp() {
                }
                AppCmp = __decorate([
                    core_116.Component({
                        selector: 'example-app',
                        template: "\n    <h1>My App</h1>\n    <router-outlet></router-outlet>\n  ",
                        directives: [router_3.ROUTER_DIRECTIVES]
                    }),
                    router_3.RouteConfig([
                        { path: '/user-settings/:id', component: ControlPanelCmp, name: 'ControlPanelCmp' },
                        { path: '/', component: HomeCmp, name: 'HomeCmp' }
                    ]), 
                    __metadata('design:paramtypes', [])
                ], AppCmp);
                return AppCmp;
            }());
        }
    }
});
System.register("test/node_modules/angular2/ts/examples/router/ts/can_activate/can_activate_spec", ['angular2/src/testing/e2e_util'], function(exports_309, context_309) {
    "use strict";
    var __moduleName = context_309 && context_309.id;
    var e2e_util_1;
    function waitForElement(selector) {
        var EC = protractor.ExpectedConditions;
        // Waits for the element with id 'abc' to be present on the dom.
        browser.wait(EC.presenceOf($(selector)), 20000);
    }
    return {
        setters:[
            function (e2e_util_1_1) {
                e2e_util_1 = e2e_util_1_1;
            }],
        execute: function() {
            describe('reuse example app', function () {
                afterEach(e2e_util_1.verifyNoBrowserErrors);
                var URL = 'angular2/examples/router/ts/can_activate/';
                it('should navigate to user 1', function () {
                    browser.get(URL);
                    waitForElement('home-cmp');
                    element(by.css('#user-1-link')).click();
                    waitForElement('control-panel-cmp');
                    expect(browser.getCurrentUrl()).toMatch(/\/user-settings\/1$/);
                    expect(element(by.css('control-panel-cmp')).getText()).toContain('Settings');
                });
                it('should not navigate to user 2', function () {
                    browser.get(URL);
                    waitForElement('home-cmp');
                    element(by.css('#user-2-link')).click();
                    waitForElement('home-cmp');
                    expect(element(by.css('home-cmp')).getText()).toContain('Welcome Home!');
                });
            });
        }
    }
});
System.register("test/node_modules/angular2/ts/examples/router/ts/can_deactivate/can_deactivate_example", ['angular2/core', 'angular2/bootstrap', 'angular2/router'], function(exports_310, context_310) {
    "use strict";
    var __moduleName = context_310 && context_310.id;
    var core_117, bootstrap_11, router_4;
    var NoteCmp, NoteIndexCmp, AppCmp;
    function main() {
        return bootstrap_11.bootstrap(AppCmp, [core_117.provide(router_4.APP_BASE_HREF, { useValue: '/angular2/examples/router/ts/can_deactivate' })]);
    }
    exports_310("main", main);
    return {
        setters:[
            function (core_117_1) {
                core_117 = core_117_1;
            },
            function (bootstrap_11_1) {
                bootstrap_11 = bootstrap_11_1;
            },
            function (router_4_1) {
                router_4 = router_4_1;
            }],
        execute: function() {
            // #docregion routerCanDeactivate
            NoteCmp = (function () {
                function NoteCmp(params) {
                    this.id = params.get('id');
                }
                NoteCmp.prototype.routerCanDeactivate = function (next, prev) {
                    return confirm('Are you sure you want to leave?');
                };
                NoteCmp = __decorate([
                    core_117.Component({
                        selector: 'note-cmp',
                        template: "\n    <div>\n      <h2>id: {{id}}</h2>\n      <textarea cols=\"40\" rows=\"10\"></textarea>\n    </div>"
                    }), 
                    __metadata('design:paramtypes', [router_4.RouteParams])
                ], NoteCmp);
                return NoteCmp;
            }());
            // #enddocregion
            NoteIndexCmp = (function () {
                function NoteIndexCmp() {
                }
                NoteIndexCmp = __decorate([
                    core_117.Component({
                        selector: 'note-index-cmp',
                        template: "\n    <h1>Your Notes</h1>\n    <div>\n      Edit <a [routerLink]=\"['/NoteCmp', {id: 1}]\" id=\"note-1-link\">Note 1</a> |\n      Edit <a [routerLink]=\"['/NoteCmp', {id: 2}]\" id=\"note-2-link\">Note 2</a>\n    </div>\n  ",
                        directives: [router_4.ROUTER_DIRECTIVES]
                    }), 
                    __metadata('design:paramtypes', [])
                ], NoteIndexCmp);
                return NoteIndexCmp;
            }());
            AppCmp = (function () {
                function AppCmp() {
                }
                AppCmp = __decorate([
                    core_117.Component({
                        selector: 'example-app',
                        template: "\n    <h1>My App</h1>\n    <router-outlet></router-outlet>\n  ",
                        directives: [router_4.ROUTER_DIRECTIVES]
                    }),
                    router_4.RouteConfig([
                        { path: '/note/:id', component: NoteCmp, name: 'NoteCmp' },
                        { path: '/', component: NoteIndexCmp, name: 'NoteIndexCmp' }
                    ]), 
                    __metadata('design:paramtypes', [])
                ], AppCmp);
                return AppCmp;
            }());
        }
    }
});
System.register("test/node_modules/angular2/ts/examples/router/ts/can_deactivate/can_deactivate_spec", ['angular2/src/testing/e2e_util'], function(exports_311, context_311) {
    "use strict";
    var __moduleName = context_311 && context_311.id;
    var e2e_util_2;
    function waitForElement(selector) {
        var EC = protractor.ExpectedConditions;
        // Waits for the element with id 'abc' to be present on the dom.
        browser.wait(EC.presenceOf($(selector)), 20000);
    }
    function waitForAlert() {
        var EC = protractor.ExpectedConditions;
        browser.wait(EC.alertIsPresent(), 1000);
    }
    return {
        setters:[
            function (e2e_util_2_1) {
                e2e_util_2 = e2e_util_2_1;
            }],
        execute: function() {
            describe('can deactivate example app', function () {
                afterEach(e2e_util_2.verifyNoBrowserErrors);
                var URL = 'angular2/examples/router/ts/can_deactivate/';
                it('should not navigate away when prompt is cancelled', function () {
                    browser.get(URL);
                    waitForElement('note-index-cmp');
                    element(by.css('#note-1-link')).click();
                    waitForElement('note-cmp');
                    browser.navigate().back();
                    waitForAlert();
                    browser.switchTo().alert().dismiss(); // Use to simulate cancel button
                    expect(element(by.css('note-cmp')).getText()).toContain('id: 1');
                });
                it('should navigate away when prompt is confirmed', function () {
                    browser.get(URL);
                    waitForElement('note-index-cmp');
                    element(by.css('#note-1-link')).click();
                    waitForElement('note-cmp');
                    browser.navigate().back();
                    waitForAlert();
                    browser.switchTo().alert().accept();
                    waitForElement('note-index-cmp');
                    expect(element(by.css('note-index-cmp')).getText()).toContain('Your Notes');
                });
            });
        }
    }
});
System.register("test/node_modules/angular2/ts/examples/router/ts/on_activate/on_activate_example", ['angular2/core', 'angular2/bootstrap', 'angular2/router'], function(exports_312, context_312) {
    "use strict";
    var __moduleName = context_312 && context_312.id;
    var core_118, bootstrap_12, router_5;
    var MyCmp, AppCmp;
    function main() {
        return bootstrap_12.bootstrap(AppCmp, [core_118.provide(router_5.APP_BASE_HREF, { useValue: '/angular2/examples/router/ts/on_activate' })]);
    }
    exports_312("main", main);
    return {
        setters:[
            function (core_118_1) {
                core_118 = core_118_1;
            },
            function (bootstrap_12_1) {
                bootstrap_12 = bootstrap_12_1;
            },
            function (router_5_1) {
                router_5 = router_5_1;
            }],
        execute: function() {
            // #docregion routerOnActivate
            MyCmp = (function () {
                function MyCmp() {
                    this.log = '';
                }
                MyCmp.prototype.routerOnActivate = function (next, prev) {
                    this.log = "Finished navigating from \"" + (prev ? prev.urlPath : 'null') + "\" to \"" + next.urlPath + "\"";
                };
                MyCmp = __decorate([
                    core_118.Component({ selector: 'my-cmp', template: "<div>routerOnActivate: {{log}}</div>" }), 
                    __metadata('design:paramtypes', [])
                ], MyCmp);
                return MyCmp;
            }());
            // #enddocregion
            AppCmp = (function () {
                function AppCmp() {
                }
                AppCmp = __decorate([
                    core_118.Component({
                        selector: 'example-app',
                        template: "\n    <h1>My App</h1>\n    <nav>\n      <a [routerLink]=\"['/HomeCmp']\" id=\"home-link\">Navigate Home</a> |\n      <a [routerLink]=\"['/ParamCmp', {param: 1}]\" id=\"param-link\">Navigate with a Param</a>\n    </nav>\n    <router-outlet></router-outlet>\n  ",
                        directives: [router_5.ROUTER_DIRECTIVES]
                    }),
                    router_5.RouteConfig([
                        { path: '/', component: MyCmp, name: 'HomeCmp' },
                        { path: '/:param', component: MyCmp, name: 'ParamCmp' }
                    ]), 
                    __metadata('design:paramtypes', [])
                ], AppCmp);
                return AppCmp;
            }());
        }
    }
});
System.register("test/node_modules/angular2/ts/examples/router/ts/on_activate/on_activate_spec", ['angular2/src/testing/e2e_util'], function(exports_313, context_313) {
    "use strict";
    var __moduleName = context_313 && context_313.id;
    var e2e_util_3;
    function waitForElement(selector) {
        var EC = protractor.ExpectedConditions;
        // Waits for the element with id 'abc' to be present on the dom.
        browser.wait(EC.presenceOf($(selector)), 20000);
    }
    return {
        setters:[
            function (e2e_util_3_1) {
                e2e_util_3 = e2e_util_3_1;
            }],
        execute: function() {
            describe('on activate example app', function () {
                afterEach(e2e_util_3.verifyNoBrowserErrors);
                var URL = 'angular2/examples/router/ts/on_activate/';
                it('should update the text when navigating between routes', function () {
                    browser.get(URL);
                    waitForElement('my-cmp');
                    expect(element(by.css('my-cmp')).getText())
                        .toContain('routerOnActivate: Finished navigating from "null" to ""');
                    element(by.css('#param-link')).click();
                    waitForElement('my-cmp');
                    expect(element(by.css('my-cmp')).getText())
                        .toContain('routerOnActivate: Finished navigating from "" to "1"');
                    browser.navigate().back();
                    waitForElement('my-cmp');
                    expect(element(by.css('my-cmp')).getText())
                        .toContain('routerOnActivate: Finished navigating from "1" to ""');
                });
            });
        }
    }
});
System.register("test/node_modules/angular2/ts/examples/router/ts/on_deactivate/on_deactivate_example", ['angular2/core', 'angular2/bootstrap', 'angular2/router'], function(exports_314, context_314) {
    "use strict";
    var __moduleName = context_314 && context_314.id;
    var core_119, bootstrap_13, router_6;
    var LogService, MyCmp, AppCmp;
    function main() {
        return bootstrap_13.bootstrap(AppCmp, [
            core_119.provide(router_6.APP_BASE_HREF, { useValue: '/angular2/examples/router/ts/on_deactivate' }),
            LogService
        ]);
    }
    exports_314("main", main);
    return {
        setters:[
            function (core_119_1) {
                core_119 = core_119_1;
            },
            function (bootstrap_13_1) {
                bootstrap_13 = bootstrap_13_1;
            },
            function (router_6_1) {
                router_6 = router_6_1;
            }],
        execute: function() {
            LogService = (function () {
                function LogService() {
                    this.logs = [];
                }
                LogService.prototype.addLog = function (message) { this.logs.push(message); };
                LogService = __decorate([
                    core_119.Injectable(), 
                    __metadata('design:paramtypes', [])
                ], LogService);
                return LogService;
            }());
            // #docregion routerOnDeactivate
            MyCmp = (function () {
                function MyCmp(logService) {
                    this.logService = logService;
                }
                MyCmp.prototype.routerOnDeactivate = function (next, prev) {
                    this.logService.addLog("Navigating from \"" + (prev ? prev.urlPath : 'null') + "\" to \"" + next.urlPath + "\"");
                };
                MyCmp = __decorate([
                    core_119.Component({ selector: 'my-cmp', template: "<div>hello</div>" }), 
                    __metadata('design:paramtypes', [LogService])
                ], MyCmp);
                return MyCmp;
            }());
            // #enddocregion
            AppCmp = (function () {
                function AppCmp(logService) {
                    this.logService = logService;
                }
                AppCmp = __decorate([
                    core_119.Component({
                        selector: 'example-app',
                        template: "\n    <h1>My App</h1>\n    <nav>\n      <a [routerLink]=\"['/HomeCmp']\" id=\"home-link\">Navigate Home</a> |\n      <a [routerLink]=\"['/ParamCmp', {param: 1}]\" id=\"param-link\">Navigate with a Param</a>\n    </nav>\n    <router-outlet></router-outlet>\n    <div id=\"log\">\n      <h2>Log:</h2>\n      <p *ngFor=\"#logItem of logService.logs\">{{ logItem }}</p>\n    </div>\n  ",
                        directives: [router_6.ROUTER_DIRECTIVES]
                    }),
                    router_6.RouteConfig([
                        { path: '/', component: MyCmp, name: 'HomeCmp' },
                        { path: '/:param', component: MyCmp, name: 'ParamCmp' }
                    ]), 
                    __metadata('design:paramtypes', [LogService])
                ], AppCmp);
                return AppCmp;
            }());
        }
    }
});
System.register("test/node_modules/angular2/ts/examples/router/ts/on_deactivate/on_deactivate_spec", ['angular2/src/testing/e2e_util'], function(exports_315, context_315) {
    "use strict";
    var __moduleName = context_315 && context_315.id;
    var e2e_util_4;
    function waitForElement(selector) {
        var EC = protractor.ExpectedConditions;
        // Waits for the element with id 'abc' to be present on the dom.
        browser.wait(EC.presenceOf($(selector)), 20000);
    }
    return {
        setters:[
            function (e2e_util_4_1) {
                e2e_util_4 = e2e_util_4_1;
            }],
        execute: function() {
            describe('on activate example app', function () {
                afterEach(e2e_util_4.verifyNoBrowserErrors);
                var URL = 'angular2/examples/router/ts/on_deactivate/';
                it('should update the text when navigating between routes', function () {
                    browser.get(URL);
                    waitForElement('my-cmp');
                    expect(element(by.css('#log')).getText()).toEqual('Log:');
                    element(by.css('#param-link')).click();
                    waitForElement('my-cmp');
                    expect(element(by.css('#log')).getText()).toEqual('Log:\nNavigating from "" to "1"');
                    browser.navigate().back();
                    waitForElement('my-cmp');
                    expect(element(by.css('#log')).getText())
                        .toEqual('Log:\nNavigating from "" to "1"\nNavigating from "1" to ""');
                });
            });
        }
    }
});
System.register("test/node_modules/angular2/ts/examples/router/ts/reuse/reuse_example", ['angular2/core', 'angular2/bootstrap', 'angular2/router'], function(exports_316, context_316) {
    "use strict";
    var __moduleName = context_316 && context_316.id;
    var core_120, bootstrap_14, router_7;
    var MyCmp, AppCmp;
    function main() {
        return bootstrap_14.bootstrap(AppCmp, [core_120.provide(router_7.APP_BASE_HREF, { useValue: '/angular2/examples/router/ts/reuse' })]);
    }
    exports_316("main", main);
    return {
        setters:[
            function (core_120_1) {
                core_120 = core_120_1;
            },
            function (bootstrap_14_1) {
                bootstrap_14 = bootstrap_14_1;
            },
            function (router_7_1) {
                router_7 = router_7_1;
            }],
        execute: function() {
            // #docregion reuseCmp
            MyCmp = (function () {
                function MyCmp(params) {
                    this.name = params.get('name') || 'NOBODY';
                }
                MyCmp.prototype.routerCanReuse = function (next, prev) { return true; };
                MyCmp.prototype.routerOnReuse = function (next, prev) {
                    this.name = next.params['name'];
                };
                MyCmp = __decorate([
                    core_120.Component({
                        selector: 'my-cmp',
                        template: "\n    <div>hello {{name}}!</div>\n    <div>message: <input id=\"message\"></div>\n  "
                    }), 
                    __metadata('design:paramtypes', [router_7.RouteParams])
                ], MyCmp);
                return MyCmp;
            }());
            // #enddocregion
            AppCmp = (function () {
                function AppCmp() {
                }
                AppCmp = __decorate([
                    core_120.Component({
                        selector: 'example-app',
                        template: "\n    <h1>Say hi to...</h1>\n    <a [routerLink]=\"['/HomeCmp', {name: 'naomi'}]\" id=\"naomi-link\">Naomi</a> |\n    <a [routerLink]=\"['/HomeCmp', {name: 'brad'}]\" id=\"brad-link\">Brad</a>\n    <router-outlet></router-outlet>\n  ",
                        directives: [router_7.ROUTER_DIRECTIVES]
                    }),
                    router_7.RouteConfig([
                        { path: '/', component: MyCmp, name: 'HomeCmp' },
                        { path: '/:name', component: MyCmp, name: 'HomeCmp' }
                    ]), 
                    __metadata('design:paramtypes', [])
                ], AppCmp);
                return AppCmp;
            }());
        }
    }
});
System.register("test/node_modules/angular2/ts/examples/router/ts/reuse/reuse_spec", ['angular2/src/testing/e2e_util'], function(exports_317, context_317) {
    "use strict";
    var __moduleName = context_317 && context_317.id;
    var e2e_util_5;
    function waitForElement(selector) {
        var EC = protractor.ExpectedConditions;
        // Waits for the element with id 'abc' to be present on the dom.
        browser.wait(EC.presenceOf($(selector)), 20000);
    }
    return {
        setters:[
            function (e2e_util_5_1) {
                e2e_util_5 = e2e_util_5_1;
            }],
        execute: function() {
            describe('reuse example app', function () {
                afterEach(e2e_util_5.verifyNoBrowserErrors);
                var URL = 'angular2/examples/router/ts/reuse/';
                it('should build a link which points to the detail page', function () {
                    browser.get(URL);
                    waitForElement('my-cmp');
                    element(by.css('#naomi-link')).click();
                    waitForElement('my-cmp');
                    expect(browser.getCurrentUrl()).toMatch(/\/naomi$/);
                    // type something into input
                    element(by.css('#message')).sendKeys('long time no see!');
                    // navigate to Brad
                    element(by.css('#brad-link')).click();
                    waitForElement('my-cmp');
                    expect(browser.getCurrentUrl()).toMatch(/\/brad$/);
                    // check that typed input is the same
                    expect(element(by.css('#message')).getAttribute('value')).toEqual('long time no see!');
                });
            });
        }
    }
});
System.register("test/node_modules/angular2/ts/examples/testing/ts/fake_async", ['angular2/testing'], function(exports_318, context_318) {
    "use strict";
    var __moduleName = context_318 && context_318.id;
    var testing_2;
    return {
        setters:[
            function (testing_2_1) {
                testing_2 = testing_2_1;
            }],
        execute: function() {
            // #docregion basic
            testing_2.describe('this test', function () {
                testing_2.it('looks async but is synchronous', testing_2.fakeAsync(function () {
                    var flag = false;
                    setTimeout(function () { flag = true; }, 100);
                    testing_2.expect(flag).toBe(false);
                    testing_2.tick(50);
                    testing_2.expect(flag).toBe(false);
                    testing_2.tick(50);
                    testing_2.expect(flag).toBe(true);
                }));
            });
            // #enddocregion
            // #docregion pending
            testing_2.describe('this test', function () {
                testing_2.it('aborts a timer', testing_2.fakeAsync(function () {
                    // This timer is scheduled but doesn't need to complete for the
                    // test to pass (maybe it's a timeout for some operation).
                    // Leaving it will cause the test to fail...
                    setTimeout(function () { }, 100);
                    // Unless we clean it up first.
                    testing_2.clearPendingTimers();
                }));
            });
        }
    }
});
// #enddocregion 
System.register("test/node_modules/angular2/ts/examples/testing/ts/matchers", ['angular2/testing'], function(exports_319, context_319) {
    "use strict";
    var __moduleName = context_319 && context_319.id;
    var testing_3;
    var value, element, exception, OtherClass, SomeClass;
    return {
        setters:[
            function (testing_3_1) {
                testing_3 = testing_3_1;
            }],
        execute: function() {
            OtherClass = (function () {
                function OtherClass() {
                }
                return OtherClass;
            }());
            SomeClass = (function () {
                function SomeClass() {
                }
                return SomeClass;
            }());
            // #docregion toBePromise
            testing_3.expect(value).toBePromise();
            // #enddocregion
            // #docregion toBeAnInstanceOf
            testing_3.expect(value).toBeAnInstanceOf(SomeClass);
            // #enddocregion
            // #docregion toHaveText
            testing_3.expect(element).toHaveText('Hello world!');
            // #enddocregion
            // #docregion toHaveCssClass
            testing_3.expect(element).toHaveCssClass('current');
            // #enddocregion
            // #docregion toHaveCssStyle
            testing_3.expect(element).toHaveCssStyle({ width: '100px', height: 'auto' });
            // #enddocregion
            // #docregion toContainError
            testing_3.expect(exception).toContainError('Failed to load');
            // #enddocregion
            // #docregion toThrowErrorWith
            testing_3.expect(function () { throw 'Failed to load'; }).toThrowErrorWith('Failed to load');
            // #enddocregion
            // #docregion toImplement
            testing_3.expect(SomeClass).toImplement(OtherClass);
        }
    }
});
// #enddocregion
System.register("test/node_modules/angular2/ts/examples/testing/ts/testing", ['angular2/testing', 'angular2/core'], function(exports_320, context_320) {
    "use strict";
    var __moduleName = context_320 && context_320.id;
    var testing_4, core_121;
    var db, MyService, MyMockService;
    return {
        setters:[
            function (testing_4_1) {
                testing_4 = testing_4_1;
            },
            function (core_121_1) {
                core_121 = core_121_1;
            }],
        execute: function() {
            MyService = (function () {
                function MyService() {
                }
                return MyService;
            }());
            MyMockService = (function () {
                function MyMockService() {
                }
                return MyMockService;
            }());
            // #docregion describeIt
            testing_4.describe('some component', function () {
                testing_4.it('does something', function () {
                    // This is a test.
                });
            });
            // #enddocregion
            // #docregion fdescribe
            testing_4.fdescribe('some component', function () {
                testing_4.it('has a test', function () {
                    // This test will run.
                });
            });
            testing_4.describe('another component', function () { testing_4.it('also has a test', function () { throw 'This test will not run.'; }); });
            // #enddocregion
            // #docregion xdescribe
            testing_4.xdescribe('some component', function () { testing_4.it('has a test', function () { throw 'This test will not run.'; }); });
            testing_4.describe('another component', function () {
                testing_4.it('also has a test', function () {
                    // This test will run.
                });
            });
            // #enddocregion
            // #docregion fit
            testing_4.describe('some component', function () {
                testing_4.fit('has a test', function () {
                    // This test will run.
                });
                testing_4.it('has another test', function () { throw 'This test will not run.'; });
            });
            // #enddocregion
            // #docregion xit
            testing_4.describe('some component', function () {
                testing_4.xit('has a test', function () { throw 'This test will not run.'; });
                testing_4.it('has another test', function () {
                    // This test will run.
                });
            });
            // #enddocregion
            // #docregion beforeEach
            testing_4.describe('some component', function () {
                testing_4.beforeEach(function () { db.connect(); });
                testing_4.it('uses the db', function () {
                    // Database is connected.
                });
            });
            // #enddocregion
            // #docregion beforeEachProviders
            testing_4.describe('some component', function () {
                testing_4.beforeEachProviders(function () { return [core_121.provide(MyService, { useClass: MyMockService })]; });
                testing_4.it('uses MyService', testing_4.inject([MyService], function (service) {
                    // service is an instance of MyMockService.
                }));
            });
            // #enddocregion
            // #docregion afterEach
            testing_4.describe('some component', function () {
                testing_4.afterEach(function (done) { db.reset().then(function (_) { return done(); }); });
                testing_4.it('uses the db', function () {
                    // This test can leave the database in a dirty state.
                    // The afterEach will ensure it gets reset.
                });
            });
        }
    }
});
// #enddocregion
System.register("test/node_modules/angular2/ts/http/testing", ['angular2/src/http/backends/mock_backend'], function(exports_321, context_321) {
    "use strict";
    var __moduleName = context_321 && context_321.id;
    function exportStar_12(m) {
        var exports = {};
        for(var n in m) {
            if (n !== "default") exports[n] = m[n];
        }
        exports_321(exports);
    }
    return {
        setters:[
            function (mock_backend_1_1) {
                exportStar_12(mock_backend_1_1);
            }],
        execute: function() {
        }
    }
});
System.register("test/node_modules/angular2/ts/platform/browser", ['angular2/src/core/angular_entrypoint', 'angular2/src/platform/browser_common', 'angular2/src/facade/lang', 'angular2/compiler', 'angular2/core', 'angular2/src/core/reflection/reflection_capabilities', "angular2/src/platform/browser/xhr_impl", 'angular2/src/core/di'], function(exports_322, context_322) {
    "use strict";
    var __moduleName = context_322 && context_322.id;
    var lang_168, browser_common_1, compiler_9, core_122, reflection_capabilities_2, xhr_impl_1, compiler_10, di_38;
    var BROWSER_APP_PROVIDERS;
    /**
     * Bootstrapping for Angular applications.
     *
     * You instantiate an Angular application by explicitly specifying a component to use
     * as the root component for your application via the `bootstrap()` method.
     *
     * ## Simple Example
     *
     * Assuming this `index.html`:
     *
     * ```html
     * <html>
     *   <!-- load Angular script tags here. -->
     *   <body>
     *     <my-app>loading...</my-app>
     *   </body>
     * </html>
     * ```
     *
     * An application is bootstrapped inside an existing browser DOM, typically `index.html`.
     * Unlike Angular 1, Angular 2 does not compile/process providers in `index.html`. This is
     * mainly for security reasons, as well as architectural changes in Angular 2. This means
     * that `index.html` can safely be processed using server-side technologies such as
     * providers. Bindings can thus use double-curly `{{ syntax }}` without collision from
     * Angular 2 component double-curly `{{ syntax }}`.
     *
     * We can use this script code:
     *
     * {@example core/ts/bootstrap/bootstrap.ts region='bootstrap'}
     *
     * When the app developer invokes `bootstrap()` with the root component `MyApp` as its
     * argument, Angular performs the following tasks:
     *
     *  1. It uses the component's `selector` property to locate the DOM element which needs
     *     to be upgraded into the angular component.
     *  2. It creates a new child injector (from the platform injector). Optionally, you can
     *     also override the injector configuration for an app by invoking `bootstrap` with the
     *     `componentInjectableBindings` argument.
     *  3. It creates a new `Zone` and connects it to the angular application's change detection
     *     domain instance.
     *  4. It creates an emulated or shadow DOM on the selected component's host element and loads the
     *     template into it.
     *  5. It instantiates the specified component.
     *  6. Finally, Angular performs change detection to apply the initial data providers for the
     *     application.
     *
     *
     * ## Bootstrapping Multiple Applications
     *
     * When working within a browser window, there are many singleton resources: cookies, title,
     * location, and others. Angular services that represent these resources must likewise be
     * shared across all Angular applications that occupy the same browser window. For this
     * reason, Angular creates exactly one global platform object which stores all shared
     * services, and each angular application injector has the platform injector as its parent.
     *
     * Each application has its own private injector as well. When there are multiple
     * applications on a page, Angular treats each application injector's services as private
     * to that application.
     *
     * ## API
     *
     * - `appComponentType`: The root component which should act as the application. This is
     *   a reference to a `Type` which is annotated with `@Component(...)`.
     * - `customProviders`: An additional set of providers that can be added to the
     *   app injector to override default injection behavior.
     *
     * Returns a `Promise` of {@link ComponentRef}.
     */
    function bootstrap(appComponentType, customProviders) {
        core_122.reflector.reflectionCapabilities = new reflection_capabilities_2.ReflectionCapabilities();
        var appProviders = lang_168.isPresent(customProviders) ? [BROWSER_APP_PROVIDERS, customProviders] : BROWSER_APP_PROVIDERS;
        return core_122.platform(browser_common_1.BROWSER_PROVIDERS).application(appProviders).bootstrap(appComponentType);
    }
    exports_322("bootstrap", bootstrap);
    return {
        setters:[
            function (angular_entrypoint_3_1) {
                exports_322({
                    "AngularEntrypoint": angular_entrypoint_3_1["AngularEntrypoint"]
                });
            },
            function (browser_common_2_1) {
                exports_322({
                    "BROWSER_PROVIDERS": browser_common_2_1["BROWSER_PROVIDERS"],
                    "ELEMENT_PROBE_PROVIDERS": browser_common_2_1["ELEMENT_PROBE_PROVIDERS"],
                    "ELEMENT_PROBE_PROVIDERS_PROD_MODE": browser_common_2_1["ELEMENT_PROBE_PROVIDERS_PROD_MODE"],
                    "inspectNativeElement": browser_common_2_1["inspectNativeElement"],
                    "BrowserDomAdapter": browser_common_2_1["BrowserDomAdapter"],
                    "By": browser_common_2_1["By"],
                    "Title": browser_common_2_1["Title"],
                    "DOCUMENT": browser_common_2_1["DOCUMENT"],
                    "enableDebugTools": browser_common_2_1["enableDebugTools"],
                    "disableDebugTools": browser_common_2_1["disableDebugTools"]
                });
                browser_common_1 = browser_common_2_1;
            },
            function (lang_168_1) {
                lang_168 = lang_168_1;
            },
            function (compiler_9_1) {
                compiler_9 = compiler_9_1;
                compiler_10 = compiler_9_1;
            },
            function (core_122_1) {
                core_122 = core_122_1;
            },
            function (reflection_capabilities_2_1) {
                reflection_capabilities_2 = reflection_capabilities_2_1;
            },
            function (xhr_impl_1_1) {
                xhr_impl_1 = xhr_impl_1_1;
            },
            function (di_38_1) {
                di_38 = di_38_1;
            }],
        execute: function() {
            /**
             * An array of providers that should be passed into `application()` when bootstrapping a component.
             */
            exports_322("BROWSER_APP_PROVIDERS", BROWSER_APP_PROVIDERS = lang_168.CONST_EXPR([
                browser_common_1.BROWSER_APP_COMMON_PROVIDERS,
                compiler_9.COMPILER_PROVIDERS,
                new di_38.Provider(compiler_10.XHR, { useClass: xhr_impl_1.XHRImpl }),
            ]));
        }
    }
});
System.register("test/node_modules/angular2/ts/platform/browser_static", ['angular2/src/core/angular_entrypoint', 'angular2/src/platform/browser_common', 'angular2/src/facade/lang', 'angular2/core'], function(exports_323, context_323) {
    "use strict";
    var __moduleName = context_323 && context_323.id;
    var lang_169, browser_common_3, core_123;
    var BROWSER_APP_PROVIDERS;
    /**
     * See {@link bootstrap} for more information.
     */
    function bootstrapStatic(appComponentType, customProviders, initReflector) {
        if (lang_169.isPresent(initReflector)) {
            initReflector();
        }
        var appProviders = lang_169.isPresent(customProviders) ? [BROWSER_APP_PROVIDERS, customProviders] : BROWSER_APP_PROVIDERS;
        return core_123.platform(browser_common_3.BROWSER_PROVIDERS).application(appProviders).bootstrap(appComponentType);
    }
    exports_323("bootstrapStatic", bootstrapStatic);
    return {
        setters:[
            function (angular_entrypoint_4_1) {
                exports_323({
                    "AngularEntrypoint": angular_entrypoint_4_1["AngularEntrypoint"]
                });
            },
            function (browser_common_4_1) {
                exports_323({
                    "BROWSER_PROVIDERS": browser_common_4_1["BROWSER_PROVIDERS"],
                    "ELEMENT_PROBE_PROVIDERS": browser_common_4_1["ELEMENT_PROBE_PROVIDERS"],
                    "ELEMENT_PROBE_PROVIDERS_PROD_MODE": browser_common_4_1["ELEMENT_PROBE_PROVIDERS_PROD_MODE"],
                    "inspectNativeElement": browser_common_4_1["inspectNativeElement"],
                    "BrowserDomAdapter": browser_common_4_1["BrowserDomAdapter"],
                    "By": browser_common_4_1["By"],
                    "Title": browser_common_4_1["Title"],
                    "enableDebugTools": browser_common_4_1["enableDebugTools"],
                    "disableDebugTools": browser_common_4_1["disableDebugTools"]
                });
                browser_common_3 = browser_common_4_1;
            },
            function (lang_169_1) {
                lang_169 = lang_169_1;
            },
            function (core_123_1) {
                core_123 = core_123_1;
            }],
        execute: function() {
            /**
             * An array of providers that should be passed into `application()` when bootstrapping a component
             * when all templates
             * have been precompiled offline.
             */
            exports_323("BROWSER_APP_PROVIDERS", BROWSER_APP_PROVIDERS = browser_common_3.BROWSER_APP_COMMON_PROVIDERS);
        }
    }
});
System.register("test/node_modules/angular2/ts/platform/common_dom", ['angular2/src/platform/dom/dom_adapter', 'angular2/src/platform/dom/dom_renderer', 'angular2/src/platform/dom/dom_tokens', 'angular2/src/platform/dom/shared_styles_host', 'angular2/src/platform/dom/events/dom_events', 'angular2/src/platform/dom/events/event_manager', 'angular2/src/platform/dom/debug/by', 'angular2/src/platform/dom/debug/ng_probe'], function(exports_324, context_324) {
    "use strict";
    var __moduleName = context_324 && context_324.id;
    var exportedNames_7 = {
        'DOM': true,
        'setRootDomAdapter': true,
        'DomAdapter': true,
        'DomRenderer': true,
        'DOCUMENT': true,
        'SharedStylesHost': true,
        'DomSharedStylesHost': true,
        'DomEventsPlugin': true,
        'EVENT_MANAGER_PLUGINS': true,
        'EventManager': true,
        'EventManagerPlugin': true
    };
    function exportStar_13(m) {
        var exports = {};
        for(var n in m) {
            if (n !== "default"&& !exportedNames_7.hasOwnProperty(n)) exports[n] = m[n];
        }
        exports_324(exports);
    }
    return {
        setters:[
            function (dom_adapter_6_1) {
                exports_324({
                    "DOM": dom_adapter_6_1["DOM"],
                    "setRootDomAdapter": dom_adapter_6_1["setRootDomAdapter"],
                    "DomAdapter": dom_adapter_6_1["DomAdapter"]
                });
            },
            function (dom_renderer_1_1) {
                exports_324({
                    "DomRenderer": dom_renderer_1_1["DomRenderer"]
                });
            },
            function (dom_tokens_2_1) {
                exports_324({
                    "DOCUMENT": dom_tokens_2_1["DOCUMENT"]
                });
            },
            function (shared_styles_host_1_1) {
                exports_324({
                    "SharedStylesHost": shared_styles_host_1_1["SharedStylesHost"],
                    "DomSharedStylesHost": shared_styles_host_1_1["DomSharedStylesHost"]
                });
            },
            function (dom_events_1_1) {
                exports_324({
                    "DomEventsPlugin": dom_events_1_1["DomEventsPlugin"]
                });
            },
            function (event_manager_1_1) {
                exports_324({
                    "EVENT_MANAGER_PLUGINS": event_manager_1_1["EVENT_MANAGER_PLUGINS"],
                    "EventManager": event_manager_1_1["EventManager"],
                    "EventManagerPlugin": event_manager_1_1["EventManagerPlugin"]
                });
            },
            function (by_1_1) {
                exportStar_13(by_1_1);
            },
            function (ng_probe_1_1) {
                exportStar_13(ng_probe_1_1);
            }],
        execute: function() {
        }
    }
});
System.register("test/node_modules/angular2/ts/platform/server", ['angular2/src/platform/server/parse5_adapter'], function(exports_325, context_325) {
    "use strict";
    var __moduleName = context_325 && context_325.id;
    return {
        setters:[
            function (parse5_adapter_1_1) {
                exports_325({
                    "Parse5DomAdapter": parse5_adapter_1_1["Parse5DomAdapter"]
                });
            }],
        execute: function() {
        }
    }
});
System.register("test/node_modules/angular2/ts/platform/worker_app", ['angular2/src/platform/worker_app_common', 'angular2/src/platform/worker_app', 'angular2/src/web_workers/shared/client_message_broker', 'angular2/src/web_workers/shared/service_message_broker', 'angular2/src/web_workers/shared/serializer', 'angular2/src/web_workers/shared/message_bus', 'angular2/src/core/angular_entrypoint', 'angular2/src/web_workers/worker/router_providers'], function(exports_326, context_326) {
    "use strict";
    var __moduleName = context_326 && context_326.id;
    var exportedNames_8 = {
        'WORKER_APP_PLATFORM': true,
        'WORKER_APP_APPLICATION_COMMON': true,
        'WORKER_APP_APPLICATION': true,
        'ClientMessageBroker': true,
        'ClientMessageBrokerFactory': true,
        'FnArg': true,
        'UiArguments': true,
        'ReceivedMessage': true,
        'ServiceMessageBroker': true,
        'ServiceMessageBrokerFactory': true,
        'PRIMITIVE': true,
        'AngularEntrypoint': true,
        'WORKER_APP_ROUTER': true
    };
    function exportStar_14(m) {
        var exports = {};
        for(var n in m) {
            if (n !== "default"&& !exportedNames_8.hasOwnProperty(n)) exports[n] = m[n];
        }
        exports_326(exports);
    }
    return {
        setters:[
            function (worker_app_common_1_1) {
                exports_326({
                    "WORKER_APP_PLATFORM": worker_app_common_1_1["WORKER_APP_PLATFORM"],
                    "WORKER_APP_APPLICATION_COMMON": worker_app_common_1_1["WORKER_APP_APPLICATION_COMMON"]
                });
            },
            function (worker_app_1_1) {
                exports_326({
                    "WORKER_APP_APPLICATION": worker_app_1_1["WORKER_APP_APPLICATION"]
                });
            },
            function (client_message_broker_1_1) {
                exports_326({
                    "ClientMessageBroker": client_message_broker_1_1["ClientMessageBroker"],
                    "ClientMessageBrokerFactory": client_message_broker_1_1["ClientMessageBrokerFactory"],
                    "FnArg": client_message_broker_1_1["FnArg"],
                    "UiArguments": client_message_broker_1_1["UiArguments"]
                });
            },
            function (service_message_broker_1_1) {
                exports_326({
                    "ReceivedMessage": service_message_broker_1_1["ReceivedMessage"],
                    "ServiceMessageBroker": service_message_broker_1_1["ServiceMessageBroker"],
                    "ServiceMessageBrokerFactory": service_message_broker_1_1["ServiceMessageBrokerFactory"]
                });
            },
            function (serializer_1_1) {
                exports_326({
                    "PRIMITIVE": serializer_1_1["PRIMITIVE"]
                });
            },
            function (message_bus_1_1) {
                exportStar_14(message_bus_1_1);
            },
            function (angular_entrypoint_5_1) {
                exports_326({
                    "AngularEntrypoint": angular_entrypoint_5_1["AngularEntrypoint"]
                });
            },
            function (router_providers_2_1) {
                exports_326({
                    "WORKER_APP_ROUTER": router_providers_2_1["WORKER_APP_ROUTER"]
                });
            }],
        execute: function() {
        }
    }
});
System.register("test/node_modules/angular2/ts/src/web_workers/shared/client_message_broker", ["angular2/src/web_workers/shared/message_bus", "angular2/src/facade/lang", "angular2/src/facade/async", "angular2/src/facade/collection", "angular2/src/web_workers/shared/serializer", "angular2/src/core/di"], function(exports_327, context_327) {
    "use strict";
    var __moduleName = context_327 && context_327.id;
    var message_bus_2, lang_170, async_29, collection_73, serializer_2, di_39, lang_171;
    var ClientMessageBrokerFactory, ClientMessageBrokerFactory_, ClientMessageBroker, ClientMessageBroker_, MessageData, FnArg, UiArguments;
    return {
        setters:[
            function (message_bus_2_1) {
                message_bus_2 = message_bus_2_1;
            },
            function (lang_170_1) {
                lang_170 = lang_170_1;
                lang_171 = lang_170_1;
                exports_327({
                    "Type": lang_170_1["Type"]
                });
            },
            function (async_29_1) {
                async_29 = async_29_1;
            },
            function (collection_73_1) {
                collection_73 = collection_73_1;
            },
            function (serializer_2_1) {
                serializer_2 = serializer_2_1;
            },
            function (di_39_1) {
                di_39 = di_39_1;
            }],
        execute: function() {
            ClientMessageBrokerFactory = (function () {
                function ClientMessageBrokerFactory() {
                }
                return ClientMessageBrokerFactory;
            }());
            exports_327("ClientMessageBrokerFactory", ClientMessageBrokerFactory);
            ClientMessageBrokerFactory_ = (function (_super) {
                __extends(ClientMessageBrokerFactory_, _super);
                function ClientMessageBrokerFactory_(_messageBus, _serializer) {
                    _super.call(this);
                    this._messageBus = _messageBus;
                    this._serializer = _serializer;
                }
                /**
                 * Initializes the given channel and attaches a new {@link ClientMessageBroker} to it.
                 */
                ClientMessageBrokerFactory_.prototype.createMessageBroker = function (channel, runInZone) {
                    if (runInZone === void 0) { runInZone = true; }
                    this._messageBus.initChannel(channel, runInZone);
                    return new ClientMessageBroker_(this._messageBus, this._serializer, channel);
                };
                ClientMessageBrokerFactory_ = __decorate([
                    di_39.Injectable(), 
                    __metadata('design:paramtypes', [message_bus_2.MessageBus, serializer_2.Serializer])
                ], ClientMessageBrokerFactory_);
                return ClientMessageBrokerFactory_;
            }(ClientMessageBrokerFactory));
            exports_327("ClientMessageBrokerFactory_", ClientMessageBrokerFactory_);
            ClientMessageBroker = (function () {
                function ClientMessageBroker() {
                }
                return ClientMessageBroker;
            }());
            exports_327("ClientMessageBroker", ClientMessageBroker);
            ClientMessageBroker_ = (function (_super) {
                __extends(ClientMessageBroker_, _super);
                function ClientMessageBroker_(messageBus, _serializer, channel) {
                    var _this = this;
                    _super.call(this);
                    this.channel = channel;
                    this._pending = new Map();
                    this._sink = messageBus.to(channel);
                    this._serializer = _serializer;
                    var source = messageBus.from(channel);
                    async_29.ObservableWrapper.subscribe(source, function (message) { return _this._handleMessage(message); });
                }
                ClientMessageBroker_.prototype._generateMessageId = function (name) {
                    var time = lang_170.stringify(lang_170.DateWrapper.toMillis(lang_170.DateWrapper.now()));
                    var iteration = 0;
                    var id = name + time + lang_170.stringify(iteration);
                    while (lang_170.isPresent(this._pending[id])) {
                        id = "" + name + time + iteration;
                        iteration++;
                    }
                    return id;
                };
                ClientMessageBroker_.prototype.runOnService = function (args, returnType) {
                    var _this = this;
                    var fnArgs = [];
                    if (lang_170.isPresent(args.args)) {
                        args.args.forEach(function (argument) {
                            if (argument.type != null) {
                                fnArgs.push(_this._serializer.serialize(argument.value, argument.type));
                            }
                            else {
                                fnArgs.push(argument.value);
                            }
                        });
                    }
                    var promise;
                    var id = null;
                    if (returnType != null) {
                        var completer = async_29.PromiseWrapper.completer();
                        id = this._generateMessageId(args.method);
                        this._pending.set(id, completer);
                        async_29.PromiseWrapper.catchError(completer.promise, function (err, stack) {
                            lang_170.print(err);
                            completer.reject(err, stack);
                        });
                        promise = async_29.PromiseWrapper.then(completer.promise, function (value) {
                            if (_this._serializer == null) {
                                return value;
                            }
                            else {
                                return _this._serializer.deserialize(value, returnType);
                            }
                        });
                    }
                    else {
                        promise = null;
                    }
                    // TODO(jteplitz602): Create a class for these messages so we don't keep using StringMap #3685
                    var message = { 'method': args.method, 'args': fnArgs };
                    if (id != null) {
                        message['id'] = id;
                    }
                    async_29.ObservableWrapper.callEmit(this._sink, message);
                    return promise;
                };
                ClientMessageBroker_.prototype._handleMessage = function (message) {
                    var data = new MessageData(message);
                    // TODO(jteplitz602): replace these strings with messaging constants #3685
                    if (lang_171.StringWrapper.equals(data.type, "result") || lang_171.StringWrapper.equals(data.type, "error")) {
                        var id = data.id;
                        if (this._pending.has(id)) {
                            if (lang_171.StringWrapper.equals(data.type, "result")) {
                                this._pending.get(id).resolve(data.value);
                            }
                            else {
                                this._pending.get(id).reject(data.value, null);
                            }
                            this._pending.delete(id);
                        }
                    }
                };
                return ClientMessageBroker_;
            }(ClientMessageBroker));
            exports_327("ClientMessageBroker_", ClientMessageBroker_);
            MessageData = (function () {
                function MessageData(data) {
                    this.type = collection_73.StringMapWrapper.get(data, "type");
                    this.id = this._getValueIfPresent(data, "id");
                    this.value = this._getValueIfPresent(data, "value");
                }
                /**
                 * Returns the value from the StringMap if present. Otherwise returns null
                 * @internal
                 */
                MessageData.prototype._getValueIfPresent = function (data, key) {
                    if (collection_73.StringMapWrapper.contains(data, key)) {
                        return collection_73.StringMapWrapper.get(data, key);
                    }
                    else {
                        return null;
                    }
                };
                return MessageData;
            }());
            FnArg = (function () {
                function FnArg(value, type) {
                    this.value = value;
                    this.type = type;
                }
                return FnArg;
            }());
            exports_327("FnArg", FnArg);
            UiArguments = (function () {
                function UiArguments(method, args) {
                    this.method = method;
                    this.args = args;
                }
                return UiArguments;
            }());
            exports_327("UiArguments", UiArguments);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/web_workers/shared/service_message_broker", ['angular2/src/core/di', 'angular2/src/facade/collection', "angular2/src/web_workers/shared/serializer", "angular2/src/facade/lang", "angular2/src/web_workers/shared/message_bus", 'angular2/src/facade/async'], function(exports_328, context_328) {
    "use strict";
    var __moduleName = context_328 && context_328.id;
    var di_40, collection_74, serializer_3, lang_173, message_bus_3, async_30;
    var ServiceMessageBrokerFactory, ServiceMessageBrokerFactory_, ServiceMessageBroker, ServiceMessageBroker_, ReceivedMessage;
    return {
        setters:[
            function (di_40_1) {
                di_40 = di_40_1;
            },
            function (collection_74_1) {
                collection_74 = collection_74_1;
            },
            function (serializer_3_1) {
                serializer_3 = serializer_3_1;
            },
            function (lang_173_1) {
                lang_173 = lang_173_1;
            },
            function (message_bus_3_1) {
                message_bus_3 = message_bus_3_1;
            },
            function (async_30_1) {
                async_30 = async_30_1;
            }],
        execute: function() {
            ServiceMessageBrokerFactory = (function () {
                function ServiceMessageBrokerFactory() {
                }
                return ServiceMessageBrokerFactory;
            }());
            exports_328("ServiceMessageBrokerFactory", ServiceMessageBrokerFactory);
            ServiceMessageBrokerFactory_ = (function (_super) {
                __extends(ServiceMessageBrokerFactory_, _super);
                function ServiceMessageBrokerFactory_(_messageBus, _serializer) {
                    _super.call(this);
                    this._messageBus = _messageBus;
                    this._serializer = _serializer;
                }
                ServiceMessageBrokerFactory_.prototype.createMessageBroker = function (channel, runInZone) {
                    if (runInZone === void 0) { runInZone = true; }
                    this._messageBus.initChannel(channel, runInZone);
                    return new ServiceMessageBroker_(this._messageBus, this._serializer, channel);
                };
                ServiceMessageBrokerFactory_ = __decorate([
                    di_40.Injectable(), 
                    __metadata('design:paramtypes', [message_bus_3.MessageBus, serializer_3.Serializer])
                ], ServiceMessageBrokerFactory_);
                return ServiceMessageBrokerFactory_;
            }(ServiceMessageBrokerFactory));
            exports_328("ServiceMessageBrokerFactory_", ServiceMessageBrokerFactory_);
            ServiceMessageBroker = (function () {
                function ServiceMessageBroker() {
                }
                return ServiceMessageBroker;
            }());
            exports_328("ServiceMessageBroker", ServiceMessageBroker);
            /**
             * Helper class for UIComponents that allows components to register methods.
             * If a registered method message is received from the broker on the worker,
             * the UIMessageBroker deserializes its arguments and calls the registered method.
             * If that method returns a promise, the UIMessageBroker returns the result to the worker.
             */
            ServiceMessageBroker_ = (function (_super) {
                __extends(ServiceMessageBroker_, _super);
                function ServiceMessageBroker_(messageBus, _serializer, channel) {
                    var _this = this;
                    _super.call(this);
                    this._serializer = _serializer;
                    this.channel = channel;
                    this._methods = new collection_74.Map();
                    this._sink = messageBus.to(channel);
                    var source = messageBus.from(channel);
                    async_30.ObservableWrapper.subscribe(source, function (message) { return _this._handleMessage(message); });
                }
                ServiceMessageBroker_.prototype.registerMethod = function (methodName, signature, method, returnType) {
                    var _this = this;
                    this._methods.set(methodName, function (message) {
                        var serializedArgs = message.args;
                        var numArgs = signature === null ? 0 : signature.length;
                        var deserializedArgs = collection_74.ListWrapper.createFixedSize(numArgs);
                        for (var i = 0; i < numArgs; i++) {
                            var serializedArg = serializedArgs[i];
                            deserializedArgs[i] = _this._serializer.deserialize(serializedArg, signature[i]);
                        }
                        var promise = lang_173.FunctionWrapper.apply(method, deserializedArgs);
                        if (lang_173.isPresent(returnType) && lang_173.isPresent(promise)) {
                            _this._wrapWebWorkerPromise(message.id, promise, returnType);
                        }
                    });
                };
                ServiceMessageBroker_.prototype._handleMessage = function (map) {
                    var message = new ReceivedMessage(map);
                    if (this._methods.has(message.method)) {
                        this._methods.get(message.method)(message);
                    }
                };
                ServiceMessageBroker_.prototype._wrapWebWorkerPromise = function (id, promise, type) {
                    var _this = this;
                    async_30.PromiseWrapper.then(promise, function (result) {
                        async_30.ObservableWrapper.callEmit(_this._sink, { 'type': 'result', 'value': _this._serializer.serialize(result, type), 'id': id });
                    });
                };
                return ServiceMessageBroker_;
            }(ServiceMessageBroker));
            exports_328("ServiceMessageBroker_", ServiceMessageBroker_);
            ReceivedMessage = (function () {
                function ReceivedMessage(data) {
                    this.method = data['method'];
                    this.args = data['args'];
                    this.id = data['id'];
                    this.type = data['type'];
                }
                return ReceivedMessage;
            }());
            exports_328("ReceivedMessage", ReceivedMessage);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/web_workers/shared/serialized_types", [], function(exports_329, context_329) {
    "use strict";
    var __moduleName = context_329 && context_329.id;
    var LocationType;
    return {
        setters:[],
        execute: function() {
            // This file contains interface versions of browser types that can be serialized to Plain Old
            // JavaScript Objects
            LocationType = (function () {
                function LocationType(href, protocol, host, hostname, port, pathname, search, hash, origin) {
                    this.href = href;
                    this.protocol = protocol;
                    this.host = host;
                    this.hostname = hostname;
                    this.port = port;
                    this.pathname = pathname;
                    this.search = search;
                    this.hash = hash;
                    this.origin = origin;
                }
                return LocationType;
            }());
            exports_329("LocationType", LocationType);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/web_workers/shared/serializer", ["angular2/src/facade/lang", 'angular2/src/facade/exceptions', "angular2/src/facade/collection", "angular2/src/core/render/api", "angular2/src/core/di", 'angular2/src/web_workers/shared/render_store', 'angular2/src/core/metadata/view', "test/node_modules/angular2/ts/src/web_workers/shared/serialized_types"], function(exports_330, context_330) {
    "use strict";
    var __moduleName = context_330 && context_330.id;
    var lang_174, exceptions_66, collection_75, api_5, di_41, render_store_1, view_13, serialized_types_1;
    var PRIMITIVE, Serializer, RenderStoreObject;
    return {
        setters:[
            function (lang_174_1) {
                lang_174 = lang_174_1;
            },
            function (exceptions_66_1) {
                exceptions_66 = exceptions_66_1;
            },
            function (collection_75_1) {
                collection_75 = collection_75_1;
            },
            function (api_5_1) {
                api_5 = api_5_1;
            },
            function (di_41_1) {
                di_41 = di_41_1;
            },
            function (render_store_1_1) {
                render_store_1 = render_store_1_1;
            },
            function (view_13_1) {
                view_13 = view_13_1;
            },
            function (serialized_types_1_1) {
                serialized_types_1 = serialized_types_1_1;
            }],
        execute: function() {
            // PRIMITIVE is any type that does not need to be serialized (string, number, boolean)
            // We set it to String so that it is considered a Type.
            exports_330("PRIMITIVE", PRIMITIVE = String);
            Serializer = (function () {
                function Serializer(_renderStore) {
                    this._renderStore = _renderStore;
                }
                Serializer.prototype.serialize = function (obj, type) {
                    var _this = this;
                    if (!lang_174.isPresent(obj)) {
                        return null;
                    }
                    if (lang_174.isArray(obj)) {
                        return obj.map(function (v) { return _this.serialize(v, type); });
                    }
                    if (type == PRIMITIVE) {
                        return obj;
                    }
                    if (type == RenderStoreObject) {
                        return this._renderStore.serialize(obj);
                    }
                    else if (type === api_5.RenderComponentType) {
                        return this._serializeRenderComponentType(obj);
                    }
                    else if (type === view_13.ViewEncapsulation) {
                        return lang_174.serializeEnum(obj);
                    }
                    else if (type === serialized_types_1.LocationType) {
                        return this._serializeLocation(obj);
                    }
                    else {
                        throw new exceptions_66.BaseException("No serializer for " + type.toString());
                    }
                };
                Serializer.prototype.deserialize = function (map, type, data) {
                    var _this = this;
                    if (!lang_174.isPresent(map)) {
                        return null;
                    }
                    if (lang_174.isArray(map)) {
                        var obj = [];
                        map.forEach(function (val) { return obj.push(_this.deserialize(val, type, data)); });
                        return obj;
                    }
                    if (type == PRIMITIVE) {
                        return map;
                    }
                    if (type == RenderStoreObject) {
                        return this._renderStore.deserialize(map);
                    }
                    else if (type === api_5.RenderComponentType) {
                        return this._deserializeRenderComponentType(map);
                    }
                    else if (type === view_13.ViewEncapsulation) {
                        return view_13.VIEW_ENCAPSULATION_VALUES[map];
                    }
                    else if (type === serialized_types_1.LocationType) {
                        return this._deserializeLocation(map);
                    }
                    else {
                        throw new exceptions_66.BaseException("No deserializer for " + type.toString());
                    }
                };
                Serializer.prototype.mapToObject = function (map, type) {
                    var _this = this;
                    var object = {};
                    var serialize = lang_174.isPresent(type);
                    map.forEach(function (value, key) {
                        if (serialize) {
                            object[key] = _this.serialize(value, type);
                        }
                        else {
                            object[key] = value;
                        }
                    });
                    return object;
                };
                /*
                 * Transforms a Javascript object (StringMap) into a Map<string, V>
                 * If the values need to be deserialized pass in their type
                 * and they will be deserialized before being placed in the map
                 */
                Serializer.prototype.objectToMap = function (obj, type, data) {
                    var _this = this;
                    if (lang_174.isPresent(type)) {
                        var map = new collection_75.Map();
                        collection_75.StringMapWrapper.forEach(obj, function (val, key) { map.set(key, _this.deserialize(val, type, data)); });
                        return map;
                    }
                    else {
                        return collection_75.MapWrapper.createFromStringMap(obj);
                    }
                };
                Serializer.prototype._serializeLocation = function (loc) {
                    return {
                        'href': loc.href,
                        'protocol': loc.protocol,
                        'host': loc.host,
                        'hostname': loc.hostname,
                        'port': loc.port,
                        'pathname': loc.pathname,
                        'search': loc.search,
                        'hash': loc.hash,
                        'origin': loc.origin
                    };
                };
                Serializer.prototype._deserializeLocation = function (loc) {
                    return new serialized_types_1.LocationType(loc['href'], loc['protocol'], loc['host'], loc['hostname'], loc['port'], loc['pathname'], loc['search'], loc['hash'], loc['origin']);
                };
                Serializer.prototype._serializeRenderComponentType = function (obj) {
                    return {
                        'id': obj.id,
                        'encapsulation': this.serialize(obj.encapsulation, view_13.ViewEncapsulation),
                        'styles': this.serialize(obj.styles, PRIMITIVE)
                    };
                };
                Serializer.prototype._deserializeRenderComponentType = function (map) {
                    return new api_5.RenderComponentType(map['id'], this.deserialize(map['encapsulation'], view_13.ViewEncapsulation), this.deserialize(map['styles'], PRIMITIVE));
                };
                Serializer = __decorate([
                    di_41.Injectable(), 
                    __metadata('design:paramtypes', [render_store_1.RenderStore])
                ], Serializer);
                return Serializer;
            }());
            exports_330("Serializer", Serializer);
            RenderStoreObject = (function () {
                function RenderStoreObject() {
                }
                return RenderStoreObject;
            }());
            exports_330("RenderStoreObject", RenderStoreObject);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/web_workers/shared/message_bus", ['angular2/src/facade/async'], function(exports_331, context_331) {
    "use strict";
    var __moduleName = context_331 && context_331.id;
    var MessageBus;
    return {
        setters:[
            function (async_31_1) {
                exports_331({
                    "EventEmitter": async_31_1["EventEmitter"],
                    "Observable": async_31_1["Observable"]
                });
            }],
        execute: function() {
            /**
             * Message Bus is a low level API used to communicate between the UI and the background.
             * Communication is based on a channel abstraction. Messages published in a
             * given channel to one MessageBusSink are received on the same channel
             * by the corresponding MessageBusSource.
             */
            MessageBus = (function () {
                function MessageBus() {
                }
                return MessageBus;
            }());
            exports_331("MessageBus", MessageBus);
        }
    }
});
System.register("test/node_modules/angular2/ts/platform/worker_render", ['angular2/src/platform/worker_render_common', 'angular2/src/platform/worker_render', "test/node_modules/angular2/ts/src/web_workers/shared/client_message_broker", "test/node_modules/angular2/ts/src/web_workers/shared/service_message_broker", "test/node_modules/angular2/ts/src/web_workers/shared/serializer", "test/node_modules/angular2/ts/src/web_workers/shared/message_bus", 'angular2/src/web_workers/ui/router_providers'], function(exports_332, context_332) {
    "use strict";
    var __moduleName = context_332 && context_332.id;
    var worker_render_1;
    var WORKER_RENDER_APP;
    var exportedNames_9 = {
        'WORKER_RENDER_APP': true,
        'WORKER_SCRIPT': true,
        'WORKER_RENDER_PLATFORM': true,
        'initializeGenericWorkerRenderer': true,
        'WORKER_RENDER_APPLICATION_COMMON': true,
        'WORKER_RENDER_APPLICATION': true,
        'WebWorkerInstance': true,
        'ClientMessageBroker': true,
        'ClientMessageBrokerFactory': true,
        'FnArg': true,
        'UiArguments': true,
        'ReceivedMessage': true,
        'ServiceMessageBroker': true,
        'ServiceMessageBrokerFactory': true,
        'PRIMITIVE': true,
        'WORKER_RENDER_ROUTER': true
    };
    function exportStar_15(m) {
        var exports = {};
        for(var n in m) {
            if (n !== "default"&& !exportedNames_9.hasOwnProperty(n)) exports[n] = m[n];
        }
        exports_332(exports);
    }
    return {
        setters:[
            function (worker_render_common_1_1) {
                exports_332({
                    "WORKER_SCRIPT": worker_render_common_1_1["WORKER_SCRIPT"],
                    "WORKER_RENDER_PLATFORM": worker_render_common_1_1["WORKER_RENDER_PLATFORM"],
                    "initializeGenericWorkerRenderer": worker_render_common_1_1["initializeGenericWorkerRenderer"],
                    "WORKER_RENDER_APPLICATION_COMMON": worker_render_common_1_1["WORKER_RENDER_APPLICATION_COMMON"]
                });
            },
            function (worker_render_2_1) {
                exports_332({
                    "WORKER_RENDER_APPLICATION": worker_render_2_1["WORKER_RENDER_APPLICATION"],
                    "WebWorkerInstance": worker_render_2_1["WebWorkerInstance"]
                });
                worker_render_1 = worker_render_2_1;
            },
            function (client_message_broker_2_1) {
                exports_332({
                    "ClientMessageBroker": client_message_broker_2_1["ClientMessageBroker"],
                    "ClientMessageBrokerFactory": client_message_broker_2_1["ClientMessageBrokerFactory"],
                    "FnArg": client_message_broker_2_1["FnArg"],
                    "UiArguments": client_message_broker_2_1["UiArguments"]
                });
            },
            function (service_message_broker_2_1) {
                exports_332({
                    "ReceivedMessage": service_message_broker_2_1["ReceivedMessage"],
                    "ServiceMessageBroker": service_message_broker_2_1["ServiceMessageBroker"],
                    "ServiceMessageBrokerFactory": service_message_broker_2_1["ServiceMessageBrokerFactory"]
                });
            },
            function (serializer_4_1) {
                exports_332({
                    "PRIMITIVE": serializer_4_1["PRIMITIVE"]
                });
            },
            function (message_bus_4_1) {
                exportStar_15(message_bus_4_1);
            },
            function (router_providers_3_1) {
                exports_332({
                    "WORKER_RENDER_ROUTER": router_providers_3_1["WORKER_RENDER_ROUTER"]
                });
            }],
        execute: function() {
            /**
             * @deprecated Use WORKER_RENDER_APPLICATION
             */
            exports_332("WORKER_RENDER_APP", WORKER_RENDER_APP = worker_render_1.WORKER_RENDER_APPLICATION);
        }
    }
});
System.register("test/node_modules/angular2/ts/platform/testing/browser", ['angular2/platform/testing/browser_static', 'angular2/platform/browser', 'angular2/src/facade/lang'], function(exports_333, context_333) {
    "use strict";
    var __moduleName = context_333 && context_333.id;
    var browser_static_2, browser_9, lang_175;
    var TEST_BROWSER_PLATFORM_PROVIDERS, TEST_BROWSER_APPLICATION_PROVIDERS;
    return {
        setters:[
            function (browser_static_2_1) {
                browser_static_2 = browser_static_2_1;
            },
            function (browser_9_1) {
                browser_9 = browser_9_1;
            },
            function (lang_175_1) {
                lang_175 = lang_175_1;
            }],
        execute: function() {
            /**
             * Default patform providers for testing.
             */
            exports_333("TEST_BROWSER_PLATFORM_PROVIDERS", TEST_BROWSER_PLATFORM_PROVIDERS = lang_175.CONST_EXPR([browser_static_2.TEST_BROWSER_STATIC_PLATFORM_PROVIDERS]));
            /**
             * Default application providers for testing.
             */
            exports_333("TEST_BROWSER_APPLICATION_PROVIDERS", TEST_BROWSER_APPLICATION_PROVIDERS = lang_175.CONST_EXPR([browser_9.BROWSER_APP_PROVIDERS, browser_static_2.ADDITIONAL_TEST_BROWSER_PROVIDERS]));
        }
    }
});
System.register("test/node_modules/angular2/ts/platform/testing/browser_static", ['angular2/core', 'angular2/src/platform/browser_common', 'angular2/src/platform/browser/browser_adapter', 'angular2/src/animate/animation_builder', 'angular2/src/mock/animation_builder_mock', 'angular2/src/mock/directive_resolver_mock', 'angular2/src/mock/view_resolver_mock', 'angular2/src/mock/mock_location_strategy', 'angular2/src/router/location/location_strategy', 'angular2/src/mock/ng_zone_mock', "angular2/src/platform/browser/xhr_impl", 'angular2/compiler', 'angular2/src/testing/test_component_builder', 'angular2/src/testing/utils', 'angular2/platform/common_dom', 'angular2/src/facade/lang'], function(exports_334, context_334) {
    "use strict";
    var __moduleName = context_334 && context_334.id;
    var core_124, browser_common_5, browser_adapter_1, animation_builder_2, animation_builder_mock_2, directive_resolver_mock_2, view_resolver_mock_2, mock_location_strategy_1, location_strategy_5, ng_zone_mock_2, xhr_impl_2, compiler_11, test_component_builder_3, utils_5, common_dom_1, lang_176, utils_6;
    var TEST_BROWSER_STATIC_PLATFORM_PROVIDERS, ADDITIONAL_TEST_BROWSER_PROVIDERS, TEST_BROWSER_STATIC_APPLICATION_PROVIDERS;
    function initBrowserTests() {
        browser_adapter_1.BrowserDomAdapter.makeCurrent();
        utils_5.BrowserDetection.setup();
    }
    return {
        setters:[
            function (core_124_1) {
                core_124 = core_124_1;
            },
            function (browser_common_5_1) {
                browser_common_5 = browser_common_5_1;
            },
            function (browser_adapter_1_1) {
                browser_adapter_1 = browser_adapter_1_1;
            },
            function (animation_builder_2_1) {
                animation_builder_2 = animation_builder_2_1;
            },
            function (animation_builder_mock_2_1) {
                animation_builder_mock_2 = animation_builder_mock_2_1;
            },
            function (directive_resolver_mock_2_1) {
                directive_resolver_mock_2 = directive_resolver_mock_2_1;
            },
            function (view_resolver_mock_2_1) {
                view_resolver_mock_2 = view_resolver_mock_2_1;
            },
            function (mock_location_strategy_1_1) {
                mock_location_strategy_1 = mock_location_strategy_1_1;
            },
            function (location_strategy_5_1) {
                location_strategy_5 = location_strategy_5_1;
            },
            function (ng_zone_mock_2_1) {
                ng_zone_mock_2 = ng_zone_mock_2_1;
            },
            function (xhr_impl_2_1) {
                xhr_impl_2 = xhr_impl_2_1;
            },
            function (compiler_11_1) {
                compiler_11 = compiler_11_1;
            },
            function (test_component_builder_3_1) {
                test_component_builder_3 = test_component_builder_3_1;
            },
            function (utils_5_1) {
                utils_5 = utils_5_1;
                utils_6 = utils_5_1;
            },
            function (common_dom_1_1) {
                common_dom_1 = common_dom_1_1;
            },
            function (lang_176_1) {
                lang_176 = lang_176_1;
            }],
        execute: function() {
            /**
             * Default patform providers for testing without a compiler.
             */
            exports_334("TEST_BROWSER_STATIC_PLATFORM_PROVIDERS", TEST_BROWSER_STATIC_PLATFORM_PROVIDERS = lang_176.CONST_EXPR([
                core_124.PLATFORM_COMMON_PROVIDERS,
                new core_124.Provider(core_124.PLATFORM_INITIALIZER, { useValue: initBrowserTests, multi: true })
            ]));
            exports_334("ADDITIONAL_TEST_BROWSER_PROVIDERS", ADDITIONAL_TEST_BROWSER_PROVIDERS = lang_176.CONST_EXPR([
                new core_124.Provider(core_124.APP_ID, { useValue: 'a' }),
                common_dom_1.ELEMENT_PROBE_PROVIDERS,
                new core_124.Provider(core_124.DirectiveResolver, { useClass: directive_resolver_mock_2.MockDirectiveResolver }),
                new core_124.Provider(core_124.ViewResolver, { useClass: view_resolver_mock_2.MockViewResolver }),
                utils_6.Log,
                test_component_builder_3.TestComponentBuilder,
                new core_124.Provider(core_124.NgZone, { useClass: ng_zone_mock_2.MockNgZone }),
                new core_124.Provider(location_strategy_5.LocationStrategy, { useClass: mock_location_strategy_1.MockLocationStrategy }),
                new core_124.Provider(animation_builder_2.AnimationBuilder, { useClass: animation_builder_mock_2.MockAnimationBuilder }),
            ]));
            /**
             * Default application providers for testing without a compiler.
             */
            exports_334("TEST_BROWSER_STATIC_APPLICATION_PROVIDERS", TEST_BROWSER_STATIC_APPLICATION_PROVIDERS = lang_176.CONST_EXPR([
                browser_common_5.BROWSER_APP_COMMON_PROVIDERS,
                new core_124.Provider(compiler_11.XHR, { useClass: xhr_impl_2.XHRImpl }),
                ADDITIONAL_TEST_BROWSER_PROVIDERS
            ]));
        }
    }
});
System.register("test/node_modules/angular2/ts/platform/testing/server", ['angular2/core', 'angular2/src/platform/server/parse5_adapter', 'angular2/src/animate/animation_builder', 'angular2/src/mock/animation_builder_mock', 'angular2/src/mock/directive_resolver_mock', 'angular2/src/mock/view_resolver_mock', 'angular2/src/mock/mock_location_strategy', 'angular2/src/router/location/location_strategy', 'angular2/src/mock/ng_zone_mock', 'angular2/src/testing/test_component_builder', 'angular2/src/compiler/xhr', 'angular2/src/testing/utils', 'angular2/src/compiler/compiler', 'angular2/src/platform/dom/dom_tokens', 'angular2/src/platform/dom/dom_adapter', 'angular2/src/core/render/api', 'angular2/src/platform/dom/dom_renderer', 'angular2/src/platform/dom/shared_styles_host', 'angular2/platform/common_dom', 'angular2/src/platform/dom/events/dom_events', 'angular2/src/facade/lang'], function(exports_335, context_335) {
    "use strict";
    var __moduleName = context_335 && context_335.id;
    var core_125, parse5_adapter_2, animation_builder_3, animation_builder_mock_3, directive_resolver_mock_3, view_resolver_mock_3, mock_location_strategy_2, location_strategy_6, ng_zone_mock_3, test_component_builder_4, xhr_4, utils_7, compiler_12, dom_tokens_3, dom_adapter_7, api_6, dom_renderer_2, shared_styles_host_2, common_dom_2, dom_events_2, lang_177, utils_8;
    var TEST_SERVER_PLATFORM_PROVIDERS, TEST_SERVER_APPLICATION_PROVIDERS;
    function initServerTests() {
        parse5_adapter_2.Parse5DomAdapter.makeCurrent();
        utils_7.BrowserDetection.setup();
    }
    function appDoc() {
        try {
            return dom_adapter_7.DOM.defaultDoc();
        }
        catch (e) {
            return null;
        }
    }
    return {
        setters:[
            function (core_125_1) {
                core_125 = core_125_1;
            },
            function (parse5_adapter_2_1) {
                parse5_adapter_2 = parse5_adapter_2_1;
            },
            function (animation_builder_3_1) {
                animation_builder_3 = animation_builder_3_1;
            },
            function (animation_builder_mock_3_1) {
                animation_builder_mock_3 = animation_builder_mock_3_1;
            },
            function (directive_resolver_mock_3_1) {
                directive_resolver_mock_3 = directive_resolver_mock_3_1;
            },
            function (view_resolver_mock_3_1) {
                view_resolver_mock_3 = view_resolver_mock_3_1;
            },
            function (mock_location_strategy_2_1) {
                mock_location_strategy_2 = mock_location_strategy_2_1;
            },
            function (location_strategy_6_1) {
                location_strategy_6 = location_strategy_6_1;
            },
            function (ng_zone_mock_3_1) {
                ng_zone_mock_3 = ng_zone_mock_3_1;
            },
            function (test_component_builder_4_1) {
                test_component_builder_4 = test_component_builder_4_1;
            },
            function (xhr_4_1) {
                xhr_4 = xhr_4_1;
            },
            function (utils_7_1) {
                utils_7 = utils_7_1;
                utils_8 = utils_7_1;
            },
            function (compiler_12_1) {
                compiler_12 = compiler_12_1;
            },
            function (dom_tokens_3_1) {
                dom_tokens_3 = dom_tokens_3_1;
            },
            function (dom_adapter_7_1) {
                dom_adapter_7 = dom_adapter_7_1;
            },
            function (api_6_1) {
                api_6 = api_6_1;
            },
            function (dom_renderer_2_1) {
                dom_renderer_2 = dom_renderer_2_1;
            },
            function (shared_styles_host_2_1) {
                shared_styles_host_2 = shared_styles_host_2_1;
            },
            function (common_dom_2_1) {
                common_dom_2 = common_dom_2_1;
            },
            function (dom_events_2_1) {
                dom_events_2 = dom_events_2_1;
            },
            function (lang_177_1) {
                lang_177 = lang_177_1;
            }],
        execute: function() {
            /**
             * Default patform providers for testing.
             */
            exports_335("TEST_SERVER_PLATFORM_PROVIDERS", TEST_SERVER_PLATFORM_PROVIDERS = lang_177.CONST_EXPR([
                core_125.PLATFORM_COMMON_PROVIDERS,
                new core_125.Provider(core_125.PLATFORM_INITIALIZER, { useValue: initServerTests, multi: true })
            ]));
            /**
             * Default application providers for testing.
             */
            exports_335("TEST_SERVER_APPLICATION_PROVIDERS", TEST_SERVER_APPLICATION_PROVIDERS = lang_177.CONST_EXPR([
                // TODO(julie): when angular2/platform/server is available, use that instead of making our own
                // list here.
                core_125.APPLICATION_COMMON_PROVIDERS,
                compiler_12.COMPILER_PROVIDERS,
                new core_125.Provider(dom_tokens_3.DOCUMENT, { useFactory: appDoc }),
                new core_125.Provider(dom_renderer_2.DomRootRenderer, { useClass: dom_renderer_2.DomRootRenderer_ }),
                new core_125.Provider(api_6.RootRenderer, { useExisting: dom_renderer_2.DomRootRenderer }),
                common_dom_2.EventManager,
                new core_125.Provider(common_dom_2.EVENT_MANAGER_PLUGINS, { useClass: dom_events_2.DomEventsPlugin, multi: true }),
                new core_125.Provider(xhr_4.XHR, { useClass: xhr_4.XHR }),
                new core_125.Provider(core_125.APP_ID, { useValue: 'a' }),
                shared_styles_host_2.DomSharedStylesHost,
                common_dom_2.ELEMENT_PROBE_PROVIDERS,
                new core_125.Provider(core_125.DirectiveResolver, { useClass: directive_resolver_mock_3.MockDirectiveResolver }),
                new core_125.Provider(core_125.ViewResolver, { useClass: view_resolver_mock_3.MockViewResolver }),
                utils_8.Log,
                test_component_builder_4.TestComponentBuilder,
                new core_125.Provider(core_125.NgZone, { useClass: ng_zone_mock_3.MockNgZone }),
                new core_125.Provider(location_strategy_6.LocationStrategy, { useClass: mock_location_strategy_2.MockLocationStrategy }),
                new core_125.Provider(animation_builder_3.AnimationBuilder, { useClass: animation_builder_mock_3.MockAnimationBuilder }),
            ]));
        }
    }
});
System.register("test/node_modules/angular2/ts/router/router_link_dsl", ['angular2/compiler', 'angular2/core', 'angular2/src/router/directives/router_link_transform', 'angular2/src/facade/lang'], function(exports_336, context_336) {
    "use strict";
    var __moduleName = context_336 && context_336.id;
    var compiler_13, core_126, router_link_transform_1, lang_178;
    var ROUTER_LINK_DSL_PROVIDER;
    return {
        setters:[
            function (compiler_13_1) {
                compiler_13 = compiler_13_1;
            },
            function (core_126_1) {
                core_126 = core_126_1;
            },
            function (router_link_transform_1_1) {
                router_link_transform_1 = router_link_transform_1_1;
                exports_336({
                    "RouterLinkTransform": router_link_transform_1_1["RouterLinkTransform"]
                });
            },
            function (lang_178_1) {
                lang_178 = lang_178_1;
            }],
        execute: function() {
            /**
             * Enables the router link DSL.
             *
             * Warning. This feature is experimental and can change.
             *
             * To enable the transformer pass the router link DSL provider to `bootstrap`.
             *
             * ## Example:
             * ```
             * import {bootstrap} from 'angular2/platform/browser';
             * import {ROUTER_LINK_DSL_PROVIDER} from 'angular2/router/router_link_dsl';
             *
             * bootstrap(CustomApp, [ROUTER_LINK_DSL_PROVIDER]);
             * ```
             *
             * The DSL allows you to express router links as follows:
             * ```
             * <a [routerLink]="route:User"> <!-- Same as <a [routerLink]="['User']"> -->
             * <a [routerLink]="route:/User"> <!-- Same as <a [routerLink]="['User']"> -->
             * <a [routerLink]="route:./User"> <!-- Same as <a [routerLink]="['./User']"> -->
             * <a [routerLink]="./User(id: value, name: 'Bob')"> <!-- Same as <a [routerLink]="['./User', {id:
             * value, name: 'Bob'}]"> -->
             * <a [routerLink]="/User/Modal"> <!-- Same as <a [routerLink]="['/User', 'Modal']"> -->
             * <a [routerLink]="User[Modal]"> <!-- Same as <a [routerLink]="['User', ['Modal']]"> -->
             * ```
             */
            exports_336("ROUTER_LINK_DSL_PROVIDER", ROUTER_LINK_DSL_PROVIDER = lang_178.CONST_EXPR(new core_126.Provider(compiler_13.TEMPLATE_TRANSFORMS, { useClass: router_link_transform_1.RouterLinkTransform, multi: true })));
        }
    }
});
System.register("test/node_modules/angular2/ts/router/testing", ['angular2/src/mock/mock_location_strategy', 'angular2/src/mock/location_mock'], function(exports_337, context_337) {
    "use strict";
    var __moduleName = context_337 && context_337.id;
    function exportStar_16(m) {
        var exports = {};
        for(var n in m) {
            if (n !== "default") exports[n] = m[n];
        }
        exports_337(exports);
    }
    return {
        setters:[
            function (mock_location_strategy_3_1) {
                exportStar_16(mock_location_strategy_3_1);
            },
            function (location_mock_1_1) {
                exportStar_16(location_mock_1_1);
            }],
        execute: function() {
        }
    }
});
System.register("test/node_modules/angular2/ts/src/compiler/chars", [], function(exports_338, context_338) {
    "use strict";
    var __moduleName = context_338 && context_338.id;
    var $EOF, $TAB, $LF, $VTAB, $FF, $CR, $SPACE, $BANG, $DQ, $HASH, $$, $PERCENT, $AMPERSAND, $SQ, $LPAREN, $RPAREN, $STAR, $PLUS, $COMMA, $MINUS, $PERIOD, $SLASH, $COLON, $SEMICOLON, $LT, $EQ, $GT, $QUESTION, $0, $9, $A, $E, $Z, $LBRACKET, $BACKSLASH, $RBRACKET, $CARET, $_, $a, $e, $f, $n, $r, $t, $u, $v, $z, $LBRACE, $BAR, $RBRACE, $NBSP, $PIPE, $TILDA, $AT;
    function isWhitespace(code) {
        return (code >= $TAB && code <= $SPACE) || (code == $NBSP);
    }
    exports_338("isWhitespace", isWhitespace);
    return {
        setters:[],
        execute: function() {
            exports_338("$EOF", $EOF = 0);
            exports_338("$TAB", $TAB = 9);
            exports_338("$LF", $LF = 10);
            exports_338("$VTAB", $VTAB = 11);
            exports_338("$FF", $FF = 12);
            exports_338("$CR", $CR = 13);
            exports_338("$SPACE", $SPACE = 32);
            exports_338("$BANG", $BANG = 33);
            exports_338("$DQ", $DQ = 34);
            exports_338("$HASH", $HASH = 35);
            exports_338("$$", $$ = 36);
            exports_338("$PERCENT", $PERCENT = 37);
            exports_338("$AMPERSAND", $AMPERSAND = 38);
            exports_338("$SQ", $SQ = 39);
            exports_338("$LPAREN", $LPAREN = 40);
            exports_338("$RPAREN", $RPAREN = 41);
            exports_338("$STAR", $STAR = 42);
            exports_338("$PLUS", $PLUS = 43);
            exports_338("$COMMA", $COMMA = 44);
            exports_338("$MINUS", $MINUS = 45);
            exports_338("$PERIOD", $PERIOD = 46);
            exports_338("$SLASH", $SLASH = 47);
            exports_338("$COLON", $COLON = 58);
            exports_338("$SEMICOLON", $SEMICOLON = 59);
            exports_338("$LT", $LT = 60);
            exports_338("$EQ", $EQ = 61);
            exports_338("$GT", $GT = 62);
            exports_338("$QUESTION", $QUESTION = 63);
            exports_338("$0", $0 = 48);
            exports_338("$9", $9 = 57);
            exports_338("$A", $A = 65);
            exports_338("$E", $E = 69);
            exports_338("$Z", $Z = 90);
            exports_338("$LBRACKET", $LBRACKET = 91);
            exports_338("$BACKSLASH", $BACKSLASH = 92);
            exports_338("$RBRACKET", $RBRACKET = 93);
            exports_338("$CARET", $CARET = 94);
            exports_338("$_", $_ = 95);
            exports_338("$a", $a = 97);
            exports_338("$e", $e = 101);
            exports_338("$f", $f = 102);
            exports_338("$n", $n = 110);
            exports_338("$r", $r = 114);
            exports_338("$t", $t = 116);
            exports_338("$u", $u = 117);
            exports_338("$v", $v = 118);
            exports_338("$z", $z = 122);
            exports_338("$LBRACE", $LBRACE = 123);
            exports_338("$BAR", $BAR = 124);
            exports_338("$RBRACE", $RBRACE = 125);
            exports_338("$NBSP", $NBSP = 160);
            exports_338("$PIPE", $PIPE = 124);
            exports_338("$TILDA", $TILDA = 126);
            exports_338("$AT", $AT = 64);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/compiler/legacy_template", ['angular2/src/core/di', 'angular2/src/facade/lang', "test/node_modules/angular2/ts/src/compiler/html_ast", "test/node_modules/angular2/ts/src/compiler/html_parser", "test/node_modules/angular2/ts/src/compiler/util"], function(exports_339, context_339) {
    "use strict";
    var __moduleName = context_339 && context_339.id;
    var di_42, lang_179, html_ast_5, html_parser_4, util_14;
    var LONG_SYNTAX_REGEXP, SHORT_SYNTAX_REGEXP, VARIABLE_TPL_BINDING_REGEXP, TEMPLATE_SELECTOR_REGEXP, SPECIAL_PREFIXES_REGEXP, INTERPOLATION_REGEXP, SPECIAL_CASES, LegacyHtmlAstTransformer, LegacyHtmlParser;
    return {
        setters:[
            function (di_42_1) {
                di_42 = di_42_1;
            },
            function (lang_179_1) {
                lang_179 = lang_179_1;
            },
            function (html_ast_5_1) {
                html_ast_5 = html_ast_5_1;
            },
            function (html_parser_4_1) {
                html_parser_4 = html_parser_4_1;
            },
            function (util_14_1) {
                util_14 = util_14_1;
            }],
        execute: function() {
            LONG_SYNTAX_REGEXP = /^(?:on-(.*)|bindon-(.*)|bind-(.*)|var-(.*))$/ig;
            SHORT_SYNTAX_REGEXP = /^(?:\((.*)\)|\[\((.*)\)\]|\[(.*)\]|#(.*))$/ig;
            VARIABLE_TPL_BINDING_REGEXP = /(\bvar\s+|#)(\S+)/ig;
            TEMPLATE_SELECTOR_REGEXP = /^(\S+)/g;
            SPECIAL_PREFIXES_REGEXP = /^(class|style|attr)\./ig;
            INTERPOLATION_REGEXP = /\{\{.*?\}\}/g;
            SPECIAL_CASES = lang_179.CONST_EXPR([
                'ng-non-bindable',
                'ng-default-control',
                'ng-no-form',
            ]);
            /**
             * Convert templates to the case sensitive syntax
             *
             * @internal
             */
            LegacyHtmlAstTransformer = (function () {
                function LegacyHtmlAstTransformer(dashCaseSelectors) {
                    this.dashCaseSelectors = dashCaseSelectors;
                    this.rewrittenAst = [];
                    this.visitingTemplateEl = false;
                }
                LegacyHtmlAstTransformer.prototype.visitComment = function (ast, context) { return ast; };
                LegacyHtmlAstTransformer.prototype.visitElement = function (ast, context) {
                    var _this = this;
                    this.visitingTemplateEl = ast.name.toLowerCase() == 'template';
                    var attrs = ast.attrs.map(function (attr) { return attr.visit(_this, null); });
                    var children = ast.children.map(function (child) { return child.visit(_this, null); });
                    return new html_ast_5.HtmlElementAst(ast.name, attrs, children, ast.sourceSpan);
                };
                LegacyHtmlAstTransformer.prototype.visitAttr = function (originalAst, context) {
                    var ast = originalAst;
                    if (this.visitingTemplateEl) {
                        if (lang_179.isPresent(lang_179.RegExpWrapper.firstMatch(LONG_SYNTAX_REGEXP, ast.name))) {
                            // preserve the "-" in the prefix for the long syntax
                            ast = this._rewriteLongSyntax(ast);
                        }
                        else {
                            // rewrite any other attribute
                            var name_3 = util_14.dashCaseToCamelCase(ast.name);
                            ast = name_3 == ast.name ? ast : new html_ast_5.HtmlAttrAst(name_3, ast.value, ast.sourceSpan);
                        }
                    }
                    else {
                        ast = this._rewriteTemplateAttribute(ast);
                        ast = this._rewriteLongSyntax(ast);
                        ast = this._rewriteShortSyntax(ast);
                        ast = this._rewriteStar(ast);
                        ast = this._rewriteInterpolation(ast);
                        ast = this._rewriteSpecialCases(ast);
                    }
                    if (ast !== originalAst) {
                        this.rewrittenAst.push(ast);
                    }
                    return ast;
                };
                LegacyHtmlAstTransformer.prototype.visitText = function (ast, context) { return ast; };
                LegacyHtmlAstTransformer.prototype._rewriteLongSyntax = function (ast) {
                    var m = lang_179.RegExpWrapper.firstMatch(LONG_SYNTAX_REGEXP, ast.name);
                    var attrName = ast.name;
                    var attrValue = ast.value;
                    if (lang_179.isPresent(m)) {
                        if (lang_179.isPresent(m[1])) {
                            attrName = "on-" + util_14.dashCaseToCamelCase(m[1]);
                        }
                        else if (lang_179.isPresent(m[2])) {
                            attrName = "bindon-" + util_14.dashCaseToCamelCase(m[2]);
                        }
                        else if (lang_179.isPresent(m[3])) {
                            attrName = "bind-" + util_14.dashCaseToCamelCase(m[3]);
                        }
                        else if (lang_179.isPresent(m[4])) {
                            attrName = "var-" + util_14.dashCaseToCamelCase(m[4]);
                            attrValue = util_14.dashCaseToCamelCase(attrValue);
                        }
                    }
                    return attrName == ast.name && attrValue == ast.value ?
                        ast :
                        new html_ast_5.HtmlAttrAst(attrName, attrValue, ast.sourceSpan);
                };
                LegacyHtmlAstTransformer.prototype._rewriteTemplateAttribute = function (ast) {
                    var name = ast.name;
                    var value = ast.value;
                    if (name.toLowerCase() == 'template') {
                        name = 'template';
                        // rewrite the directive selector
                        value = lang_179.StringWrapper.replaceAllMapped(value, TEMPLATE_SELECTOR_REGEXP, function (m) { return util_14.dashCaseToCamelCase(m[1]); });
                        // rewrite the var declarations
                        value = lang_179.StringWrapper.replaceAllMapped(value, VARIABLE_TPL_BINDING_REGEXP, function (m) {
                            return "" + m[1].toLowerCase() + util_14.dashCaseToCamelCase(m[2]);
                        });
                    }
                    if (name == ast.name && value == ast.value) {
                        return ast;
                    }
                    return new html_ast_5.HtmlAttrAst(name, value, ast.sourceSpan);
                };
                LegacyHtmlAstTransformer.prototype._rewriteShortSyntax = function (ast) {
                    var m = lang_179.RegExpWrapper.firstMatch(SHORT_SYNTAX_REGEXP, ast.name);
                    var attrName = ast.name;
                    var attrValue = ast.value;
                    if (lang_179.isPresent(m)) {
                        if (lang_179.isPresent(m[1])) {
                            attrName = "(" + util_14.dashCaseToCamelCase(m[1]) + ")";
                        }
                        else if (lang_179.isPresent(m[2])) {
                            attrName = "[(" + util_14.dashCaseToCamelCase(m[2]) + ")]";
                        }
                        else if (lang_179.isPresent(m[3])) {
                            var prop = lang_179.StringWrapper.replaceAllMapped(m[3], SPECIAL_PREFIXES_REGEXP, function (m) { return m[1].toLowerCase() + '.'; });
                            if (prop.startsWith('class.') || prop.startsWith('attr.') || prop.startsWith('style.')) {
                                attrName = "[" + prop + "]";
                            }
                            else {
                                attrName = "[" + util_14.dashCaseToCamelCase(prop) + "]";
                            }
                        }
                        else if (lang_179.isPresent(m[4])) {
                            attrName = "#" + util_14.dashCaseToCamelCase(m[4]);
                            attrValue = util_14.dashCaseToCamelCase(attrValue);
                        }
                    }
                    return attrName == ast.name && attrValue == ast.value ?
                        ast :
                        new html_ast_5.HtmlAttrAst(attrName, attrValue, ast.sourceSpan);
                };
                LegacyHtmlAstTransformer.prototype._rewriteStar = function (ast) {
                    var attrName = ast.name;
                    var attrValue = ast.value;
                    if (attrName[0] == '*') {
                        attrName = util_14.dashCaseToCamelCase(attrName);
                        // rewrite the var declarations
                        attrValue = lang_179.StringWrapper.replaceAllMapped(attrValue, VARIABLE_TPL_BINDING_REGEXP, function (m) {
                            return "" + m[1].toLowerCase() + util_14.dashCaseToCamelCase(m[2]);
                        });
                    }
                    return attrName == ast.name && attrValue == ast.value ?
                        ast :
                        new html_ast_5.HtmlAttrAst(attrName, attrValue, ast.sourceSpan);
                };
                LegacyHtmlAstTransformer.prototype._rewriteInterpolation = function (ast) {
                    var hasInterpolation = lang_179.RegExpWrapper.test(INTERPOLATION_REGEXP, ast.value);
                    if (!hasInterpolation) {
                        return ast;
                    }
                    var name = ast.name;
                    if (!(name.startsWith('attr.') || name.startsWith('class.') || name.startsWith('style.'))) {
                        name = util_14.dashCaseToCamelCase(ast.name);
                    }
                    return name == ast.name ? ast : new html_ast_5.HtmlAttrAst(name, ast.value, ast.sourceSpan);
                };
                LegacyHtmlAstTransformer.prototype._rewriteSpecialCases = function (ast) {
                    var attrName = ast.name;
                    if (SPECIAL_CASES.indexOf(attrName) > -1) {
                        return new html_ast_5.HtmlAttrAst(util_14.dashCaseToCamelCase(attrName), ast.value, ast.sourceSpan);
                    }
                    if (lang_179.isPresent(this.dashCaseSelectors) && this.dashCaseSelectors.indexOf(attrName) > -1) {
                        return new html_ast_5.HtmlAttrAst(util_14.dashCaseToCamelCase(attrName), ast.value, ast.sourceSpan);
                    }
                    return ast;
                };
                return LegacyHtmlAstTransformer;
            }());
            exports_339("LegacyHtmlAstTransformer", LegacyHtmlAstTransformer);
            LegacyHtmlParser = (function (_super) {
                __extends(LegacyHtmlParser, _super);
                function LegacyHtmlParser() {
                    _super.apply(this, arguments);
                }
                LegacyHtmlParser.prototype.parse = function (sourceContent, sourceUrl) {
                    var transformer = new LegacyHtmlAstTransformer();
                    var htmlParseTreeResult = _super.prototype.parse.call(this, sourceContent, sourceUrl);
                    var rootNodes = htmlParseTreeResult.rootNodes.map(function (node) { return node.visit(transformer, null); });
                    return transformer.rewrittenAst.length > 0 ?
                        new html_parser_4.HtmlParseTreeResult(rootNodes, htmlParseTreeResult.errors) :
                        htmlParseTreeResult;
                };
                LegacyHtmlParser = __decorate([
                    di_42.Injectable(), 
                    __metadata('design:paramtypes', [])
                ], LegacyHtmlParser);
                return LegacyHtmlParser;
            }(html_parser_4.HtmlParser));
            exports_339("LegacyHtmlParser", LegacyHtmlParser);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/compiler/selector", ['angular2/src/facade/collection', 'angular2/src/facade/lang', 'angular2/src/facade/exceptions'], function(exports_340, context_340) {
    "use strict";
    var __moduleName = context_340 && context_340.id;
    var collection_76, lang_180, exceptions_67;
    var _EMPTY_ATTR_VALUE, _SELECTOR_REGEXP, CssSelector, SelectorMatcher, SelectorListContext, SelectorContext;
    return {
        setters:[
            function (collection_76_1) {
                collection_76 = collection_76_1;
            },
            function (lang_180_1) {
                lang_180 = lang_180_1;
            },
            function (exceptions_67_1) {
                exceptions_67 = exceptions_67_1;
            }],
        execute: function() {
            _EMPTY_ATTR_VALUE = '';
            // TODO: Can't use `const` here as
            // in Dart this is not transpiled into `final` yet...
            _SELECTOR_REGEXP = lang_180.RegExpWrapper.create('(\\:not\\()|' +
                '([-\\w]+)|' +
                '(?:\\.([-\\w]+))|' +
                '(?:\\[([-\\w*]+)(?:=([^\\]]*))?\\])|' +
                '(\\))|' +
                '(\\s*,\\s*)'); // ","
            /**
             * A css selector contains an element name,
             * css classes and attribute/value pairs with the purpose
             * of selecting subsets out of them.
             */
            CssSelector = (function () {
                function CssSelector() {
                    this.element = null;
                    this.classNames = [];
                    this.attrs = [];
                    this.notSelectors = [];
                }
                CssSelector.parse = function (selector) {
                    var results = [];
                    var _addResult = function (res, cssSel) {
                        if (cssSel.notSelectors.length > 0 && lang_180.isBlank(cssSel.element) &&
                            collection_76.ListWrapper.isEmpty(cssSel.classNames) && collection_76.ListWrapper.isEmpty(cssSel.attrs)) {
                            cssSel.element = "*";
                        }
                        res.push(cssSel);
                    };
                    var cssSelector = new CssSelector();
                    var matcher = lang_180.RegExpWrapper.matcher(_SELECTOR_REGEXP, selector);
                    var match;
                    var current = cssSelector;
                    var inNot = false;
                    while (lang_180.isPresent(match = lang_180.RegExpMatcherWrapper.next(matcher))) {
                        if (lang_180.isPresent(match[1])) {
                            if (inNot) {
                                throw new exceptions_67.BaseException('Nesting :not is not allowed in a selector');
                            }
                            inNot = true;
                            current = new CssSelector();
                            cssSelector.notSelectors.push(current);
                        }
                        if (lang_180.isPresent(match[2])) {
                            current.setElement(match[2]);
                        }
                        if (lang_180.isPresent(match[3])) {
                            current.addClassName(match[3]);
                        }
                        if (lang_180.isPresent(match[4])) {
                            current.addAttribute(match[4], match[5]);
                        }
                        if (lang_180.isPresent(match[6])) {
                            inNot = false;
                            current = cssSelector;
                        }
                        if (lang_180.isPresent(match[7])) {
                            if (inNot) {
                                throw new exceptions_67.BaseException('Multiple selectors in :not are not supported');
                            }
                            _addResult(results, cssSelector);
                            cssSelector = current = new CssSelector();
                        }
                    }
                    _addResult(results, cssSelector);
                    return results;
                };
                CssSelector.prototype.isElementSelector = function () {
                    return lang_180.isPresent(this.element) && collection_76.ListWrapper.isEmpty(this.classNames) &&
                        collection_76.ListWrapper.isEmpty(this.attrs) && this.notSelectors.length === 0;
                };
                CssSelector.prototype.setElement = function (element) {
                    if (element === void 0) { element = null; }
                    this.element = element;
                };
                /** Gets a template string for an element that matches the selector. */
                CssSelector.prototype.getMatchingElementTemplate = function () {
                    var tagName = lang_180.isPresent(this.element) ? this.element : 'div';
                    var classAttr = this.classNames.length > 0 ? " class=\"" + this.classNames.join(' ') + "\"" : '';
                    var attrs = '';
                    for (var i = 0; i < this.attrs.length; i += 2) {
                        var attrName = this.attrs[i];
                        var attrValue = this.attrs[i + 1] !== '' ? "=\"" + this.attrs[i + 1] + "\"" : '';
                        attrs += " " + attrName + attrValue;
                    }
                    return "<" + tagName + classAttr + attrs + "></" + tagName + ">";
                };
                CssSelector.prototype.addAttribute = function (name, value) {
                    if (value === void 0) { value = _EMPTY_ATTR_VALUE; }
                    this.attrs.push(name);
                    if (lang_180.isPresent(value)) {
                        value = value.toLowerCase();
                    }
                    else {
                        value = _EMPTY_ATTR_VALUE;
                    }
                    this.attrs.push(value);
                };
                CssSelector.prototype.addClassName = function (name) { this.classNames.push(name.toLowerCase()); };
                CssSelector.prototype.toString = function () {
                    var res = '';
                    if (lang_180.isPresent(this.element)) {
                        res += this.element;
                    }
                    if (lang_180.isPresent(this.classNames)) {
                        for (var i = 0; i < this.classNames.length; i++) {
                            res += '.' + this.classNames[i];
                        }
                    }
                    if (lang_180.isPresent(this.attrs)) {
                        for (var i = 0; i < this.attrs.length;) {
                            var attrName = this.attrs[i++];
                            var attrValue = this.attrs[i++];
                            res += '[' + attrName;
                            if (attrValue.length > 0) {
                                res += '=' + attrValue;
                            }
                            res += ']';
                        }
                    }
                    this.notSelectors.forEach(function (notSelector) { return res += ":not(" + notSelector + ")"; });
                    return res;
                };
                return CssSelector;
            }());
            exports_340("CssSelector", CssSelector);
            /**
             * Reads a list of CssSelectors and allows to calculate which ones
             * are contained in a given CssSelector.
             */
            SelectorMatcher = (function () {
                function SelectorMatcher() {
                    this._elementMap = new collection_76.Map();
                    this._elementPartialMap = new collection_76.Map();
                    this._classMap = new collection_76.Map();
                    this._classPartialMap = new collection_76.Map();
                    this._attrValueMap = new collection_76.Map();
                    this._attrValuePartialMap = new collection_76.Map();
                    this._listContexts = [];
                }
                SelectorMatcher.createNotMatcher = function (notSelectors) {
                    var notMatcher = new SelectorMatcher();
                    notMatcher.addSelectables(notSelectors, null);
                    return notMatcher;
                };
                SelectorMatcher.prototype.addSelectables = function (cssSelectors, callbackCtxt) {
                    var listContext = null;
                    if (cssSelectors.length > 1) {
                        listContext = new SelectorListContext(cssSelectors);
                        this._listContexts.push(listContext);
                    }
                    for (var i = 0; i < cssSelectors.length; i++) {
                        this._addSelectable(cssSelectors[i], callbackCtxt, listContext);
                    }
                };
                /**
                 * Add an object that can be found later on by calling `match`.
                 * @param cssSelector A css selector
                 * @param callbackCtxt An opaque object that will be given to the callback of the `match` function
                 */
                SelectorMatcher.prototype._addSelectable = function (cssSelector, callbackCtxt, listContext) {
                    var matcher = this;
                    var element = cssSelector.element;
                    var classNames = cssSelector.classNames;
                    var attrs = cssSelector.attrs;
                    var selectable = new SelectorContext(cssSelector, callbackCtxt, listContext);
                    if (lang_180.isPresent(element)) {
                        var isTerminal = attrs.length === 0 && classNames.length === 0;
                        if (isTerminal) {
                            this._addTerminal(matcher._elementMap, element, selectable);
                        }
                        else {
                            matcher = this._addPartial(matcher._elementPartialMap, element);
                        }
                    }
                    if (lang_180.isPresent(classNames)) {
                        for (var index = 0; index < classNames.length; index++) {
                            var isTerminal = attrs.length === 0 && index === classNames.length - 1;
                            var className = classNames[index];
                            if (isTerminal) {
                                this._addTerminal(matcher._classMap, className, selectable);
                            }
                            else {
                                matcher = this._addPartial(matcher._classPartialMap, className);
                            }
                        }
                    }
                    if (lang_180.isPresent(attrs)) {
                        for (var index = 0; index < attrs.length;) {
                            var isTerminal = index === attrs.length - 2;
                            var attrName = attrs[index++];
                            var attrValue = attrs[index++];
                            if (isTerminal) {
                                var terminalMap = matcher._attrValueMap;
                                var terminalValuesMap = terminalMap.get(attrName);
                                if (lang_180.isBlank(terminalValuesMap)) {
                                    terminalValuesMap = new collection_76.Map();
                                    terminalMap.set(attrName, terminalValuesMap);
                                }
                                this._addTerminal(terminalValuesMap, attrValue, selectable);
                            }
                            else {
                                var parttialMap = matcher._attrValuePartialMap;
                                var partialValuesMap = parttialMap.get(attrName);
                                if (lang_180.isBlank(partialValuesMap)) {
                                    partialValuesMap = new collection_76.Map();
                                    parttialMap.set(attrName, partialValuesMap);
                                }
                                matcher = this._addPartial(partialValuesMap, attrValue);
                            }
                        }
                    }
                };
                SelectorMatcher.prototype._addTerminal = function (map, name, selectable) {
                    var terminalList = map.get(name);
                    if (lang_180.isBlank(terminalList)) {
                        terminalList = [];
                        map.set(name, terminalList);
                    }
                    terminalList.push(selectable);
                };
                SelectorMatcher.prototype._addPartial = function (map, name) {
                    var matcher = map.get(name);
                    if (lang_180.isBlank(matcher)) {
                        matcher = new SelectorMatcher();
                        map.set(name, matcher);
                    }
                    return matcher;
                };
                /**
                 * Find the objects that have been added via `addSelectable`
                 * whose css selector is contained in the given css selector.
                 * @param cssSelector A css selector
                 * @param matchedCallback This callback will be called with the object handed into `addSelectable`
                 * @return boolean true if a match was found
                */
                SelectorMatcher.prototype.match = function (cssSelector, matchedCallback) {
                    var result = false;
                    var element = cssSelector.element;
                    var classNames = cssSelector.classNames;
                    var attrs = cssSelector.attrs;
                    for (var i = 0; i < this._listContexts.length; i++) {
                        this._listContexts[i].alreadyMatched = false;
                    }
                    result = this._matchTerminal(this._elementMap, element, cssSelector, matchedCallback) || result;
                    result = this._matchPartial(this._elementPartialMap, element, cssSelector, matchedCallback) ||
                        result;
                    if (lang_180.isPresent(classNames)) {
                        for (var index = 0; index < classNames.length; index++) {
                            var className = classNames[index];
                            result =
                                this._matchTerminal(this._classMap, className, cssSelector, matchedCallback) || result;
                            result =
                                this._matchPartial(this._classPartialMap, className, cssSelector, matchedCallback) ||
                                    result;
                        }
                    }
                    if (lang_180.isPresent(attrs)) {
                        for (var index = 0; index < attrs.length;) {
                            var attrName = attrs[index++];
                            var attrValue = attrs[index++];
                            var terminalValuesMap = this._attrValueMap.get(attrName);
                            if (!lang_180.StringWrapper.equals(attrValue, _EMPTY_ATTR_VALUE)) {
                                result = this._matchTerminal(terminalValuesMap, _EMPTY_ATTR_VALUE, cssSelector, matchedCallback) ||
                                    result;
                            }
                            result = this._matchTerminal(terminalValuesMap, attrValue, cssSelector, matchedCallback) ||
                                result;
                            var partialValuesMap = this._attrValuePartialMap.get(attrName);
                            if (!lang_180.StringWrapper.equals(attrValue, _EMPTY_ATTR_VALUE)) {
                                result = this._matchPartial(partialValuesMap, _EMPTY_ATTR_VALUE, cssSelector, matchedCallback) ||
                                    result;
                            }
                            result =
                                this._matchPartial(partialValuesMap, attrValue, cssSelector, matchedCallback) || result;
                        }
                    }
                    return result;
                };
                /** @internal */
                SelectorMatcher.prototype._matchTerminal = function (map, name, cssSelector, matchedCallback) {
                    if (lang_180.isBlank(map) || lang_180.isBlank(name)) {
                        return false;
                    }
                    var selectables = map.get(name);
                    var starSelectables = map.get("*");
                    if (lang_180.isPresent(starSelectables)) {
                        selectables = selectables.concat(starSelectables);
                    }
                    if (lang_180.isBlank(selectables)) {
                        return false;
                    }
                    var selectable;
                    var result = false;
                    for (var index = 0; index < selectables.length; index++) {
                        selectable = selectables[index];
                        result = selectable.finalize(cssSelector, matchedCallback) || result;
                    }
                    return result;
                };
                /** @internal */
                SelectorMatcher.prototype._matchPartial = function (map, name, cssSelector, matchedCallback /*: (c: CssSelector, a: any) => void*/) {
                    if (lang_180.isBlank(map) || lang_180.isBlank(name)) {
                        return false;
                    }
                    var nestedSelector = map.get(name);
                    if (lang_180.isBlank(nestedSelector)) {
                        return false;
                    }
                    // TODO(perf): get rid of recursion and measure again
                    // TODO(perf): don't pass the whole selector into the recursion,
                    // but only the not processed parts
                    return nestedSelector.match(cssSelector, matchedCallback);
                };
                return SelectorMatcher;
            }());
            exports_340("SelectorMatcher", SelectorMatcher);
            SelectorListContext = (function () {
                function SelectorListContext(selectors) {
                    this.selectors = selectors;
                    this.alreadyMatched = false;
                }
                return SelectorListContext;
            }());
            exports_340("SelectorListContext", SelectorListContext);
            // Store context to pass back selector and context when a selector is matched
            SelectorContext = (function () {
                function SelectorContext(selector, cbContext, listContext) {
                    this.selector = selector;
                    this.cbContext = cbContext;
                    this.listContext = listContext;
                    this.notSelectors = selector.notSelectors;
                }
                SelectorContext.prototype.finalize = function (cssSelector, callback) {
                    var result = true;
                    if (this.notSelectors.length > 0 &&
                        (lang_180.isBlank(this.listContext) || !this.listContext.alreadyMatched)) {
                        var notMatcher = SelectorMatcher.createNotMatcher(this.notSelectors);
                        result = !notMatcher.match(cssSelector, null);
                    }
                    if (result && lang_180.isPresent(callback) &&
                        (lang_180.isBlank(this.listContext) || !this.listContext.alreadyMatched)) {
                        if (lang_180.isPresent(this.listContext)) {
                            this.listContext.alreadyMatched = true;
                        }
                        callback(this.selector, this.cbContext);
                    }
                    return result;
                };
                return SelectorContext;
            }());
            exports_340("SelectorContext", SelectorContext);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/compiler/shadow_css", ['angular2/src/facade/collection', 'angular2/src/facade/lang'], function(exports_341, context_341) {
    "use strict";
    var __moduleName = context_341 && context_341.id;
    var collection_77, lang_181;
    var ShadowCss, _cssContentNextSelectorRe, _cssContentRuleRe, _cssContentUnscopedRuleRe, _polyfillHost, _polyfillHostContext, _parenSuffix, _cssColonHostRe, _cssColonHostContextRe, _polyfillHostNoCombinator, _shadowDOMSelectorsRe, _shadowDeepSelectors, _selectorReSuffix, _polyfillHostRe, _colonHostRe, _colonHostContextRe, _commentRe, _ruleRe, _curlyRe, OPEN_CURLY, CLOSE_CURLY, BLOCK_PLACEHOLDER, CssRule, StringWithEscapedBlocks;
    function stripComments(input) {
        return lang_181.StringWrapper.replaceAllMapped(input, _commentRe, function (_) { return ''; });
    }
    function processRules(input, ruleCallback) {
        var inputWithEscapedBlocks = escapeBlocks(input);
        var nextBlockIndex = 0;
        return lang_181.StringWrapper.replaceAllMapped(inputWithEscapedBlocks.escapedString, _ruleRe, function (m) {
            var selector = m[2];
            var content = '';
            var suffix = m[4];
            var contentPrefix = '';
            if (lang_181.isPresent(m[4]) && m[4].startsWith('{' + BLOCK_PLACEHOLDER)) {
                content = inputWithEscapedBlocks.blocks[nextBlockIndex++];
                suffix = m[4].substring(BLOCK_PLACEHOLDER.length + 1);
                contentPrefix = '{';
            }
            var rule = ruleCallback(new CssRule(selector, content));
            return "" + m[1] + rule.selector + m[3] + contentPrefix + rule.content + suffix;
        });
    }
    exports_341("processRules", processRules);
    function escapeBlocks(input) {
        var inputParts = lang_181.StringWrapper.split(input, _curlyRe);
        var resultParts = [];
        var escapedBlocks = [];
        var bracketCount = 0;
        var currentBlockParts = [];
        for (var partIndex = 0; partIndex < inputParts.length; partIndex++) {
            var part = inputParts[partIndex];
            if (part == CLOSE_CURLY) {
                bracketCount--;
            }
            if (bracketCount > 0) {
                currentBlockParts.push(part);
            }
            else {
                if (currentBlockParts.length > 0) {
                    escapedBlocks.push(currentBlockParts.join(''));
                    resultParts.push(BLOCK_PLACEHOLDER);
                    currentBlockParts = [];
                }
                resultParts.push(part);
            }
            if (part == OPEN_CURLY) {
                bracketCount++;
            }
        }
        if (currentBlockParts.length > 0) {
            escapedBlocks.push(currentBlockParts.join(''));
            resultParts.push(BLOCK_PLACEHOLDER);
        }
        return new StringWithEscapedBlocks(resultParts.join(''), escapedBlocks);
    }
    return {
        setters:[
            function (collection_77_1) {
                collection_77 = collection_77_1;
            },
            function (lang_181_1) {
                lang_181 = lang_181_1;
            }],
        execute: function() {
            /**
             * This file is a port of shadowCSS from webcomponents.js to TypeScript.
             *
             * Please make sure to keep to edits in sync with the source file.
             *
             * Source:
             * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js
             *
             * The original file level comment is reproduced below
             */
            /*
              This is a limited shim for ShadowDOM css styling.
              https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/shadow/index.html#styles
            
              The intention here is to support only the styling features which can be
              relatively simply implemented. The goal is to allow users to avoid the
              most obvious pitfalls and do so without compromising performance significantly.
              For ShadowDOM styling that's not covered here, a set of best practices
              can be provided that should allow users to accomplish more complex styling.
            
              The following is a list of specific ShadowDOM styling features and a brief
              discussion of the approach used to shim.
            
              Shimmed features:
            
              * :host, :host-context: ShadowDOM allows styling of the shadowRoot's host
              element using the :host rule. To shim this feature, the :host styles are
              reformatted and prefixed with a given scope name and promoted to a
              document level stylesheet.
              For example, given a scope name of .foo, a rule like this:
            
                :host {
                    background: red;
                  }
                }
            
              becomes:
            
                .foo {
                  background: red;
                }
            
              * encapsultion: Styles defined within ShadowDOM, apply only to
              dom inside the ShadowDOM. Polymer uses one of two techniques to implement
              this feature.
            
              By default, rules are prefixed with the host element tag name
              as a descendant selector. This ensures styling does not leak out of the 'top'
              of the element's ShadowDOM. For example,
            
              div {
                  font-weight: bold;
                }
            
              becomes:
            
              x-foo div {
                  font-weight: bold;
                }
            
              becomes:
            
            
              Alternatively, if WebComponents.ShadowCSS.strictStyling is set to true then
              selectors are scoped by adding an attribute selector suffix to each
              simple selector that contains the host element tag name. Each element
              in the element's ShadowDOM template is also given the scope attribute.
              Thus, these rules match only elements that have the scope attribute.
              For example, given a scope name of x-foo, a rule like this:
            
                div {
                  font-weight: bold;
                }
            
              becomes:
            
                div[x-foo] {
                  font-weight: bold;
                }
            
              Note that elements that are dynamically added to a scope must have the scope
              selector added to them manually.
            
              * upper/lower bound encapsulation: Styles which are defined outside a
              shadowRoot should not cross the ShadowDOM boundary and should not apply
              inside a shadowRoot.
            
              This styling behavior is not emulated. Some possible ways to do this that
              were rejected due to complexity and/or performance concerns include: (1) reset
              every possible property for every possible selector for a given scope name;
              (2) re-implement css in javascript.
            
              As an alternative, users should make sure to use selectors
              specific to the scope in which they are working.
            
              * ::distributed: This behavior is not emulated. It's often not necessary
              to style the contents of a specific insertion point and instead, descendants
              of the host element can be styled selectively. Users can also create an
              extra node around an insertion point and style that node's contents
              via descendent selectors. For example, with a shadowRoot like this:
            
                <style>
                  ::content(div) {
                    background: red;
                  }
                </style>
                <content></content>
            
              could become:
            
                <style>
                  / *@polyfill .content-container div * /
                  ::content(div) {
                    background: red;
                  }
                </style>
                <div class="content-container">
                  <content></content>
                </div>
            
              Note the use of @polyfill in the comment above a ShadowDOM specific style
              declaration. This is a directive to the styling shim to use the selector
              in comments in lieu of the next selector when running under polyfill.
            */
            ShadowCss = (function () {
                function ShadowCss() {
                    this.strictStyling = true;
                }
                /*
                * Shim some cssText with the given selector. Returns cssText that can
                * be included in the document via WebComponents.ShadowCSS.addCssToDocument(css).
                *
                * When strictStyling is true:
                * - selector is the attribute added to all elements inside the host,
                * - hostSelector is the attribute added to the host itself.
                */
                ShadowCss.prototype.shimCssText = function (cssText, selector, hostSelector) {
                    if (hostSelector === void 0) { hostSelector = ''; }
                    cssText = stripComments(cssText);
                    cssText = this._insertDirectives(cssText);
                    return this._scopeCssText(cssText, selector, hostSelector);
                };
                ShadowCss.prototype._insertDirectives = function (cssText) {
                    cssText = this._insertPolyfillDirectivesInCssText(cssText);
                    return this._insertPolyfillRulesInCssText(cssText);
                };
                /*
                 * Process styles to convert native ShadowDOM rules that will trip
                 * up the css parser; we rely on decorating the stylesheet with inert rules.
                 *
                 * For example, we convert this rule:
                 *
                 * polyfill-next-selector { content: ':host menu-item'; }
                 * ::content menu-item {
                 *
                 * to this:
                 *
                 * scopeName menu-item {
                 *
                **/
                ShadowCss.prototype._insertPolyfillDirectivesInCssText = function (cssText) {
                    // Difference with webcomponents.js: does not handle comments
                    return lang_181.StringWrapper.replaceAllMapped(cssText, _cssContentNextSelectorRe, function (m) { return m[1] + '{'; });
                };
                /*
                 * Process styles to add rules which will only apply under the polyfill
                 *
                 * For example, we convert this rule:
                 *
                 * polyfill-rule {
                 *   content: ':host menu-item';
                 * ...
                 * }
                 *
                 * to this:
                 *
                 * scopeName menu-item {...}
                 *
                **/
                ShadowCss.prototype._insertPolyfillRulesInCssText = function (cssText) {
                    // Difference with webcomponents.js: does not handle comments
                    return lang_181.StringWrapper.replaceAllMapped(cssText, _cssContentRuleRe, function (m) {
                        var rule = m[0];
                        rule = lang_181.StringWrapper.replace(rule, m[1], '');
                        rule = lang_181.StringWrapper.replace(rule, m[2], '');
                        return m[3] + rule;
                    });
                };
                /* Ensure styles are scoped. Pseudo-scoping takes a rule like:
                 *
                 *  .foo {... }
                 *
                 *  and converts this to
                 *
                 *  scopeName .foo { ... }
                */
                ShadowCss.prototype._scopeCssText = function (cssText, scopeSelector, hostSelector) {
                    var unscoped = this._extractUnscopedRulesFromCssText(cssText);
                    cssText = this._insertPolyfillHostInCssText(cssText);
                    cssText = this._convertColonHost(cssText);
                    cssText = this._convertColonHostContext(cssText);
                    cssText = this._convertShadowDOMSelectors(cssText);
                    if (lang_181.isPresent(scopeSelector)) {
                        cssText = this._scopeSelectors(cssText, scopeSelector, hostSelector);
                    }
                    cssText = cssText + '\n' + unscoped;
                    return cssText.trim();
                };
                /*
                 * Process styles to add rules which will only apply under the polyfill
                 * and do not process via CSSOM. (CSSOM is destructive to rules on rare
                 * occasions, e.g. -webkit-calc on Safari.)
                 * For example, we convert this rule:
                 *
                 * @polyfill-unscoped-rule {
                 *   content: 'menu-item';
                 * ... }
                 *
                 * to this:
                 *
                 * menu-item {...}
                 *
                **/
                ShadowCss.prototype._extractUnscopedRulesFromCssText = function (cssText) {
                    // Difference with webcomponents.js: does not handle comments
                    var r = '', m;
                    var matcher = lang_181.RegExpWrapper.matcher(_cssContentUnscopedRuleRe, cssText);
                    while (lang_181.isPresent(m = lang_181.RegExpMatcherWrapper.next(matcher))) {
                        var rule = m[0];
                        rule = lang_181.StringWrapper.replace(rule, m[2], '');
                        rule = lang_181.StringWrapper.replace(rule, m[1], m[3]);
                        r += rule + '\n\n';
                    }
                    return r;
                };
                /*
                 * convert a rule like :host(.foo) > .bar { }
                 *
                 * to
                 *
                 * scopeName.foo > .bar
                */
                ShadowCss.prototype._convertColonHost = function (cssText) {
                    return this._convertColonRule(cssText, _cssColonHostRe, this._colonHostPartReplacer);
                };
                /*
                 * convert a rule like :host-context(.foo) > .bar { }
                 *
                 * to
                 *
                 * scopeName.foo > .bar, .foo scopeName > .bar { }
                 *
                 * and
                 *
                 * :host-context(.foo:host) .bar { ... }
                 *
                 * to
                 *
                 * scopeName.foo .bar { ... }
                */
                ShadowCss.prototype._convertColonHostContext = function (cssText) {
                    return this._convertColonRule(cssText, _cssColonHostContextRe, this._colonHostContextPartReplacer);
                };
                ShadowCss.prototype._convertColonRule = function (cssText, regExp, partReplacer) {
                    // p1 = :host, p2 = contents of (), p3 rest of rule
                    return lang_181.StringWrapper.replaceAllMapped(cssText, regExp, function (m) {
                        if (lang_181.isPresent(m[2])) {
                            var parts = m[2].split(','), r = [];
                            for (var i = 0; i < parts.length; i++) {
                                var p = parts[i];
                                if (lang_181.isBlank(p))
                                    break;
                                p = p.trim();
                                r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));
                            }
                            return r.join(',');
                        }
                        else {
                            return _polyfillHostNoCombinator + m[3];
                        }
                    });
                };
                ShadowCss.prototype._colonHostContextPartReplacer = function (host, part, suffix) {
                    if (lang_181.StringWrapper.contains(part, _polyfillHost)) {
                        return this._colonHostPartReplacer(host, part, suffix);
                    }
                    else {
                        return host + part + suffix + ', ' + part + ' ' + host + suffix;
                    }
                };
                ShadowCss.prototype._colonHostPartReplacer = function (host, part, suffix) {
                    return host + lang_181.StringWrapper.replace(part, _polyfillHost, '') + suffix;
                };
                /*
                 * Convert combinators like ::shadow and pseudo-elements like ::content
                 * by replacing with space.
                */
                ShadowCss.prototype._convertShadowDOMSelectors = function (cssText) {
                    for (var i = 0; i < _shadowDOMSelectorsRe.length; i++) {
                        cssText = lang_181.StringWrapper.replaceAll(cssText, _shadowDOMSelectorsRe[i], ' ');
                    }
                    return cssText;
                };
                // change a selector like 'div' to 'name div'
                ShadowCss.prototype._scopeSelectors = function (cssText, scopeSelector, hostSelector) {
                    var _this = this;
                    return processRules(cssText, function (rule) {
                        var selector = rule.selector;
                        var content = rule.content;
                        if (rule.selector[0] != '@' || rule.selector.startsWith('@page')) {
                            selector =
                                _this._scopeSelector(rule.selector, scopeSelector, hostSelector, _this.strictStyling);
                        }
                        else if (rule.selector.startsWith('@media')) {
                            content = _this._scopeSelectors(rule.content, scopeSelector, hostSelector);
                        }
                        return new CssRule(selector, content);
                    });
                };
                ShadowCss.prototype._scopeSelector = function (selector, scopeSelector, hostSelector, strict) {
                    var r = [], parts = selector.split(',');
                    for (var i = 0; i < parts.length; i++) {
                        var p = parts[i].trim();
                        var deepParts = lang_181.StringWrapper.split(p, _shadowDeepSelectors);
                        var shallowPart = deepParts[0];
                        if (this._selectorNeedsScoping(shallowPart, scopeSelector)) {
                            deepParts[0] = strict && !lang_181.StringWrapper.contains(shallowPart, _polyfillHostNoCombinator) ?
                                this._applyStrictSelectorScope(shallowPart, scopeSelector) :
                                this._applySelectorScope(shallowPart, scopeSelector, hostSelector);
                        }
                        // replace /deep/ with a space for child selectors
                        r.push(deepParts.join(' '));
                    }
                    return r.join(', ');
                };
                ShadowCss.prototype._selectorNeedsScoping = function (selector, scopeSelector) {
                    var re = this._makeScopeMatcher(scopeSelector);
                    return !lang_181.isPresent(lang_181.RegExpWrapper.firstMatch(re, selector));
                };
                ShadowCss.prototype._makeScopeMatcher = function (scopeSelector) {
                    var lre = /\[/g;
                    var rre = /\]/g;
                    scopeSelector = lang_181.StringWrapper.replaceAll(scopeSelector, lre, '\\[');
                    scopeSelector = lang_181.StringWrapper.replaceAll(scopeSelector, rre, '\\]');
                    return lang_181.RegExpWrapper.create('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');
                };
                ShadowCss.prototype._applySelectorScope = function (selector, scopeSelector, hostSelector) {
                    // Difference from webcomponentsjs: scopeSelector could not be an array
                    return this._applySimpleSelectorScope(selector, scopeSelector, hostSelector);
                };
                // scope via name and [is=name]
                ShadowCss.prototype._applySimpleSelectorScope = function (selector, scopeSelector, hostSelector) {
                    if (lang_181.isPresent(lang_181.RegExpWrapper.firstMatch(_polyfillHostRe, selector))) {
                        var replaceBy = this.strictStyling ? "[" + hostSelector + "]" : scopeSelector;
                        selector = lang_181.StringWrapper.replace(selector, _polyfillHostNoCombinator, replaceBy);
                        return lang_181.StringWrapper.replaceAll(selector, _polyfillHostRe, replaceBy + ' ');
                    }
                    else {
                        return scopeSelector + ' ' + selector;
                    }
                };
                // return a selector with [name] suffix on each simple selector
                // e.g. .foo.bar > .zot becomes .foo[name].bar[name] > .zot[name]  /** @internal */
                ShadowCss.prototype._applyStrictSelectorScope = function (selector, scopeSelector) {
                    var isRe = /\[is=([^\]]*)\]/g;
                    scopeSelector = lang_181.StringWrapper.replaceAllMapped(scopeSelector, isRe, function (m) { return m[1]; });
                    var splits = [' ', '>', '+', '~'], scoped = selector, attrName = '[' + scopeSelector + ']';
                    for (var i = 0; i < splits.length; i++) {
                        var sep = splits[i];
                        var parts = scoped.split(sep);
                        scoped = parts.map(function (p) {
                            // remove :host since it should be unnecessary
                            var t = lang_181.StringWrapper.replaceAll(p.trim(), _polyfillHostRe, '');
                            if (t.length > 0 && !collection_77.ListWrapper.contains(splits, t) &&
                                !lang_181.StringWrapper.contains(t, attrName)) {
                                var re = /([^:]*)(:*)(.*)/g;
                                var m = lang_181.RegExpWrapper.firstMatch(re, t);
                                if (lang_181.isPresent(m)) {
                                    p = m[1] + attrName + m[2] + m[3];
                                }
                            }
                            return p;
                        })
                            .join(sep);
                    }
                    return scoped;
                };
                ShadowCss.prototype._insertPolyfillHostInCssText = function (selector) {
                    selector = lang_181.StringWrapper.replaceAll(selector, _colonHostContextRe, _polyfillHostContext);
                    selector = lang_181.StringWrapper.replaceAll(selector, _colonHostRe, _polyfillHost);
                    return selector;
                };
                return ShadowCss;
            }());
            exports_341("ShadowCss", ShadowCss);
            _cssContentNextSelectorRe = /polyfill-next-selector[^}]*content:[\s]*?['"](.*?)['"][;\s]*}([^{]*?){/gim;
            _cssContentRuleRe = /(polyfill-rule)[^}]*(content:[\s]*['"](.*?)['"])[;\s]*[^}]*}/gim;
            _cssContentUnscopedRuleRe = /(polyfill-unscoped-rule)[^}]*(content:[\s]*['"](.*?)['"])[;\s]*[^}]*}/gim;
            _polyfillHost = '-shadowcsshost';
            // note: :host-context pre-processed to -shadowcsshostcontext.
            _polyfillHostContext = '-shadowcsscontext';
            _parenSuffix = ')(?:\\((' +
                '(?:\\([^)(]*\\)|[^)(]*)+?' +
                ')\\))?([^,{]*)';
            _cssColonHostRe = lang_181.RegExpWrapper.create('(' + _polyfillHost + _parenSuffix, 'im');
            _cssColonHostContextRe = lang_181.RegExpWrapper.create('(' + _polyfillHostContext + _parenSuffix, 'im');
            _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';
            _shadowDOMSelectorsRe = [
                /::shadow/g,
                /::content/g,
                // Deprecated selectors
                // TODO(vicb): see https://github.com/angular/clang-format/issues/16
                // clang-format off
                /\/shadow-deep\//g,
                /\/shadow\//g,
            ];
            _shadowDeepSelectors = /(?:>>>)|(?:\/deep\/)/g;
            _selectorReSuffix = '([>\\s~+\[.,{:][\\s\\S]*)?$';
            _polyfillHostRe = lang_181.RegExpWrapper.create(_polyfillHost, 'im');
            _colonHostRe = /:host/gim;
            _colonHostContextRe = /:host-context/gim;
            _commentRe = /\/\*[\s\S]*?\*\//g;
            _ruleRe = /(\s*)([^;\{\}]+?)(\s*)((?:{%BLOCK%}?\s*;?)|(?:\s*;))/g;
            _curlyRe = /([{}])/g;
            OPEN_CURLY = '{';
            CLOSE_CURLY = '}';
            BLOCK_PLACEHOLDER = '%BLOCK%';
            CssRule = (function () {
                function CssRule(selector, content) {
                    this.selector = selector;
                    this.content = content;
                }
                return CssRule;
            }());
            exports_341("CssRule", CssRule);
            StringWithEscapedBlocks = (function () {
                function StringWithEscapedBlocks(escapedString, blocks) {
                    this.escapedString = escapedString;
                    this.blocks = blocks;
                }
                return StringWithEscapedBlocks;
            }());
        }
    }
});
System.register("test/node_modules/angular2/ts/src/compiler/xhr_mock", ['angular2/src/compiler/xhr', 'angular2/src/facade/collection', 'angular2/src/facade/lang', 'angular2/src/facade/exceptions', 'angular2/src/facade/async'], function(exports_342, context_342) {
    "use strict";
    var __moduleName = context_342 && context_342.id;
    var xhr_5, collection_78, lang_182, exceptions_68, async_32;
    var MockXHR, _PendingRequest, _Expectation;
    return {
        setters:[
            function (xhr_5_1) {
                xhr_5 = xhr_5_1;
            },
            function (collection_78_1) {
                collection_78 = collection_78_1;
            },
            function (lang_182_1) {
                lang_182 = lang_182_1;
            },
            function (exceptions_68_1) {
                exceptions_68 = exceptions_68_1;
            },
            function (async_32_1) {
                async_32 = async_32_1;
            }],
        execute: function() {
            /**
             * A mock implementation of {@link XHR} that allows outgoing requests to be mocked
             * and responded to within a single test, without going to the network.
             */
            MockXHR = (function (_super) {
                __extends(MockXHR, _super);
                function MockXHR() {
                    _super.apply(this, arguments);
                    this._expectations = [];
                    this._definitions = new collection_78.Map();
                    this._requests = [];
                }
                MockXHR.prototype.get = function (url) {
                    var request = new _PendingRequest(url);
                    this._requests.push(request);
                    return request.getPromise();
                };
                /**
                 * Add an expectation for the given URL. Incoming requests will be checked against
                 * the next expectation (in FIFO order). The `verifyNoOutstandingExpectations` method
                 * can be used to check if any expectations have not yet been met.
                 *
                 * The response given will be returned if the expectation matches.
                 */
                MockXHR.prototype.expect = function (url, response) {
                    var expectation = new _Expectation(url, response);
                    this._expectations.push(expectation);
                };
                /**
                 * Add a definition for the given URL to return the given response. Unlike expectations,
                 * definitions have no order and will satisfy any matching request at any time. Also
                 * unlike expectations, unused definitions do not cause `verifyNoOutstandingExpectations`
                 * to return an error.
                 */
                MockXHR.prototype.when = function (url, response) { this._definitions.set(url, response); };
                /**
                 * Process pending requests and verify there are no outstanding expectations. Also fails
                 * if no requests are pending.
                 */
                MockXHR.prototype.flush = function () {
                    if (this._requests.length === 0) {
                        throw new exceptions_68.BaseException('No pending requests to flush');
                    }
                    do {
                        this._processRequest(this._requests.shift());
                    } while (this._requests.length > 0);
                    this.verifyNoOutstandingExpectations();
                };
                /**
                 * Throw an exception if any expectations have not been satisfied.
                 */
                MockXHR.prototype.verifyNoOutstandingExpectations = function () {
                    if (this._expectations.length === 0)
                        return;
                    var urls = [];
                    for (var i = 0; i < this._expectations.length; i++) {
                        var expectation = this._expectations[i];
                        urls.push(expectation.url);
                    }
                    throw new exceptions_68.BaseException("Unsatisfied requests: " + urls.join(', '));
                };
                MockXHR.prototype._processRequest = function (request) {
                    var url = request.url;
                    if (this._expectations.length > 0) {
                        var expectation = this._expectations[0];
                        if (expectation.url == url) {
                            collection_78.ListWrapper.remove(this._expectations, expectation);
                            request.complete(expectation.response);
                            return;
                        }
                    }
                    if (this._definitions.has(url)) {
                        var response = this._definitions.get(url);
                        request.complete(lang_182.normalizeBlank(response));
                        return;
                    }
                    throw new exceptions_68.BaseException("Unexpected request " + url);
                };
                return MockXHR;
            }(xhr_5.XHR));
            exports_342("MockXHR", MockXHR);
            _PendingRequest = (function () {
                function _PendingRequest(url) {
                    this.url = url;
                    this.completer = async_32.PromiseWrapper.completer();
                }
                _PendingRequest.prototype.complete = function (response) {
                    if (lang_182.isBlank(response)) {
                        this.completer.reject("Failed to load " + this.url, null);
                    }
                    else {
                        this.completer.resolve(response);
                    }
                };
                _PendingRequest.prototype.getPromise = function () { return this.completer.promise; };
                return _PendingRequest;
            }());
            _Expectation = (function () {
                function _Expectation(url, response) {
                    this.url = url;
                    this.response = response;
                }
                return _Expectation;
            }());
        }
    }
});
System.register("test/node_modules/angular2/ts/src/compiler/css/lexer", ["angular2/src/facade/lang", 'angular2/src/facade/exceptions', "angular2/src/compiler/chars"], function(exports_343, context_343) {
    "use strict";
    var __moduleName = context_343 && context_343.id;
    var lang_183, exceptions_69, chars_1;
    var CssTokenType, CssLexerMode, LexedCssResult, CssToken, CssLexer, CssScannerError, CssScanner;
    function generateErrorMessage(input, message, errorValue, index, row, column) {
        return (message + " at column " + row + ":" + column + " in expression [") +
            findProblemCode(input, errorValue, index, column) + ']';
    }
    exports_343("generateErrorMessage", generateErrorMessage);
    function findProblemCode(input, errorValue, index, column) {
        var endOfProblemLine = index;
        var current = charCode(input, index);
        while (current > 0 && !isNewline(current)) {
            current = charCode(input, ++endOfProblemLine);
        }
        var choppedString = input.substring(0, endOfProblemLine);
        var pointerPadding = "";
        for (var i = 0; i < column; i++) {
            pointerPadding += " ";
        }
        var pointerString = "";
        for (var i = 0; i < errorValue.length; i++) {
            pointerString += "^";
        }
        return choppedString + "\n" + pointerPadding + pointerString + "\n";
    }
    exports_343("findProblemCode", findProblemCode);
    function _trackWhitespace(mode) {
        switch (mode) {
            case CssLexerMode.SELECTOR:
            case CssLexerMode.ALL_TRACK_WS:
            case CssLexerMode.STYLE_VALUE:
                return true;
            default:
                return false;
        }
    }
    function isAtKeyword(current, next) {
        return current.numValue == chars_1.$AT && next.type == CssTokenType.Identifier;
    }
    function isCharMatch(target, previous, code) {
        return code == target && previous != chars_1.$BACKSLASH;
    }
    function isDigit(code) {
        return chars_1.$0 <= code && code <= chars_1.$9;
    }
    function isCommentStart(code, next) {
        return code == chars_1.$SLASH && next == chars_1.$STAR;
    }
    function isCommentEnd(code, next) {
        return code == chars_1.$STAR && next == chars_1.$SLASH;
    }
    function isStringStart(code, next) {
        var target = code;
        if (target == chars_1.$BACKSLASH) {
            target = next;
        }
        return target == chars_1.$DQ || target == chars_1.$SQ;
    }
    function isIdentifierStart(code, next) {
        var target = code;
        if (target == chars_1.$MINUS) {
            target = next;
        }
        return (chars_1.$a <= target && target <= chars_1.$z) || (chars_1.$A <= target && target <= chars_1.$Z) || target == chars_1.$BACKSLASH ||
            target == chars_1.$MINUS || target == chars_1.$_;
    }
    function isIdentifierPart(target) {
        return (chars_1.$a <= target && target <= chars_1.$z) || (chars_1.$A <= target && target <= chars_1.$Z) || target == chars_1.$BACKSLASH ||
            target == chars_1.$MINUS || target == chars_1.$_ || isDigit(target);
    }
    function isValidPseudoSelectorCharacter(code) {
        switch (code) {
            case chars_1.$LPAREN:
            case chars_1.$RPAREN:
                return true;
            default:
                return false;
        }
    }
    function isValidKeyframeBlockCharacter(code) {
        return code == chars_1.$PERCENT;
    }
    function isValidAttributeSelectorCharacter(code) {
        // value^*|$~=something
        switch (code) {
            case chars_1.$$:
            case chars_1.$PIPE:
            case chars_1.$CARET:
            case chars_1.$TILDA:
            case chars_1.$STAR:
            case chars_1.$EQ:
                return true;
            default:
                return false;
        }
    }
    function isValidSelectorCharacter(code) {
        // selector [ key   = value ]
        // IDENT    C IDENT C IDENT C
        // #id, .class, *+~>
        // tag:PSEUDO
        switch (code) {
            case chars_1.$HASH:
            case chars_1.$PERIOD:
            case chars_1.$TILDA:
            case chars_1.$STAR:
            case chars_1.$PLUS:
            case chars_1.$GT:
            case chars_1.$COLON:
            case chars_1.$PIPE:
            case chars_1.$COMMA:
                return true;
            default:
                return false;
        }
    }
    function isValidStyleBlockCharacter(code) {
        // key:value;
        // key:calc(something ... )
        switch (code) {
            case chars_1.$HASH:
            case chars_1.$SEMICOLON:
            case chars_1.$COLON:
            case chars_1.$PERCENT:
            case chars_1.$SLASH:
            case chars_1.$BACKSLASH:
            case chars_1.$BANG:
            case chars_1.$PERIOD:
            case chars_1.$LPAREN:
            case chars_1.$RPAREN:
                return true;
            default:
                return false;
        }
    }
    function isValidMediaQueryRuleCharacter(code) {
        // (min-width: 7.5em) and (orientation: landscape)
        switch (code) {
            case chars_1.$LPAREN:
            case chars_1.$RPAREN:
            case chars_1.$COLON:
            case chars_1.$PERCENT:
            case chars_1.$PERIOD:
                return true;
            default:
                return false;
        }
    }
    function isValidAtRuleCharacter(code) {
        // @document url(http://www.w3.org/page?something=on#hash),
        switch (code) {
            case chars_1.$LPAREN:
            case chars_1.$RPAREN:
            case chars_1.$COLON:
            case chars_1.$PERCENT:
            case chars_1.$PERIOD:
            case chars_1.$SLASH:
            case chars_1.$BACKSLASH:
            case chars_1.$HASH:
            case chars_1.$EQ:
            case chars_1.$QUESTION:
            case chars_1.$AMPERSAND:
            case chars_1.$STAR:
            case chars_1.$COMMA:
            case chars_1.$MINUS:
            case chars_1.$PLUS:
                return true;
            default:
                return false;
        }
    }
    function isValidStyleFunctionCharacter(code) {
        switch (code) {
            case chars_1.$PERIOD:
            case chars_1.$MINUS:
            case chars_1.$PLUS:
            case chars_1.$STAR:
            case chars_1.$SLASH:
            case chars_1.$LPAREN:
            case chars_1.$RPAREN:
            case chars_1.$COMMA:
                return true;
            default:
                return false;
        }
    }
    function isValidBlockCharacter(code) {
        // @something { }
        // IDENT
        return code == chars_1.$AT;
    }
    function isValidCssCharacter(code, mode) {
        switch (mode) {
            case CssLexerMode.ALL:
            case CssLexerMode.ALL_TRACK_WS:
                return true;
            case CssLexerMode.SELECTOR:
                return isValidSelectorCharacter(code);
            case CssLexerMode.PSEUDO_SELECTOR:
                return isValidPseudoSelectorCharacter(code);
            case CssLexerMode.ATTRIBUTE_SELECTOR:
                return isValidAttributeSelectorCharacter(code);
            case CssLexerMode.MEDIA_QUERY:
                return isValidMediaQueryRuleCharacter(code);
            case CssLexerMode.AT_RULE_QUERY:
                return isValidAtRuleCharacter(code);
            case CssLexerMode.KEYFRAME_BLOCK:
                return isValidKeyframeBlockCharacter(code);
            case CssLexerMode.STYLE_BLOCK:
            case CssLexerMode.STYLE_VALUE:
                return isValidStyleBlockCharacter(code);
            case CssLexerMode.STYLE_CALC_FUNCTION:
                return isValidStyleFunctionCharacter(code);
            case CssLexerMode.BLOCK:
                return isValidBlockCharacter(code);
            default:
                return false;
        }
    }
    function charCode(input, index) {
        return index >= input.length ? chars_1.$EOF : lang_183.StringWrapper.charCodeAt(input, index);
    }
    function charStr(code) {
        return lang_183.StringWrapper.fromCharCode(code);
    }
    function isNewline(code) {
        switch (code) {
            case chars_1.$FF:
            case chars_1.$CR:
            case chars_1.$LF:
            case chars_1.$VTAB:
                return true;
            default:
                return false;
        }
    }
    exports_343("isNewline", isNewline);
    return {
        setters:[
            function (lang_183_1) {
                lang_183 = lang_183_1;
            },
            function (exceptions_69_1) {
                exceptions_69 = exceptions_69_1;
            },
            function (chars_1_1) {
                chars_1 = chars_1_1;
                exports_343({
                    "$EOF": chars_1_1["$EOF"],
                    "$AT": chars_1_1["$AT"],
                    "$RBRACE": chars_1_1["$RBRACE"],
                    "$LBRACE": chars_1_1["$LBRACE"],
                    "$LBRACKET": chars_1_1["$LBRACKET"],
                    "$RBRACKET": chars_1_1["$RBRACKET"],
                    "$LPAREN": chars_1_1["$LPAREN"],
                    "$RPAREN": chars_1_1["$RPAREN"],
                    "$COMMA": chars_1_1["$COMMA"],
                    "$COLON": chars_1_1["$COLON"],
                    "$SEMICOLON": chars_1_1["$SEMICOLON"],
                    "isWhitespace": chars_1_1["isWhitespace"]
                });
            }],
        execute: function() {
            (function (CssTokenType) {
                CssTokenType[CssTokenType["EOF"] = 0] = "EOF";
                CssTokenType[CssTokenType["String"] = 1] = "String";
                CssTokenType[CssTokenType["Comment"] = 2] = "Comment";
                CssTokenType[CssTokenType["Identifier"] = 3] = "Identifier";
                CssTokenType[CssTokenType["Number"] = 4] = "Number";
                CssTokenType[CssTokenType["IdentifierOrNumber"] = 5] = "IdentifierOrNumber";
                CssTokenType[CssTokenType["AtKeyword"] = 6] = "AtKeyword";
                CssTokenType[CssTokenType["Character"] = 7] = "Character";
                CssTokenType[CssTokenType["Whitespace"] = 8] = "Whitespace";
                CssTokenType[CssTokenType["Invalid"] = 9] = "Invalid";
            })(CssTokenType || (CssTokenType = {}));
            exports_343("CssTokenType", CssTokenType);
            (function (CssLexerMode) {
                CssLexerMode[CssLexerMode["ALL"] = 0] = "ALL";
                CssLexerMode[CssLexerMode["ALL_TRACK_WS"] = 1] = "ALL_TRACK_WS";
                CssLexerMode[CssLexerMode["SELECTOR"] = 2] = "SELECTOR";
                CssLexerMode[CssLexerMode["PSEUDO_SELECTOR"] = 3] = "PSEUDO_SELECTOR";
                CssLexerMode[CssLexerMode["ATTRIBUTE_SELECTOR"] = 4] = "ATTRIBUTE_SELECTOR";
                CssLexerMode[CssLexerMode["AT_RULE_QUERY"] = 5] = "AT_RULE_QUERY";
                CssLexerMode[CssLexerMode["MEDIA_QUERY"] = 6] = "MEDIA_QUERY";
                CssLexerMode[CssLexerMode["BLOCK"] = 7] = "BLOCK";
                CssLexerMode[CssLexerMode["KEYFRAME_BLOCK"] = 8] = "KEYFRAME_BLOCK";
                CssLexerMode[CssLexerMode["STYLE_BLOCK"] = 9] = "STYLE_BLOCK";
                CssLexerMode[CssLexerMode["STYLE_VALUE"] = 10] = "STYLE_VALUE";
                CssLexerMode[CssLexerMode["STYLE_VALUE_FUNCTION"] = 11] = "STYLE_VALUE_FUNCTION";
                CssLexerMode[CssLexerMode["STYLE_CALC_FUNCTION"] = 12] = "STYLE_CALC_FUNCTION";
            })(CssLexerMode || (CssLexerMode = {}));
            exports_343("CssLexerMode", CssLexerMode);
            LexedCssResult = (function () {
                function LexedCssResult(error, token) {
                    this.error = error;
                    this.token = token;
                }
                return LexedCssResult;
            }());
            exports_343("LexedCssResult", LexedCssResult);
            CssToken = (function () {
                function CssToken(index, column, line, type, strValue) {
                    this.index = index;
                    this.column = column;
                    this.line = line;
                    this.type = type;
                    this.strValue = strValue;
                    this.numValue = charCode(strValue, 0);
                }
                return CssToken;
            }());
            exports_343("CssToken", CssToken);
            CssLexer = (function () {
                function CssLexer() {
                }
                CssLexer.prototype.scan = function (text, trackComments) {
                    if (trackComments === void 0) { trackComments = false; }
                    return new CssScanner(text, trackComments);
                };
                return CssLexer;
            }());
            exports_343("CssLexer", CssLexer);
            CssScannerError = (function (_super) {
                __extends(CssScannerError, _super);
                function CssScannerError(token, message) {
                    _super.call(this, 'Css Parse Error: ' + message);
                    this.token = token;
                    this.rawMessage = message;
                }
                CssScannerError.prototype.toString = function () { return this.message; };
                return CssScannerError;
            }(exceptions_69.BaseException));
            exports_343("CssScannerError", CssScannerError);
            CssScanner = (function () {
                function CssScanner(input, _trackComments) {
                    if (_trackComments === void 0) { _trackComments = false; }
                    this.input = input;
                    this._trackComments = _trackComments;
                    this.length = 0;
                    this.index = -1;
                    this.column = -1;
                    this.line = 0;
                    this._currentMode = CssLexerMode.BLOCK;
                    this._currentError = null;
                    this.length = this.input.length;
                    this.peekPeek = this.peekAt(0);
                    this.advance();
                }
                CssScanner.prototype.getMode = function () { return this._currentMode; };
                CssScanner.prototype.setMode = function (mode) {
                    if (this._currentMode != mode) {
                        if (_trackWhitespace(this._currentMode)) {
                            this.consumeWhitespace();
                        }
                        this._currentMode = mode;
                    }
                };
                CssScanner.prototype.advance = function () {
                    if (isNewline(this.peek)) {
                        this.column = 0;
                        this.line++;
                    }
                    else {
                        this.column++;
                    }
                    this.index++;
                    this.peek = this.peekPeek;
                    this.peekPeek = this.peekAt(this.index + 1);
                };
                CssScanner.prototype.peekAt = function (index) {
                    return index >= this.length ? chars_1.$EOF : lang_183.StringWrapper.charCodeAt(this.input, index);
                };
                CssScanner.prototype.consumeEmptyStatements = function () {
                    this.consumeWhitespace();
                    while (this.peek == chars_1.$SEMICOLON) {
                        this.advance();
                        this.consumeWhitespace();
                    }
                };
                CssScanner.prototype.consumeWhitespace = function () {
                    while (chars_1.isWhitespace(this.peek) || isNewline(this.peek)) {
                        this.advance();
                        if (!this._trackComments && isCommentStart(this.peek, this.peekPeek)) {
                            this.advance(); // /
                            this.advance(); // *
                            while (!isCommentEnd(this.peek, this.peekPeek)) {
                                if (this.peek == chars_1.$EOF) {
                                    this.error('Unterminated comment');
                                }
                                this.advance();
                            }
                            this.advance(); // *
                            this.advance(); // /
                        }
                    }
                };
                CssScanner.prototype.consume = function (type, value) {
                    if (value === void 0) { value = null; }
                    var mode = this._currentMode;
                    this.setMode(CssLexerMode.ALL);
                    var previousIndex = this.index;
                    var previousLine = this.line;
                    var previousColumn = this.column;
                    var output = this.scan();
                    // just incase the inner scan method returned an error
                    if (lang_183.isPresent(output.error)) {
                        this.setMode(mode);
                        return output;
                    }
                    var next = output.token;
                    if (!lang_183.isPresent(next)) {
                        next = new CssToken(0, 0, 0, CssTokenType.EOF, "end of file");
                    }
                    var isMatchingType;
                    if (type == CssTokenType.IdentifierOrNumber) {
                        // TODO (matsko): implement array traversal for lookup here
                        isMatchingType = next.type == CssTokenType.Number || next.type == CssTokenType.Identifier;
                    }
                    else {
                        isMatchingType = next.type == type;
                    }
                    // before throwing the error we need to bring back the former
                    // mode so that the parser can recover...
                    this.setMode(mode);
                    var error = null;
                    if (!isMatchingType || (lang_183.isPresent(value) && value != next.strValue)) {
                        var errorMessage = lang_183.resolveEnumToken(CssTokenType, next.type) + " does not match expected " +
                            lang_183.resolveEnumToken(CssTokenType, type) + " value";
                        if (lang_183.isPresent(value)) {
                            errorMessage += ' ("' + next.strValue + '" should match "' + value + '")';
                        }
                        error = new CssScannerError(next, generateErrorMessage(this.input, errorMessage, next.strValue, previousIndex, previousLine, previousColumn));
                    }
                    return new LexedCssResult(error, next);
                };
                CssScanner.prototype.scan = function () {
                    var trackWS = _trackWhitespace(this._currentMode);
                    if (this.index == 0 && !trackWS) {
                        this.consumeWhitespace();
                    }
                    var token = this._scan();
                    if (token == null)
                        return null;
                    var error = this._currentError;
                    this._currentError = null;
                    if (!trackWS) {
                        this.consumeWhitespace();
                    }
                    return new LexedCssResult(error, token);
                };
                CssScanner.prototype._scan = function () {
                    var peek = this.peek;
                    var peekPeek = this.peekPeek;
                    if (peek == chars_1.$EOF)
                        return null;
                    if (isCommentStart(peek, peekPeek)) {
                        // even if comments are not tracked we still lex the
                        // comment so we can move the pointer forward
                        var commentToken = this.scanComment();
                        if (this._trackComments) {
                            return commentToken;
                        }
                    }
                    if (_trackWhitespace(this._currentMode) && (chars_1.isWhitespace(peek) || isNewline(peek))) {
                        return this.scanWhitespace();
                    }
                    peek = this.peek;
                    peekPeek = this.peekPeek;
                    if (peek == chars_1.$EOF)
                        return null;
                    if (isStringStart(peek, peekPeek)) {
                        return this.scanString();
                    }
                    // something like url(cool)
                    if (this._currentMode == CssLexerMode.STYLE_VALUE_FUNCTION) {
                        return this.scanCssValueFunction();
                    }
                    var isModifier = peek == chars_1.$PLUS || peek == chars_1.$MINUS;
                    var digitA = isModifier ? false : isDigit(peek);
                    var digitB = isDigit(peekPeek);
                    if (digitA || (isModifier && (peekPeek == chars_1.$PERIOD || digitB)) || (peek == chars_1.$PERIOD && digitB)) {
                        return this.scanNumber();
                    }
                    if (peek == chars_1.$AT) {
                        return this.scanAtExpression();
                    }
                    if (isIdentifierStart(peek, peekPeek)) {
                        return this.scanIdentifier();
                    }
                    if (isValidCssCharacter(peek, this._currentMode)) {
                        return this.scanCharacter();
                    }
                    return this.error("Unexpected character [" + lang_183.StringWrapper.fromCharCode(peek) + "]");
                };
                CssScanner.prototype.scanComment = function () {
                    if (this.assertCondition(isCommentStart(this.peek, this.peekPeek), "Expected comment start value")) {
                        return null;
                    }
                    var start = this.index;
                    var startingColumn = this.column;
                    var startingLine = this.line;
                    this.advance(); // /
                    this.advance(); // *
                    while (!isCommentEnd(this.peek, this.peekPeek)) {
                        if (this.peek == chars_1.$EOF) {
                            this.error('Unterminated comment');
                        }
                        this.advance();
                    }
                    this.advance(); // *
                    this.advance(); // /
                    var str = this.input.substring(start, this.index);
                    return new CssToken(start, startingColumn, startingLine, CssTokenType.Comment, str);
                };
                CssScanner.prototype.scanWhitespace = function () {
                    var start = this.index;
                    var startingColumn = this.column;
                    var startingLine = this.line;
                    while (chars_1.isWhitespace(this.peek) && this.peek != chars_1.$EOF) {
                        this.advance();
                    }
                    var str = this.input.substring(start, this.index);
                    return new CssToken(start, startingColumn, startingLine, CssTokenType.Whitespace, str);
                };
                CssScanner.prototype.scanString = function () {
                    if (this.assertCondition(isStringStart(this.peek, this.peekPeek), "Unexpected non-string starting value")) {
                        return null;
                    }
                    var target = this.peek;
                    var start = this.index;
                    var startingColumn = this.column;
                    var startingLine = this.line;
                    var previous = target;
                    this.advance();
                    while (!isCharMatch(target, previous, this.peek)) {
                        if (this.peek == chars_1.$EOF || isNewline(this.peek)) {
                            this.error('Unterminated quote');
                        }
                        previous = this.peek;
                        this.advance();
                    }
                    if (this.assertCondition(this.peek == target, "Unterminated quote")) {
                        return null;
                    }
                    this.advance();
                    var str = this.input.substring(start, this.index);
                    return new CssToken(start, startingColumn, startingLine, CssTokenType.String, str);
                };
                CssScanner.prototype.scanNumber = function () {
                    var start = this.index;
                    var startingColumn = this.column;
                    if (this.peek == chars_1.$PLUS || this.peek == chars_1.$MINUS) {
                        this.advance();
                    }
                    var periodUsed = false;
                    while (isDigit(this.peek) || this.peek == chars_1.$PERIOD) {
                        if (this.peek == chars_1.$PERIOD) {
                            if (periodUsed) {
                                this.error('Unexpected use of a second period value');
                            }
                            periodUsed = true;
                        }
                        this.advance();
                    }
                    var strValue = this.input.substring(start, this.index);
                    return new CssToken(start, startingColumn, this.line, CssTokenType.Number, strValue);
                };
                CssScanner.prototype.scanIdentifier = function () {
                    if (this.assertCondition(isIdentifierStart(this.peek, this.peekPeek), 'Expected identifier starting value')) {
                        return null;
                    }
                    var start = this.index;
                    var startingColumn = this.column;
                    while (isIdentifierPart(this.peek)) {
                        this.advance();
                    }
                    var strValue = this.input.substring(start, this.index);
                    return new CssToken(start, startingColumn, this.line, CssTokenType.Identifier, strValue);
                };
                CssScanner.prototype.scanCssValueFunction = function () {
                    var start = this.index;
                    var startingColumn = this.column;
                    while (this.peek != chars_1.$EOF && this.peek != chars_1.$RPAREN) {
                        this.advance();
                    }
                    var strValue = this.input.substring(start, this.index);
                    return new CssToken(start, startingColumn, this.line, CssTokenType.Identifier, strValue);
                };
                CssScanner.prototype.scanCharacter = function () {
                    var start = this.index;
                    var startingColumn = this.column;
                    if (this.assertCondition(isValidCssCharacter(this.peek, this._currentMode), charStr(this.peek) + ' is not a valid CSS character')) {
                        return null;
                    }
                    var c = this.input.substring(start, start + 1);
                    this.advance();
                    return new CssToken(start, startingColumn, this.line, CssTokenType.Character, c);
                };
                CssScanner.prototype.scanAtExpression = function () {
                    if (this.assertCondition(this.peek == chars_1.$AT, 'Expected @ value')) {
                        return null;
                    }
                    var start = this.index;
                    var startingColumn = this.column;
                    this.advance();
                    if (isIdentifierStart(this.peek, this.peekPeek)) {
                        var ident = this.scanIdentifier();
                        var strValue = '@' + ident.strValue;
                        return new CssToken(start, startingColumn, this.line, CssTokenType.AtKeyword, strValue);
                    }
                    else {
                        return this.scanCharacter();
                    }
                };
                CssScanner.prototype.assertCondition = function (status, errorMessage) {
                    if (!status) {
                        this.error(errorMessage);
                        return true;
                    }
                    return false;
                };
                CssScanner.prototype.error = function (message, errorTokenValue, doNotAdvance) {
                    if (errorTokenValue === void 0) { errorTokenValue = null; }
                    if (doNotAdvance === void 0) { doNotAdvance = false; }
                    var index = this.index;
                    var column = this.column;
                    var line = this.line;
                    errorTokenValue =
                        lang_183.isPresent(errorTokenValue) ? errorTokenValue : lang_183.StringWrapper.fromCharCode(this.peek);
                    var invalidToken = new CssToken(index, column, line, CssTokenType.Invalid, errorTokenValue);
                    var errorMessage = generateErrorMessage(this.input, message, errorTokenValue, index, line, column);
                    if (!doNotAdvance) {
                        this.advance();
                    }
                    this._currentError = new CssScannerError(invalidToken, errorMessage);
                    return invalidToken;
                };
                return CssScanner;
            }());
            exports_343("CssScanner", CssScanner);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/compiler/css/parser", ["angular2/src/compiler/parse_util", "angular2/src/facade/lang", "angular2/src/compiler/css/lexer"], function(exports_344, context_344) {
    "use strict";
    var __moduleName = context_344 && context_344.id;
    var parse_util_5, lang_184, lexer_3;
    var BlockType, EOF_DELIM, RBRACE_DELIM, LBRACE_DELIM, COMMA_DELIM, COLON_DELIM, SEMICOLON_DELIM, NEWLINE_DELIM, RPAREN_DELIM, CssAST, ParsedCssResult, CssParser, CssStyleValueAST, CssRuleAST, CssBlockRuleAST, CssKeyframeRuleAST, CssKeyframeDefinitionAST, CssBlockDefinitionRuleAST, CssMediaQueryRuleAST, CssInlineRuleAST, CssSelectorRuleAST, CssDefinitionAST, CssSelectorAST, CssBlockAST, CssStyleSheetAST, CssParseError, CssUnknownTokenListAST;
    function mergeTokens(tokens, separator) {
        if (separator === void 0) { separator = ""; }
        var mainToken = tokens[0];
        var str = mainToken.strValue;
        for (var i = 1; i < tokens.length; i++) {
            str += separator + tokens[i].strValue;
        }
        return new lexer_3.CssToken(mainToken.index, mainToken.column, mainToken.line, mainToken.type, str);
    }
    function getDelimFromToken(token) {
        return getDelimFromCharacter(token.numValue);
    }
    function getDelimFromCharacter(code) {
        switch (code) {
            case lexer_3.$EOF:
                return EOF_DELIM;
            case lexer_3.$COMMA:
                return COMMA_DELIM;
            case lexer_3.$COLON:
                return COLON_DELIM;
            case lexer_3.$SEMICOLON:
                return SEMICOLON_DELIM;
            case lexer_3.$RBRACE:
                return RBRACE_DELIM;
            case lexer_3.$LBRACE:
                return LBRACE_DELIM;
            case lexer_3.$RPAREN:
                return RPAREN_DELIM;
            default:
                return lexer_3.isNewline(code) ? NEWLINE_DELIM : 0;
        }
    }
    function characterContainsDelimiter(code, delimiters) {
        return lang_184.bitWiseAnd([getDelimFromCharacter(code), delimiters]) > 0;
    }
    return {
        setters:[
            function (parse_util_5_1) {
                parse_util_5 = parse_util_5_1;
            },
            function (lang_184_1) {
                lang_184 = lang_184_1;
            },
            function (lexer_3_1) {
                lexer_3 = lexer_3_1;
                exports_344({
                    "CssToken": lexer_3_1["CssToken"]
                });
            }],
        execute: function() {
            (function (BlockType) {
                BlockType[BlockType["Import"] = 0] = "Import";
                BlockType[BlockType["Charset"] = 1] = "Charset";
                BlockType[BlockType["Namespace"] = 2] = "Namespace";
                BlockType[BlockType["Supports"] = 3] = "Supports";
                BlockType[BlockType["Keyframes"] = 4] = "Keyframes";
                BlockType[BlockType["MediaQuery"] = 5] = "MediaQuery";
                BlockType[BlockType["Selector"] = 6] = "Selector";
                BlockType[BlockType["FontFace"] = 7] = "FontFace";
                BlockType[BlockType["Page"] = 8] = "Page";
                BlockType[BlockType["Document"] = 9] = "Document";
                BlockType[BlockType["Viewport"] = 10] = "Viewport";
                BlockType[BlockType["Unsupported"] = 11] = "Unsupported";
            })(BlockType || (BlockType = {}));
            exports_344("BlockType", BlockType);
            EOF_DELIM = 1;
            RBRACE_DELIM = 2;
            LBRACE_DELIM = 4;
            COMMA_DELIM = 8;
            COLON_DELIM = 16;
            SEMICOLON_DELIM = 32;
            NEWLINE_DELIM = 64;
            RPAREN_DELIM = 128;
            CssAST = (function () {
                function CssAST() {
                }
                CssAST.prototype.visit = function (visitor, context) { };
                return CssAST;
            }());
            exports_344("CssAST", CssAST);
            ParsedCssResult = (function () {
                function ParsedCssResult(errors, ast) {
                    this.errors = errors;
                    this.ast = ast;
                }
                return ParsedCssResult;
            }());
            exports_344("ParsedCssResult", ParsedCssResult);
            CssParser = (function () {
                function CssParser(_scanner, _fileName) {
                    this._scanner = _scanner;
                    this._fileName = _fileName;
                    this._errors = [];
                    this._file = new parse_util_5.ParseSourceFile(this._scanner.input, _fileName);
                }
                CssParser.prototype._resolveBlockType = function (token) {
                    switch (token.strValue) {
                        case '@-o-keyframes':
                        case '@-moz-keyframes':
                        case '@-webkit-keyframes':
                        case '@keyframes':
                            return BlockType.Keyframes;
                        case '@charset':
                            return BlockType.Charset;
                        case '@import':
                            return BlockType.Import;
                        case '@namespace':
                            return BlockType.Namespace;
                        case '@page':
                            return BlockType.Page;
                        case '@document':
                            return BlockType.Document;
                        case '@media':
                            return BlockType.MediaQuery;
                        case '@font-face':
                            return BlockType.FontFace;
                        case '@viewport':
                            return BlockType.Viewport;
                        case '@supports':
                            return BlockType.Supports;
                        default:
                            return BlockType.Unsupported;
                    }
                };
                CssParser.prototype.parse = function () {
                    var delimiters = EOF_DELIM;
                    var ast = this._parseStyleSheet(delimiters);
                    var errors = this._errors;
                    this._errors = [];
                    return new ParsedCssResult(errors, ast);
                };
                CssParser.prototype._parseStyleSheet = function (delimiters) {
                    var results = [];
                    this._scanner.consumeEmptyStatements();
                    while (this._scanner.peek != lexer_3.$EOF) {
                        this._scanner.setMode(lexer_3.CssLexerMode.BLOCK);
                        results.push(this._parseRule(delimiters));
                    }
                    return new CssStyleSheetAST(results);
                };
                CssParser.prototype._parseRule = function (delimiters) {
                    if (this._scanner.peek == lexer_3.$AT) {
                        return this._parseAtRule(delimiters);
                    }
                    return this._parseSelectorRule(delimiters);
                };
                CssParser.prototype._parseAtRule = function (delimiters) {
                    this._scanner.setMode(lexer_3.CssLexerMode.BLOCK);
                    var token = this._scan();
                    this._assertCondition(token.type == lexer_3.CssTokenType.AtKeyword, "The CSS Rule " + token.strValue + " is not a valid [@] rule.", token);
                    var block, type = this._resolveBlockType(token);
                    switch (type) {
                        case BlockType.Charset:
                        case BlockType.Namespace:
                        case BlockType.Import:
                            var value = this._parseValue(delimiters);
                            this._scanner.setMode(lexer_3.CssLexerMode.BLOCK);
                            this._scanner.consumeEmptyStatements();
                            return new CssInlineRuleAST(type, value);
                        case BlockType.Viewport:
                        case BlockType.FontFace:
                            block = this._parseStyleBlock(delimiters);
                            return new CssBlockRuleAST(type, block);
                        case BlockType.Keyframes:
                            var tokens = this._collectUntilDelim(lang_184.bitWiseOr([delimiters, RBRACE_DELIM, LBRACE_DELIM]));
                            // keyframes only have one identifier name
                            var name = tokens[0];
                            return new CssKeyframeRuleAST(name, this._parseKeyframeBlock(delimiters));
                        case BlockType.MediaQuery:
                            this._scanner.setMode(lexer_3.CssLexerMode.MEDIA_QUERY);
                            var tokens = this._collectUntilDelim(lang_184.bitWiseOr([delimiters, RBRACE_DELIM, LBRACE_DELIM]));
                            return new CssMediaQueryRuleAST(tokens, this._parseBlock(delimiters));
                        case BlockType.Document:
                        case BlockType.Supports:
                        case BlockType.Page:
                            this._scanner.setMode(lexer_3.CssLexerMode.AT_RULE_QUERY);
                            var tokens = this._collectUntilDelim(lang_184.bitWiseOr([delimiters, RBRACE_DELIM, LBRACE_DELIM]));
                            return new CssBlockDefinitionRuleAST(type, tokens, this._parseBlock(delimiters));
                        // if a custom @rule { ... } is used it should still tokenize the insides
                        default:
                            var listOfTokens = [];
                            this._scanner.setMode(lexer_3.CssLexerMode.ALL);
                            this._error(lexer_3.generateErrorMessage(this._scanner.input, "The CSS \"at\" rule \"" + token.strValue + "\" is not allowed to used here", token.strValue, token.index, token.line, token.column), token);
                            this._collectUntilDelim(lang_184.bitWiseOr([delimiters, LBRACE_DELIM, SEMICOLON_DELIM]))
                                .forEach(function (token) { listOfTokens.push(token); });
                            if (this._scanner.peek == lexer_3.$LBRACE) {
                                this._consume(lexer_3.CssTokenType.Character, '{');
                                this._collectUntilDelim(lang_184.bitWiseOr([delimiters, RBRACE_DELIM, LBRACE_DELIM]))
                                    .forEach(function (token) { listOfTokens.push(token); });
                                this._consume(lexer_3.CssTokenType.Character, '}');
                            }
                            return new CssUnknownTokenListAST(token, listOfTokens);
                    }
                };
                CssParser.prototype._parseSelectorRule = function (delimiters) {
                    var selectors = this._parseSelectors(delimiters);
                    var block = this._parseStyleBlock(delimiters);
                    this._scanner.setMode(lexer_3.CssLexerMode.BLOCK);
                    this._scanner.consumeEmptyStatements();
                    return new CssSelectorRuleAST(selectors, block);
                };
                CssParser.prototype._parseSelectors = function (delimiters) {
                    delimiters = lang_184.bitWiseOr([delimiters, LBRACE_DELIM]);
                    var selectors = [];
                    var isParsingSelectors = true;
                    while (isParsingSelectors) {
                        selectors.push(this._parseSelector(delimiters));
                        isParsingSelectors = !characterContainsDelimiter(this._scanner.peek, delimiters);
                        if (isParsingSelectors) {
                            this._consume(lexer_3.CssTokenType.Character, ',');
                            isParsingSelectors = !characterContainsDelimiter(this._scanner.peek, delimiters);
                        }
                    }
                    return selectors;
                };
                CssParser.prototype._scan = function () {
                    var output = this._scanner.scan();
                    var token = output.token;
                    var error = output.error;
                    if (lang_184.isPresent(error)) {
                        this._error(error.rawMessage, token);
                    }
                    return token;
                };
                CssParser.prototype._consume = function (type, value) {
                    if (value === void 0) { value = null; }
                    var output = this._scanner.consume(type, value);
                    var token = output.token;
                    var error = output.error;
                    if (lang_184.isPresent(error)) {
                        this._error(error.rawMessage, token);
                    }
                    return token;
                };
                CssParser.prototype._parseKeyframeBlock = function (delimiters) {
                    delimiters = lang_184.bitWiseOr([delimiters, RBRACE_DELIM]);
                    this._scanner.setMode(lexer_3.CssLexerMode.KEYFRAME_BLOCK);
                    this._consume(lexer_3.CssTokenType.Character, '{');
                    var definitions = [];
                    while (!characterContainsDelimiter(this._scanner.peek, delimiters)) {
                        definitions.push(this._parseKeyframeDefinition(delimiters));
                    }
                    this._consume(lexer_3.CssTokenType.Character, '}');
                    return new CssBlockAST(definitions);
                };
                CssParser.prototype._parseKeyframeDefinition = function (delimiters) {
                    var stepTokens = [];
                    delimiters = lang_184.bitWiseOr([delimiters, LBRACE_DELIM]);
                    while (!characterContainsDelimiter(this._scanner.peek, delimiters)) {
                        stepTokens.push(this._parseKeyframeLabel(lang_184.bitWiseOr([delimiters, COMMA_DELIM])));
                        if (this._scanner.peek != lexer_3.$LBRACE) {
                            this._consume(lexer_3.CssTokenType.Character, ',');
                        }
                    }
                    var styles = this._parseStyleBlock(lang_184.bitWiseOr([delimiters, RBRACE_DELIM]));
                    this._scanner.setMode(lexer_3.CssLexerMode.BLOCK);
                    return new CssKeyframeDefinitionAST(stepTokens, styles);
                };
                CssParser.prototype._parseKeyframeLabel = function (delimiters) {
                    this._scanner.setMode(lexer_3.CssLexerMode.KEYFRAME_BLOCK);
                    return mergeTokens(this._collectUntilDelim(delimiters));
                };
                CssParser.prototype._parseSelector = function (delimiters) {
                    delimiters = lang_184.bitWiseOr([delimiters, COMMA_DELIM, LBRACE_DELIM]);
                    this._scanner.setMode(lexer_3.CssLexerMode.SELECTOR);
                    var selectorCssTokens = [];
                    var isComplex = false;
                    var wsCssToken;
                    var previousToken;
                    var parenCount = 0;
                    while (!characterContainsDelimiter(this._scanner.peek, delimiters)) {
                        var code = this._scanner.peek;
                        switch (code) {
                            case lexer_3.$LPAREN:
                                parenCount++;
                                break;
                            case lexer_3.$RPAREN:
                                parenCount--;
                                break;
                            case lexer_3.$COLON:
                                this._scanner.setMode(lexer_3.CssLexerMode.PSEUDO_SELECTOR);
                                previousToken = this._consume(lexer_3.CssTokenType.Character, ':');
                                selectorCssTokens.push(previousToken);
                                continue;
                            case lexer_3.$LBRACKET:
                                // if we are already inside an attribute selector then we can't
                                // jump into the mode again. Therefore this error will get picked
                                // up when the scan method is called below.
                                if (this._scanner.getMode() != lexer_3.CssLexerMode.ATTRIBUTE_SELECTOR) {
                                    selectorCssTokens.push(this._consume(lexer_3.CssTokenType.Character, '['));
                                    this._scanner.setMode(lexer_3.CssLexerMode.ATTRIBUTE_SELECTOR);
                                    continue;
                                }
                                break;
                            case lexer_3.$RBRACKET:
                                selectorCssTokens.push(this._consume(lexer_3.CssTokenType.Character, ']'));
                                this._scanner.setMode(lexer_3.CssLexerMode.SELECTOR);
                                continue;
                        }
                        var token = this._scan();
                        // special case for the ":not(" selector since it
                        // contains an inner selector that needs to be parsed
                        // in isolation
                        if (this._scanner.getMode() == lexer_3.CssLexerMode.PSEUDO_SELECTOR && lang_184.isPresent(previousToken) &&
                            previousToken.numValue == lexer_3.$COLON && token.strValue == "not" &&
                            this._scanner.peek == lexer_3.$LPAREN) {
                            selectorCssTokens.push(token);
                            selectorCssTokens.push(this._consume(lexer_3.CssTokenType.Character, '('));
                            // the inner selector inside of :not(...) can only be one
                            // CSS selector (no commas allowed) therefore we parse only
                            // one selector by calling the method below
                            this._parseSelector(lang_184.bitWiseOr([delimiters, RPAREN_DELIM]))
                                .tokens.forEach(function (innerSelectorToken) { selectorCssTokens.push(innerSelectorToken); });
                            selectorCssTokens.push(this._consume(lexer_3.CssTokenType.Character, ')'));
                            continue;
                        }
                        previousToken = token;
                        if (token.type == lexer_3.CssTokenType.Whitespace) {
                            wsCssToken = token;
                        }
                        else {
                            if (lang_184.isPresent(wsCssToken)) {
                                selectorCssTokens.push(wsCssToken);
                                wsCssToken = null;
                                isComplex = true;
                            }
                            selectorCssTokens.push(token);
                        }
                    }
                    if (this._scanner.getMode() == lexer_3.CssLexerMode.ATTRIBUTE_SELECTOR) {
                        this._error("Unbalanced CSS attribute selector at column " + previousToken.line + ":" + previousToken.column, previousToken);
                    }
                    else if (parenCount > 0) {
                        this._error("Unbalanced pseudo selector function value at column " + previousToken.line + ":" + previousToken.column, previousToken);
                    }
                    return new CssSelectorAST(selectorCssTokens, isComplex);
                };
                CssParser.prototype._parseValue = function (delimiters) {
                    delimiters = lang_184.bitWiseOr([delimiters, RBRACE_DELIM, SEMICOLON_DELIM, NEWLINE_DELIM]);
                    this._scanner.setMode(lexer_3.CssLexerMode.STYLE_VALUE);
                    var strValue = "";
                    var tokens = [];
                    var previous;
                    while (!characterContainsDelimiter(this._scanner.peek, delimiters)) {
                        var token;
                        if (lang_184.isPresent(previous) && previous.type == lexer_3.CssTokenType.Identifier &&
                            this._scanner.peek == lexer_3.$LPAREN) {
                            token = this._consume(lexer_3.CssTokenType.Character, '(');
                            tokens.push(token);
                            strValue += token.strValue;
                            this._scanner.setMode(lexer_3.CssLexerMode.STYLE_VALUE_FUNCTION);
                            token = this._scan();
                            tokens.push(token);
                            strValue += token.strValue;
                            this._scanner.setMode(lexer_3.CssLexerMode.STYLE_VALUE);
                            token = this._consume(lexer_3.CssTokenType.Character, ')');
                            tokens.push(token);
                            strValue += token.strValue;
                        }
                        else {
                            token = this._scan();
                            if (token.type != lexer_3.CssTokenType.Whitespace) {
                                tokens.push(token);
                            }
                            strValue += token.strValue;
                        }
                        previous = token;
                    }
                    this._scanner.consumeWhitespace();
                    var code = this._scanner.peek;
                    if (code == lexer_3.$SEMICOLON) {
                        this._consume(lexer_3.CssTokenType.Character, ';');
                    }
                    else if (code != lexer_3.$RBRACE) {
                        this._error(lexer_3.generateErrorMessage(this._scanner.input, "The CSS key/value definition did not end with a semicolon", previous.strValue, previous.index, previous.line, previous.column), previous);
                    }
                    return new CssStyleValueAST(tokens, strValue);
                };
                CssParser.prototype._collectUntilDelim = function (delimiters, assertType) {
                    if (assertType === void 0) { assertType = null; }
                    var tokens = [];
                    while (!characterContainsDelimiter(this._scanner.peek, delimiters)) {
                        var val = lang_184.isPresent(assertType) ? this._consume(assertType) : this._scan();
                        tokens.push(val);
                    }
                    return tokens;
                };
                CssParser.prototype._parseBlock = function (delimiters) {
                    delimiters = lang_184.bitWiseOr([delimiters, RBRACE_DELIM]);
                    this._scanner.setMode(lexer_3.CssLexerMode.BLOCK);
                    this._consume(lexer_3.CssTokenType.Character, '{');
                    this._scanner.consumeEmptyStatements();
                    var results = [];
                    while (!characterContainsDelimiter(this._scanner.peek, delimiters)) {
                        results.push(this._parseRule(delimiters));
                    }
                    this._consume(lexer_3.CssTokenType.Character, '}');
                    this._scanner.setMode(lexer_3.CssLexerMode.BLOCK);
                    this._scanner.consumeEmptyStatements();
                    return new CssBlockAST(results);
                };
                CssParser.prototype._parseStyleBlock = function (delimiters) {
                    delimiters = lang_184.bitWiseOr([delimiters, RBRACE_DELIM, LBRACE_DELIM]);
                    this._scanner.setMode(lexer_3.CssLexerMode.STYLE_BLOCK);
                    this._consume(lexer_3.CssTokenType.Character, '{');
                    this._scanner.consumeEmptyStatements();
                    var definitions = [];
                    while (!characterContainsDelimiter(this._scanner.peek, delimiters)) {
                        definitions.push(this._parseDefinition(delimiters));
                        this._scanner.consumeEmptyStatements();
                    }
                    this._consume(lexer_3.CssTokenType.Character, '}');
                    this._scanner.setMode(lexer_3.CssLexerMode.STYLE_BLOCK);
                    this._scanner.consumeEmptyStatements();
                    return new CssBlockAST(definitions);
                };
                CssParser.prototype._parseDefinition = function (delimiters) {
                    this._scanner.setMode(lexer_3.CssLexerMode.STYLE_BLOCK);
                    var prop = this._consume(lexer_3.CssTokenType.Identifier);
                    var parseValue, value = null;
                    // the colon value separates the prop from the style.
                    // there are a few cases as to what could happen if it
                    // is missing
                    switch (this._scanner.peek) {
                        case lexer_3.$COLON:
                            this._consume(lexer_3.CssTokenType.Character, ':');
                            parseValue = true;
                            break;
                        case lexer_3.$SEMICOLON:
                        case lexer_3.$RBRACE:
                        case lexer_3.$EOF:
                            parseValue = false;
                            break;
                        default:
                            var propStr = [prop.strValue];
                            if (this._scanner.peek != lexer_3.$COLON) {
                                // this will throw the error
                                var nextValue = this._consume(lexer_3.CssTokenType.Character, ':');
                                propStr.push(nextValue.strValue);
                                var remainingTokens = this._collectUntilDelim(lang_184.bitWiseOr([delimiters, COLON_DELIM, SEMICOLON_DELIM]), lexer_3.CssTokenType.Identifier);
                                if (remainingTokens.length > 0) {
                                    remainingTokens.forEach(function (token) { propStr.push(token.strValue); });
                                }
                                prop = new lexer_3.CssToken(prop.index, prop.column, prop.line, prop.type, propStr.join(" "));
                            }
                            // this means we've reached the end of the definition and/or block
                            if (this._scanner.peek == lexer_3.$COLON) {
                                this._consume(lexer_3.CssTokenType.Character, ':');
                                parseValue = true;
                            }
                            else {
                                parseValue = false;
                            }
                            break;
                    }
                    if (parseValue) {
                        value = this._parseValue(delimiters);
                    }
                    else {
                        this._error(lexer_3.generateErrorMessage(this._scanner.input, "The CSS property was not paired with a style value", prop.strValue, prop.index, prop.line, prop.column), prop);
                    }
                    return new CssDefinitionAST(prop, value);
                };
                CssParser.prototype._assertCondition = function (status, errorMessage, problemToken) {
                    if (!status) {
                        this._error(errorMessage, problemToken);
                        return true;
                    }
                    return false;
                };
                CssParser.prototype._error = function (message, problemToken) {
                    var length = problemToken.strValue.length;
                    var error = CssParseError.create(this._file, 0, problemToken.line, problemToken.column, length, message);
                    this._errors.push(error);
                };
                return CssParser;
            }());
            exports_344("CssParser", CssParser);
            CssStyleValueAST = (function (_super) {
                __extends(CssStyleValueAST, _super);
                function CssStyleValueAST(tokens, strValue) {
                    _super.call(this);
                    this.tokens = tokens;
                    this.strValue = strValue;
                }
                CssStyleValueAST.prototype.visit = function (visitor, context) { visitor.visitCssValue(this); };
                return CssStyleValueAST;
            }(CssAST));
            exports_344("CssStyleValueAST", CssStyleValueAST);
            CssRuleAST = (function (_super) {
                __extends(CssRuleAST, _super);
                function CssRuleAST() {
                    _super.apply(this, arguments);
                }
                return CssRuleAST;
            }(CssAST));
            exports_344("CssRuleAST", CssRuleAST);
            CssBlockRuleAST = (function (_super) {
                __extends(CssBlockRuleAST, _super);
                function CssBlockRuleAST(type, block, name) {
                    if (name === void 0) { name = null; }
                    _super.call(this);
                    this.type = type;
                    this.block = block;
                    this.name = name;
                }
                CssBlockRuleAST.prototype.visit = function (visitor, context) { visitor.visitCssBlock(this.block, context); };
                return CssBlockRuleAST;
            }(CssRuleAST));
            exports_344("CssBlockRuleAST", CssBlockRuleAST);
            CssKeyframeRuleAST = (function (_super) {
                __extends(CssKeyframeRuleAST, _super);
                function CssKeyframeRuleAST(name, block) {
                    _super.call(this, BlockType.Keyframes, block, name);
                }
                CssKeyframeRuleAST.prototype.visit = function (visitor, context) { visitor.visitCssKeyframeRule(this, context); };
                return CssKeyframeRuleAST;
            }(CssBlockRuleAST));
            exports_344("CssKeyframeRuleAST", CssKeyframeRuleAST);
            CssKeyframeDefinitionAST = (function (_super) {
                __extends(CssKeyframeDefinitionAST, _super);
                function CssKeyframeDefinitionAST(_steps, block) {
                    _super.call(this, BlockType.Keyframes, block, mergeTokens(_steps, ","));
                    this.steps = _steps;
                }
                CssKeyframeDefinitionAST.prototype.visit = function (visitor, context) {
                    visitor.visitCssKeyframeDefinition(this, context);
                };
                return CssKeyframeDefinitionAST;
            }(CssBlockRuleAST));
            exports_344("CssKeyframeDefinitionAST", CssKeyframeDefinitionAST);
            CssBlockDefinitionRuleAST = (function (_super) {
                __extends(CssBlockDefinitionRuleAST, _super);
                function CssBlockDefinitionRuleAST(type, query, block) {
                    _super.call(this, type, block);
                    this.query = query;
                    this.strValue = query.map(function (token) { return token.strValue; }).join("");
                    var firstCssToken = query[0];
                    this.name = new lexer_3.CssToken(firstCssToken.index, firstCssToken.column, firstCssToken.line, lexer_3.CssTokenType.Identifier, this.strValue);
                }
                CssBlockDefinitionRuleAST.prototype.visit = function (visitor, context) { visitor.visitCssBlock(this.block, context); };
                return CssBlockDefinitionRuleAST;
            }(CssBlockRuleAST));
            exports_344("CssBlockDefinitionRuleAST", CssBlockDefinitionRuleAST);
            CssMediaQueryRuleAST = (function (_super) {
                __extends(CssMediaQueryRuleAST, _super);
                function CssMediaQueryRuleAST(query, block) {
                    _super.call(this, BlockType.MediaQuery, query, block);
                }
                CssMediaQueryRuleAST.prototype.visit = function (visitor, context) { visitor.visitCssMediaQueryRule(this, context); };
                return CssMediaQueryRuleAST;
            }(CssBlockDefinitionRuleAST));
            exports_344("CssMediaQueryRuleAST", CssMediaQueryRuleAST);
            CssInlineRuleAST = (function (_super) {
                __extends(CssInlineRuleAST, _super);
                function CssInlineRuleAST(type, value) {
                    _super.call(this);
                    this.type = type;
                    this.value = value;
                }
                CssInlineRuleAST.prototype.visit = function (visitor, context) { visitor.visitInlineCssRule(this, context); };
                return CssInlineRuleAST;
            }(CssRuleAST));
            exports_344("CssInlineRuleAST", CssInlineRuleAST);
            CssSelectorRuleAST = (function (_super) {
                __extends(CssSelectorRuleAST, _super);
                function CssSelectorRuleAST(selectors, block) {
                    _super.call(this, BlockType.Selector, block);
                    this.selectors = selectors;
                    this.strValue = selectors.map(function (selector) { return selector.strValue; }).join(",");
                }
                CssSelectorRuleAST.prototype.visit = function (visitor, context) { visitor.visitCssSelectorRule(this, context); };
                return CssSelectorRuleAST;
            }(CssBlockRuleAST));
            exports_344("CssSelectorRuleAST", CssSelectorRuleAST);
            CssDefinitionAST = (function (_super) {
                __extends(CssDefinitionAST, _super);
                function CssDefinitionAST(property, value) {
                    _super.call(this);
                    this.property = property;
                    this.value = value;
                }
                CssDefinitionAST.prototype.visit = function (visitor, context) { visitor.visitCssDefinition(this, context); };
                return CssDefinitionAST;
            }(CssAST));
            exports_344("CssDefinitionAST", CssDefinitionAST);
            CssSelectorAST = (function (_super) {
                __extends(CssSelectorAST, _super);
                function CssSelectorAST(tokens, isComplex) {
                    if (isComplex === void 0) { isComplex = false; }
                    _super.call(this);
                    this.tokens = tokens;
                    this.isComplex = isComplex;
                    this.strValue = tokens.map(function (token) { return token.strValue; }).join("");
                }
                CssSelectorAST.prototype.visit = function (visitor, context) { visitor.visitCssSelector(this, context); };
                return CssSelectorAST;
            }(CssAST));
            exports_344("CssSelectorAST", CssSelectorAST);
            CssBlockAST = (function (_super) {
                __extends(CssBlockAST, _super);
                function CssBlockAST(entries) {
                    _super.call(this);
                    this.entries = entries;
                }
                CssBlockAST.prototype.visit = function (visitor, context) { visitor.visitCssBlock(this, context); };
                return CssBlockAST;
            }(CssAST));
            exports_344("CssBlockAST", CssBlockAST);
            CssStyleSheetAST = (function (_super) {
                __extends(CssStyleSheetAST, _super);
                function CssStyleSheetAST(rules) {
                    _super.call(this);
                    this.rules = rules;
                }
                CssStyleSheetAST.prototype.visit = function (visitor, context) { visitor.visitCssStyleSheet(this, context); };
                return CssStyleSheetAST;
            }(CssAST));
            exports_344("CssStyleSheetAST", CssStyleSheetAST);
            CssParseError = (function (_super) {
                __extends(CssParseError, _super);
                function CssParseError(span, message) {
                    _super.call(this, span, message);
                }
                CssParseError.create = function (file, offset, line, col, length, errMsg) {
                    var start = new parse_util_5.ParseLocation(file, offset, line, col);
                    var end = new parse_util_5.ParseLocation(file, offset, line, col + length);
                    var span = new parse_util_5.ParseSourceSpan(start, end);
                    return new CssParseError(span, "CSS Parse Error: " + errMsg);
                };
                return CssParseError;
            }(parse_util_5.ParseError));
            exports_344("CssParseError", CssParseError);
            CssUnknownTokenListAST = (function (_super) {
                __extends(CssUnknownTokenListAST, _super);
                function CssUnknownTokenListAST(name, tokens) {
                    _super.call(this);
                    this.name = name;
                    this.tokens = tokens;
                }
                CssUnknownTokenListAST.prototype.visit = function (visitor, context) { visitor.visitUnkownRule(this, context); };
                return CssUnknownTokenListAST;
            }(CssRuleAST));
            exports_344("CssUnknownTokenListAST", CssUnknownTokenListAST);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/compiler/schema/element_schema_registry", [], function(exports_345, context_345) {
    "use strict";
    var __moduleName = context_345 && context_345.id;
    var ElementSchemaRegistry;
    return {
        setters:[],
        execute: function() {
            ElementSchemaRegistry = (function () {
                function ElementSchemaRegistry() {
                }
                ElementSchemaRegistry.prototype.hasProperty = function (tagName, propName) { return true; };
                ElementSchemaRegistry.prototype.getMappedPropName = function (propName) { return propName; };
                return ElementSchemaRegistry;
            }());
            exports_345("ElementSchemaRegistry", ElementSchemaRegistry);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/compiler/schema/dom_element_schema_registry", ['angular2/src/core/di', 'angular2/src/facade/lang', 'angular2/src/facade/collection', 'angular2/src/platform/dom/dom_adapter', 'angular2/src/compiler/html_tags', "test/node_modules/angular2/ts/src/compiler/schema/element_schema_registry"], function(exports_346, context_346) {
    "use strict";
    var __moduleName = context_346 && context_346.id;
    var di_43, lang_185, collection_79, dom_adapter_8, html_tags_5, element_schema_registry_3;
    var NAMESPACE_URIS, DomElementSchemaRegistry;
    return {
        setters:[
            function (di_43_1) {
                di_43 = di_43_1;
            },
            function (lang_185_1) {
                lang_185 = lang_185_1;
            },
            function (collection_79_1) {
                collection_79 = collection_79_1;
            },
            function (dom_adapter_8_1) {
                dom_adapter_8 = dom_adapter_8_1;
            },
            function (html_tags_5_1) {
                html_tags_5 = html_tags_5_1;
            },
            function (element_schema_registry_3_1) {
                element_schema_registry_3 = element_schema_registry_3_1;
            }],
        execute: function() {
            NAMESPACE_URIS = lang_185.CONST_EXPR({ 'xlink': 'http://www.w3.org/1999/xlink', 'svg': 'http://www.w3.org/2000/svg' });
            DomElementSchemaRegistry = (function (_super) {
                __extends(DomElementSchemaRegistry, _super);
                function DomElementSchemaRegistry() {
                    _super.apply(this, arguments);
                    this._protoElements = new Map();
                }
                DomElementSchemaRegistry.prototype._getProtoElement = function (tagName) {
                    var element = this._protoElements.get(tagName);
                    if (lang_185.isBlank(element)) {
                        var nsAndName = html_tags_5.splitNsName(tagName);
                        element = lang_185.isPresent(nsAndName[0]) ?
                            dom_adapter_8.DOM.createElementNS(NAMESPACE_URIS[nsAndName[0]], nsAndName[1]) :
                            dom_adapter_8.DOM.createElement(nsAndName[1]);
                        this._protoElements.set(tagName, element);
                    }
                    return element;
                };
                DomElementSchemaRegistry.prototype.hasProperty = function (tagName, propName) {
                    if (tagName.indexOf('-') !== -1) {
                        // can't tell now as we don't know which properties a custom element will get
                        // once it is instantiated
                        return true;
                    }
                    else {
                        var elm = this._getProtoElement(tagName);
                        return dom_adapter_8.DOM.hasProperty(elm, propName);
                    }
                };
                DomElementSchemaRegistry.prototype.getMappedPropName = function (propName) {
                    var mappedPropName = collection_79.StringMapWrapper.get(dom_adapter_8.DOM.attrToPropMap, propName);
                    return lang_185.isPresent(mappedPropName) ? mappedPropName : propName;
                };
                DomElementSchemaRegistry = __decorate([
                    di_43.Injectable(), 
                    __metadata('design:paramtypes', [])
                ], DomElementSchemaRegistry);
                return DomElementSchemaRegistry;
            }(element_schema_registry_3.ElementSchemaRegistry));
            exports_346("DomElementSchemaRegistry", DomElementSchemaRegistry);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/angular_entrypoint", ['angular2/src/facade/lang'], function(exports_347, context_347) {
    "use strict";
    var __moduleName = context_347 && context_347.id;
    var lang_186;
    var AngularEntrypoint;
    return {
        setters:[
            function (lang_186_1) {
                lang_186 = lang_186_1;
            }],
        execute: function() {
            /**
             * Marks a function or method as an Angular 2 entrypoint. Only necessary in Dart code.
             *
             * The optional `name` parameter will be reflected in logs when the entry point is processed.
             *
             * See [the wiki][] for detailed documentation.
             * [the wiki]: https://github.com/angular/angular/wiki/Angular-2-Dart-Transformer#entry_points
             *
             * ## Example
             *
             * ```
             * @AngularEntrypoint("name-for-debug")
             * void main() {
             *   bootstrap(MyComponent);
             * }
             * ```
             */
            AngularEntrypoint = (function () {
                function AngularEntrypoint(name) {
                    this.name = name;
                }
                AngularEntrypoint = __decorate([
                    lang_186.CONST(), 
                    __metadata('design:paramtypes', [String])
                ], AngularEntrypoint);
                return AngularEntrypoint;
            }());
            exports_347("AngularEntrypoint", AngularEntrypoint);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/console", ['angular2/src/core/di', 'angular2/src/facade/lang'], function(exports_348, context_348) {
    "use strict";
    var __moduleName = context_348 && context_348.id;
    var di_44, lang_187;
    var Console;
    return {
        setters:[
            function (di_44_1) {
                di_44 = di_44_1;
            },
            function (lang_187_1) {
                lang_187 = lang_187_1;
            }],
        execute: function() {
            Console = (function () {
                function Console() {
                }
                Console.prototype.log = function (message) { lang_187.print(message); };
                Console = __decorate([
                    di_44.Injectable(), 
                    __metadata('design:paramtypes', [])
                ], Console);
                return Console;
            }());
            exports_348("Console", Console);
        }
    }
});
// empty file as we only need the dart version 
System.register("test/node_modules/angular2/ts/src/core/debug/debug_renderer", ['angular2/src/facade/lang', 'angular2/src/core/debug/debug_node'], function(exports_349, context_349) {
    "use strict";
    var __moduleName = context_349 && context_349.id;
    var lang_188, debug_node_3;
    var DebugDomRootRenderer, DebugDomRenderer;
    return {
        setters:[
            function (lang_188_1) {
                lang_188 = lang_188_1;
            },
            function (debug_node_3_1) {
                debug_node_3 = debug_node_3_1;
            }],
        execute: function() {
            DebugDomRootRenderer = (function () {
                function DebugDomRootRenderer(_delegate) {
                    this._delegate = _delegate;
                }
                DebugDomRootRenderer.prototype.renderComponent = function (componentProto) {
                    return new DebugDomRenderer(this, this._delegate.renderComponent(componentProto));
                };
                return DebugDomRootRenderer;
            }());
            exports_349("DebugDomRootRenderer", DebugDomRootRenderer);
            DebugDomRenderer = (function () {
                function DebugDomRenderer(_rootRenderer, _delegate) {
                    this._rootRenderer = _rootRenderer;
                    this._delegate = _delegate;
                }
                DebugDomRenderer.prototype.renderComponent = function (componentType) {
                    return this._rootRenderer.renderComponent(componentType);
                };
                DebugDomRenderer.prototype.selectRootElement = function (selector) {
                    var nativeEl = this._delegate.selectRootElement(selector);
                    var debugEl = new debug_node_3.DebugElement(nativeEl, null);
                    debug_node_3.indexDebugNode(debugEl);
                    return nativeEl;
                };
                DebugDomRenderer.prototype.createElement = function (parentElement, name) {
                    var nativeEl = this._delegate.createElement(parentElement, name);
                    var debugEl = new debug_node_3.DebugElement(nativeEl, debug_node_3.getDebugNode(parentElement));
                    debugEl.name = name;
                    debug_node_3.indexDebugNode(debugEl);
                    return nativeEl;
                };
                DebugDomRenderer.prototype.createViewRoot = function (hostElement) { return this._delegate.createViewRoot(hostElement); };
                DebugDomRenderer.prototype.createTemplateAnchor = function (parentElement) {
                    var comment = this._delegate.createTemplateAnchor(parentElement);
                    var debugEl = new debug_node_3.DebugNode(comment, debug_node_3.getDebugNode(parentElement));
                    debug_node_3.indexDebugNode(debugEl);
                    return comment;
                };
                DebugDomRenderer.prototype.createText = function (parentElement, value) {
                    var text = this._delegate.createText(parentElement, value);
                    var debugEl = new debug_node_3.DebugNode(text, debug_node_3.getDebugNode(parentElement));
                    debug_node_3.indexDebugNode(debugEl);
                    return text;
                };
                DebugDomRenderer.prototype.projectNodes = function (parentElement, nodes) {
                    var debugParent = debug_node_3.getDebugNode(parentElement);
                    if (lang_188.isPresent(debugParent) && debugParent instanceof debug_node_3.DebugElement) {
                        nodes.forEach(function (node) { debugParent.addChild(debug_node_3.getDebugNode(node)); });
                    }
                    return this._delegate.projectNodes(parentElement, nodes);
                };
                DebugDomRenderer.prototype.attachViewAfter = function (node, viewRootNodes) {
                    var debugNode = debug_node_3.getDebugNode(node);
                    if (lang_188.isPresent(debugNode)) {
                        var debugParent = debugNode.parent;
                        if (viewRootNodes.length > 0 && lang_188.isPresent(debugParent)) {
                            var debugViewRootNodes = [];
                            viewRootNodes.forEach(function (rootNode) { return debugViewRootNodes.push(debug_node_3.getDebugNode(rootNode)); });
                            debugParent.insertChildrenAfter(debugNode, debugViewRootNodes);
                        }
                    }
                    return this._delegate.attachViewAfter(node, viewRootNodes);
                };
                DebugDomRenderer.prototype.detachView = function (viewRootNodes) {
                    viewRootNodes.forEach(function (node) {
                        var debugNode = debug_node_3.getDebugNode(node);
                        if (lang_188.isPresent(debugNode) && lang_188.isPresent(debugNode.parent)) {
                            debugNode.parent.removeChild(debugNode);
                        }
                    });
                    return this._delegate.detachView(viewRootNodes);
                };
                DebugDomRenderer.prototype.destroyView = function (hostElement, viewAllNodes) {
                    viewAllNodes.forEach(function (node) { debug_node_3.removeDebugNodeFromIndex(debug_node_3.getDebugNode(node)); });
                    return this._delegate.destroyView(hostElement, viewAllNodes);
                };
                DebugDomRenderer.prototype.listen = function (renderElement, name, callback) {
                    var debugEl = debug_node_3.getDebugNode(renderElement);
                    if (lang_188.isPresent(debugEl)) {
                        debugEl.listeners.push(new debug_node_3.EventListener(name, callback));
                    }
                    return this._delegate.listen(renderElement, name, callback);
                };
                DebugDomRenderer.prototype.listenGlobal = function (target, name, callback) {
                    return this._delegate.listenGlobal(target, name, callback);
                };
                DebugDomRenderer.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) {
                    var debugEl = debug_node_3.getDebugNode(renderElement);
                    if (lang_188.isPresent(debugEl) && debugEl instanceof debug_node_3.DebugElement) {
                        debugEl.properties.set(propertyName, propertyValue);
                    }
                    return this._delegate.setElementProperty(renderElement, propertyName, propertyValue);
                };
                DebugDomRenderer.prototype.setElementAttribute = function (renderElement, attributeName, attributeValue) {
                    var debugEl = debug_node_3.getDebugNode(renderElement);
                    if (lang_188.isPresent(debugEl) && debugEl instanceof debug_node_3.DebugElement) {
                        debugEl.attributes.set(attributeName, attributeValue);
                    }
                    return this._delegate.setElementAttribute(renderElement, attributeName, attributeValue);
                };
                /**
                 * Used only in debug mode to serialize property changes to comment nodes,
                 * such as <template> placeholders.
                 */
                DebugDomRenderer.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) {
                    return this._delegate.setBindingDebugInfo(renderElement, propertyName, propertyValue);
                };
                /**
                 * Used only in development mode to set information needed by the DebugNode for this element.
                 */
                DebugDomRenderer.prototype.setElementDebugInfo = function (renderElement, info) {
                    var debugEl = debug_node_3.getDebugNode(renderElement);
                    debugEl.setDebugInfo(info);
                    return this._delegate.setElementDebugInfo(renderElement, info);
                };
                DebugDomRenderer.prototype.setElementClass = function (renderElement, className, isAdd) {
                    return this._delegate.setElementClass(renderElement, className, isAdd);
                };
                DebugDomRenderer.prototype.setElementStyle = function (renderElement, styleName, styleValue) {
                    return this._delegate.setElementStyle(renderElement, styleName, styleValue);
                };
                DebugDomRenderer.prototype.invokeElementMethod = function (renderElement, methodName, args) {
                    return this._delegate.invokeElementMethod(renderElement, methodName, args);
                };
                DebugDomRenderer.prototype.setText = function (renderNode, text) { return this._delegate.setText(renderNode, text); };
                return DebugDomRenderer;
            }());
            exports_349("DebugDomRenderer", DebugDomRenderer);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/linker/directive_lifecycle_reflector", ['angular2/src/facade/lang', "test/node_modules/angular2/ts/src/core/linker/interfaces"], function(exports_350, context_350) {
    "use strict";
    var __moduleName = context_350 && context_350.id;
    var lang_189, interfaces_10;
    function hasLifecycleHook(lcInterface, token) {
        if (!(token instanceof lang_189.Type))
            return false;
        var proto = token.prototype;
        switch (lcInterface) {
            case interfaces_10.LifecycleHooks.AfterContentInit:
                return !!proto.ngAfterContentInit;
            case interfaces_10.LifecycleHooks.AfterContentChecked:
                return !!proto.ngAfterContentChecked;
            case interfaces_10.LifecycleHooks.AfterViewInit:
                return !!proto.ngAfterViewInit;
            case interfaces_10.LifecycleHooks.AfterViewChecked:
                return !!proto.ngAfterViewChecked;
            case interfaces_10.LifecycleHooks.OnChanges:
                return !!proto.ngOnChanges;
            case interfaces_10.LifecycleHooks.DoCheck:
                return !!proto.ngDoCheck;
            case interfaces_10.LifecycleHooks.OnDestroy:
                return !!proto.ngOnDestroy;
            case interfaces_10.LifecycleHooks.OnInit:
                return !!proto.ngOnInit;
            default:
                return false;
        }
    }
    exports_350("hasLifecycleHook", hasLifecycleHook);
    return {
        setters:[
            function (lang_189_1) {
                lang_189 = lang_189_1;
            },
            function (interfaces_10_1) {
                interfaces_10 = interfaces_10_1;
            }],
        execute: function() {
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/pipes/pipes", ['angular2/src/facade/lang', 'angular2/src/facade/exceptions', 'angular2/src/facade/collection', 'angular2/src/core/change_detection/pipes'], function(exports_351, context_351) {
    "use strict";
    var __moduleName = context_351 && context_351.id;
    var lang_190, exceptions_70, collection_80, cd;
    var ProtoPipes, Pipes;
    return {
        setters:[
            function (lang_190_1) {
                lang_190 = lang_190_1;
            },
            function (exceptions_70_1) {
                exceptions_70 = exceptions_70_1;
            },
            function (collection_80_1) {
                collection_80 = collection_80_1;
            },
            function (cd_1) {
                cd = cd_1;
            }],
        execute: function() {
            ProtoPipes = (function () {
                function ProtoPipes(
                    /**
                    * Map of {@link PipeMetadata} names to {@link PipeMetadata} implementations.
                    */
                    config) {
                    this.config = config;
                    this.config = config;
                }
                ProtoPipes.fromProviders = function (providers) {
                    var config = {};
                    providers.forEach(function (b) { return config[b.name] = b; });
                    return new ProtoPipes(config);
                };
                ProtoPipes.prototype.get = function (name) {
                    var provider = this.config[name];
                    if (lang_190.isBlank(provider))
                        throw new exceptions_70.BaseException("Cannot find pipe '" + name + "'.");
                    return provider;
                };
                return ProtoPipes;
            }());
            exports_351("ProtoPipes", ProtoPipes);
            Pipes = (function () {
                function Pipes(proto, injector) {
                    this.proto = proto;
                    this.injector = injector;
                    /** @internal */
                    this._config = {};
                }
                Pipes.prototype.get = function (name) {
                    var cached = collection_80.StringMapWrapper.get(this._config, name);
                    if (lang_190.isPresent(cached))
                        return cached;
                    var p = this.proto.get(name);
                    var transform = this.injector.instantiateResolved(p);
                    var res = new cd.SelectedPipe(transform, p.pure);
                    if (p.pure) {
                        collection_80.StringMapWrapper.set(this._config, name, res);
                    }
                    return res;
                };
                return Pipes;
            }());
            exports_351("Pipes", Pipes);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/profile/wtf_init", [], function(exports_352, context_352) {
    "use strict";
    var __moduleName = context_352 && context_352.id;
    /**
     * This is here because DART requires it. It is noop in JS.
     */
    function wtfInit() { }
    exports_352("wtfInit", wtfInit);
    return {
        setters:[],
        execute: function() {
        }
    }
});
System.register("test/node_modules/angular2/ts/src/core/render/util", ['angular2/src/facade/lang'], function(exports_353, context_353) {
    "use strict";
    var __moduleName = context_353 && context_353.id;
    var lang_191;
    var CAMEL_CASE_REGEXP, DASH_CASE_REGEXP;
    function camelCaseToDashCase(input) {
        return lang_191.StringWrapper.replaceAllMapped(input, CAMEL_CASE_REGEXP, function (m) { return '-' + m[1].toLowerCase(); });
    }
    exports_353("camelCaseToDashCase", camelCaseToDashCase);
    function dashCaseToCamelCase(input) {
        return lang_191.StringWrapper.replaceAllMapped(input, DASH_CASE_REGEXP, function (m) { return m[1].toUpperCase(); });
    }
    exports_353("dashCaseToCamelCase", dashCaseToCamelCase);
    return {
        setters:[
            function (lang_191_1) {
                lang_191 = lang_191_1;
            }],
        execute: function() {
            CAMEL_CASE_REGEXP = /([A-Z])/g;
            DASH_CASE_REGEXP = /-([a-z])/g;
        }
    }
});
System.register("test/node_modules/angular2/ts/src/facade/browser", [], function(exports_354, context_354) {
    "use strict";
    var __moduleName = context_354 && context_354.id;
    var win, document, location, gc, performance, Event, MouseEvent, KeyboardEvent, EventTarget, History, Location, EventListener;
    return {
        setters:[],
        execute: function() {
            /**
             * JS version of browser APIs. This library can only run in the browser.
             */
            win = window;
            exports_354("window", win);
            exports_354("document", document = window.document);
            exports_354("location", location = window.location);
            exports_354("gc", gc = window['gc'] ? function () { return window['gc'](); } : function () { return null; });
            exports_354("performance", performance = window['performance'] ? window['performance'] : null);
            exports_354("Event", Event = window['Event']);
            exports_354("MouseEvent", MouseEvent = window['MouseEvent']);
            exports_354("KeyboardEvent", KeyboardEvent = window['KeyboardEvent']);
            exports_354("EventTarget", EventTarget = window['EventTarget']);
            exports_354("History", History = window['History']);
            exports_354("Location", Location = window['Location']);
            exports_354("EventListener", EventListener = window['EventListener']);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/facade/collection", ['angular2/src/facade/lang'], function(exports_355, context_355) {
    "use strict";
    var __moduleName = context_355 && context_355.id;
    var lang_192;
    var Map, Set, createMapFromPairs, createMapFromMap, _clearValues, _arrayFromMap, MapWrapper, StringMapWrapper, ListWrapper, createSetFromList, SetWrapper;
    function isListLikeIterable(obj) {
        if (!lang_192.isJsObject(obj))
            return false;
        return lang_192.isArray(obj) ||
            (!(obj instanceof Map) &&
                lang_192.getSymbolIterator() in obj); // JS Iterable have a Symbol.iterator prop
    }
    exports_355("isListLikeIterable", isListLikeIterable);
    function areIterablesEqual(a, b, comparator) {
        var iterator1 = a[lang_192.getSymbolIterator()]();
        var iterator2 = b[lang_192.getSymbolIterator()]();
        while (true) {
            var item1 = iterator1.next();
            var item2 = iterator2.next();
            if (item1.done && item2.done)
                return true;
            if (item1.done || item2.done)
                return false;
            if (!comparator(item1.value, item2.value))
                return false;
        }
    }
    exports_355("areIterablesEqual", areIterablesEqual);
    function iterateListLike(obj, fn) {
        if (lang_192.isArray(obj)) {
            for (var i = 0; i < obj.length; i++) {
                fn(obj[i]);
            }
        }
        else {
            var iterator = obj[lang_192.getSymbolIterator()]();
            var item;
            while (!((item = iterator.next()).done)) {
                fn(item.value);
            }
        }
    }
    exports_355("iterateListLike", iterateListLike);
    return {
        setters:[
            function (lang_192_1) {
                lang_192 = lang_192_1;
            }],
        execute: function() {
            exports_355("Map", Map = lang_192.global.Map);
            exports_355("Set", Set = lang_192.global.Set);
            // Safari and Internet Explorer do not support the iterable parameter to the
            // Map constructor.  We work around that by manually adding the items.
            createMapFromPairs = (function () {
                try {
                    if (new Map([[1, 2]]).size === 1) {
                        return function createMapFromPairs(pairs) { return new Map(pairs); };
                    }
                }
                catch (e) {
                }
                return function createMapAndPopulateFromPairs(pairs) {
                    var map = new Map();
                    for (var i = 0; i < pairs.length; i++) {
                        var pair = pairs[i];
                        map.set(pair[0], pair[1]);
                    }
                    return map;
                };
            })();
            createMapFromMap = (function () {
                try {
                    if (new Map(new Map())) {
                        return function createMapFromMap(m) { return new Map(m); };
                    }
                }
                catch (e) {
                }
                return function createMapAndPopulateFromMap(m) {
                    var map = new Map();
                    m.forEach(function (v, k) { map.set(k, v); });
                    return map;
                };
            })();
            _clearValues = (function () {
                if ((new Map()).keys().next) {
                    return function _clearValues(m) {
                        var keyIterator = m.keys();
                        var k;
                        while (!((k = keyIterator.next()).done)) {
                            m.set(k.value, null);
                        }
                    };
                }
                else {
                    return function _clearValuesWithForeEach(m) {
                        m.forEach(function (v, k) { m.set(k, null); });
                    };
                }
            })();
            // Safari doesn't implement MapIterator.next(), which is used is Traceur's polyfill of Array.from
            // TODO(mlaval): remove the work around once we have a working polyfill of Array.from
            _arrayFromMap = (function () {
                try {
                    if ((new Map()).values().next) {
                        return function createArrayFromMap(m, getValues) {
                            return getValues ? Array.from(m.values()) : Array.from(m.keys());
                        };
                    }
                }
                catch (e) {
                }
                return function createArrayFromMapWithForeach(m, getValues) {
                    var res = ListWrapper.createFixedSize(m.size), i = 0;
                    m.forEach(function (v, k) {
                        res[i] = getValues ? v : k;
                        i++;
                    });
                    return res;
                };
            })();
            MapWrapper = (function () {
                function MapWrapper() {
                }
                MapWrapper.clone = function (m) { return createMapFromMap(m); };
                MapWrapper.createFromStringMap = function (stringMap) {
                    var result = new Map();
                    for (var prop in stringMap) {
                        result.set(prop, stringMap[prop]);
                    }
                    return result;
                };
                MapWrapper.toStringMap = function (m) {
                    var r = {};
                    m.forEach(function (v, k) { return r[k] = v; });
                    return r;
                };
                MapWrapper.createFromPairs = function (pairs) { return createMapFromPairs(pairs); };
                MapWrapper.clearValues = function (m) { _clearValues(m); };
                MapWrapper.iterable = function (m) { return m; };
                MapWrapper.keys = function (m) { return _arrayFromMap(m, false); };
                MapWrapper.values = function (m) { return _arrayFromMap(m, true); };
                return MapWrapper;
            }());
            exports_355("MapWrapper", MapWrapper);
            /**
             * Wraps Javascript Objects
             */
            StringMapWrapper = (function () {
                function StringMapWrapper() {
                }
                StringMapWrapper.create = function () {
                    // Note: We are not using Object.create(null) here due to
                    // performance!
                    // http://jsperf.com/ng2-object-create-null
                    return {};
                };
                StringMapWrapper.contains = function (map, key) {
                    return map.hasOwnProperty(key);
                };
                StringMapWrapper.get = function (map, key) {
                    return map.hasOwnProperty(key) ? map[key] : undefined;
                };
                StringMapWrapper.set = function (map, key, value) { map[key] = value; };
                StringMapWrapper.keys = function (map) { return Object.keys(map); };
                StringMapWrapper.values = function (map) {
                    return Object.keys(map).reduce(function (r, a) {
                        r.push(map[a]);
                        return r;
                    }, []);
                };
                StringMapWrapper.isEmpty = function (map) {
                    for (var prop in map) {
                        return false;
                    }
                    return true;
                };
                StringMapWrapper.delete = function (map, key) { delete map[key]; };
                StringMapWrapper.forEach = function (map, callback) {
                    for (var prop in map) {
                        if (map.hasOwnProperty(prop)) {
                            callback(map[prop], prop);
                        }
                    }
                };
                StringMapWrapper.merge = function (m1, m2) {
                    var m = {};
                    for (var attr in m1) {
                        if (m1.hasOwnProperty(attr)) {
                            m[attr] = m1[attr];
                        }
                    }
                    for (var attr in m2) {
                        if (m2.hasOwnProperty(attr)) {
                            m[attr] = m2[attr];
                        }
                    }
                    return m;
                };
                StringMapWrapper.equals = function (m1, m2) {
                    var k1 = Object.keys(m1);
                    var k2 = Object.keys(m2);
                    if (k1.length != k2.length) {
                        return false;
                    }
                    var key;
                    for (var i = 0; i < k1.length; i++) {
                        key = k1[i];
                        if (m1[key] !== m2[key]) {
                            return false;
                        }
                    }
                    return true;
                };
                return StringMapWrapper;
            }());
            exports_355("StringMapWrapper", StringMapWrapper);
            ListWrapper = (function () {
                function ListWrapper() {
                }
                // JS has no way to express a statically fixed size list, but dart does so we
                // keep both methods.
                ListWrapper.createFixedSize = function (size) { return new Array(size); };
                ListWrapper.createGrowableSize = function (size) { return new Array(size); };
                ListWrapper.clone = function (array) { return array.slice(0); };
                ListWrapper.createImmutable = function (array) {
                    var result = ListWrapper.clone(array);
                    Object.seal(result);
                    return result;
                };
                ListWrapper.forEachWithIndex = function (array, fn) {
                    for (var i = 0; i < array.length; i++) {
                        fn(array[i], i);
                    }
                };
                ListWrapper.first = function (array) {
                    if (!array)
                        return null;
                    return array[0];
                };
                ListWrapper.last = function (array) {
                    if (!array || array.length == 0)
                        return null;
                    return array[array.length - 1];
                };
                ListWrapper.indexOf = function (array, value, startIndex) {
                    if (startIndex === void 0) { startIndex = 0; }
                    return array.indexOf(value, startIndex);
                };
                ListWrapper.contains = function (list, el) { return list.indexOf(el) !== -1; };
                ListWrapper.reversed = function (array) {
                    var a = ListWrapper.clone(array);
                    return a.reverse();
                };
                ListWrapper.concat = function (a, b) { return a.concat(b); };
                ListWrapper.insert = function (list, index, value) { list.splice(index, 0, value); };
                ListWrapper.removeAt = function (list, index) {
                    var res = list[index];
                    list.splice(index, 1);
                    return res;
                };
                ListWrapper.removeAll = function (list, items) {
                    for (var i = 0; i < items.length; ++i) {
                        var index = list.indexOf(items[i]);
                        list.splice(index, 1);
                    }
                };
                ListWrapper.remove = function (list, el) {
                    var index = list.indexOf(el);
                    if (index > -1) {
                        list.splice(index, 1);
                        return true;
                    }
                    return false;
                };
                ListWrapper.clear = function (list) { list.length = 0; };
                ListWrapper.isEmpty = function (list) { return list.length == 0; };
                ListWrapper.fill = function (list, value, start, end) {
                    if (start === void 0) { start = 0; }
                    if (end === void 0) { end = null; }
                    list.fill(value, start, end === null ? list.length : end);
                };
                ListWrapper.equals = function (a, b) {
                    if (a.length != b.length)
                        return false;
                    for (var i = 0; i < a.length; ++i) {
                        if (a[i] !== b[i])
                            return false;
                    }
                    return true;
                };
                ListWrapper.slice = function (l, from, to) {
                    if (from === void 0) { from = 0; }
                    if (to === void 0) { to = null; }
                    return l.slice(from, to === null ? undefined : to);
                };
                ListWrapper.splice = function (l, from, length) { return l.splice(from, length); };
                ListWrapper.sort = function (l, compareFn) {
                    if (lang_192.isPresent(compareFn)) {
                        l.sort(compareFn);
                    }
                    else {
                        l.sort();
                    }
                };
                ListWrapper.toString = function (l) { return l.toString(); };
                ListWrapper.toJSON = function (l) { return JSON.stringify(l); };
                ListWrapper.maximum = function (list, predicate) {
                    if (list.length == 0) {
                        return null;
                    }
                    var solution = null;
                    var maxValue = -Infinity;
                    for (var index = 0; index < list.length; index++) {
                        var candidate = list[index];
                        if (lang_192.isBlank(candidate)) {
                            continue;
                        }
                        var candidateValue = predicate(candidate);
                        if (candidateValue > maxValue) {
                            solution = candidate;
                            maxValue = candidateValue;
                        }
                    }
                    return solution;
                };
                ListWrapper.isImmutable = function (list) { return Object.isSealed(list); };
                return ListWrapper;
            }());
            exports_355("ListWrapper", ListWrapper);
            // Safari and Internet Explorer do not support the iterable parameter to the
            // Set constructor.  We work around that by manually adding the items.
            createSetFromList = (function () {
                var test = new Set([1, 2, 3]);
                if (test.size === 3) {
                    return function createSetFromList(lst) { return new Set(lst); };
                }
                else {
                    return function createSetAndPopulateFromList(lst) {
                        var res = new Set(lst);
                        if (res.size !== lst.length) {
                            for (var i = 0; i < lst.length; i++) {
                                res.add(lst[i]);
                            }
                        }
                        return res;
                    };
                }
            })();
            SetWrapper = (function () {
                function SetWrapper() {
                }
                SetWrapper.createFromList = function (lst) { return createSetFromList(lst); };
                SetWrapper.has = function (s, key) { return s.has(key); };
                SetWrapper.delete = function (m, k) { m.delete(k); };
                return SetWrapper;
            }());
            exports_355("SetWrapper", SetWrapper);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/facade/intl", [], function(exports_356, context_356) {
    "use strict";
    var __moduleName = context_356 && context_356.id;
    var NumberFormatStyle, NumberFormatter, dateFormatterCache, DateFormatter;
    function digitCondition(len) {
        return len == 2 ? '2-digit' : 'numeric';
    }
    function nameCondition(len) {
        return len < 4 ? 'short' : 'long';
    }
    function extractComponents(pattern) {
        var ret = {};
        var i = 0, j;
        while (i < pattern.length) {
            j = i;
            while (j < pattern.length && pattern[j] == pattern[i])
                j++;
            var len = j - i;
            switch (pattern[i]) {
                case 'G':
                    ret.era = nameCondition(len);
                    break;
                case 'y':
                    ret.year = digitCondition(len);
                    break;
                case 'M':
                    if (len >= 3)
                        ret.month = nameCondition(len);
                    else
                        ret.month = digitCondition(len);
                    break;
                case 'd':
                    ret.day = digitCondition(len);
                    break;
                case 'E':
                    ret.weekday = nameCondition(len);
                    break;
                case 'j':
                    ret.hour = digitCondition(len);
                    break;
                case 'h':
                    ret.hour = digitCondition(len);
                    ret.hour12 = true;
                    break;
                case 'H':
                    ret.hour = digitCondition(len);
                    ret.hour12 = false;
                    break;
                case 'm':
                    ret.minute = digitCondition(len);
                    break;
                case 's':
                    ret.second = digitCondition(len);
                    break;
                case 'z':
                    ret.timeZoneName = 'long';
                    break;
                case 'Z':
                    ret.timeZoneName = 'short';
                    break;
            }
            i = j;
        }
        return ret;
    }
    return {
        setters:[],
        execute: function() {
            (function (NumberFormatStyle) {
                NumberFormatStyle[NumberFormatStyle["Decimal"] = 0] = "Decimal";
                NumberFormatStyle[NumberFormatStyle["Percent"] = 1] = "Percent";
                NumberFormatStyle[NumberFormatStyle["Currency"] = 2] = "Currency";
            })(NumberFormatStyle || (NumberFormatStyle = {}));
            exports_356("NumberFormatStyle", NumberFormatStyle);
            NumberFormatter = (function () {
                function NumberFormatter() {
                }
                NumberFormatter.format = function (num, locale, style, _a) {
                    var _b = _a === void 0 ? {} : _a, _c = _b.minimumIntegerDigits, minimumIntegerDigits = _c === void 0 ? 1 : _c, _d = _b.minimumFractionDigits, minimumFractionDigits = _d === void 0 ? 0 : _d, _e = _b.maximumFractionDigits, maximumFractionDigits = _e === void 0 ? 3 : _e, currency = _b.currency, _f = _b.currencyAsSymbol, currencyAsSymbol = _f === void 0 ? false : _f;
                    var intlOptions = {
                        minimumIntegerDigits: minimumIntegerDigits,
                        minimumFractionDigits: minimumFractionDigits,
                        maximumFractionDigits: maximumFractionDigits
                    };
                    intlOptions.style = NumberFormatStyle[style].toLowerCase();
                    if (style == NumberFormatStyle.Currency) {
                        intlOptions.currency = currency;
                        intlOptions.currencyDisplay = currencyAsSymbol ? 'symbol' : 'code';
                    }
                    return new Intl.NumberFormat(locale, intlOptions).format(num);
                };
                return NumberFormatter;
            }());
            exports_356("NumberFormatter", NumberFormatter);
            dateFormatterCache = new Map();
            DateFormatter = (function () {
                function DateFormatter() {
                }
                DateFormatter.format = function (date, locale, pattern) {
                    var key = locale + pattern;
                    if (dateFormatterCache.has(key)) {
                        return dateFormatterCache.get(key).format(date);
                    }
                    var formatter = new Intl.DateTimeFormat(locale, extractComponents(pattern));
                    dateFormatterCache.set(key, formatter);
                    return formatter.format(date);
                };
                return DateFormatter;
            }());
            exports_356("DateFormatter", DateFormatter);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/facade/math", ['angular2/src/facade/lang'], function(exports_357, context_357) {
    "use strict";
    var __moduleName = context_357 && context_357.id;
    var lang_193;
    var Math, NaN;
    return {
        setters:[
            function (lang_193_1) {
                lang_193 = lang_193_1;
            }],
        execute: function() {
            exports_357("Math", Math = lang_193.global.Math);
            exports_357("NaN", NaN = typeof NaN);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/facade/promise", [], function(exports_358, context_358) {
    "use strict";
    var __moduleName = context_358 && context_358.id;
    var PromiseCompleter, PromiseWrapper;
    return {
        setters:[],
        execute: function() {
            PromiseCompleter = (function () {
                function PromiseCompleter() {
                    var _this = this;
                    this.promise = new Promise(function (res, rej) {
                        _this.resolve = res;
                        _this.reject = rej;
                    });
                }
                return PromiseCompleter;
            }());
            exports_358("PromiseCompleter", PromiseCompleter);
            PromiseWrapper = (function () {
                function PromiseWrapper() {
                }
                PromiseWrapper.resolve = function (obj) { return Promise.resolve(obj); };
                PromiseWrapper.reject = function (obj, _) { return Promise.reject(obj); };
                // Note: We can't rename this method into `catch`, as this is not a valid
                // method name in Dart.
                PromiseWrapper.catchError = function (promise, onError) {
                    return promise.catch(onError);
                };
                PromiseWrapper.all = function (promises) {
                    if (promises.length == 0)
                        return Promise.resolve([]);
                    return Promise.all(promises);
                };
                PromiseWrapper.then = function (promise, success, rejection) {
                    return promise.then(success, rejection);
                };
                PromiseWrapper.wrap = function (computation) {
                    return new Promise(function (res, rej) {
                        try {
                            res(computation());
                        }
                        catch (e) {
                            rej(e);
                        }
                    });
                };
                PromiseWrapper.scheduleMicrotask = function (computation) {
                    PromiseWrapper.then(PromiseWrapper.resolve(null), computation, function (_) { });
                };
                PromiseWrapper.isPromise = function (obj) { return obj instanceof Promise; };
                PromiseWrapper.completer = function () { return new PromiseCompleter(); };
                return PromiseWrapper;
            }());
            exports_358("PromiseWrapper", PromiseWrapper);
        }
    }
});
// Index to be used if Http is ever configured as a standalone npm package.
// require('reflect-metadata');
// require('es6-shim');
// import {HTTP_PROVIDERS, JSONP_PROVIDERS, Http, Jsonp} from './http';
// import {Injector} from 'angular2/core';
// export * from './http';
// /**
//  * TODO(jeffbcross): export each as their own top-level file, to require as:
//  * require('angular2/http'); require('http/jsonp');
//  */
// export var http = Injector.resolveAndCreate([HTTP_PROVIDERS]).get(Http);
// export var jsonp = Injector.resolveAndCreate([JSONP_PROVIDERS]).get(Jsonp);
System.register("test/node_modules/angular2/ts/src/http/backends/mock_backend", ['angular2/core', "test/node_modules/angular2/ts/src/http/static_request", "test/node_modules/angular2/ts/src/http/enums", 'angular2/src/facade/lang', 'angular2/src/facade/exceptions', 'rxjs/Subject', 'rxjs/subject/ReplaySubject', 'rxjs/operator/take'], function(exports_359, context_359) {
    "use strict";
    var __moduleName = context_359 && context_359.id;
    var core_127, static_request_3, enums_8, lang_194, exceptions_71, Subject_3, ReplaySubject_1, take_1;
    var MockConnection, MockBackend;
    return {
        setters:[
            function (core_127_1) {
                core_127 = core_127_1;
            },
            function (static_request_3_1) {
                static_request_3 = static_request_3_1;
            },
            function (enums_8_1) {
                enums_8 = enums_8_1;
            },
            function (lang_194_1) {
                lang_194 = lang_194_1;
            },
            function (exceptions_71_1) {
                exceptions_71 = exceptions_71_1;
            },
            function (Subject_3_1) {
                Subject_3 = Subject_3_1;
            },
            function (ReplaySubject_1_1) {
                ReplaySubject_1 = ReplaySubject_1_1;
            },
            function (take_1_1) {
                take_1 = take_1_1;
            }],
        execute: function() {
            /**
             *
             * Mock Connection to represent a {@link Connection} for tests.
             *
             **/
            MockConnection = (function () {
                function MockConnection(req) {
                    this.response = take_1.take.call(new ReplaySubject_1.ReplaySubject(1), 1);
                    this.readyState = enums_8.ReadyState.Open;
                    this.request = req;
                }
                /**
                 * Sends a mock response to the connection. This response is the value that is emitted to the
                 * {@link EventEmitter} returned by {@link Http}.
                 *
                 * ### Example
                 *
                 * ```
                 * var connection;
                 * backend.connections.subscribe(c => connection = c);
                 * http.request('data.json').subscribe(res => console.log(res.text()));
                 * connection.mockRespond(new Response('fake response')); //logs 'fake response'
                 * ```
                 *
                 */
                MockConnection.prototype.mockRespond = function (res) {
                    if (this.readyState === enums_8.ReadyState.Done || this.readyState === enums_8.ReadyState.Cancelled) {
                        throw new exceptions_71.BaseException('Connection has already been resolved');
                    }
                    this.readyState = enums_8.ReadyState.Done;
                    this.response.next(res);
                    this.response.complete();
                };
                /**
                 * Not yet implemented!
                 *
                 * Sends the provided {@link Response} to the `downloadObserver` of the `Request`
                 * associated with this connection.
                 */
                MockConnection.prototype.mockDownload = function (res) {
                    // this.request.downloadObserver.onNext(res);
                    // if (res.bytesLoaded === res.totalBytes) {
                    //   this.request.downloadObserver.onCompleted();
                    // }
                };
                // TODO(jeffbcross): consider using Response type
                /**
                 * Emits the provided error object as an error to the {@link Response} {@link EventEmitter}
                 * returned
                 * from {@link Http}.
                 */
                MockConnection.prototype.mockError = function (err) {
                    // Matches XHR semantics
                    this.readyState = enums_8.ReadyState.Done;
                    this.response.error(err);
                };
                return MockConnection;
            }());
            exports_359("MockConnection", MockConnection);
            /**
             * A mock backend for testing the {@link Http} service.
             *
             * This class can be injected in tests, and should be used to override providers
             * to other backends, such as {@link XHRBackend}.
             *
             * ### Example
             *
             * ```
             * import {BaseRequestOptions, Http} from 'angular2/http';
             * import {MockBackend} from 'angular2/http/testing';
             * it('should get some data', inject([AsyncTestCompleter], (async) => {
             *   var connection;
             *   var injector = Injector.resolveAndCreate([
             *     MockBackend,
             *     provide(Http, {useFactory: (backend, options) => {
             *       return new Http(backend, options);
             *     }, deps: [MockBackend, BaseRequestOptions]})]);
             *   var http = injector.get(Http);
             *   var backend = injector.get(MockBackend);
             *   //Assign any newly-created connection to local variable
             *   backend.connections.subscribe(c => connection = c);
             *   http.request('data.json').subscribe((res) => {
             *     expect(res.text()).toBe('awesome');
             *     async.done();
             *   });
             *   connection.mockRespond(new Response('awesome'));
             * }));
             * ```
             *
             * This method only exists in the mock implementation, not in real Backends.
             **/
            MockBackend = (function () {
                function MockBackend() {
                    var _this = this;
                    this.connectionsArray = [];
                    this.connections = new Subject_3.Subject();
                    this.connections.subscribe(function (connection) {
                        return _this.connectionsArray.push(connection);
                    });
                    this.pendingConnections = new Subject_3.Subject();
                }
                /**
                 * Checks all connections, and raises an exception if any connection has not received a response.
                 *
                 * This method only exists in the mock implementation, not in real Backends.
                 */
                MockBackend.prototype.verifyNoPendingRequests = function () {
                    var pending = 0;
                    this.pendingConnections.subscribe(function (c) { return pending++; });
                    if (pending > 0)
                        throw new exceptions_71.BaseException(pending + " pending connections to be resolved");
                };
                /**
                 * Can be used in conjunction with `verifyNoPendingRequests` to resolve any not-yet-resolve
                 * connections, if it's expected that there are connections that have not yet received a response.
                 *
                 * This method only exists in the mock implementation, not in real Backends.
                 */
                MockBackend.prototype.resolveAllConnections = function () { this.connections.subscribe(function (c) { return c.readyState = 4; }); };
                /**
                 * Creates a new {@link MockConnection}. This is equivalent to calling `new
                 * MockConnection()`, except that it also will emit the new `Connection` to the `connections`
                 * emitter of this `MockBackend` instance. This method will usually only be used by tests
                 * against the framework itself, not by end-users.
                 */
                MockBackend.prototype.createConnection = function (req) {
                    if (!lang_194.isPresent(req) || !(req instanceof static_request_3.Request)) {
                        throw new exceptions_71.BaseException("createConnection requires an instance of Request, got " + req);
                    }
                    var connection = new MockConnection(req);
                    this.connections.next(connection);
                    return connection;
                };
                MockBackend = __decorate([
                    core_127.Injectable(), 
                    __metadata('design:paramtypes', [])
                ], MockBackend);
                return MockBackend;
            }());
            exports_359("MockBackend", MockBackend);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/mock/animation_builder_mock", ['angular2/src/core/di', 'angular2/src/animate/animation_builder', 'angular2/src/animate/css_animation_builder', 'angular2/src/animate/animation', 'angular2/src/animate/browser_details'], function(exports_360, context_360) {
    "use strict";
    var __moduleName = context_360 && context_360.id;
    var di_45, animation_builder_4, css_animation_builder_3, animation_3, browser_details_3;
    var MockAnimationBuilder, MockCssAnimationBuilder, MockBrowserAbstraction, MockAnimation;
    return {
        setters:[
            function (di_45_1) {
                di_45 = di_45_1;
            },
            function (animation_builder_4_1) {
                animation_builder_4 = animation_builder_4_1;
            },
            function (css_animation_builder_3_1) {
                css_animation_builder_3 = css_animation_builder_3_1;
            },
            function (animation_3_1) {
                animation_3 = animation_3_1;
            },
            function (browser_details_3_1) {
                browser_details_3 = browser_details_3_1;
            }],
        execute: function() {
            MockAnimationBuilder = (function (_super) {
                __extends(MockAnimationBuilder, _super);
                function MockAnimationBuilder() {
                    _super.call(this, null);
                }
                MockAnimationBuilder.prototype.css = function () { return new MockCssAnimationBuilder(); };
                MockAnimationBuilder = __decorate([
                    di_45.Injectable(), 
                    __metadata('design:paramtypes', [])
                ], MockAnimationBuilder);
                return MockAnimationBuilder;
            }(animation_builder_4.AnimationBuilder));
            exports_360("MockAnimationBuilder", MockAnimationBuilder);
            MockCssAnimationBuilder = (function (_super) {
                __extends(MockCssAnimationBuilder, _super);
                function MockCssAnimationBuilder() {
                    _super.call(this, null);
                }
                MockCssAnimationBuilder.prototype.start = function (element) { return new MockAnimation(element, this.data); };
                return MockCssAnimationBuilder;
            }(css_animation_builder_3.CssAnimationBuilder));
            MockBrowserAbstraction = (function (_super) {
                __extends(MockBrowserAbstraction, _super);
                function MockBrowserAbstraction() {
                    _super.apply(this, arguments);
                }
                MockBrowserAbstraction.prototype.doesElapsedTimeIncludesDelay = function () { this.elapsedTimeIncludesDelay = false; };
                return MockBrowserAbstraction;
            }(browser_details_3.BrowserDetails));
            MockAnimation = (function (_super) {
                __extends(MockAnimation, _super);
                function MockAnimation(element, data) {
                    _super.call(this, element, data, new MockBrowserAbstraction());
                }
                MockAnimation.prototype.wait = function (callback) { this._callback = callback; };
                MockAnimation.prototype.flush = function () {
                    this._callback(0);
                    this._callback = null;
                };
                return MockAnimation;
            }(animation_3.Animation));
        }
    }
});
System.register("test/node_modules/angular2/ts/src/mock/directive_resolver_mock", ['angular2/src/core/di', 'angular2/src/facade/collection', 'angular2/src/facade/lang', "test/node_modules/angular2/ts/src/core/metadata", 'angular2/src/core/linker/directive_resolver'], function(exports_361, context_361) {
    "use strict";
    var __moduleName = context_361 && context_361.id;
    var di_46, collection_81, lang_195, metadata_11, directive_resolver_5;
    var MockDirectiveResolver;
    return {
        setters:[
            function (di_46_1) {
                di_46 = di_46_1;
            },
            function (collection_81_1) {
                collection_81 = collection_81_1;
            },
            function (lang_195_1) {
                lang_195 = lang_195_1;
            },
            function (metadata_11_1) {
                metadata_11 = metadata_11_1;
            },
            function (directive_resolver_5_1) {
                directive_resolver_5 = directive_resolver_5_1;
            }],
        execute: function() {
            /**
             * An implementation of {@link DirectiveResolver} that allows overriding
             * various properties of directives.
             */
            MockDirectiveResolver = (function (_super) {
                __extends(MockDirectiveResolver, _super);
                function MockDirectiveResolver() {
                    _super.apply(this, arguments);
                    this._providerOverrides = new collection_81.Map();
                    this.viewProviderOverrides = new collection_81.Map();
                }
                MockDirectiveResolver.prototype.resolve = function (type) {
                    var dm = _super.prototype.resolve.call(this, type);
                    var providerOverrides = this._providerOverrides.get(type);
                    var viewProviderOverrides = this.viewProviderOverrides.get(type);
                    var providers = dm.providers;
                    if (lang_195.isPresent(providerOverrides)) {
                        providers = dm.providers.concat(providerOverrides);
                    }
                    if (dm instanceof metadata_11.ComponentMetadata) {
                        var viewProviders = dm.viewProviders;
                        if (lang_195.isPresent(viewProviderOverrides)) {
                            viewProviders = dm.viewProviders.concat(viewProviderOverrides);
                        }
                        return new metadata_11.ComponentMetadata({
                            selector: dm.selector,
                            inputs: dm.inputs,
                            outputs: dm.outputs,
                            host: dm.host,
                            exportAs: dm.exportAs,
                            moduleId: dm.moduleId,
                            queries: dm.queries,
                            changeDetection: dm.changeDetection,
                            providers: providers,
                            viewProviders: viewProviders
                        });
                    }
                    return new metadata_11.DirectiveMetadata({
                        selector: dm.selector,
                        inputs: dm.inputs,
                        outputs: dm.outputs,
                        host: dm.host,
                        providers: providers,
                        exportAs: dm.exportAs,
                        queries: dm.queries
                    });
                };
                /**
                 * @deprecated
                 */
                MockDirectiveResolver.prototype.setBindingsOverride = function (type, bindings) {
                    this._providerOverrides.set(type, bindings);
                };
                /**
                 * @deprecated
                 */
                MockDirectiveResolver.prototype.setViewBindingsOverride = function (type, viewBindings) {
                    this.viewProviderOverrides.set(type, viewBindings);
                };
                MockDirectiveResolver.prototype.setProvidersOverride = function (type, providers) {
                    this._providerOverrides.set(type, providers);
                };
                MockDirectiveResolver.prototype.setViewProvidersOverride = function (type, viewProviders) {
                    this.viewProviderOverrides.set(type, viewProviders);
                };
                MockDirectiveResolver = __decorate([
                    di_46.Injectable(), 
                    __metadata('design:paramtypes', [])
                ], MockDirectiveResolver);
                return MockDirectiveResolver;
            }(directive_resolver_5.DirectiveResolver));
            exports_361("MockDirectiveResolver", MockDirectiveResolver);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/mock/location_mock", ['angular2/src/core/di', 'angular2/src/facade/async'], function(exports_362, context_362) {
    "use strict";
    var __moduleName = context_362 && context_362.id;
    var di_47, async_33;
    var SpyLocation;
    return {
        setters:[
            function (di_47_1) {
                di_47 = di_47_1;
            },
            function (async_33_1) {
                async_33 = async_33_1;
            }],
        execute: function() {
            /**
             * A spy for {@link Location} that allows tests to fire simulated location events.
             */
            SpyLocation = (function () {
                function SpyLocation() {
                    this.urlChanges = [];
                    /** @internal */
                    this._path = '';
                    /** @internal */
                    this._query = '';
                    /** @internal */
                    this._subject = new async_33.EventEmitter();
                    /** @internal */
                    this._baseHref = '';
                    // TODO: remove these once Location is an interface, and can be implemented cleanly
                    this.platformStrategy = null;
                }
                SpyLocation.prototype.setInitialPath = function (url) { this._path = url; };
                SpyLocation.prototype.setBaseHref = function (url) { this._baseHref = url; };
                SpyLocation.prototype.path = function () { return this._path; };
                SpyLocation.prototype.simulateUrlPop = function (pathname) {
                    async_33.ObservableWrapper.callEmit(this._subject, { 'url': pathname, 'pop': true });
                };
                SpyLocation.prototype.simulateHashChange = function (pathname) {
                    // Because we don't prevent the native event, the browser will independently update the path
                    this.setInitialPath(pathname);
                    this.urlChanges.push('hash: ' + pathname);
                    async_33.ObservableWrapper.callEmit(this._subject, { 'url': pathname, 'pop': true, 'type': 'hashchange' });
                };
                SpyLocation.prototype.prepareExternalUrl = function (url) {
                    if (url.length > 0 && !url.startsWith('/')) {
                        url = '/' + url;
                    }
                    return this._baseHref + url;
                };
                SpyLocation.prototype.go = function (path, query) {
                    if (query === void 0) { query = ''; }
                    path = this.prepareExternalUrl(path);
                    if (this._path == path && this._query == query) {
                        return;
                    }
                    this._path = path;
                    this._query = query;
                    var url = path + (query.length > 0 ? ('?' + query) : '');
                    this.urlChanges.push(url);
                };
                SpyLocation.prototype.replaceState = function (path, query) {
                    if (query === void 0) { query = ''; }
                    path = this.prepareExternalUrl(path);
                    this._path = path;
                    this._query = query;
                    var url = path + (query.length > 0 ? ('?' + query) : '');
                    this.urlChanges.push('replace: ' + url);
                };
                SpyLocation.prototype.forward = function () {
                    // TODO
                };
                SpyLocation.prototype.back = function () {
                    // TODO
                };
                SpyLocation.prototype.subscribe = function (onNext, onThrow, onReturn) {
                    if (onThrow === void 0) { onThrow = null; }
                    if (onReturn === void 0) { onReturn = null; }
                    return async_33.ObservableWrapper.subscribe(this._subject, onNext, onThrow, onReturn);
                };
                SpyLocation.prototype.normalize = function (url) { return null; };
                SpyLocation = __decorate([
                    di_47.Injectable(), 
                    __metadata('design:paramtypes', [])
                ], SpyLocation);
                return SpyLocation;
            }());
            exports_362("SpyLocation", SpyLocation);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/mock/mock_application_ref", ['angular2/src/core/application_ref', 'angular2/src/core/di'], function(exports_363, context_363) {
    "use strict";
    var __moduleName = context_363 && context_363.id;
    var application_ref_2, di_48;
    var MockApplicationRef;
    return {
        setters:[
            function (application_ref_2_1) {
                application_ref_2 = application_ref_2_1;
            },
            function (di_48_1) {
                di_48 = di_48_1;
            }],
        execute: function() {
            /**
             * A no-op implementation of {@link ApplicationRef}, useful for testing.
             */
            MockApplicationRef = (function (_super) {
                __extends(MockApplicationRef, _super);
                function MockApplicationRef() {
                    _super.apply(this, arguments);
                }
                MockApplicationRef.prototype.registerBootstrapListener = function (listener) { };
                MockApplicationRef.prototype.registerDisposeListener = function (dispose) { };
                MockApplicationRef.prototype.bootstrap = function (componentType, bindings) {
                    return null;
                };
                Object.defineProperty(MockApplicationRef.prototype, "injector", {
                    get: function () { return null; },
                    enumerable: true,
                    configurable: true
                });
                ;
                Object.defineProperty(MockApplicationRef.prototype, "zone", {
                    get: function () { return null; },
                    enumerable: true,
                    configurable: true
                });
                ;
                MockApplicationRef.prototype.dispose = function () { };
                MockApplicationRef.prototype.tick = function () { };
                Object.defineProperty(MockApplicationRef.prototype, "componentTypes", {
                    get: function () { return null; },
                    enumerable: true,
                    configurable: true
                });
                ;
                MockApplicationRef = __decorate([
                    di_48.Injectable(), 
                    __metadata('design:paramtypes', [])
                ], MockApplicationRef);
                return MockApplicationRef;
            }(application_ref_2.ApplicationRef));
            exports_363("MockApplicationRef", MockApplicationRef);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/mock/mock_location_strategy", ['angular2/src/core/di', 'angular2/src/facade/async', 'angular2/src/router/location/location_strategy'], function(exports_364, context_364) {
    "use strict";
    var __moduleName = context_364 && context_364.id;
    var di_49, async_34, location_strategy_7;
    var MockLocationStrategy, _MockPopStateEvent;
    return {
        setters:[
            function (di_49_1) {
                di_49 = di_49_1;
            },
            function (async_34_1) {
                async_34 = async_34_1;
            },
            function (location_strategy_7_1) {
                location_strategy_7 = location_strategy_7_1;
            }],
        execute: function() {
            /**
             * A mock implementation of {@link LocationStrategy} that allows tests to fire simulated
             * location events.
             */
            MockLocationStrategy = (function (_super) {
                __extends(MockLocationStrategy, _super);
                function MockLocationStrategy() {
                    _super.call(this);
                    this.internalBaseHref = '/';
                    this.internalPath = '/';
                    this.internalTitle = '';
                    this.urlChanges = [];
                    /** @internal */
                    this._subject = new async_34.EventEmitter();
                }
                MockLocationStrategy.prototype.simulatePopState = function (url) {
                    this.internalPath = url;
                    async_34.ObservableWrapper.callEmit(this._subject, new _MockPopStateEvent(this.path()));
                };
                MockLocationStrategy.prototype.path = function () { return this.internalPath; };
                MockLocationStrategy.prototype.prepareExternalUrl = function (internal) {
                    if (internal.startsWith('/') && this.internalBaseHref.endsWith('/')) {
                        return this.internalBaseHref + internal.substring(1);
                    }
                    return this.internalBaseHref + internal;
                };
                MockLocationStrategy.prototype.pushState = function (ctx, title, path, query) {
                    this.internalTitle = title;
                    var url = path + (query.length > 0 ? ('?' + query) : '');
                    this.internalPath = url;
                    var externalUrl = this.prepareExternalUrl(url);
                    this.urlChanges.push(externalUrl);
                };
                MockLocationStrategy.prototype.replaceState = function (ctx, title, path, query) {
                    this.internalTitle = title;
                    var url = path + (query.length > 0 ? ('?' + query) : '');
                    this.internalPath = url;
                    var externalUrl = this.prepareExternalUrl(url);
                    this.urlChanges.push('replace: ' + externalUrl);
                };
                MockLocationStrategy.prototype.onPopState = function (fn) { async_34.ObservableWrapper.subscribe(this._subject, fn); };
                MockLocationStrategy.prototype.getBaseHref = function () { return this.internalBaseHref; };
                MockLocationStrategy.prototype.back = function () {
                    if (this.urlChanges.length > 0) {
                        this.urlChanges.pop();
                        var nextUrl = this.urlChanges.length > 0 ? this.urlChanges[this.urlChanges.length - 1] : '';
                        this.simulatePopState(nextUrl);
                    }
                };
                MockLocationStrategy.prototype.forward = function () { throw 'not implemented'; };
                MockLocationStrategy = __decorate([
                    di_49.Injectable(), 
                    __metadata('design:paramtypes', [])
                ], MockLocationStrategy);
                return MockLocationStrategy;
            }(location_strategy_7.LocationStrategy));
            exports_364("MockLocationStrategy", MockLocationStrategy);
            _MockPopStateEvent = (function () {
                function _MockPopStateEvent(newUrl) {
                    this.newUrl = newUrl;
                    this.pop = true;
                    this.type = 'popstate';
                }
                return _MockPopStateEvent;
            }());
        }
    }
});
System.register("test/node_modules/angular2/ts/src/mock/ng_zone_mock", ['angular2/src/core/di', 'angular2/src/core/zone/ng_zone', 'angular2/src/facade/async'], function(exports_365, context_365) {
    "use strict";
    var __moduleName = context_365 && context_365.id;
    var di_50, ng_zone_4, async_35;
    var MockNgZone;
    return {
        setters:[
            function (di_50_1) {
                di_50 = di_50_1;
            },
            function (ng_zone_4_1) {
                ng_zone_4 = ng_zone_4_1;
            },
            function (async_35_1) {
                async_35 = async_35_1;
            }],
        execute: function() {
            /**
             * A mock implementation of {@link NgZone}.
             */
            MockNgZone = (function (_super) {
                __extends(MockNgZone, _super);
                function MockNgZone() {
                    _super.call(this, { enableLongStackTrace: false });
                    /** @internal */
                    this._mockOnStable = new async_35.EventEmitter(false);
                }
                Object.defineProperty(MockNgZone.prototype, "onStable", {
                    get: function () { return this._mockOnStable; },
                    enumerable: true,
                    configurable: true
                });
                MockNgZone.prototype.run = function (fn) { return fn(); };
                MockNgZone.prototype.runOutsideAngular = function (fn) { return fn(); };
                MockNgZone.prototype.simulateZoneExit = function () { async_35.ObservableWrapper.callNext(this.onStable, null); };
                MockNgZone = __decorate([
                    di_50.Injectable(), 
                    __metadata('design:paramtypes', [])
                ], MockNgZone);
                return MockNgZone;
            }(ng_zone_4.NgZone));
            exports_365("MockNgZone", MockNgZone);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/mock/view_resolver_mock", ['angular2/src/core/di', 'angular2/src/facade/collection', 'angular2/src/facade/lang', 'angular2/src/facade/exceptions', "test/node_modules/angular2/ts/src/core/metadata", 'angular2/src/core/linker/view_resolver'], function(exports_366, context_366) {
    "use strict";
    var __moduleName = context_366 && context_366.id;
    var di_51, collection_82, lang_196, exceptions_72, metadata_12, view_resolver_4;
    var MockViewResolver;
    return {
        setters:[
            function (di_51_1) {
                di_51 = di_51_1;
            },
            function (collection_82_1) {
                collection_82 = collection_82_1;
            },
            function (lang_196_1) {
                lang_196 = lang_196_1;
            },
            function (exceptions_72_1) {
                exceptions_72 = exceptions_72_1;
            },
            function (metadata_12_1) {
                metadata_12 = metadata_12_1;
            },
            function (view_resolver_4_1) {
                view_resolver_4 = view_resolver_4_1;
            }],
        execute: function() {
            MockViewResolver = (function (_super) {
                __extends(MockViewResolver, _super);
                function MockViewResolver() {
                    _super.call(this);
                    /** @internal */
                    this._views = new collection_82.Map();
                    /** @internal */
                    this._inlineTemplates = new collection_82.Map();
                    /** @internal */
                    this._viewCache = new collection_82.Map();
                    /** @internal */
                    this._directiveOverrides = new collection_82.Map();
                }
                /**
                 * Overrides the {@link ViewMetadata} for a component.
                 *
                 * @param {Type} component
                 * @param {ViewDefinition} view
                 */
                MockViewResolver.prototype.setView = function (component, view) {
                    this._checkOverrideable(component);
                    this._views.set(component, view);
                };
                /**
                 * Overrides the inline template for a component - other configuration remains unchanged.
                 *
                 * @param {Type} component
                 * @param {string} template
                 */
                MockViewResolver.prototype.setInlineTemplate = function (component, template) {
                    this._checkOverrideable(component);
                    this._inlineTemplates.set(component, template);
                };
                /**
                 * Overrides a directive from the component {@link ViewMetadata}.
                 *
                 * @param {Type} component
                 * @param {Type} from
                 * @param {Type} to
                 */
                MockViewResolver.prototype.overrideViewDirective = function (component, from, to) {
                    this._checkOverrideable(component);
                    var overrides = this._directiveOverrides.get(component);
                    if (lang_196.isBlank(overrides)) {
                        overrides = new collection_82.Map();
                        this._directiveOverrides.set(component, overrides);
                    }
                    overrides.set(from, to);
                };
                /**
                 * Returns the {@link ViewMetadata} for a component:
                 * - Set the {@link ViewMetadata} to the overridden view when it exists or fallback to the default
                 * `ViewResolver`,
                 *   see `setView`.
                 * - Override the directives, see `overrideViewDirective`.
                 * - Override the @View definition, see `setInlineTemplate`.
                 *
                 * @param component
                 * @returns {ViewDefinition}
                 */
                MockViewResolver.prototype.resolve = function (component) {
                    var view = this._viewCache.get(component);
                    if (lang_196.isPresent(view))
                        return view;
                    view = this._views.get(component);
                    if (lang_196.isBlank(view)) {
                        view = _super.prototype.resolve.call(this, component);
                    }
                    var directives = view.directives;
                    var overrides = this._directiveOverrides.get(component);
                    if (lang_196.isPresent(overrides) && lang_196.isPresent(directives)) {
                        directives = collection_82.ListWrapper.clone(view.directives);
                        overrides.forEach(function (to, from) {
                            var srcIndex = directives.indexOf(from);
                            if (srcIndex == -1) {
                                throw new exceptions_72.BaseException("Overriden directive " + lang_196.stringify(from) + " not found in the template of " + lang_196.stringify(component));
                            }
                            directives[srcIndex] = to;
                        });
                        view = new metadata_12.ViewMetadata({ template: view.template, templateUrl: view.templateUrl, directives: directives });
                    }
                    var inlineTemplate = this._inlineTemplates.get(component);
                    if (lang_196.isPresent(inlineTemplate)) {
                        view = new metadata_12.ViewMetadata({ template: inlineTemplate, templateUrl: null, directives: view.directives });
                    }
                    this._viewCache.set(component, view);
                    return view;
                };
                /**
                 * @internal
                 *
                 * Once a component has been compiled, the AppProtoView is stored in the compiler cache.
                 *
                 * Then it should not be possible to override the component configuration after the component
                 * has been compiled.
                 *
                 * @param {Type} component
                 */
                MockViewResolver.prototype._checkOverrideable = function (component) {
                    var cached = this._viewCache.get(component);
                    if (lang_196.isPresent(cached)) {
                        throw new exceptions_72.BaseException("The component " + lang_196.stringify(component) + " has already been compiled, its configuration can not be changed");
                    }
                };
                MockViewResolver = __decorate([
                    di_51.Injectable(), 
                    __metadata('design:paramtypes', [])
                ], MockViewResolver);
                return MockViewResolver;
            }(view_resolver_4.ViewResolver));
            exports_366("MockViewResolver", MockViewResolver);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/platform/browser/generic_browser_adapter", ['angular2/src/facade/collection', 'angular2/src/facade/lang', 'angular2/src/platform/dom/dom_adapter', 'angular2/src/platform/browser/xhr_impl'], function(exports_367, context_367) {
    "use strict";
    var __moduleName = context_367 && context_367.id;
    var collection_83, lang_197, dom_adapter_9, xhr_impl_3;
    var GenericBrowserDomAdapter;
    return {
        setters:[
            function (collection_83_1) {
                collection_83 = collection_83_1;
            },
            function (lang_197_1) {
                lang_197 = lang_197_1;
            },
            function (dom_adapter_9_1) {
                dom_adapter_9 = dom_adapter_9_1;
            },
            function (xhr_impl_3_1) {
                xhr_impl_3 = xhr_impl_3_1;
            }],
        execute: function() {
            /**
             * Provides DOM operations in any browser environment.
             */
            GenericBrowserDomAdapter = (function (_super) {
                __extends(GenericBrowserDomAdapter, _super);
                function GenericBrowserDomAdapter() {
                    var _this = this;
                    _super.call(this);
                    this._animationPrefix = null;
                    this._transitionEnd = null;
                    try {
                        var element = this.createElement('div', this.defaultDoc());
                        if (lang_197.isPresent(this.getStyle(element, 'animationName'))) {
                            this._animationPrefix = '';
                        }
                        else {
                            var domPrefixes = ['Webkit', 'Moz', 'O', 'ms'];
                            for (var i = 0; i < domPrefixes.length; i++) {
                                if (lang_197.isPresent(this.getStyle(element, domPrefixes[i] + 'AnimationName'))) {
                                    this._animationPrefix = '-' + domPrefixes[i].toLowerCase() + '-';
                                    break;
                                }
                            }
                        }
                        var transEndEventNames = {
                            WebkitTransition: 'webkitTransitionEnd',
                            MozTransition: 'transitionend',
                            OTransition: 'oTransitionEnd otransitionend',
                            transition: 'transitionend'
                        };
                        collection_83.StringMapWrapper.forEach(transEndEventNames, function (value, key) {
                            if (lang_197.isPresent(_this.getStyle(element, key))) {
                                _this._transitionEnd = value;
                            }
                        });
                    }
                    catch (e) {
                        this._animationPrefix = null;
                        this._transitionEnd = null;
                    }
                }
                GenericBrowserDomAdapter.prototype.getXHR = function () { return xhr_impl_3.XHRImpl; };
                GenericBrowserDomAdapter.prototype.getDistributedNodes = function (el) { return el.getDistributedNodes(); };
                GenericBrowserDomAdapter.prototype.resolveAndSetHref = function (el, baseUrl, href) {
                    el.href = href == null ? baseUrl : baseUrl + '/../' + href;
                };
                GenericBrowserDomAdapter.prototype.supportsDOMEvents = function () { return true; };
                GenericBrowserDomAdapter.prototype.supportsNativeShadowDOM = function () {
                    return lang_197.isFunction(this.defaultDoc().body.createShadowRoot);
                };
                GenericBrowserDomAdapter.prototype.getAnimationPrefix = function () {
                    return lang_197.isPresent(this._animationPrefix) ? this._animationPrefix : "";
                };
                GenericBrowserDomAdapter.prototype.getTransitionEnd = function () { return lang_197.isPresent(this._transitionEnd) ? this._transitionEnd : ""; };
                GenericBrowserDomAdapter.prototype.supportsAnimation = function () {
                    return lang_197.isPresent(this._animationPrefix) && lang_197.isPresent(this._transitionEnd);
                };
                return GenericBrowserDomAdapter;
            }(dom_adapter_9.DomAdapter));
            exports_367("GenericBrowserDomAdapter", GenericBrowserDomAdapter);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/platform/browser/browser_adapter", ['angular2/src/facade/collection', 'angular2/src/facade/lang', 'angular2/src/platform/dom/dom_adapter', "test/node_modules/angular2/ts/src/platform/browser/generic_browser_adapter"], function(exports_368, context_368) {
    "use strict";
    var __moduleName = context_368 && context_368.id;
    var collection_84, lang_198, dom_adapter_10, generic_browser_adapter_1;
    var _attrToPropMap, DOM_KEY_LOCATION_NUMPAD, _keyMap, _chromeNumKeyPadMap, BrowserDomAdapter, baseElement, urlParsingNode;
    function getBaseElementHref() {
        if (lang_198.isBlank(baseElement)) {
            baseElement = document.querySelector('base');
            if (lang_198.isBlank(baseElement)) {
                return null;
            }
        }
        return baseElement.getAttribute('href');
    }
    function relativePath(url) {
        if (lang_198.isBlank(urlParsingNode)) {
            urlParsingNode = document.createElement("a");
        }
        urlParsingNode.setAttribute('href', url);
        return (urlParsingNode.pathname.charAt(0) === '/') ? urlParsingNode.pathname :
            '/' + urlParsingNode.pathname;
    }
    return {
        setters:[
            function (collection_84_1) {
                collection_84 = collection_84_1;
            },
            function (lang_198_1) {
                lang_198 = lang_198_1;
            },
            function (dom_adapter_10_1) {
                dom_adapter_10 = dom_adapter_10_1;
            },
            function (generic_browser_adapter_1_1) {
                generic_browser_adapter_1 = generic_browser_adapter_1_1;
            }],
        execute: function() {
            _attrToPropMap = {
                'class': 'className',
                'innerHtml': 'innerHTML',
                'readonly': 'readOnly',
                'tabindex': 'tabIndex'
            };
            DOM_KEY_LOCATION_NUMPAD = 3;
            // Map to convert some key or keyIdentifier values to what will be returned by getEventKey
            _keyMap = {
                // The following values are here for cross-browser compatibility and to match the W3C standard
                // cf http://www.w3.org/TR/DOM-Level-3-Events-key/
                '\b': 'Backspace',
                '\t': 'Tab',
                '\x7F': 'Delete',
                '\x1B': 'Escape',
                'Del': 'Delete',
                'Esc': 'Escape',
                'Left': 'ArrowLeft',
                'Right': 'ArrowRight',
                'Up': 'ArrowUp',
                'Down': 'ArrowDown',
                'Menu': 'ContextMenu',
                'Scroll': 'ScrollLock',
                'Win': 'OS'
            };
            // There is a bug in Chrome for numeric keypad keys:
            // https://code.google.com/p/chromium/issues/detail?id=155654
            // 1, 2, 3 ... are reported as A, B, C ...
            _chromeNumKeyPadMap = {
                'A': '1',
                'B': '2',
                'C': '3',
                'D': '4',
                'E': '5',
                'F': '6',
                'G': '7',
                'H': '8',
                'I': '9',
                'J': '*',
                'K': '+',
                'M': '-',
                'N': '.',
                'O': '/',
                '\x60': '0',
                '\x90': 'NumLock'
            };
            /**
             * A `DomAdapter` powered by full browser DOM APIs.
             */
            /* tslint:disable:requireParameterType */
            BrowserDomAdapter = (function (_super) {
                __extends(BrowserDomAdapter, _super);
                function BrowserDomAdapter() {
                    _super.apply(this, arguments);
                }
                BrowserDomAdapter.prototype.parse = function (templateHtml) { throw new Error("parse not implemented"); };
                BrowserDomAdapter.makeCurrent = function () { dom_adapter_10.setRootDomAdapter(new BrowserDomAdapter()); };
                BrowserDomAdapter.prototype.hasProperty = function (element, name) { return name in element; };
                BrowserDomAdapter.prototype.setProperty = function (el, name, value) { el[name] = value; };
                BrowserDomAdapter.prototype.getProperty = function (el, name) { return el[name]; };
                BrowserDomAdapter.prototype.invoke = function (el, methodName, args) {
                    el[methodName].apply(el, args);
                };
                // TODO(tbosch): move this into a separate environment class once we have it
                BrowserDomAdapter.prototype.logError = function (error) {
                    if (window.console.error) {
                        window.console.error(error);
                    }
                    else {
                        window.console.log(error);
                    }
                };
                BrowserDomAdapter.prototype.log = function (error) { window.console.log(error); };
                BrowserDomAdapter.prototype.logGroup = function (error) {
                    if (window.console.group) {
                        window.console.group(error);
                        this.logError(error);
                    }
                    else {
                        window.console.log(error);
                    }
                };
                BrowserDomAdapter.prototype.logGroupEnd = function () {
                    if (window.console.groupEnd) {
                        window.console.groupEnd();
                    }
                };
                Object.defineProperty(BrowserDomAdapter.prototype, "attrToPropMap", {
                    get: function () { return _attrToPropMap; },
                    enumerable: true,
                    configurable: true
                });
                BrowserDomAdapter.prototype.query = function (selector) { return document.querySelector(selector); };
                BrowserDomAdapter.prototype.querySelector = function (el, selector) { return el.querySelector(selector); };
                BrowserDomAdapter.prototype.querySelectorAll = function (el, selector) { return el.querySelectorAll(selector); };
                BrowserDomAdapter.prototype.on = function (el, evt, listener) { el.addEventListener(evt, listener, false); };
                BrowserDomAdapter.prototype.onAndCancel = function (el, evt, listener) {
                    el.addEventListener(evt, listener, false);
                    // Needed to follow Dart's subscription semantic, until fix of
                    // https://code.google.com/p/dart/issues/detail?id=17406
                    return function () { el.removeEventListener(evt, listener, false); };
                };
                BrowserDomAdapter.prototype.dispatchEvent = function (el, evt) { el.dispatchEvent(evt); };
                BrowserDomAdapter.prototype.createMouseEvent = function (eventType) {
                    var evt = document.createEvent('MouseEvent');
                    evt.initEvent(eventType, true, true);
                    return evt;
                };
                BrowserDomAdapter.prototype.createEvent = function (eventType) {
                    var evt = document.createEvent('Event');
                    evt.initEvent(eventType, true, true);
                    return evt;
                };
                BrowserDomAdapter.prototype.preventDefault = function (evt) {
                    evt.preventDefault();
                    evt.returnValue = false;
                };
                BrowserDomAdapter.prototype.isPrevented = function (evt) {
                    return evt.defaultPrevented || lang_198.isPresent(evt.returnValue) && !evt.returnValue;
                };
                BrowserDomAdapter.prototype.getInnerHTML = function (el) { return el.innerHTML; };
                BrowserDomAdapter.prototype.getOuterHTML = function (el) { return el.outerHTML; };
                BrowserDomAdapter.prototype.nodeName = function (node) { return node.nodeName; };
                BrowserDomAdapter.prototype.nodeValue = function (node) { return node.nodeValue; };
                BrowserDomAdapter.prototype.type = function (node) { return node.type; };
                BrowserDomAdapter.prototype.content = function (node) {
                    if (this.hasProperty(node, "content")) {
                        return node.content;
                    }
                    else {
                        return node;
                    }
                };
                BrowserDomAdapter.prototype.firstChild = function (el) { return el.firstChild; };
                BrowserDomAdapter.prototype.nextSibling = function (el) { return el.nextSibling; };
                BrowserDomAdapter.prototype.parentElement = function (el) { return el.parentNode; };
                BrowserDomAdapter.prototype.childNodes = function (el) { return el.childNodes; };
                BrowserDomAdapter.prototype.childNodesAsList = function (el) {
                    var childNodes = el.childNodes;
                    var res = collection_84.ListWrapper.createFixedSize(childNodes.length);
                    for (var i = 0; i < childNodes.length; i++) {
                        res[i] = childNodes[i];
                    }
                    return res;
                };
                BrowserDomAdapter.prototype.clearNodes = function (el) {
                    while (el.firstChild) {
                        el.removeChild(el.firstChild);
                    }
                };
                BrowserDomAdapter.prototype.appendChild = function (el, node) { el.appendChild(node); };
                BrowserDomAdapter.prototype.removeChild = function (el, node) { el.removeChild(node); };
                BrowserDomAdapter.prototype.replaceChild = function (el, newChild, oldChild) { el.replaceChild(newChild, oldChild); };
                BrowserDomAdapter.prototype.remove = function (node) {
                    if (node.parentNode) {
                        node.parentNode.removeChild(node);
                    }
                    return node;
                };
                BrowserDomAdapter.prototype.insertBefore = function (el, node) { el.parentNode.insertBefore(node, el); };
                BrowserDomAdapter.prototype.insertAllBefore = function (el, nodes) { nodes.forEach(function (n) { return el.parentNode.insertBefore(n, el); }); };
                BrowserDomAdapter.prototype.insertAfter = function (el, node) { el.parentNode.insertBefore(node, el.nextSibling); };
                BrowserDomAdapter.prototype.setInnerHTML = function (el, value) { el.innerHTML = value; };
                BrowserDomAdapter.prototype.getText = function (el) { return el.textContent; };
                // TODO(vicb): removed Element type because it does not support StyleElement
                BrowserDomAdapter.prototype.setText = function (el, value) { el.textContent = value; };
                BrowserDomAdapter.prototype.getValue = function (el) { return el.value; };
                BrowserDomAdapter.prototype.setValue = function (el, value) { el.value = value; };
                BrowserDomAdapter.prototype.getChecked = function (el) { return el.checked; };
                BrowserDomAdapter.prototype.setChecked = function (el, value) { el.checked = value; };
                BrowserDomAdapter.prototype.createComment = function (text) { return document.createComment(text); };
                BrowserDomAdapter.prototype.createTemplate = function (html) {
                    var t = document.createElement('template');
                    t.innerHTML = html;
                    return t;
                };
                BrowserDomAdapter.prototype.createElement = function (tagName, doc) {
                    if (doc === void 0) { doc = document; }
                    return doc.createElement(tagName);
                };
                BrowserDomAdapter.prototype.createElementNS = function (ns, tagName, doc) {
                    if (doc === void 0) { doc = document; }
                    return doc.createElementNS(ns, tagName);
                };
                BrowserDomAdapter.prototype.createTextNode = function (text, doc) {
                    if (doc === void 0) { doc = document; }
                    return doc.createTextNode(text);
                };
                BrowserDomAdapter.prototype.createScriptTag = function (attrName, attrValue, doc) {
                    if (doc === void 0) { doc = document; }
                    var el = doc.createElement('SCRIPT');
                    el.setAttribute(attrName, attrValue);
                    return el;
                };
                BrowserDomAdapter.prototype.createStyleElement = function (css, doc) {
                    if (doc === void 0) { doc = document; }
                    var style = doc.createElement('style');
                    this.appendChild(style, this.createTextNode(css));
                    return style;
                };
                BrowserDomAdapter.prototype.createShadowRoot = function (el) { return el.createShadowRoot(); };
                BrowserDomAdapter.prototype.getShadowRoot = function (el) { return el.shadowRoot; };
                BrowserDomAdapter.prototype.getHost = function (el) { return el.host; };
                BrowserDomAdapter.prototype.clone = function (node) { return node.cloneNode(true); };
                BrowserDomAdapter.prototype.getElementsByClassName = function (element, name) {
                    return element.getElementsByClassName(name);
                };
                BrowserDomAdapter.prototype.getElementsByTagName = function (element, name) {
                    return element.getElementsByTagName(name);
                };
                BrowserDomAdapter.prototype.classList = function (element) { return Array.prototype.slice.call(element.classList, 0); };
                BrowserDomAdapter.prototype.addClass = function (element, className) { element.classList.add(className); };
                BrowserDomAdapter.prototype.removeClass = function (element, className) { element.classList.remove(className); };
                BrowserDomAdapter.prototype.hasClass = function (element, className) { return element.classList.contains(className); };
                BrowserDomAdapter.prototype.setStyle = function (element, styleName, styleValue) {
                    element.style[styleName] = styleValue;
                };
                BrowserDomAdapter.prototype.removeStyle = function (element, stylename) { element.style[stylename] = null; };
                BrowserDomAdapter.prototype.getStyle = function (element, stylename) { return element.style[stylename]; };
                BrowserDomAdapter.prototype.hasStyle = function (element, styleName, styleValue) {
                    if (styleValue === void 0) { styleValue = null; }
                    var value = this.getStyle(element, styleName) || '';
                    return styleValue ? value == styleValue : value.length > 0;
                };
                BrowserDomAdapter.prototype.tagName = function (element) { return element.tagName; };
                BrowserDomAdapter.prototype.attributeMap = function (element) {
                    var res = new Map();
                    var elAttrs = element.attributes;
                    for (var i = 0; i < elAttrs.length; i++) {
                        var attrib = elAttrs[i];
                        res.set(attrib.name, attrib.value);
                    }
                    return res;
                };
                BrowserDomAdapter.prototype.hasAttribute = function (element, attribute) { return element.hasAttribute(attribute); };
                BrowserDomAdapter.prototype.hasAttributeNS = function (element, ns, attribute) {
                    return element.hasAttributeNS(ns, attribute);
                };
                BrowserDomAdapter.prototype.getAttribute = function (element, attribute) { return element.getAttribute(attribute); };
                BrowserDomAdapter.prototype.getAttributeNS = function (element, ns, name) {
                    return element.getAttributeNS(ns, name);
                };
                BrowserDomAdapter.prototype.setAttribute = function (element, name, value) { element.setAttribute(name, value); };
                BrowserDomAdapter.prototype.setAttributeNS = function (element, ns, name, value) {
                    element.setAttributeNS(ns, name, value);
                };
                BrowserDomAdapter.prototype.removeAttribute = function (element, attribute) { element.removeAttribute(attribute); };
                BrowserDomAdapter.prototype.removeAttributeNS = function (element, ns, name) { element.removeAttributeNS(ns, name); };
                BrowserDomAdapter.prototype.templateAwareRoot = function (el) { return this.isTemplateElement(el) ? this.content(el) : el; };
                BrowserDomAdapter.prototype.createHtmlDocument = function () {
                    return document.implementation.createHTMLDocument('fakeTitle');
                };
                BrowserDomAdapter.prototype.defaultDoc = function () { return document; };
                BrowserDomAdapter.prototype.getBoundingClientRect = function (el) {
                    try {
                        return el.getBoundingClientRect();
                    }
                    catch (e) {
                        return { top: 0, bottom: 0, left: 0, right: 0, width: 0, height: 0 };
                    }
                };
                BrowserDomAdapter.prototype.getTitle = function () { return document.title; };
                BrowserDomAdapter.prototype.setTitle = function (newTitle) { document.title = newTitle || ''; };
                BrowserDomAdapter.prototype.elementMatches = function (n, selector) {
                    var matches = false;
                    if (n instanceof HTMLElement) {
                        if (n.matches) {
                            matches = n.matches(selector);
                        }
                        else if (n.msMatchesSelector) {
                            matches = n.msMatchesSelector(selector);
                        }
                        else if (n.webkitMatchesSelector) {
                            matches = n.webkitMatchesSelector(selector);
                        }
                    }
                    return matches;
                };
                BrowserDomAdapter.prototype.isTemplateElement = function (el) {
                    return el instanceof HTMLElement && el.nodeName == "TEMPLATE";
                };
                BrowserDomAdapter.prototype.isTextNode = function (node) { return node.nodeType === Node.TEXT_NODE; };
                BrowserDomAdapter.prototype.isCommentNode = function (node) { return node.nodeType === Node.COMMENT_NODE; };
                BrowserDomAdapter.prototype.isElementNode = function (node) { return node.nodeType === Node.ELEMENT_NODE; };
                BrowserDomAdapter.prototype.hasShadowRoot = function (node) { return node instanceof HTMLElement && lang_198.isPresent(node.shadowRoot); };
                BrowserDomAdapter.prototype.isShadowRoot = function (node) { return node instanceof DocumentFragment; };
                BrowserDomAdapter.prototype.importIntoDoc = function (node) {
                    var toImport = node;
                    if (this.isTemplateElement(node)) {
                        toImport = this.content(node);
                    }
                    return document.importNode(toImport, true);
                };
                BrowserDomAdapter.prototype.adoptNode = function (node) { return document.adoptNode(node); };
                BrowserDomAdapter.prototype.getHref = function (el) { return el.href; };
                BrowserDomAdapter.prototype.getEventKey = function (event) {
                    var key = event.key;
                    if (lang_198.isBlank(key)) {
                        key = event.keyIdentifier;
                        // keyIdentifier is defined in the old draft of DOM Level 3 Events implemented by Chrome and
                        // Safari
                        // cf
                        // http://www.w3.org/TR/2007/WD-DOM-Level-3-Events-20071221/events.html#Events-KeyboardEvents-Interfaces
                        if (lang_198.isBlank(key)) {
                            return 'Unidentified';
                        }
                        if (key.startsWith('U+')) {
                            key = String.fromCharCode(parseInt(key.substring(2), 16));
                            if (event.location === DOM_KEY_LOCATION_NUMPAD && _chromeNumKeyPadMap.hasOwnProperty(key)) {
                                // There is a bug in Chrome for numeric keypad keys:
                                // https://code.google.com/p/chromium/issues/detail?id=155654
                                // 1, 2, 3 ... are reported as A, B, C ...
                                key = _chromeNumKeyPadMap[key];
                            }
                        }
                    }
                    if (_keyMap.hasOwnProperty(key)) {
                        key = _keyMap[key];
                    }
                    return key;
                };
                BrowserDomAdapter.prototype.getGlobalEventTarget = function (target) {
                    if (target == "window") {
                        return window;
                    }
                    else if (target == "document") {
                        return document;
                    }
                    else if (target == "body") {
                        return document.body;
                    }
                };
                BrowserDomAdapter.prototype.getHistory = function () { return window.history; };
                BrowserDomAdapter.prototype.getLocation = function () { return window.location; };
                BrowserDomAdapter.prototype.getBaseHref = function () {
                    var href = getBaseElementHref();
                    if (lang_198.isBlank(href)) {
                        return null;
                    }
                    return relativePath(href);
                };
                BrowserDomAdapter.prototype.resetBaseElement = function () { baseElement = null; };
                BrowserDomAdapter.prototype.getUserAgent = function () { return window.navigator.userAgent; };
                BrowserDomAdapter.prototype.setData = function (element, name, value) {
                    this.setAttribute(element, 'data-' + name, value);
                };
                BrowserDomAdapter.prototype.getData = function (element, name) { return this.getAttribute(element, 'data-' + name); };
                BrowserDomAdapter.prototype.getComputedStyle = function (element) { return getComputedStyle(element); };
                // TODO(tbosch): move this into a separate environment class once we have it
                BrowserDomAdapter.prototype.setGlobalVar = function (path, value) { lang_198.setValueOnPath(lang_198.global, path, value); };
                BrowserDomAdapter.prototype.requestAnimationFrame = function (callback) { return window.requestAnimationFrame(callback); };
                BrowserDomAdapter.prototype.cancelAnimationFrame = function (id) { window.cancelAnimationFrame(id); };
                BrowserDomAdapter.prototype.performanceNow = function () {
                    // performance.now() is not available in all browsers, see
                    // http://caniuse.com/#search=performance.now
                    if (lang_198.isPresent(window.performance) && lang_198.isPresent(window.performance.now)) {
                        return window.performance.now();
                    }
                    else {
                        return lang_198.DateWrapper.toMillis(lang_198.DateWrapper.now());
                    }
                };
                return BrowserDomAdapter;
            }(generic_browser_adapter_1.GenericBrowserDomAdapter));
            exports_368("BrowserDomAdapter", BrowserDomAdapter);
            baseElement = null;
            // based on urlUtils.js in AngularJS 1
            urlParsingNode = null;
        }
    }
});
System.register("test/node_modules/angular2/ts/src/platform/browser_common", ['angular2/src/facade/lang', 'angular2/src/core/di', "angular2/core", "angular2/common", 'angular2/src/core/testability/testability', 'angular2/src/platform/dom/dom_adapter', 'angular2/src/platform/dom/events/dom_events', 'angular2/src/platform/dom/events/key_events', 'angular2/src/platform/dom/events/hammer_gestures', 'angular2/src/platform/dom/dom_tokens', 'angular2/src/platform/dom/dom_renderer', 'angular2/src/platform/dom/shared_styles_host', "angular2/src/animate/browser_details", "angular2/src/animate/animation_builder", "test/node_modules/angular2/ts/src/platform/browser/browser_adapter", 'angular2/src/platform/browser/testability', 'angular2/src/core/profile/wtf_init', "angular2/src/platform/dom/events/event_manager", 'angular2/platform/common_dom', 'angular2/src/platform/browser/title', 'angular2/src/platform/browser/tools/tools'], function(exports_369, context_369) {
    "use strict";
    var __moduleName = context_369 && context_369.id;
    var lang_199, di_52, core_128, common_3, testability_4, dom_adapter_11, dom_events_3, key_events_1, hammer_gestures_1, dom_tokens_4, dom_renderer_3, shared_styles_host_3, shared_styles_host_4, browser_details_4, animation_builder_5, browser_adapter_2, testability_5, wtf_init_1, event_manager_2, common_dom_3;
    var BROWSER_PROVIDERS, BROWSER_APP_COMMON_PROVIDERS;
    function _exceptionHandler() {
        // !IS_DART is required because we must rethrow exceptions in JS,
        // but must not rethrow exceptions in Dart
        return new core_128.ExceptionHandler(dom_adapter_11.DOM, !lang_199.IS_DART);
    }
    function _document() {
        return dom_adapter_11.DOM.defaultDoc();
    }
    function initDomAdapter() {
        browser_adapter_2.BrowserDomAdapter.makeCurrent();
        wtf_init_1.wtfInit();
        testability_5.BrowserGetTestability.init();
    }
    exports_369("initDomAdapter", initDomAdapter);
    return {
        setters:[
            function (lang_199_1) {
                lang_199 = lang_199_1;
            },
            function (di_52_1) {
                di_52 = di_52_1;
            },
            function (core_128_1) {
                core_128 = core_128_1;
            },
            function (common_3_1) {
                common_3 = common_3_1;
            },
            function (testability_4_1) {
                testability_4 = testability_4_1;
            },
            function (dom_adapter_11_1) {
                dom_adapter_11 = dom_adapter_11_1;
            },
            function (dom_events_3_1) {
                dom_events_3 = dom_events_3_1;
            },
            function (key_events_1_1) {
                key_events_1 = key_events_1_1;
            },
            function (hammer_gestures_1_1) {
                hammer_gestures_1 = hammer_gestures_1_1;
            },
            function (dom_tokens_4_1) {
                dom_tokens_4 = dom_tokens_4_1;
                exports_369({
                    "DOCUMENT": dom_tokens_4_1["DOCUMENT"]
                });
            },
            function (dom_renderer_3_1) {
                dom_renderer_3 = dom_renderer_3_1;
            },
            function (shared_styles_host_3_1) {
                shared_styles_host_3 = shared_styles_host_3_1;
                shared_styles_host_4 = shared_styles_host_3_1;
            },
            function (browser_details_4_1) {
                browser_details_4 = browser_details_4_1;
            },
            function (animation_builder_5_1) {
                animation_builder_5 = animation_builder_5_1;
            },
            function (browser_adapter_2_1) {
                browser_adapter_2 = browser_adapter_2_1;
                exports_369({
                    "BrowserDomAdapter": browser_adapter_2_1["BrowserDomAdapter"]
                });
            },
            function (testability_5_1) {
                testability_5 = testability_5_1;
            },
            function (wtf_init_1_1) {
                wtf_init_1 = wtf_init_1_1;
            },
            function (event_manager_2_1) {
                event_manager_2 = event_manager_2_1;
            },
            function (common_dom_3_1) {
                common_dom_3 = common_dom_3_1;
                exports_369({
                    "ELEMENT_PROBE_PROVIDERS": common_dom_3_1["ELEMENT_PROBE_PROVIDERS"],
                    "ELEMENT_PROBE_PROVIDERS_PROD_MODE": common_dom_3_1["ELEMENT_PROBE_PROVIDERS_PROD_MODE"],
                    "inspectNativeElement": common_dom_3_1["inspectNativeElement"],
                    "By": common_dom_3_1["By"]
                });
            },
            function (title_1_1) {
                exports_369({
                    "Title": title_1_1["Title"]
                });
            },
            function (tools_1_1) {
                exports_369({
                    "enableDebugTools": tools_1_1["enableDebugTools"],
                    "disableDebugTools": tools_1_1["disableDebugTools"]
                });
            }],
        execute: function() {
            /**
             * A set of providers to initialize the Angular platform in a web browser.
             *
             * Used automatically by `bootstrap`, or can be passed to {@link platform}.
             */
            exports_369("BROWSER_PROVIDERS", BROWSER_PROVIDERS = lang_199.CONST_EXPR([
                core_128.PLATFORM_COMMON_PROVIDERS,
                new di_52.Provider(core_128.PLATFORM_INITIALIZER, { useValue: initDomAdapter, multi: true }),
            ]));
            /**
             * A set of providers to initialize an Angular application in a web browser.
             *
             * Used automatically by `bootstrap`, or can be passed to {@link PlatformRef.application}.
             */
            exports_369("BROWSER_APP_COMMON_PROVIDERS", BROWSER_APP_COMMON_PROVIDERS = lang_199.CONST_EXPR([
                core_128.APPLICATION_COMMON_PROVIDERS,
                common_3.FORM_PROVIDERS,
                new di_52.Provider(core_128.PLATFORM_PIPES, { useValue: common_3.COMMON_PIPES, multi: true }),
                new di_52.Provider(core_128.PLATFORM_DIRECTIVES, { useValue: common_3.COMMON_DIRECTIVES, multi: true }),
                new di_52.Provider(core_128.ExceptionHandler, { useFactory: _exceptionHandler, deps: [] }),
                new di_52.Provider(dom_tokens_4.DOCUMENT, { useFactory: _document, deps: [] }),
                new di_52.Provider(event_manager_2.EVENT_MANAGER_PLUGINS, { useClass: dom_events_3.DomEventsPlugin, multi: true }),
                new di_52.Provider(event_manager_2.EVENT_MANAGER_PLUGINS, { useClass: key_events_1.KeyEventsPlugin, multi: true }),
                new di_52.Provider(event_manager_2.EVENT_MANAGER_PLUGINS, { useClass: hammer_gestures_1.HammerGesturesPlugin, multi: true }),
                new di_52.Provider(dom_renderer_3.DomRootRenderer, { useClass: dom_renderer_3.DomRootRenderer_ }),
                new di_52.Provider(core_128.RootRenderer, { useExisting: dom_renderer_3.DomRootRenderer }),
                new di_52.Provider(shared_styles_host_4.SharedStylesHost, { useExisting: shared_styles_host_3.DomSharedStylesHost }),
                shared_styles_host_3.DomSharedStylesHost,
                testability_4.Testability,
                browser_details_4.BrowserDetails,
                animation_builder_5.AnimationBuilder,
                event_manager_2.EventManager,
                common_dom_3.ELEMENT_PROBE_PROVIDERS
            ]));
        }
    }
});
System.register("test/node_modules/angular2/ts/src/platform/worker_app_common", ['angular2/src/compiler/xhr', 'angular2/src/web_workers/worker/xhr_impl', 'angular2/src/web_workers/worker/renderer', 'angular2/src/facade/lang', 'angular2/src/core/render/api', 'angular2/core', "angular2/common", 'angular2/src/web_workers/shared/client_message_broker', 'angular2/src/web_workers/shared/service_message_broker', "angular2/src/web_workers/shared/serializer", "angular2/src/web_workers/shared/api", 'angular2/src/core/di', 'angular2/src/web_workers/shared/render_store'], function(exports_370, context_370) {
    "use strict";
    var __moduleName = context_370 && context_370.id;
    var xhr_6, xhr_impl_4, renderer_1, lang_200, api_7, core_129, common_4, client_message_broker_3, service_message_broker_3, serializer_5, api_8, di_53, render_store_2;
    var PrintLogger, WORKER_APP_PLATFORM, WORKER_APP_APPLICATION_COMMON;
    function _exceptionHandler() {
        return new core_129.ExceptionHandler(new PrintLogger());
    }
    return {
        setters:[
            function (xhr_6_1) {
                xhr_6 = xhr_6_1;
            },
            function (xhr_impl_4_1) {
                xhr_impl_4 = xhr_impl_4_1;
            },
            function (renderer_1_1) {
                renderer_1 = renderer_1_1;
            },
            function (lang_200_1) {
                lang_200 = lang_200_1;
            },
            function (api_7_1) {
                api_7 = api_7_1;
            },
            function (core_129_1) {
                core_129 = core_129_1;
            },
            function (common_4_1) {
                common_4 = common_4_1;
            },
            function (client_message_broker_3_1) {
                client_message_broker_3 = client_message_broker_3_1;
            },
            function (service_message_broker_3_1) {
                service_message_broker_3 = service_message_broker_3_1;
            },
            function (serializer_5_1) {
                serializer_5 = serializer_5_1;
            },
            function (api_8_1) {
                api_8 = api_8_1;
            },
            function (di_53_1) {
                di_53 = di_53_1;
            },
            function (render_store_2_1) {
                render_store_2 = render_store_2_1;
            }],
        execute: function() {
            PrintLogger = (function () {
                function PrintLogger() {
                    this.log = lang_200.print;
                    this.logError = lang_200.print;
                    this.logGroup = lang_200.print;
                }
                PrintLogger.prototype.logGroupEnd = function () { };
                return PrintLogger;
            }());
            exports_370("WORKER_APP_PLATFORM", WORKER_APP_PLATFORM = lang_200.CONST_EXPR([core_129.PLATFORM_COMMON_PROVIDERS]));
            exports_370("WORKER_APP_APPLICATION_COMMON", WORKER_APP_APPLICATION_COMMON = lang_200.CONST_EXPR([
                core_129.APPLICATION_COMMON_PROVIDERS,
                common_4.FORM_PROVIDERS,
                serializer_5.Serializer,
                new di_53.Provider(core_129.PLATFORM_PIPES, { useValue: common_4.COMMON_PIPES, multi: true }),
                new di_53.Provider(core_129.PLATFORM_DIRECTIVES, { useValue: common_4.COMMON_DIRECTIVES, multi: true }),
                new di_53.Provider(client_message_broker_3.ClientMessageBrokerFactory, { useClass: client_message_broker_3.ClientMessageBrokerFactory_ }),
                new di_53.Provider(service_message_broker_3.ServiceMessageBrokerFactory, { useClass: service_message_broker_3.ServiceMessageBrokerFactory_ }),
                renderer_1.WebWorkerRootRenderer,
                new di_53.Provider(api_7.RootRenderer, { useExisting: renderer_1.WebWorkerRootRenderer }),
                new di_53.Provider(api_8.ON_WEB_WORKER, { useValue: true }),
                render_store_2.RenderStore,
                new di_53.Provider(core_129.ExceptionHandler, { useFactory: _exceptionHandler, deps: [] }),
                xhr_impl_4.WebWorkerXHRImpl,
                new di_53.Provider(xhr_6.XHR, { useExisting: xhr_impl_4.WebWorkerXHRImpl })
            ]));
        }
    }
});
System.register("test/node_modules/angular2/ts/src/platform/worker_app", ['angular2/src/core/zone/ng_zone', 'angular2/src/core/di', 'angular2/src/platform/server/parse5_adapter', 'angular2/src/web_workers/shared/post_message_bus', "test/node_modules/angular2/ts/src/platform/worker_app_common", 'angular2/core', 'angular2/src/web_workers/shared/message_bus', 'angular2/src/compiler/compiler'], function(exports_371, context_371) {
    "use strict";
    var __moduleName = context_371 && context_371.id;
    var ng_zone_5, di_54, parse5_adapter_3, post_message_bus_1, worker_app_common_2, core_130, message_bus_5, compiler_14;
    var _postMessage, WORKER_APP_APPLICATION;
    function createMessageBus(zone) {
        var sink = new post_message_bus_1.PostMessageBusSink(_postMessage);
        var source = new post_message_bus_1.PostMessageBusSource();
        var bus = new post_message_bus_1.PostMessageBus(sink, source);
        bus.attachToZone(zone);
        return bus;
    }
    function setupWebWorker() {
        parse5_adapter_3.Parse5DomAdapter.makeCurrent();
    }
    return {
        setters:[
            function (ng_zone_5_1) {
                ng_zone_5 = ng_zone_5_1;
            },
            function (di_54_1) {
                di_54 = di_54_1;
            },
            function (parse5_adapter_3_1) {
                parse5_adapter_3 = parse5_adapter_3_1;
            },
            function (post_message_bus_1_1) {
                post_message_bus_1 = post_message_bus_1_1;
            },
            function (worker_app_common_2_1) {
                worker_app_common_2 = worker_app_common_2_1;
            },
            function (core_130_1) {
                core_130 = core_130_1;
            },
            function (message_bus_5_1) {
                message_bus_5 = message_bus_5_1;
            },
            function (compiler_14_1) {
                compiler_14 = compiler_14_1;
            }],
        execute: function() {
            // TODO(jteplitz602) remove this and compile with lib.webworker.d.ts (#3492)
            _postMessage = {
                postMessage: function (message, transferrables) {
                    postMessage(message, transferrables);
                }
            };
            exports_371("WORKER_APP_APPLICATION", WORKER_APP_APPLICATION = [
                worker_app_common_2.WORKER_APP_APPLICATION_COMMON,
                compiler_14.COMPILER_PROVIDERS,
                new di_54.Provider(message_bus_5.MessageBus, { useFactory: createMessageBus, deps: [ng_zone_5.NgZone] }),
                new di_54.Provider(core_130.APP_INITIALIZER, { useValue: setupWebWorker, multi: true })
            ]);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/platform/worker_render", ['angular2/src/web_workers/shared/post_message_bus', 'angular2/src/web_workers/shared/message_bus', 'angular2/core', 'angular2/src/core/di', 'angular2/src/platform/worker_render_common', 'angular2/src/facade/exceptions', 'angular2/src/facade/lang'], function(exports_372, context_372) {
    "use strict";
    var __moduleName = context_372 && context_372.id;
    var post_message_bus_2, message_bus_6, core_131, di_55, worker_render_common_2, exceptions_73, lang_201;
    var WebWorkerInstance, WORKER_RENDER_APPLICATION;
    function initWebWorkerApplication(injector) {
        var scriptUri;
        try {
            scriptUri = injector.get(worker_render_common_2.WORKER_SCRIPT);
        }
        catch (e) {
            throw new exceptions_73.BaseException("You must provide your WebWorker's initialization script with the WORKER_SCRIPT token");
        }
        var instance = injector.get(WebWorkerInstance);
        spawnWebWorker(scriptUri, instance);
        worker_render_common_2.initializeGenericWorkerRenderer(injector);
    }
    /**
     * Spawns a new class and initializes the WebWorkerInstance
     */
    function spawnWebWorker(uri, instance) {
        var webWorker = new Worker(uri);
        var sink = new post_message_bus_2.PostMessageBusSink(webWorker);
        var source = new post_message_bus_2.PostMessageBusSource(webWorker);
        var bus = new post_message_bus_2.PostMessageBus(sink, source);
        instance.init(webWorker, bus);
    }
    return {
        setters:[
            function (post_message_bus_2_1) {
                post_message_bus_2 = post_message_bus_2_1;
            },
            function (message_bus_6_1) {
                message_bus_6 = message_bus_6_1;
            },
            function (core_131_1) {
                core_131 = core_131_1;
            },
            function (di_55_1) {
                di_55 = di_55_1;
            },
            function (worker_render_common_2_1) {
                worker_render_common_2 = worker_render_common_2_1;
            },
            function (exceptions_73_1) {
                exceptions_73 = exceptions_73_1;
            },
            function (lang_201_1) {
                lang_201 = lang_201_1;
            }],
        execute: function() {
            /**
             * Wrapper class that exposes the Worker
             * and underlying {@link MessageBus} for lower level message passing.
             */
            WebWorkerInstance = (function () {
                function WebWorkerInstance() {
                }
                /** @internal */
                WebWorkerInstance.prototype.init = function (worker, bus) {
                    this.worker = worker;
                    this.bus = bus;
                };
                WebWorkerInstance = __decorate([
                    di_55.Injectable(), 
                    __metadata('design:paramtypes', [])
                ], WebWorkerInstance);
                return WebWorkerInstance;
            }());
            exports_372("WebWorkerInstance", WebWorkerInstance);
            /**
             * An array of providers that should be passed into `application()` when initializing a new Worker.
             */
            exports_372("WORKER_RENDER_APPLICATION", WORKER_RENDER_APPLICATION = lang_201.CONST_EXPR([
                worker_render_common_2.WORKER_RENDER_APPLICATION_COMMON,
                WebWorkerInstance,
                new di_55.Provider(core_131.APP_INITIALIZER, {
                    useFactory: function (injector) { return function () { return initWebWorkerApplication(injector); }; },
                    multi: true,
                    deps: [di_55.Injector]
                }),
                new di_55.Provider(message_bus_6.MessageBus, { useFactory: function (instance) { return instance.bus; }, deps: [WebWorkerInstance] })
            ]));
        }
    }
});
System.register("test/node_modules/angular2/ts/src/platform/worker_render_common", ['angular2/src/facade/lang', 'angular2/src/web_workers/shared/message_bus', 'angular2/src/core/zone/ng_zone', 'angular2/core', 'angular2/platform/common_dom', 'angular2/src/core/di', 'angular2/src/platform/dom/dom_adapter', 'angular2/src/platform/dom/events/dom_events', 'angular2/src/platform/dom/events/key_events', 'angular2/src/platform/dom/events/hammer_gestures', 'angular2/src/platform/dom/dom_tokens', 'angular2/src/platform/dom/dom_renderer', 'angular2/src/platform/dom/shared_styles_host', 'angular2/src/animate/browser_details', 'angular2/src/animate/animation_builder', 'angular2/compiler', 'angular2/src/platform/browser/xhr_impl', 'angular2/src/core/testability/testability', 'angular2/src/platform/browser/testability', "test/node_modules/angular2/ts/src/platform/browser/browser_adapter", 'angular2/src/core/profile/wtf_init', 'angular2/src/web_workers/ui/renderer', 'angular2/src/web_workers/ui/xhr_impl', 'angular2/src/router/location/browser_platform_location', 'angular2/src/web_workers/shared/service_message_broker', 'angular2/src/web_workers/shared/client_message_broker', 'angular2/src/web_workers/shared/serializer', 'angular2/src/web_workers/shared/api', 'angular2/src/web_workers/shared/render_store'], function(exports_373, context_373) {
    "use strict";
    var __moduleName = context_373 && context_373.id;
    var lang_202, message_bus_7, ng_zone_6, core_132, common_dom_5, di_56, dom_adapter_12, dom_events_4, key_events_2, hammer_gestures_2, dom_tokens_6, dom_renderer_4, shared_styles_host_5, shared_styles_host_6, browser_details_5, animation_builder_6, compiler_15, xhr_impl_5, testability_6, testability_7, browser_adapter_4, wtf_init_2, renderer_2, xhr_impl_6, browser_platform_location_1, service_message_broker_4, client_message_broker_4, serializer_6, api_9, render_store_3;
    var WORKER_SCRIPT, WORKER_RENDER_MESSAGING_PROVIDERS, WORKER_RENDER_PLATFORM, WORKER_RENDER_ROUTER, WORKER_RENDER_APPLICATION_COMMON;
    function initializeGenericWorkerRenderer(injector) {
        var bus = injector.get(message_bus_7.MessageBus);
        var zone = injector.get(ng_zone_6.NgZone);
        bus.attachToZone(zone);
        zone.run(function () {
            WORKER_RENDER_MESSAGING_PROVIDERS.forEach(function (token) { injector.get(token).start(); });
        });
    }
    exports_373("initializeGenericWorkerRenderer", initializeGenericWorkerRenderer);
    function initWebWorkerRenderPlatform() {
        browser_adapter_4.BrowserDomAdapter.makeCurrent();
        wtf_init_2.wtfInit();
        testability_7.BrowserGetTestability.init();
    }
    exports_373("initWebWorkerRenderPlatform", initWebWorkerRenderPlatform);
    function _exceptionHandler() {
        return new core_132.ExceptionHandler(dom_adapter_12.DOM, !lang_202.IS_DART);
    }
    function _document() {
        return dom_adapter_12.DOM.defaultDoc();
    }
    return {
        setters:[
            function (lang_202_1) {
                lang_202 = lang_202_1;
            },
            function (message_bus_7_1) {
                message_bus_7 = message_bus_7_1;
            },
            function (ng_zone_6_1) {
                ng_zone_6 = ng_zone_6_1;
            },
            function (core_132_1) {
                core_132 = core_132_1;
            },
            function (common_dom_5_1) {
                common_dom_5 = common_dom_5_1;
            },
            function (di_56_1) {
                di_56 = di_56_1;
            },
            function (dom_adapter_12_1) {
                dom_adapter_12 = dom_adapter_12_1;
            },
            function (dom_events_4_1) {
                dom_events_4 = dom_events_4_1;
            },
            function (key_events_2_1) {
                key_events_2 = key_events_2_1;
            },
            function (hammer_gestures_2_1) {
                hammer_gestures_2 = hammer_gestures_2_1;
            },
            function (dom_tokens_6_1) {
                dom_tokens_6 = dom_tokens_6_1;
            },
            function (dom_renderer_4_1) {
                dom_renderer_4 = dom_renderer_4_1;
            },
            function (shared_styles_host_5_1) {
                shared_styles_host_5 = shared_styles_host_5_1;
                shared_styles_host_6 = shared_styles_host_5_1;
            },
            function (browser_details_5_1) {
                browser_details_5 = browser_details_5_1;
            },
            function (animation_builder_6_1) {
                animation_builder_6 = animation_builder_6_1;
            },
            function (compiler_15_1) {
                compiler_15 = compiler_15_1;
            },
            function (xhr_impl_5_1) {
                xhr_impl_5 = xhr_impl_5_1;
            },
            function (testability_6_1) {
                testability_6 = testability_6_1;
            },
            function (testability_7_1) {
                testability_7 = testability_7_1;
            },
            function (browser_adapter_4_1) {
                browser_adapter_4 = browser_adapter_4_1;
            },
            function (wtf_init_2_1) {
                wtf_init_2 = wtf_init_2_1;
            },
            function (renderer_2_1) {
                renderer_2 = renderer_2_1;
            },
            function (xhr_impl_6_1) {
                xhr_impl_6 = xhr_impl_6_1;
            },
            function (browser_platform_location_1_1) {
                browser_platform_location_1 = browser_platform_location_1_1;
            },
            function (service_message_broker_4_1) {
                service_message_broker_4 = service_message_broker_4_1;
            },
            function (client_message_broker_4_1) {
                client_message_broker_4 = client_message_broker_4_1;
            },
            function (serializer_6_1) {
                serializer_6 = serializer_6_1;
            },
            function (api_9_1) {
                api_9 = api_9_1;
            },
            function (render_store_3_1) {
                render_store_3 = render_store_3_1;
            }],
        execute: function() {
            exports_373("WORKER_SCRIPT", WORKER_SCRIPT = lang_202.CONST_EXPR(new di_56.OpaqueToken("WebWorkerScript")));
            // Message based Worker classes that listen on the MessageBus
            exports_373("WORKER_RENDER_MESSAGING_PROVIDERS", WORKER_RENDER_MESSAGING_PROVIDERS = lang_202.CONST_EXPR([renderer_2.MessageBasedRenderer, xhr_impl_6.MessageBasedXHRImpl]));
            exports_373("WORKER_RENDER_PLATFORM", WORKER_RENDER_PLATFORM = lang_202.CONST_EXPR([
                core_132.PLATFORM_COMMON_PROVIDERS,
                new di_56.Provider(core_132.PLATFORM_INITIALIZER, { useValue: initWebWorkerRenderPlatform, multi: true })
            ]));
            /**
             * A list of {@link Provider}s. To use the router in a Worker enabled application you must
             * include these providers when setting up the render thread.
             */
            exports_373("WORKER_RENDER_ROUTER", WORKER_RENDER_ROUTER = lang_202.CONST_EXPR([browser_platform_location_1.BrowserPlatformLocation]));
            exports_373("WORKER_RENDER_APPLICATION_COMMON", WORKER_RENDER_APPLICATION_COMMON = lang_202.CONST_EXPR([
                core_132.APPLICATION_COMMON_PROVIDERS,
                WORKER_RENDER_MESSAGING_PROVIDERS,
                new di_56.Provider(core_132.ExceptionHandler, { useFactory: _exceptionHandler, deps: [] }),
                new di_56.Provider(dom_tokens_6.DOCUMENT, { useFactory: _document, deps: [] }),
                // TODO(jteplitz602): Investigate if we definitely need EVENT_MANAGER on the render thread
                // #5298
                new di_56.Provider(common_dom_5.EVENT_MANAGER_PLUGINS, { useClass: dom_events_4.DomEventsPlugin, multi: true }),
                new di_56.Provider(common_dom_5.EVENT_MANAGER_PLUGINS, { useClass: key_events_2.KeyEventsPlugin, multi: true }),
                new di_56.Provider(common_dom_5.EVENT_MANAGER_PLUGINS, { useClass: hammer_gestures_2.HammerGesturesPlugin, multi: true }),
                new di_56.Provider(dom_renderer_4.DomRootRenderer, { useClass: dom_renderer_4.DomRootRenderer_ }),
                new di_56.Provider(core_132.RootRenderer, { useExisting: dom_renderer_4.DomRootRenderer }),
                new di_56.Provider(shared_styles_host_6.SharedStylesHost, { useExisting: shared_styles_host_5.DomSharedStylesHost }),
                new di_56.Provider(compiler_15.XHR, { useClass: xhr_impl_5.XHRImpl }),
                xhr_impl_6.MessageBasedXHRImpl,
                new di_56.Provider(service_message_broker_4.ServiceMessageBrokerFactory, { useClass: service_message_broker_4.ServiceMessageBrokerFactory_ }),
                new di_56.Provider(client_message_broker_4.ClientMessageBrokerFactory, { useClass: client_message_broker_4.ClientMessageBrokerFactory_ }),
                serializer_6.Serializer,
                new di_56.Provider(api_9.ON_WEB_WORKER, { useValue: false }),
                render_store_3.RenderStore,
                shared_styles_host_5.DomSharedStylesHost,
                testability_6.Testability,
                browser_details_5.BrowserDetails,
                animation_builder_6.AnimationBuilder,
                common_dom_5.EventManager
            ]));
        }
    }
});
System.register("test/node_modules/angular2/ts/src/platform/browser/ruler", ['angular2/src/facade/async'], function(exports_374, context_374) {
    "use strict";
    var __moduleName = context_374 && context_374.id;
    var async_36;
    var Rectangle, Ruler;
    return {
        setters:[
            function (async_36_1) {
                async_36 = async_36_1;
            }],
        execute: function() {
            Rectangle = (function () {
                function Rectangle(left, top, width, height) {
                    this.left = left;
                    this.right = left + width;
                    this.top = top;
                    this.bottom = top + height;
                    this.height = height;
                    this.width = width;
                }
                return Rectangle;
            }());
            exports_374("Rectangle", Rectangle);
            Ruler = (function () {
                function Ruler(domAdapter) {
                    this.domAdapter = domAdapter;
                }
                Ruler.prototype.measure = function (el) {
                    var clntRect = this.domAdapter.getBoundingClientRect(el.nativeElement);
                    // even if getBoundingClientRect is synchronous we use async API in preparation for further
                    // changes
                    return async_36.PromiseWrapper.resolve(new Rectangle(clntRect.left, clntRect.top, clntRect.width, clntRect.height));
                };
                return Ruler;
            }());
            exports_374("Ruler", Ruler);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/platform/browser/testability", ['angular2/src/facade/collection', 'angular2/src/facade/lang', 'angular2/src/platform/dom/dom_adapter', 'angular2/core'], function(exports_375, context_375) {
    "use strict";
    var __moduleName = context_375 && context_375.id;
    var collection_85, lang_203, dom_adapter_13, core_133;
    var PublicTestability, BrowserGetTestability;
    return {
        setters:[
            function (collection_85_1) {
                collection_85 = collection_85_1;
            },
            function (lang_203_1) {
                lang_203 = lang_203_1;
            },
            function (dom_adapter_13_1) {
                dom_adapter_13 = dom_adapter_13_1;
            },
            function (core_133_1) {
                core_133 = core_133_1;
            }],
        execute: function() {
            PublicTestability = (function () {
                function PublicTestability(testability) {
                    this._testability = testability;
                }
                PublicTestability.prototype.isStable = function () { return this._testability.isStable(); };
                PublicTestability.prototype.whenStable = function (callback) { this._testability.whenStable(callback); };
                PublicTestability.prototype.findBindings = function (using, provider, exactMatch) {
                    return this.findProviders(using, provider, exactMatch);
                };
                PublicTestability.prototype.findProviders = function (using, provider, exactMatch) {
                    return this._testability.findBindings(using, provider, exactMatch);
                };
                return PublicTestability;
            }());
            BrowserGetTestability = (function () {
                function BrowserGetTestability() {
                }
                BrowserGetTestability.init = function () { core_133.setTestabilityGetter(new BrowserGetTestability()); };
                BrowserGetTestability.prototype.addToWindow = function (registry) {
                    lang_203.global.getAngularTestability = function (elem, findInAncestors) {
                        if (findInAncestors === void 0) { findInAncestors = true; }
                        var testability = registry.findTestabilityInTree(elem, findInAncestors);
                        if (testability == null) {
                            throw new Error('Could not find testability for element.');
                        }
                        return new PublicTestability(testability);
                    };
                    lang_203.global.getAllAngularTestabilities = function () {
                        var testabilities = registry.getAllTestabilities();
                        return testabilities.map(function (testability) { return new PublicTestability(testability); });
                    };
                    lang_203.global.getAllAngularRootElements = function () { return registry.getAllRootElements(); };
                    var whenAllStable = function (callback) {
                        var testabilities = lang_203.global.getAllAngularTestabilities();
                        var count = testabilities.length;
                        var didWork = false;
                        var decrement = function (didWork_) {
                            didWork = didWork || didWork_;
                            count--;
                            if (count == 0) {
                                callback(didWork);
                            }
                        };
                        testabilities.forEach(function (testability) { testability.whenStable(decrement); });
                    };
                    if (!lang_203.global.frameworkStabilizers) {
                        lang_203.global.frameworkStabilizers = collection_85.ListWrapper.createGrowableSize(0);
                    }
                    lang_203.global.frameworkStabilizers.push(whenAllStable);
                };
                BrowserGetTestability.prototype.findTestabilityInTree = function (registry, elem, findInAncestors) {
                    if (elem == null) {
                        return null;
                    }
                    var t = registry.getTestability(elem);
                    if (lang_203.isPresent(t)) {
                        return t;
                    }
                    else if (!findInAncestors) {
                        return null;
                    }
                    if (dom_adapter_13.DOM.isShadowRoot(elem)) {
                        return this.findTestabilityInTree(registry, dom_adapter_13.DOM.getHost(elem), true);
                    }
                    return this.findTestabilityInTree(registry, dom_adapter_13.DOM.parentElement(elem), true);
                };
                return BrowserGetTestability;
            }());
            exports_375("BrowserGetTestability", BrowserGetTestability);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/platform/browser/title", ['angular2/src/platform/dom/dom_adapter'], function(exports_376, context_376) {
    "use strict";
    var __moduleName = context_376 && context_376.id;
    var dom_adapter_14;
    var Title;
    return {
        setters:[
            function (dom_adapter_14_1) {
                dom_adapter_14 = dom_adapter_14_1;
            }],
        execute: function() {
            /**
             * A service that can be used to get and set the title of a current HTML document.
             *
             * Since an Angular 2 application can't be bootstrapped on the entire HTML document (`<html>` tag)
             * it is not possible to bind to the `text` property of the `HTMLTitleElement` elements
             * (representing the `<title>` tag). Instead, this service can be used to set and get the current
             * title value.
             */
            Title = (function () {
                function Title() {
                }
                /**
                 * Get the title of the current HTML document.
                 * @returns {string}
                 */
                Title.prototype.getTitle = function () { return dom_adapter_14.DOM.getTitle(); };
                /**
                 * Set the title of the current HTML document.
                 * @param newTitle
                 */
                Title.prototype.setTitle = function (newTitle) { dom_adapter_14.DOM.setTitle(newTitle); };
                return Title;
            }());
            exports_376("Title", Title);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/platform/browser/xhr_impl", ['angular2/src/facade/promise', 'angular2/src/facade/lang', 'angular2/src/compiler/xhr'], function(exports_377, context_377) {
    "use strict";
    var __moduleName = context_377 && context_377.id;
    var promise_5, lang_204, xhr_7;
    var XHRImpl;
    return {
        setters:[
            function (promise_5_1) {
                promise_5 = promise_5_1;
            },
            function (lang_204_1) {
                lang_204 = lang_204_1;
            },
            function (xhr_7_1) {
                xhr_7 = xhr_7_1;
            }],
        execute: function() {
            XHRImpl = (function (_super) {
                __extends(XHRImpl, _super);
                function XHRImpl() {
                    _super.apply(this, arguments);
                }
                XHRImpl.prototype.get = function (url) {
                    var completer = promise_5.PromiseWrapper.completer();
                    var xhr = new XMLHttpRequest();
                    xhr.open('GET', url, true);
                    xhr.responseType = 'text';
                    xhr.onload = function () {
                        // responseText is the old-school way of retrieving response (supported by IE8 & 9)
                        // response/responseType properties were introduced in XHR Level2 spec (supported by IE10)
                        var response = lang_204.isPresent(xhr.response) ? xhr.response : xhr.responseText;
                        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)
                        var status = xhr.status === 1223 ? 204 : xhr.status;
                        // fix status code when it is 0 (0 status is undocumented).
                        // Occurs when accessing file resources or on Android 4.1 stock browser
                        // while retrieving files from application cache.
                        if (status === 0) {
                            status = response ? 200 : 0;
                        }
                        if (200 <= status && status <= 300) {
                            completer.resolve(response);
                        }
                        else {
                            completer.reject("Failed to load " + url, null);
                        }
                    };
                    xhr.onerror = function () { completer.reject("Failed to load " + url, null); };
                    xhr.send();
                    return completer.promise;
                };
                return XHRImpl;
            }(xhr_7.XHR));
            exports_377("XHRImpl", XHRImpl);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/platform/browser/tools/common_tools", ['angular2/src/core/application_ref', 'angular2/src/facade/lang', 'angular2/src/facade/browser', 'angular2/src/platform/dom/dom_adapter'], function(exports_378, context_378) {
    "use strict";
    var __moduleName = context_378 && context_378.id;
    var application_ref_3, lang_205, browser_10, dom_adapter_15;
    var AngularTools, AngularProfiler;
    return {
        setters:[
            function (application_ref_3_1) {
                application_ref_3 = application_ref_3_1;
            },
            function (lang_205_1) {
                lang_205 = lang_205_1;
            },
            function (browser_10_1) {
                browser_10 = browser_10_1;
            },
            function (dom_adapter_15_1) {
                dom_adapter_15 = dom_adapter_15_1;
            }],
        execute: function() {
            /**
             * Entry point for all Angular debug tools. This object corresponds to the `ng`
             * global variable accessible in the dev console.
             */
            AngularTools = (function () {
                function AngularTools(ref) {
                    this.profiler = new AngularProfiler(ref);
                }
                return AngularTools;
            }());
            exports_378("AngularTools", AngularTools);
            /**
             * Entry point for all Angular profiling-related debug tools. This object
             * corresponds to the `ng.profiler` in the dev console.
             */
            AngularProfiler = (function () {
                function AngularProfiler(ref) {
                    this.appRef = ref.injector.get(application_ref_3.ApplicationRef);
                }
                /**
                 * Exercises change detection in a loop and then prints the average amount of
                 * time in milliseconds how long a single round of change detection takes for
                 * the current state of the UI. It runs a minimum of 5 rounds for a minimum
                 * of 500 milliseconds.
                 *
                 * Optionally, a user may pass a `config` parameter containing a map of
                 * options. Supported options are:
                 *
                 * `record` (boolean) - causes the profiler to record a CPU profile while
                 * it exercises the change detector. Example:
                 *
                 * ```
                 * ng.profiler.timeChangeDetection({record: true})
                 * ```
                 */
                AngularProfiler.prototype.timeChangeDetection = function (config) {
                    var record = lang_205.isPresent(config) && config['record'];
                    var profileName = 'Change Detection';
                    // Profiler is not available in Android browsers, nor in IE 9 without dev tools opened
                    var isProfilerAvailable = lang_205.isPresent(browser_10.window.console.profile);
                    if (record && isProfilerAvailable) {
                        browser_10.window.console.profile(profileName);
                    }
                    var start = dom_adapter_15.DOM.performanceNow();
                    var numTicks = 0;
                    while (numTicks < 5 || (dom_adapter_15.DOM.performanceNow() - start) < 500) {
                        this.appRef.tick();
                        numTicks++;
                    }
                    var end = dom_adapter_15.DOM.performanceNow();
                    if (record && isProfilerAvailable) {
                        // need to cast to <any> because type checker thinks there's no argument
                        // while in fact there is:
                        //
                        // https://developer.mozilla.org/en-US/docs/Web/API/Console/profileEnd
                        browser_10.window.console.profileEnd(profileName);
                    }
                    var msPerTick = (end - start) / numTicks;
                    browser_10.window.console.log("ran " + numTicks + " change detection cycles");
                    browser_10.window.console.log(lang_205.NumberWrapper.toFixed(msPerTick, 2) + " ms per check");
                };
                return AngularProfiler;
            }());
            exports_378("AngularProfiler", AngularProfiler);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/platform/browser/tools/tools", ['angular2/src/facade/lang', "test/node_modules/angular2/ts/src/platform/browser/tools/common_tools"], function(exports_379, context_379) {
    "use strict";
    var __moduleName = context_379 && context_379.id;
    var lang_206, common_tools_1;
    var context;
    /**
     * Enabled Angular 2 debug tools that are accessible via your browser's
     * developer console.
     *
     * Usage:
     *
     * 1. Open developer console (e.g. in Chrome Ctrl + Shift + j)
     * 1. Type `ng.` (usually the console will show auto-complete suggestion)
     * 1. Try the change detection profiler `ng.profiler.timeChangeDetection()`
     *    then hit Enter.
     */
    function enableDebugTools(ref) {
        context.ng = new common_tools_1.AngularTools(ref);
    }
    exports_379("enableDebugTools", enableDebugTools);
    /**
     * Disables Angular 2 tools.
     */
    function disableDebugTools() {
        delete context.ng;
    }
    exports_379("disableDebugTools", disableDebugTools);
    return {
        setters:[
            function (lang_206_1) {
                lang_206 = lang_206_1;
            },
            function (common_tools_1_1) {
                common_tools_1 = common_tools_1_1;
            }],
        execute: function() {
            context = lang_206.global;
        }
    }
});
System.register("test/node_modules/angular2/ts/src/platform/dom/dom_adapter", ['angular2/src/facade/lang'], function(exports_380, context_380) {
    "use strict";
    var __moduleName = context_380 && context_380.id;
    var lang_207;
    var DOM, DomAdapter;
    function setRootDomAdapter(adapter) {
        if (lang_207.isBlank(DOM)) {
            exports_380("DOM", DOM = adapter);
        }
    }
    exports_380("setRootDomAdapter", setRootDomAdapter);
    return {
        setters:[
            function (lang_207_1) {
                lang_207 = lang_207_1;
            }],
        execute: function() {
            exports_380("DOM", DOM = null);
            /* tslint:disable:requireParameterType */
            /**
             * Provides DOM operations in an environment-agnostic way.
             */
            DomAdapter = (function () {
                function DomAdapter() {
                }
                Object.defineProperty(DomAdapter.prototype, "attrToPropMap", {
                    /**
                     * Maps attribute names to their corresponding property names for cases
                     * where attribute name doesn't match property name.
                     */
                    get: function () { return this._attrToPropMap; },
                    set: function (value) { this._attrToPropMap = value; },
                    enumerable: true,
                    configurable: true
                });
                ;
                ;
                return DomAdapter;
            }());
            exports_380("DomAdapter", DomAdapter);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/platform/dom/dom_tokens", ['angular2/src/core/di', 'angular2/src/facade/lang'], function(exports_381, context_381) {
    "use strict";
    var __moduleName = context_381 && context_381.id;
    var di_57, lang_208;
    var DOCUMENT;
    return {
        setters:[
            function (di_57_1) {
                di_57 = di_57_1;
            },
            function (lang_208_1) {
                lang_208 = lang_208_1;
            }],
        execute: function() {
            /**
             * A DI Token representing the main rendering context. In a browser this is the DOM Document.
             *
             * Note: Document might not be available in the Application Context when Application and Rendering
             * Contexts are not the same (e.g. when running the application into a Web Worker).
             */
            exports_381("DOCUMENT", DOCUMENT = lang_208.CONST_EXPR(new di_57.OpaqueToken('DocumentToken')));
        }
    }
});
System.register("test/node_modules/angular2/ts/src/platform/dom/shared_styles_host", ['angular2/src/platform/dom/dom_adapter', 'angular2/src/core/di', 'angular2/src/facade/collection', "test/node_modules/angular2/ts/src/platform/dom/dom_tokens"], function(exports_382, context_382) {
    "use strict";
    var __moduleName = context_382 && context_382.id;
    var dom_adapter_16, di_58, collection_86, dom_tokens_7;
    var SharedStylesHost, DomSharedStylesHost;
    return {
        setters:[
            function (dom_adapter_16_1) {
                dom_adapter_16 = dom_adapter_16_1;
            },
            function (di_58_1) {
                di_58 = di_58_1;
            },
            function (collection_86_1) {
                collection_86 = collection_86_1;
            },
            function (dom_tokens_7_1) {
                dom_tokens_7 = dom_tokens_7_1;
            }],
        execute: function() {
            SharedStylesHost = (function () {
                function SharedStylesHost() {
                    /** @internal */
                    this._styles = [];
                    /** @internal */
                    this._stylesSet = new Set();
                }
                SharedStylesHost.prototype.addStyles = function (styles) {
                    var _this = this;
                    var additions = [];
                    styles.forEach(function (style) {
                        if (!collection_86.SetWrapper.has(_this._stylesSet, style)) {
                            _this._stylesSet.add(style);
                            _this._styles.push(style);
                            additions.push(style);
                        }
                    });
                    this.onStylesAdded(additions);
                };
                SharedStylesHost.prototype.onStylesAdded = function (additions) { };
                SharedStylesHost.prototype.getAllStyles = function () { return this._styles; };
                SharedStylesHost = __decorate([
                    di_58.Injectable(), 
                    __metadata('design:paramtypes', [])
                ], SharedStylesHost);
                return SharedStylesHost;
            }());
            exports_382("SharedStylesHost", SharedStylesHost);
            DomSharedStylesHost = (function (_super) {
                __extends(DomSharedStylesHost, _super);
                function DomSharedStylesHost(doc) {
                    _super.call(this);
                    this._hostNodes = new Set();
                    this._hostNodes.add(doc.head);
                }
                /** @internal */
                DomSharedStylesHost.prototype._addStylesToHost = function (styles, host) {
                    for (var i = 0; i < styles.length; i++) {
                        var style = styles[i];
                        dom_adapter_16.DOM.appendChild(host, dom_adapter_16.DOM.createStyleElement(style));
                    }
                };
                DomSharedStylesHost.prototype.addHost = function (hostNode) {
                    this._addStylesToHost(this._styles, hostNode);
                    this._hostNodes.add(hostNode);
                };
                DomSharedStylesHost.prototype.removeHost = function (hostNode) { collection_86.SetWrapper.delete(this._hostNodes, hostNode); };
                DomSharedStylesHost.prototype.onStylesAdded = function (additions) {
                    var _this = this;
                    this._hostNodes.forEach(function (hostNode) { _this._addStylesToHost(additions, hostNode); });
                };
                DomSharedStylesHost = __decorate([
                    di_58.Injectable(),
                    __param(0, di_58.Inject(dom_tokens_7.DOCUMENT)), 
                    __metadata('design:paramtypes', [Object])
                ], DomSharedStylesHost);
                return DomSharedStylesHost;
            }(SharedStylesHost));
            exports_382("DomSharedStylesHost", DomSharedStylesHost);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/platform/dom/events/event_manager", ['angular2/src/facade/lang', 'angular2/src/facade/exceptions', 'angular2/src/core/di', 'angular2/src/core/zone/ng_zone', 'angular2/src/facade/collection'], function(exports_383, context_383) {
    "use strict";
    var __moduleName = context_383 && context_383.id;
    var lang_209, exceptions_74, di_59, ng_zone_7, collection_87;
    var EVENT_MANAGER_PLUGINS, EventManager, EventManagerPlugin;
    return {
        setters:[
            function (lang_209_1) {
                lang_209 = lang_209_1;
            },
            function (exceptions_74_1) {
                exceptions_74 = exceptions_74_1;
            },
            function (di_59_1) {
                di_59 = di_59_1;
            },
            function (ng_zone_7_1) {
                ng_zone_7 = ng_zone_7_1;
            },
            function (collection_87_1) {
                collection_87 = collection_87_1;
            }],
        execute: function() {
            exports_383("EVENT_MANAGER_PLUGINS", EVENT_MANAGER_PLUGINS = lang_209.CONST_EXPR(new di_59.OpaqueToken("EventManagerPlugins")));
            EventManager = (function () {
                function EventManager(plugins, _zone) {
                    var _this = this;
                    this._zone = _zone;
                    plugins.forEach(function (p) { return p.manager = _this; });
                    this._plugins = collection_87.ListWrapper.reversed(plugins);
                }
                EventManager.prototype.addEventListener = function (element, eventName, handler) {
                    var plugin = this._findPluginFor(eventName);
                    return plugin.addEventListener(element, eventName, handler);
                };
                EventManager.prototype.addGlobalEventListener = function (target, eventName, handler) {
                    var plugin = this._findPluginFor(eventName);
                    return plugin.addGlobalEventListener(target, eventName, handler);
                };
                EventManager.prototype.getZone = function () { return this._zone; };
                /** @internal */
                EventManager.prototype._findPluginFor = function (eventName) {
                    var plugins = this._plugins;
                    for (var i = 0; i < plugins.length; i++) {
                        var plugin = plugins[i];
                        if (plugin.supports(eventName)) {
                            return plugin;
                        }
                    }
                    throw new exceptions_74.BaseException("No event manager plugin found for event " + eventName);
                };
                EventManager = __decorate([
                    di_59.Injectable(),
                    __param(0, di_59.Inject(EVENT_MANAGER_PLUGINS)), 
                    __metadata('design:paramtypes', [Array, ng_zone_7.NgZone])
                ], EventManager);
                return EventManager;
            }());
            exports_383("EventManager", EventManager);
            EventManagerPlugin = (function () {
                function EventManagerPlugin() {
                }
                // That is equivalent to having supporting $event.target
                EventManagerPlugin.prototype.supports = function (eventName) { return false; };
                EventManagerPlugin.prototype.addEventListener = function (element, eventName, handler) {
                    throw "not implemented";
                };
                EventManagerPlugin.prototype.addGlobalEventListener = function (element, eventName, handler) {
                    throw "not implemented";
                };
                return EventManagerPlugin;
            }());
            exports_383("EventManagerPlugin", EventManagerPlugin);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/platform/dom/util", ['angular2/src/facade/lang'], function(exports_384, context_384) {
    "use strict";
    var __moduleName = context_384 && context_384.id;
    var lang_210;
    var CAMEL_CASE_REGEXP, DASH_CASE_REGEXP;
    function camelCaseToDashCase(input) {
        return lang_210.StringWrapper.replaceAllMapped(input, CAMEL_CASE_REGEXP, function (m) { return '-' + m[1].toLowerCase(); });
    }
    exports_384("camelCaseToDashCase", camelCaseToDashCase);
    function dashCaseToCamelCase(input) {
        return lang_210.StringWrapper.replaceAllMapped(input, DASH_CASE_REGEXP, function (m) { return m[1].toUpperCase(); });
    }
    exports_384("dashCaseToCamelCase", dashCaseToCamelCase);
    return {
        setters:[
            function (lang_210_1) {
                lang_210 = lang_210_1;
            }],
        execute: function() {
            CAMEL_CASE_REGEXP = /([A-Z])/g;
            DASH_CASE_REGEXP = /-([a-z])/g;
        }
    }
});
System.register("test/node_modules/angular2/ts/src/platform/dom/dom_renderer", ['angular2/src/core/di', 'angular2/src/animate/animation_builder', 'angular2/src/facade/lang', 'angular2/src/facade/exceptions', "test/node_modules/angular2/ts/src/platform/dom/shared_styles_host", "test/node_modules/angular2/ts/src/platform/dom/events/event_manager", "test/node_modules/angular2/ts/src/platform/dom/dom_tokens", 'angular2/src/core/metadata', 'angular2/src/platform/dom/dom_adapter', "test/node_modules/angular2/ts/src/platform/dom/util"], function(exports_385, context_385) {
    "use strict";
    var __moduleName = context_385 && context_385.id;
    var di_60, animation_builder_7, lang_211, exceptions_75, shared_styles_host_7, event_manager_3, dom_tokens_8, metadata_13, dom_adapter_17, util_15;
    var NAMESPACE_URIS, TEMPLATE_COMMENT_TEXT, TEMPLATE_BINDINGS_EXP, DomRootRenderer, DomRootRenderer_, DomRenderer, COMPONENT_REGEX, COMPONENT_VARIABLE, HOST_ATTR, CONTENT_ATTR, NS_PREFIX_RE;
    function moveNodesAfterSibling(sibling, nodes) {
        var parent = dom_adapter_17.DOM.parentElement(sibling);
        if (nodes.length > 0 && lang_211.isPresent(parent)) {
            var nextSibling = dom_adapter_17.DOM.nextSibling(sibling);
            if (lang_211.isPresent(nextSibling)) {
                for (var i = 0; i < nodes.length; i++) {
                    dom_adapter_17.DOM.insertBefore(nextSibling, nodes[i]);
                }
            }
            else {
                for (var i = 0; i < nodes.length; i++) {
                    dom_adapter_17.DOM.appendChild(parent, nodes[i]);
                }
            }
        }
    }
    function appendNodes(parent, nodes) {
        for (var i = 0; i < nodes.length; i++) {
            dom_adapter_17.DOM.appendChild(parent, nodes[i]);
        }
    }
    function decoratePreventDefault(eventHandler) {
        return function (event) {
            var allowDefaultBehavior = eventHandler(event);
            if (allowDefaultBehavior === false) {
                // TODO(tbosch): move preventDefault into event plugins...
                dom_adapter_17.DOM.preventDefault(event);
            }
        };
    }
    function _shimContentAttribute(componentShortId) {
        return lang_211.StringWrapper.replaceAll(CONTENT_ATTR, COMPONENT_REGEX, componentShortId);
    }
    function _shimHostAttribute(componentShortId) {
        return lang_211.StringWrapper.replaceAll(HOST_ATTR, COMPONENT_REGEX, componentShortId);
    }
    function _flattenStyles(compId, styles, target) {
        for (var i = 0; i < styles.length; i++) {
            var style = styles[i];
            if (lang_211.isArray(style)) {
                _flattenStyles(compId, style, target);
            }
            else {
                style = lang_211.StringWrapper.replaceAll(style, COMPONENT_REGEX, compId);
                target.push(style);
            }
        }
        return target;
    }
    function splitNamespace(name) {
        if (name[0] != '@') {
            return [null, name];
        }
        var match = lang_211.RegExpWrapper.firstMatch(NS_PREFIX_RE, name);
        return [match[1], match[2]];
    }
    return {
        setters:[
            function (di_60_1) {
                di_60 = di_60_1;
            },
            function (animation_builder_7_1) {
                animation_builder_7 = animation_builder_7_1;
            },
            function (lang_211_1) {
                lang_211 = lang_211_1;
            },
            function (exceptions_75_1) {
                exceptions_75 = exceptions_75_1;
            },
            function (shared_styles_host_7_1) {
                shared_styles_host_7 = shared_styles_host_7_1;
            },
            function (event_manager_3_1) {
                event_manager_3 = event_manager_3_1;
            },
            function (dom_tokens_8_1) {
                dom_tokens_8 = dom_tokens_8_1;
            },
            function (metadata_13_1) {
                metadata_13 = metadata_13_1;
            },
            function (dom_adapter_17_1) {
                dom_adapter_17 = dom_adapter_17_1;
            },
            function (util_15_1) {
                util_15 = util_15_1;
            }],
        execute: function() {
            NAMESPACE_URIS = lang_211.CONST_EXPR({ 'xlink': 'http://www.w3.org/1999/xlink', 'svg': 'http://www.w3.org/2000/svg' });
            TEMPLATE_COMMENT_TEXT = 'template bindings={}';
            TEMPLATE_BINDINGS_EXP = /^template bindings=(.*)$/g;
            DomRootRenderer = (function () {
                function DomRootRenderer(document, eventManager, sharedStylesHost, animate) {
                    this.document = document;
                    this.eventManager = eventManager;
                    this.sharedStylesHost = sharedStylesHost;
                    this.animate = animate;
                    this._registeredComponents = new Map();
                }
                DomRootRenderer.prototype.renderComponent = function (componentProto) {
                    var renderer = this._registeredComponents.get(componentProto.id);
                    if (lang_211.isBlank(renderer)) {
                        renderer = new DomRenderer(this, componentProto);
                        this._registeredComponents.set(componentProto.id, renderer);
                    }
                    return renderer;
                };
                return DomRootRenderer;
            }());
            exports_385("DomRootRenderer", DomRootRenderer);
            DomRootRenderer_ = (function (_super) {
                __extends(DomRootRenderer_, _super);
                function DomRootRenderer_(_document, _eventManager, sharedStylesHost, animate) {
                    _super.call(this, _document, _eventManager, sharedStylesHost, animate);
                }
                DomRootRenderer_ = __decorate([
                    di_60.Injectable(),
                    __param(0, di_60.Inject(dom_tokens_8.DOCUMENT)), 
                    __metadata('design:paramtypes', [Object, event_manager_3.EventManager, shared_styles_host_7.DomSharedStylesHost, animation_builder_7.AnimationBuilder])
                ], DomRootRenderer_);
                return DomRootRenderer_;
            }(DomRootRenderer));
            exports_385("DomRootRenderer_", DomRootRenderer_);
            DomRenderer = (function () {
                function DomRenderer(_rootRenderer, componentProto) {
                    this._rootRenderer = _rootRenderer;
                    this.componentProto = componentProto;
                    this._styles = _flattenStyles(componentProto.id, componentProto.styles, []);
                    if (componentProto.encapsulation !== metadata_13.ViewEncapsulation.Native) {
                        this._rootRenderer.sharedStylesHost.addStyles(this._styles);
                    }
                    if (this.componentProto.encapsulation === metadata_13.ViewEncapsulation.Emulated) {
                        this._contentAttr = _shimContentAttribute(componentProto.id);
                        this._hostAttr = _shimHostAttribute(componentProto.id);
                    }
                    else {
                        this._contentAttr = null;
                        this._hostAttr = null;
                    }
                }
                DomRenderer.prototype.renderComponent = function (componentProto) {
                    return this._rootRenderer.renderComponent(componentProto);
                };
                DomRenderer.prototype.selectRootElement = function (selector) {
                    var el = dom_adapter_17.DOM.querySelector(this._rootRenderer.document, selector);
                    if (lang_211.isBlank(el)) {
                        throw new exceptions_75.BaseException("The selector \"" + selector + "\" did not match any elements");
                    }
                    dom_adapter_17.DOM.clearNodes(el);
                    return el;
                };
                DomRenderer.prototype.createElement = function (parent, name) {
                    var nsAndName = splitNamespace(name);
                    var el = lang_211.isPresent(nsAndName[0]) ?
                        dom_adapter_17.DOM.createElementNS(NAMESPACE_URIS[nsAndName[0]], nsAndName[1]) :
                        dom_adapter_17.DOM.createElement(nsAndName[1]);
                    if (lang_211.isPresent(this._contentAttr)) {
                        dom_adapter_17.DOM.setAttribute(el, this._contentAttr, '');
                    }
                    if (lang_211.isPresent(parent)) {
                        dom_adapter_17.DOM.appendChild(parent, el);
                    }
                    return el;
                };
                DomRenderer.prototype.createViewRoot = function (hostElement) {
                    var nodesParent;
                    if (this.componentProto.encapsulation === metadata_13.ViewEncapsulation.Native) {
                        nodesParent = dom_adapter_17.DOM.createShadowRoot(hostElement);
                        this._rootRenderer.sharedStylesHost.addHost(nodesParent);
                        for (var i = 0; i < this._styles.length; i++) {
                            dom_adapter_17.DOM.appendChild(nodesParent, dom_adapter_17.DOM.createStyleElement(this._styles[i]));
                        }
                    }
                    else {
                        if (lang_211.isPresent(this._hostAttr)) {
                            dom_adapter_17.DOM.setAttribute(hostElement, this._hostAttr, '');
                        }
                        nodesParent = hostElement;
                    }
                    return nodesParent;
                };
                DomRenderer.prototype.createTemplateAnchor = function (parentElement) {
                    var comment = dom_adapter_17.DOM.createComment(TEMPLATE_COMMENT_TEXT);
                    if (lang_211.isPresent(parentElement)) {
                        dom_adapter_17.DOM.appendChild(parentElement, comment);
                    }
                    return comment;
                };
                DomRenderer.prototype.createText = function (parentElement, value) {
                    var node = dom_adapter_17.DOM.createTextNode(value);
                    if (lang_211.isPresent(parentElement)) {
                        dom_adapter_17.DOM.appendChild(parentElement, node);
                    }
                    return node;
                };
                DomRenderer.prototype.projectNodes = function (parentElement, nodes) {
                    if (lang_211.isBlank(parentElement))
                        return;
                    appendNodes(parentElement, nodes);
                };
                DomRenderer.prototype.attachViewAfter = function (node, viewRootNodes) {
                    moveNodesAfterSibling(node, viewRootNodes);
                    for (var i = 0; i < viewRootNodes.length; i++)
                        this.animateNodeEnter(viewRootNodes[i]);
                };
                DomRenderer.prototype.detachView = function (viewRootNodes) {
                    for (var i = 0; i < viewRootNodes.length; i++) {
                        var node = viewRootNodes[i];
                        dom_adapter_17.DOM.remove(node);
                        this.animateNodeLeave(node);
                    }
                };
                DomRenderer.prototype.destroyView = function (hostElement, viewAllNodes) {
                    if (this.componentProto.encapsulation === metadata_13.ViewEncapsulation.Native && lang_211.isPresent(hostElement)) {
                        this._rootRenderer.sharedStylesHost.removeHost(dom_adapter_17.DOM.getShadowRoot(hostElement));
                    }
                };
                DomRenderer.prototype.listen = function (renderElement, name, callback) {
                    return this._rootRenderer.eventManager.addEventListener(renderElement, name, decoratePreventDefault(callback));
                };
                DomRenderer.prototype.listenGlobal = function (target, name, callback) {
                    return this._rootRenderer.eventManager.addGlobalEventListener(target, name, decoratePreventDefault(callback));
                };
                DomRenderer.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) {
                    dom_adapter_17.DOM.setProperty(renderElement, propertyName, propertyValue);
                };
                DomRenderer.prototype.setElementAttribute = function (renderElement, attributeName, attributeValue) {
                    var attrNs;
                    var nsAndName = splitNamespace(attributeName);
                    if (lang_211.isPresent(nsAndName[0])) {
                        attributeName = nsAndName[0] + ':' + nsAndName[1];
                        attrNs = NAMESPACE_URIS[nsAndName[0]];
                    }
                    if (lang_211.isPresent(attributeValue)) {
                        if (lang_211.isPresent(attrNs)) {
                            dom_adapter_17.DOM.setAttributeNS(renderElement, attrNs, attributeName, attributeValue);
                        }
                        else {
                            dom_adapter_17.DOM.setAttribute(renderElement, attributeName, attributeValue);
                        }
                    }
                    else {
                        if (lang_211.isPresent(attrNs)) {
                            dom_adapter_17.DOM.removeAttributeNS(renderElement, attrNs, nsAndName[1]);
                        }
                        else {
                            dom_adapter_17.DOM.removeAttribute(renderElement, attributeName);
                        }
                    }
                };
                DomRenderer.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) {
                    var dashCasedPropertyName = util_15.camelCaseToDashCase(propertyName);
                    if (dom_adapter_17.DOM.isCommentNode(renderElement)) {
                        var existingBindings = lang_211.RegExpWrapper.firstMatch(TEMPLATE_BINDINGS_EXP, lang_211.StringWrapper.replaceAll(dom_adapter_17.DOM.getText(renderElement), /\n/g, ''));
                        var parsedBindings = lang_211.Json.parse(existingBindings[1]);
                        parsedBindings[dashCasedPropertyName] = propertyValue;
                        dom_adapter_17.DOM.setText(renderElement, lang_211.StringWrapper.replace(TEMPLATE_COMMENT_TEXT, '{}', lang_211.Json.stringify(parsedBindings)));
                    }
                    else {
                        this.setElementAttribute(renderElement, propertyName, propertyValue);
                    }
                };
                DomRenderer.prototype.setElementDebugInfo = function (renderElement, info) { };
                DomRenderer.prototype.setElementClass = function (renderElement, className, isAdd) {
                    if (isAdd) {
                        dom_adapter_17.DOM.addClass(renderElement, className);
                    }
                    else {
                        dom_adapter_17.DOM.removeClass(renderElement, className);
                    }
                };
                DomRenderer.prototype.setElementStyle = function (renderElement, styleName, styleValue) {
                    if (lang_211.isPresent(styleValue)) {
                        dom_adapter_17.DOM.setStyle(renderElement, styleName, lang_211.stringify(styleValue));
                    }
                    else {
                        dom_adapter_17.DOM.removeStyle(renderElement, styleName);
                    }
                };
                DomRenderer.prototype.invokeElementMethod = function (renderElement, methodName, args) {
                    dom_adapter_17.DOM.invoke(renderElement, methodName, args);
                };
                DomRenderer.prototype.setText = function (renderNode, text) { dom_adapter_17.DOM.setText(renderNode, text); };
                /**
                 * Performs animations if necessary
                 * @param node
                 */
                DomRenderer.prototype.animateNodeEnter = function (node) {
                    if (dom_adapter_17.DOM.isElementNode(node) && dom_adapter_17.DOM.hasClass(node, 'ng-animate')) {
                        dom_adapter_17.DOM.addClass(node, 'ng-enter');
                        this._rootRenderer.animate.css()
                            .addAnimationClass('ng-enter-active')
                            .start(node)
                            .onComplete(function () { dom_adapter_17.DOM.removeClass(node, 'ng-enter'); });
                    }
                };
                /**
                 * If animations are necessary, performs animations then removes the element; otherwise, it just
                 * removes the element.
                 * @param node
                 */
                DomRenderer.prototype.animateNodeLeave = function (node) {
                    if (dom_adapter_17.DOM.isElementNode(node) && dom_adapter_17.DOM.hasClass(node, 'ng-animate')) {
                        dom_adapter_17.DOM.addClass(node, 'ng-leave');
                        this._rootRenderer.animate.css()
                            .addAnimationClass('ng-leave-active')
                            .start(node)
                            .onComplete(function () {
                            dom_adapter_17.DOM.removeClass(node, 'ng-leave');
                            dom_adapter_17.DOM.remove(node);
                        });
                    }
                    else {
                        dom_adapter_17.DOM.remove(node);
                    }
                };
                return DomRenderer;
            }());
            exports_385("DomRenderer", DomRenderer);
            COMPONENT_REGEX = /%COMP%/g;
            exports_385("COMPONENT_VARIABLE", COMPONENT_VARIABLE = '%COMP%');
            exports_385("HOST_ATTR", HOST_ATTR = "_nghost-" + COMPONENT_VARIABLE);
            exports_385("CONTENT_ATTR", CONTENT_ATTR = "_ngcontent-" + COMPONENT_VARIABLE);
            NS_PREFIX_RE = /^@([^:]+):(.+)/g;
        }
    }
});
System.register("test/node_modules/angular2/ts/src/platform/dom/debug/by", ['angular2/src/facade/lang', 'angular2/src/platform/dom/dom_adapter'], function(exports_386, context_386) {
    "use strict";
    var __moduleName = context_386 && context_386.id;
    var lang_212, dom_adapter_18;
    var By;
    return {
        setters:[
            function (lang_212_1) {
                lang_212 = lang_212_1;
            },
            function (dom_adapter_18_1) {
                dom_adapter_18 = dom_adapter_18_1;
            }],
        execute: function() {
            /**
             * Predicates for use with {@link DebugElement}'s query functions.
             */
            By = (function () {
                function By() {
                }
                /**
                 * Match all elements.
                 *
                 * ## Example
                 *
                 * {@example platform/dom/debug/ts/by/by.ts region='by_all'}
                 */
                By.all = function () { return function (debugElement) { return true; }; };
                /**
                 * Match elements by the given CSS selector.
                 *
                 * ## Example
                 *
                 * {@example platform/dom/debug/ts/by/by.ts region='by_css'}
                 */
                By.css = function (selector) {
                    return function (debugElement) {
                        return lang_212.isPresent(debugElement.nativeElement) ?
                            dom_adapter_18.DOM.elementMatches(debugElement.nativeElement, selector) :
                            false;
                    };
                };
                /**
                 * Match elements that have the given directive present.
                 *
                 * ## Example
                 *
                 * {@example platform/dom/debug/ts/by/by.ts region='by_directive'}
                 */
                By.directive = function (type) {
                    return function (debugElement) { return debugElement.providerTokens.indexOf(type) !== -1; };
                };
                return By;
            }());
            exports_386("By", By);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/platform/dom/debug/ng_probe", ['angular2/src/facade/lang', 'angular2/src/core/di', 'angular2/src/platform/dom/dom_adapter', 'angular2/src/core/debug/debug_node', 'angular2/src/platform/dom/dom_renderer', 'angular2/core', 'angular2/src/core/debug/debug_renderer'], function(exports_387, context_387) {
    "use strict";
    var __moduleName = context_387 && context_387.id;
    var lang_213, di_61, dom_adapter_19, debug_node_4, dom_renderer_5, core_134, debug_renderer_1;
    var CORE_TOKENS, INSPECT_GLOBAL_NAME, CORE_TOKENS_GLOBAL_NAME, ELEMENT_PROBE_PROVIDERS, ELEMENT_PROBE_PROVIDERS_PROD_MODE;
    /**
     * Returns a {@link DebugElement} for the given native DOM element, or
     * null if the given native element does not have an Angular view associated
     * with it.
     */
    function inspectNativeElement(element) {
        return debug_node_4.getDebugNode(element);
    }
    exports_387("inspectNativeElement", inspectNativeElement);
    function _createConditionalRootRenderer(rootRenderer) {
        if (lang_213.assertionsEnabled()) {
            return _createRootRenderer(rootRenderer);
        }
        return rootRenderer;
    }
    function _createRootRenderer(rootRenderer) {
        dom_adapter_19.DOM.setGlobalVar(INSPECT_GLOBAL_NAME, inspectNativeElement);
        dom_adapter_19.DOM.setGlobalVar(CORE_TOKENS_GLOBAL_NAME, CORE_TOKENS);
        return new debug_renderer_1.DebugDomRootRenderer(rootRenderer);
    }
    return {
        setters:[
            function (lang_213_1) {
                lang_213 = lang_213_1;
            },
            function (di_61_1) {
                di_61 = di_61_1;
            },
            function (dom_adapter_19_1) {
                dom_adapter_19 = dom_adapter_19_1;
            },
            function (debug_node_4_1) {
                debug_node_4 = debug_node_4_1;
            },
            function (dom_renderer_5_1) {
                dom_renderer_5 = dom_renderer_5_1;
            },
            function (core_134_1) {
                core_134 = core_134_1;
            },
            function (debug_renderer_1_1) {
                debug_renderer_1 = debug_renderer_1_1;
            }],
        execute: function() {
            CORE_TOKENS = lang_213.CONST_EXPR({ 'ApplicationRef': core_134.ApplicationRef, 'NgZone': core_134.NgZone });
            INSPECT_GLOBAL_NAME = 'ng.probe';
            CORE_TOKENS_GLOBAL_NAME = 'ng.coreTokens';
            /**
             * Providers which support debugging Angular applications (e.g. via `ng.probe`).
             */
            exports_387("ELEMENT_PROBE_PROVIDERS", ELEMENT_PROBE_PROVIDERS = lang_213.CONST_EXPR([
                new di_61.Provider(core_134.RootRenderer, { useFactory: _createConditionalRootRenderer, deps: [dom_renderer_5.DomRootRenderer] })
            ]));
            exports_387("ELEMENT_PROBE_PROVIDERS_PROD_MODE", ELEMENT_PROBE_PROVIDERS_PROD_MODE = lang_213.CONST_EXPR([new di_61.Provider(core_134.RootRenderer, { useFactory: _createRootRenderer, deps: [dom_renderer_5.DomRootRenderer] })]));
        }
    }
});
System.register("test/node_modules/angular2/ts/src/platform/dom/events/dom_events", ['angular2/src/platform/dom/dom_adapter', 'angular2/core', "test/node_modules/angular2/ts/src/platform/dom/events/event_manager"], function(exports_388, context_388) {
    "use strict";
    var __moduleName = context_388 && context_388.id;
    var dom_adapter_20, core_135, event_manager_4;
    var DomEventsPlugin;
    return {
        setters:[
            function (dom_adapter_20_1) {
                dom_adapter_20 = dom_adapter_20_1;
            },
            function (core_135_1) {
                core_135 = core_135_1;
            },
            function (event_manager_4_1) {
                event_manager_4 = event_manager_4_1;
            }],
        execute: function() {
            DomEventsPlugin = (function (_super) {
                __extends(DomEventsPlugin, _super);
                function DomEventsPlugin() {
                    _super.apply(this, arguments);
                }
                // This plugin should come last in the list of plugins, because it accepts all
                // events.
                DomEventsPlugin.prototype.supports = function (eventName) { return true; };
                DomEventsPlugin.prototype.addEventListener = function (element, eventName, handler) {
                    var zone = this.manager.getZone();
                    var outsideHandler = function (event) { return zone.run(function () { return handler(event); }); };
                    return this.manager.getZone().runOutsideAngular(function () { return dom_adapter_20.DOM.onAndCancel(element, eventName, outsideHandler); });
                };
                DomEventsPlugin.prototype.addGlobalEventListener = function (target, eventName, handler) {
                    var element = dom_adapter_20.DOM.getGlobalEventTarget(target);
                    var zone = this.manager.getZone();
                    var outsideHandler = function (event) { return zone.run(function () { return handler(event); }); };
                    return this.manager.getZone().runOutsideAngular(function () { return dom_adapter_20.DOM.onAndCancel(element, eventName, outsideHandler); });
                };
                DomEventsPlugin = __decorate([
                    core_135.Injectable(), 
                    __metadata('design:paramtypes', [])
                ], DomEventsPlugin);
                return DomEventsPlugin;
            }(event_manager_4.EventManagerPlugin));
            exports_388("DomEventsPlugin", DomEventsPlugin);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/platform/dom/events/hammer_common", ["test/node_modules/angular2/ts/src/platform/dom/events/event_manager", 'angular2/src/facade/collection'], function(exports_389, context_389) {
    "use strict";
    var __moduleName = context_389 && context_389.id;
    var event_manager_5, collection_88;
    var _eventNames, HammerGesturesPluginCommon;
    return {
        setters:[
            function (event_manager_5_1) {
                event_manager_5 = event_manager_5_1;
            },
            function (collection_88_1) {
                collection_88 = collection_88_1;
            }],
        execute: function() {
            _eventNames = {
                // pan
                'pan': true,
                'panstart': true,
                'panmove': true,
                'panend': true,
                'pancancel': true,
                'panleft': true,
                'panright': true,
                'panup': true,
                'pandown': true,
                // pinch
                'pinch': true,
                'pinchstart': true,
                'pinchmove': true,
                'pinchend': true,
                'pinchcancel': true,
                'pinchin': true,
                'pinchout': true,
                // press
                'press': true,
                'pressup': true,
                // rotate
                'rotate': true,
                'rotatestart': true,
                'rotatemove': true,
                'rotateend': true,
                'rotatecancel': true,
                // swipe
                'swipe': true,
                'swipeleft': true,
                'swiperight': true,
                'swipeup': true,
                'swipedown': true,
                // tap
                'tap': true,
            };
            HammerGesturesPluginCommon = (function (_super) {
                __extends(HammerGesturesPluginCommon, _super);
                function HammerGesturesPluginCommon() {
                    _super.call(this);
                }
                HammerGesturesPluginCommon.prototype.supports = function (eventName) {
                    eventName = eventName.toLowerCase();
                    return collection_88.StringMapWrapper.contains(_eventNames, eventName);
                };
                return HammerGesturesPluginCommon;
            }(event_manager_5.EventManagerPlugin));
            exports_389("HammerGesturesPluginCommon", HammerGesturesPluginCommon);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/platform/dom/events/hammer_gestures", ["test/node_modules/angular2/ts/src/platform/dom/events/hammer_common", 'angular2/src/facade/lang', 'angular2/src/facade/exceptions', 'angular2/src/core/di'], function(exports_390, context_390) {
    "use strict";
    var __moduleName = context_390 && context_390.id;
    var hammer_common_1, lang_214, exceptions_76, di_62;
    var HammerGesturesPlugin;
    return {
        setters:[
            function (hammer_common_1_1) {
                hammer_common_1 = hammer_common_1_1;
            },
            function (lang_214_1) {
                lang_214 = lang_214_1;
            },
            function (exceptions_76_1) {
                exceptions_76 = exceptions_76_1;
            },
            function (di_62_1) {
                di_62 = di_62_1;
            }],
        execute: function() {
            HammerGesturesPlugin = (function (_super) {
                __extends(HammerGesturesPlugin, _super);
                function HammerGesturesPlugin() {
                    _super.apply(this, arguments);
                }
                HammerGesturesPlugin.prototype.supports = function (eventName) {
                    if (!_super.prototype.supports.call(this, eventName))
                        return false;
                    if (!lang_214.isPresent(window['Hammer'])) {
                        throw new exceptions_76.BaseException("Hammer.js is not loaded, can not bind " + eventName + " event");
                    }
                    return true;
                };
                HammerGesturesPlugin.prototype.addEventListener = function (element, eventName, handler) {
                    var zone = this.manager.getZone();
                    eventName = eventName.toLowerCase();
                    return zone.runOutsideAngular(function () {
                        // Creating the manager bind events, must be done outside of angular
                        var mc = new Hammer(element);
                        mc.get('pinch').set({ enable: true });
                        mc.get('rotate').set({ enable: true });
                        var callback = function (eventObj) { zone.run(function () { handler(eventObj); }); };
                        mc.on(eventName, callback);
                        return function () { mc.off(eventName, callback); };
                    });
                };
                HammerGesturesPlugin = __decorate([
                    di_62.Injectable(), 
                    __metadata('design:paramtypes', [])
                ], HammerGesturesPlugin);
                return HammerGesturesPlugin;
            }(hammer_common_1.HammerGesturesPluginCommon));
            exports_390("HammerGesturesPlugin", HammerGesturesPlugin);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/platform/dom/events/key_events", ['angular2/src/platform/dom/dom_adapter', 'angular2/src/facade/lang', 'angular2/src/facade/collection', "test/node_modules/angular2/ts/src/platform/dom/events/event_manager", 'angular2/src/core/di'], function(exports_391, context_391) {
    "use strict";
    var __moduleName = context_391 && context_391.id;
    var dom_adapter_21, lang_215, collection_89, event_manager_6, di_63;
    var modifierKeys, modifierKeyGetters, KeyEventsPlugin;
    return {
        setters:[
            function (dom_adapter_21_1) {
                dom_adapter_21 = dom_adapter_21_1;
            },
            function (lang_215_1) {
                lang_215 = lang_215_1;
            },
            function (collection_89_1) {
                collection_89 = collection_89_1;
            },
            function (event_manager_6_1) {
                event_manager_6 = event_manager_6_1;
            },
            function (di_63_1) {
                di_63 = di_63_1;
            }],
        execute: function() {
            modifierKeys = ['alt', 'control', 'meta', 'shift'];
            modifierKeyGetters = {
                'alt': function (event) { return event.altKey; },
                'control': function (event) { return event.ctrlKey; },
                'meta': function (event) { return event.metaKey; },
                'shift': function (event) { return event.shiftKey; }
            };
            KeyEventsPlugin = (function (_super) {
                __extends(KeyEventsPlugin, _super);
                function KeyEventsPlugin() {
                    _super.call(this);
                }
                KeyEventsPlugin.prototype.supports = function (eventName) {
                    return lang_215.isPresent(KeyEventsPlugin.parseEventName(eventName));
                };
                KeyEventsPlugin.prototype.addEventListener = function (element, eventName, handler) {
                    var parsedEvent = KeyEventsPlugin.parseEventName(eventName);
                    var outsideHandler = KeyEventsPlugin.eventCallback(element, collection_89.StringMapWrapper.get(parsedEvent, 'fullKey'), handler, this.manager.getZone());
                    return this.manager.getZone().runOutsideAngular(function () {
                        return dom_adapter_21.DOM.onAndCancel(element, collection_89.StringMapWrapper.get(parsedEvent, 'domEventName'), outsideHandler);
                    });
                };
                KeyEventsPlugin.parseEventName = function (eventName) {
                    var parts = eventName.toLowerCase().split('.');
                    var domEventName = parts.shift();
                    if ((parts.length === 0) ||
                        !(lang_215.StringWrapper.equals(domEventName, 'keydown') ||
                            lang_215.StringWrapper.equals(domEventName, 'keyup'))) {
                        return null;
                    }
                    var key = KeyEventsPlugin._normalizeKey(parts.pop());
                    var fullKey = '';
                    modifierKeys.forEach(function (modifierName) {
                        if (collection_89.ListWrapper.contains(parts, modifierName)) {
                            collection_89.ListWrapper.remove(parts, modifierName);
                            fullKey += modifierName + '.';
                        }
                    });
                    fullKey += key;
                    if (parts.length != 0 || key.length === 0) {
                        // returning null instead of throwing to let another plugin process the event
                        return null;
                    }
                    var result = collection_89.StringMapWrapper.create();
                    collection_89.StringMapWrapper.set(result, 'domEventName', domEventName);
                    collection_89.StringMapWrapper.set(result, 'fullKey', fullKey);
                    return result;
                };
                KeyEventsPlugin.getEventFullKey = function (event) {
                    var fullKey = '';
                    var key = dom_adapter_21.DOM.getEventKey(event);
                    key = key.toLowerCase();
                    if (lang_215.StringWrapper.equals(key, ' ')) {
                        key = 'space'; // for readability
                    }
                    else if (lang_215.StringWrapper.equals(key, '.')) {
                        key = 'dot'; // because '.' is used as a separator in event names
                    }
                    modifierKeys.forEach(function (modifierName) {
                        if (modifierName != key) {
                            var modifierGetter = collection_89.StringMapWrapper.get(modifierKeyGetters, modifierName);
                            if (modifierGetter(event)) {
                                fullKey += modifierName + '.';
                            }
                        }
                    });
                    fullKey += key;
                    return fullKey;
                };
                KeyEventsPlugin.eventCallback = function (element, fullKey, handler, zone) {
                    return function (event) {
                        if (lang_215.StringWrapper.equals(KeyEventsPlugin.getEventFullKey(event), fullKey)) {
                            zone.run(function () { return handler(event); });
                        }
                    };
                };
                /** @internal */
                KeyEventsPlugin._normalizeKey = function (keyName) {
                    // TODO: switch to a StringMap if the mapping grows too much
                    switch (keyName) {
                        case 'esc':
                            return 'escape';
                        default:
                            return keyName;
                    }
                };
                KeyEventsPlugin = __decorate([
                    di_63.Injectable(), 
                    __metadata('design:paramtypes', [])
                ], KeyEventsPlugin);
                return KeyEventsPlugin;
            }(event_manager_6.EventManagerPlugin));
            exports_391("KeyEventsPlugin", KeyEventsPlugin);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/platform/server/parse5_adapter", ['angular2/src/facade/collection', 'angular2/platform/common_dom', 'angular2/src/facade/lang', 'angular2/src/facade/exceptions', 'angular2/src/compiler/selector', 'angular2/src/compiler/xhr'], function(exports_392, context_392) {
    "use strict";
    var __moduleName = context_392 && context_392.id;
    var collection_90, common_dom_6, lang_216, exceptions_77, selector_3, xhr_8;
    var parse5, parser, serializer, treeAdapter, _attrToPropMap, defDoc, mapProps, Parse5DomAdapter, _HTMLElementPropertyList;
    function _notImplemented(methodName) {
        return new exceptions_77.BaseException('This method is not implemented in Parse5DomAdapter: ' + methodName);
    }
    return {
        setters:[
            function (collection_90_1) {
                collection_90 = collection_90_1;
            },
            function (common_dom_6_1) {
                common_dom_6 = common_dom_6_1;
            },
            function (lang_216_1) {
                lang_216 = lang_216_1;
            },
            function (exceptions_77_1) {
                exceptions_77 = exceptions_77_1;
            },
            function (selector_3_1) {
                selector_3 = selector_3_1;
            },
            function (xhr_8_1) {
                xhr_8 = xhr_8_1;
            }],
        execute: function() {
            parse5 = require('parse5/index');
            parser = new parse5.Parser(parse5.TreeAdapters.htmlparser2);
            serializer = new parse5.Serializer(parse5.TreeAdapters.htmlparser2);
            treeAdapter = parser.treeAdapter;
            _attrToPropMap = {
                'class': 'className',
                'innerHtml': 'innerHTML',
                'readonly': 'readOnly',
                'tabindex': 'tabIndex',
            };
            defDoc = null;
            mapProps = ['attribs', 'x-attribsNamespace', 'x-attribsPrefix'];
            /* tslint:disable:requireParameterType */
            Parse5DomAdapter = (function (_super) {
                __extends(Parse5DomAdapter, _super);
                function Parse5DomAdapter() {
                    _super.apply(this, arguments);
                }
                Parse5DomAdapter.makeCurrent = function () { common_dom_6.setRootDomAdapter(new Parse5DomAdapter()); };
                Parse5DomAdapter.prototype.hasProperty = function (element, name) {
                    return _HTMLElementPropertyList.indexOf(name) > -1;
                };
                // TODO(tbosch): don't even call this method when we run the tests on server side
                // by not using the DomRenderer in tests. Keeping this for now to make tests happy...
                Parse5DomAdapter.prototype.setProperty = function (el, name, value) {
                    if (name === 'innerHTML') {
                        this.setInnerHTML(el, value);
                    }
                    else if (name === 'className') {
                        el.attribs["class"] = el.className = value;
                    }
                    else {
                        el[name] = value;
                    }
                };
                // TODO(tbosch): don't even call this method when we run the tests on server side
                // by not using the DomRenderer in tests. Keeping this for now to make tests happy...
                Parse5DomAdapter.prototype.getProperty = function (el, name) { return el[name]; };
                Parse5DomAdapter.prototype.logError = function (error) { console.error(error); };
                Parse5DomAdapter.prototype.log = function (error) { console.log(error); };
                Parse5DomAdapter.prototype.logGroup = function (error) { console.error(error); };
                Parse5DomAdapter.prototype.logGroupEnd = function () { };
                Parse5DomAdapter.prototype.getXHR = function () { return xhr_8.XHR; };
                Object.defineProperty(Parse5DomAdapter.prototype, "attrToPropMap", {
                    get: function () { return _attrToPropMap; },
                    enumerable: true,
                    configurable: true
                });
                Parse5DomAdapter.prototype.query = function (selector) { throw _notImplemented('query'); };
                Parse5DomAdapter.prototype.querySelector = function (el, selector) { return this.querySelectorAll(el, selector)[0]; };
                Parse5DomAdapter.prototype.querySelectorAll = function (el, selector) {
                    var _this = this;
                    var res = [];
                    var _recursive = function (result, node, selector, matcher) {
                        var cNodes = node.childNodes;
                        if (cNodes && cNodes.length > 0) {
                            for (var i = 0; i < cNodes.length; i++) {
                                var childNode = cNodes[i];
                                if (_this.elementMatches(childNode, selector, matcher)) {
                                    result.push(childNode);
                                }
                                _recursive(result, childNode, selector, matcher);
                            }
                        }
                    };
                    var matcher = new selector_3.SelectorMatcher();
                    matcher.addSelectables(selector_3.CssSelector.parse(selector));
                    _recursive(res, el, selector, matcher);
                    return res;
                };
                Parse5DomAdapter.prototype.elementMatches = function (node, selector, matcher) {
                    if (matcher === void 0) { matcher = null; }
                    if (this.isElementNode(node) && selector === '*') {
                        return true;
                    }
                    var result = false;
                    if (selector && selector.charAt(0) == "#") {
                        result = this.getAttribute(node, 'id') == selector.substring(1);
                    }
                    else if (selector) {
                        var result = false;
                        if (matcher == null) {
                            matcher = new selector_3.SelectorMatcher();
                            matcher.addSelectables(selector_3.CssSelector.parse(selector));
                        }
                        var cssSelector = new selector_3.CssSelector();
                        cssSelector.setElement(this.tagName(node));
                        if (node.attribs) {
                            for (var attrName in node.attribs) {
                                cssSelector.addAttribute(attrName, node.attribs[attrName]);
                            }
                        }
                        var classList = this.classList(node);
                        for (var i = 0; i < classList.length; i++) {
                            cssSelector.addClassName(classList[i]);
                        }
                        matcher.match(cssSelector, function (selector, cb) { result = true; });
                    }
                    return result;
                };
                Parse5DomAdapter.prototype.on = function (el, evt, listener) {
                    var listenersMap = el._eventListenersMap;
                    if (lang_216.isBlank(listenersMap)) {
                        var listenersMap = collection_90.StringMapWrapper.create();
                        el._eventListenersMap = listenersMap;
                    }
                    var listeners = collection_90.StringMapWrapper.get(listenersMap, evt);
                    if (lang_216.isBlank(listeners)) {
                        listeners = [];
                    }
                    listeners.push(listener);
                    collection_90.StringMapWrapper.set(listenersMap, evt, listeners);
                };
                Parse5DomAdapter.prototype.onAndCancel = function (el, evt, listener) {
                    this.on(el, evt, listener);
                    return function () {
                        collection_90.ListWrapper.remove(collection_90.StringMapWrapper.get(el._eventListenersMap, evt), listener);
                    };
                };
                Parse5DomAdapter.prototype.dispatchEvent = function (el, evt) {
                    if (lang_216.isBlank(evt.target)) {
                        evt.target = el;
                    }
                    if (lang_216.isPresent(el._eventListenersMap)) {
                        var listeners = collection_90.StringMapWrapper.get(el._eventListenersMap, evt.type);
                        if (lang_216.isPresent(listeners)) {
                            for (var i = 0; i < listeners.length; i++) {
                                listeners[i](evt);
                            }
                        }
                    }
                    if (lang_216.isPresent(el.parent)) {
                        this.dispatchEvent(el.parent, evt);
                    }
                    if (lang_216.isPresent(el._window)) {
                        this.dispatchEvent(el._window, evt);
                    }
                };
                Parse5DomAdapter.prototype.createMouseEvent = function (eventType) { return this.createEvent(eventType); };
                Parse5DomAdapter.prototype.createEvent = function (eventType) {
                    var evt = {
                        type: eventType,
                        defaultPrevented: false,
                        preventDefault: function () { evt.defaultPrevented = true; }
                    };
                    return evt;
                };
                Parse5DomAdapter.prototype.preventDefault = function (evt) { evt.returnValue = false; };
                Parse5DomAdapter.prototype.isPrevented = function (evt) { return lang_216.isPresent(evt.returnValue) && !evt.returnValue; };
                Parse5DomAdapter.prototype.getInnerHTML = function (el) { return serializer.serialize(this.templateAwareRoot(el)); };
                Parse5DomAdapter.prototype.getOuterHTML = function (el) {
                    serializer.html = '';
                    serializer._serializeElement(el);
                    return serializer.html;
                };
                Parse5DomAdapter.prototype.nodeName = function (node) { return node.tagName; };
                Parse5DomAdapter.prototype.nodeValue = function (node) { return node.nodeValue; };
                Parse5DomAdapter.prototype.type = function (node) { throw _notImplemented('type'); };
                Parse5DomAdapter.prototype.content = function (node) { return node.childNodes[0]; };
                Parse5DomAdapter.prototype.firstChild = function (el) { return el.firstChild; };
                Parse5DomAdapter.prototype.nextSibling = function (el) { return el.nextSibling; };
                Parse5DomAdapter.prototype.parentElement = function (el) { return el.parent; };
                Parse5DomAdapter.prototype.childNodes = function (el) { return el.childNodes; };
                Parse5DomAdapter.prototype.childNodesAsList = function (el) {
                    var childNodes = el.childNodes;
                    var res = collection_90.ListWrapper.createFixedSize(childNodes.length);
                    for (var i = 0; i < childNodes.length; i++) {
                        res[i] = childNodes[i];
                    }
                    return res;
                };
                Parse5DomAdapter.prototype.clearNodes = function (el) {
                    while (el.childNodes.length > 0) {
                        this.remove(el.childNodes[0]);
                    }
                };
                Parse5DomAdapter.prototype.appendChild = function (el, node) {
                    this.remove(node);
                    treeAdapter.appendChild(this.templateAwareRoot(el), node);
                };
                Parse5DomAdapter.prototype.removeChild = function (el, node) {
                    if (collection_90.ListWrapper.contains(el.childNodes, node)) {
                        this.remove(node);
                    }
                };
                Parse5DomAdapter.prototype.remove = function (el) {
                    var parent = el.parent;
                    if (parent) {
                        var index = parent.childNodes.indexOf(el);
                        parent.childNodes.splice(index, 1);
                    }
                    var prev = el.previousSibling;
                    var next = el.nextSibling;
                    if (prev) {
                        prev.next = next;
                    }
                    if (next) {
                        next.prev = prev;
                    }
                    el.prev = null;
                    el.next = null;
                    el.parent = null;
                    return el;
                };
                Parse5DomAdapter.prototype.insertBefore = function (el, node) {
                    this.remove(node);
                    treeAdapter.insertBefore(el.parent, node, el);
                };
                Parse5DomAdapter.prototype.insertAllBefore = function (el, nodes) {
                    var _this = this;
                    nodes.forEach(function (n) { return _this.insertBefore(el, n); });
                };
                Parse5DomAdapter.prototype.insertAfter = function (el, node) {
                    if (el.nextSibling) {
                        this.insertBefore(el.nextSibling, node);
                    }
                    else {
                        this.appendChild(el.parent, node);
                    }
                };
                Parse5DomAdapter.prototype.setInnerHTML = function (el, value) {
                    this.clearNodes(el);
                    var content = parser.parseFragment(value);
                    for (var i = 0; i < content.childNodes.length; i++) {
                        treeAdapter.appendChild(el, content.childNodes[i]);
                    }
                };
                Parse5DomAdapter.prototype.getText = function (el, isRecursive) {
                    if (this.isTextNode(el)) {
                        return el.data;
                    }
                    else if (this.isCommentNode(el)) {
                        // In the DOM, comments within an element return an empty string for textContent
                        // However, comment node instances return the comment content for textContent getter
                        return isRecursive ? '' : el.data;
                    }
                    else if (lang_216.isBlank(el.childNodes) || el.childNodes.length == 0) {
                        return "";
                    }
                    else {
                        var textContent = "";
                        for (var i = 0; i < el.childNodes.length; i++) {
                            textContent += this.getText(el.childNodes[i], true);
                        }
                        return textContent;
                    }
                };
                Parse5DomAdapter.prototype.setText = function (el, value) {
                    if (this.isTextNode(el) || this.isCommentNode(el)) {
                        el.data = value;
                    }
                    else {
                        this.clearNodes(el);
                        if (value !== '')
                            treeAdapter.insertText(el, value);
                    }
                };
                Parse5DomAdapter.prototype.getValue = function (el) { return el.value; };
                Parse5DomAdapter.prototype.setValue = function (el, value) { el.value = value; };
                Parse5DomAdapter.prototype.getChecked = function (el) { return el.checked; };
                Parse5DomAdapter.prototype.setChecked = function (el, value) { el.checked = value; };
                Parse5DomAdapter.prototype.createComment = function (text) { return treeAdapter.createCommentNode(text); };
                Parse5DomAdapter.prototype.createTemplate = function (html) {
                    var template = treeAdapter.createElement("template", 'http://www.w3.org/1999/xhtml', []);
                    var content = parser.parseFragment(html);
                    treeAdapter.appendChild(template, content);
                    return template;
                };
                Parse5DomAdapter.prototype.createElement = function (tagName) {
                    return treeAdapter.createElement(tagName, 'http://www.w3.org/1999/xhtml', []);
                };
                Parse5DomAdapter.prototype.createElementNS = function (ns, tagName) { return treeAdapter.createElement(tagName, ns, []); };
                Parse5DomAdapter.prototype.createTextNode = function (text) {
                    var t = this.createComment(text);
                    t.type = 'text';
                    return t;
                };
                Parse5DomAdapter.prototype.createScriptTag = function (attrName, attrValue) {
                    return treeAdapter.createElement("script", 'http://www.w3.org/1999/xhtml', [{ name: attrName, value: attrValue }]);
                };
                Parse5DomAdapter.prototype.createStyleElement = function (css) {
                    var style = this.createElement('style');
                    this.setText(style, css);
                    return style;
                };
                Parse5DomAdapter.prototype.createShadowRoot = function (el) {
                    el.shadowRoot = treeAdapter.createDocumentFragment();
                    el.shadowRoot.parent = el;
                    return el.shadowRoot;
                };
                Parse5DomAdapter.prototype.getShadowRoot = function (el) { return el.shadowRoot; };
                Parse5DomAdapter.prototype.getHost = function (el) { return el.host; };
                Parse5DomAdapter.prototype.getDistributedNodes = function (el) { throw _notImplemented('getDistributedNodes'); };
                Parse5DomAdapter.prototype.clone = function (node) {
                    var _recursive = function (node) {
                        var nodeClone = Object.create(Object.getPrototypeOf(node));
                        for (var prop in node) {
                            var desc = Object.getOwnPropertyDescriptor(node, prop);
                            if (desc && 'value' in desc && typeof desc.value !== 'object') {
                                nodeClone[prop] = node[prop];
                            }
                        }
                        nodeClone.parent = null;
                        nodeClone.prev = null;
                        nodeClone.next = null;
                        nodeClone.children = null;
                        mapProps.forEach(function (mapName) {
                            if (lang_216.isPresent(node[mapName])) {
                                nodeClone[mapName] = {};
                                for (var prop in node[mapName]) {
                                    nodeClone[mapName][prop] = node[mapName][prop];
                                }
                            }
                        });
                        var cNodes = node.children;
                        if (cNodes) {
                            var cNodesClone = new Array(cNodes.length);
                            for (var i = 0; i < cNodes.length; i++) {
                                var childNode = cNodes[i];
                                var childNodeClone = _recursive(childNode);
                                cNodesClone[i] = childNodeClone;
                                if (i > 0) {
                                    childNodeClone.prev = cNodesClone[i - 1];
                                    cNodesClone[i - 1].next = childNodeClone;
                                }
                                childNodeClone.parent = nodeClone;
                            }
                            nodeClone.children = cNodesClone;
                        }
                        return nodeClone;
                    };
                    return _recursive(node);
                };
                Parse5DomAdapter.prototype.getElementsByClassName = function (element, name) {
                    return this.querySelectorAll(element, "." + name);
                };
                Parse5DomAdapter.prototype.getElementsByTagName = function (element, name) {
                    throw _notImplemented('getElementsByTagName');
                };
                Parse5DomAdapter.prototype.classList = function (element) {
                    var classAttrValue = null;
                    var attributes = element.attribs;
                    if (attributes && attributes.hasOwnProperty("class")) {
                        classAttrValue = attributes["class"];
                    }
                    return classAttrValue ? classAttrValue.trim().split(/\s+/g) : [];
                };
                Parse5DomAdapter.prototype.addClass = function (element, className) {
                    var classList = this.classList(element);
                    var index = classList.indexOf(className);
                    if (index == -1) {
                        classList.push(className);
                        element.attribs["class"] = element.className = classList.join(" ");
                    }
                };
                Parse5DomAdapter.prototype.removeClass = function (element, className) {
                    var classList = this.classList(element);
                    var index = classList.indexOf(className);
                    if (index > -1) {
                        classList.splice(index, 1);
                        element.attribs["class"] = element.className = classList.join(" ");
                    }
                };
                Parse5DomAdapter.prototype.hasClass = function (element, className) {
                    return collection_90.ListWrapper.contains(this.classList(element), className);
                };
                Parse5DomAdapter.prototype.hasStyle = function (element, styleName, styleValue) {
                    if (styleValue === void 0) { styleValue = null; }
                    var value = this.getStyle(element, styleName) || '';
                    return styleValue ? value == styleValue : value.length > 0;
                };
                /** @internal */
                Parse5DomAdapter.prototype._readStyleAttribute = function (element) {
                    var styleMap = {};
                    var attributes = element.attribs;
                    if (attributes && attributes.hasOwnProperty("style")) {
                        var styleAttrValue = attributes["style"];
                        var styleList = styleAttrValue.split(/;+/g);
                        for (var i = 0; i < styleList.length; i++) {
                            if (styleList[i].length > 0) {
                                var elems = styleList[i].split(/:+/g);
                                styleMap[elems[0].trim()] = elems[1].trim();
                            }
                        }
                    }
                    return styleMap;
                };
                /** @internal */
                Parse5DomAdapter.prototype._writeStyleAttribute = function (element, styleMap) {
                    var styleAttrValue = "";
                    for (var key in styleMap) {
                        var newValue = styleMap[key];
                        if (newValue && newValue.length > 0) {
                            styleAttrValue += key + ":" + styleMap[key] + ";";
                        }
                    }
                    element.attribs["style"] = styleAttrValue;
                };
                Parse5DomAdapter.prototype.setStyle = function (element, styleName, styleValue) {
                    var styleMap = this._readStyleAttribute(element);
                    styleMap[styleName] = styleValue;
                    this._writeStyleAttribute(element, styleMap);
                };
                Parse5DomAdapter.prototype.removeStyle = function (element, styleName) { this.setStyle(element, styleName, null); };
                Parse5DomAdapter.prototype.getStyle = function (element, styleName) {
                    var styleMap = this._readStyleAttribute(element);
                    return styleMap.hasOwnProperty(styleName) ? styleMap[styleName] : "";
                };
                Parse5DomAdapter.prototype.tagName = function (element) { return element.tagName == "style" ? "STYLE" : element.tagName; };
                Parse5DomAdapter.prototype.attributeMap = function (element) {
                    var res = new Map();
                    var elAttrs = treeAdapter.getAttrList(element);
                    for (var i = 0; i < elAttrs.length; i++) {
                        var attrib = elAttrs[i];
                        res.set(attrib.name, attrib.value);
                    }
                    return res;
                };
                Parse5DomAdapter.prototype.hasAttribute = function (element, attribute) {
                    return element.attribs && element.attribs.hasOwnProperty(attribute);
                };
                Parse5DomAdapter.prototype.hasAttributeNS = function (element, ns, attribute) { throw 'not implemented'; };
                Parse5DomAdapter.prototype.getAttribute = function (element, attribute) {
                    return element.attribs && element.attribs.hasOwnProperty(attribute) ?
                        element.attribs[attribute] :
                        null;
                };
                Parse5DomAdapter.prototype.getAttributeNS = function (element, ns, attribute) { throw 'not implemented'; };
                Parse5DomAdapter.prototype.setAttribute = function (element, attribute, value) {
                    if (attribute) {
                        element.attribs[attribute] = value;
                        if (attribute === 'class') {
                            element.className = value;
                        }
                    }
                };
                Parse5DomAdapter.prototype.setAttributeNS = function (element, ns, attribute, value) { throw 'not implemented'; };
                Parse5DomAdapter.prototype.removeAttribute = function (element, attribute) {
                    if (attribute) {
                        collection_90.StringMapWrapper.delete(element.attribs, attribute);
                    }
                };
                Parse5DomAdapter.prototype.removeAttributeNS = function (element, ns, name) { throw 'not implemented'; };
                Parse5DomAdapter.prototype.templateAwareRoot = function (el) { return this.isTemplateElement(el) ? this.content(el) : el; };
                Parse5DomAdapter.prototype.createHtmlDocument = function () {
                    var newDoc = treeAdapter.createDocument();
                    newDoc.title = "fake title";
                    var head = treeAdapter.createElement("head", null, []);
                    var body = treeAdapter.createElement("body", 'http://www.w3.org/1999/xhtml', []);
                    this.appendChild(newDoc, head);
                    this.appendChild(newDoc, body);
                    collection_90.StringMapWrapper.set(newDoc, "head", head);
                    collection_90.StringMapWrapper.set(newDoc, "body", body);
                    collection_90.StringMapWrapper.set(newDoc, "_window", collection_90.StringMapWrapper.create());
                    return newDoc;
                };
                Parse5DomAdapter.prototype.defaultDoc = function () {
                    if (defDoc === null) {
                        defDoc = this.createHtmlDocument();
                    }
                    return defDoc;
                };
                Parse5DomAdapter.prototype.getBoundingClientRect = function (el) { return { left: 0, top: 0, width: 0, height: 0 }; };
                Parse5DomAdapter.prototype.getTitle = function () { return this.defaultDoc().title || ""; };
                Parse5DomAdapter.prototype.setTitle = function (newTitle) { this.defaultDoc().title = newTitle; };
                Parse5DomAdapter.prototype.isTemplateElement = function (el) {
                    return this.isElementNode(el) && this.tagName(el) === "template";
                };
                Parse5DomAdapter.prototype.isTextNode = function (node) { return treeAdapter.isTextNode(node); };
                Parse5DomAdapter.prototype.isCommentNode = function (node) { return treeAdapter.isCommentNode(node); };
                Parse5DomAdapter.prototype.isElementNode = function (node) { return node ? treeAdapter.isElementNode(node) : false; };
                Parse5DomAdapter.prototype.hasShadowRoot = function (node) { return lang_216.isPresent(node.shadowRoot); };
                Parse5DomAdapter.prototype.isShadowRoot = function (node) { return this.getShadowRoot(node) == node; };
                Parse5DomAdapter.prototype.importIntoDoc = function (node) { return this.clone(node); };
                Parse5DomAdapter.prototype.adoptNode = function (node) { return node; };
                Parse5DomAdapter.prototype.getHref = function (el) { return el.href; };
                Parse5DomAdapter.prototype.resolveAndSetHref = function (el, baseUrl, href) {
                    if (href == null) {
                        el.href = baseUrl;
                    }
                    else {
                        el.href = baseUrl + '/../' + href;
                    }
                };
                /** @internal */
                Parse5DomAdapter.prototype._buildRules = function (parsedRules, css) {
                    var rules = [];
                    for (var i = 0; i < parsedRules.length; i++) {
                        var parsedRule = parsedRules[i];
                        var rule = collection_90.StringMapWrapper.create();
                        collection_90.StringMapWrapper.set(rule, "cssText", css);
                        collection_90.StringMapWrapper.set(rule, "style", { content: "", cssText: "" });
                        if (parsedRule.type == "rule") {
                            collection_90.StringMapWrapper.set(rule, "type", 1);
                            collection_90.StringMapWrapper.set(rule, "selectorText", parsedRule.selectors.join(", ")
                                .replace(/\s{2,}/g, " ")
                                .replace(/\s*~\s*/g, " ~ ")
                                .replace(/\s*\+\s*/g, " + ")
                                .replace(/\s*>\s*/g, " > ")
                                .replace(/\[(\w+)=(\w+)\]/g, '[$1="$2"]'));
                            if (lang_216.isBlank(parsedRule.declarations)) {
                                continue;
                            }
                            for (var j = 0; j < parsedRule.declarations.length; j++) {
                                var declaration = parsedRule.declarations[j];
                                collection_90.StringMapWrapper.set(collection_90.StringMapWrapper.get(rule, "style"), declaration.property, declaration.value);
                                collection_90.StringMapWrapper.get(rule, "style").cssText +=
                                    declaration.property + ": " + declaration.value + ";";
                            }
                        }
                        else if (parsedRule.type == "media") {
                            collection_90.StringMapWrapper.set(rule, "type", 4);
                            collection_90.StringMapWrapper.set(rule, "media", { mediaText: parsedRule.media });
                            if (parsedRule.rules) {
                                collection_90.StringMapWrapper.set(rule, "cssRules", this._buildRules(parsedRule.rules));
                            }
                        }
                        rules.push(rule);
                    }
                    return rules;
                };
                Parse5DomAdapter.prototype.supportsDOMEvents = function () { return false; };
                Parse5DomAdapter.prototype.supportsNativeShadowDOM = function () { return false; };
                Parse5DomAdapter.prototype.getGlobalEventTarget = function (target) {
                    if (target == "window") {
                        return this.defaultDoc()._window;
                    }
                    else if (target == "document") {
                        return this.defaultDoc();
                    }
                    else if (target == "body") {
                        return this.defaultDoc().body;
                    }
                };
                Parse5DomAdapter.prototype.getBaseHref = function () { throw 'not implemented'; };
                Parse5DomAdapter.prototype.resetBaseElement = function () { throw 'not implemented'; };
                Parse5DomAdapter.prototype.getHistory = function () { throw 'not implemented'; };
                Parse5DomAdapter.prototype.getLocation = function () { throw 'not implemented'; };
                Parse5DomAdapter.prototype.getUserAgent = function () { return "Fake user agent"; };
                Parse5DomAdapter.prototype.getData = function (el, name) { return this.getAttribute(el, 'data-' + name); };
                Parse5DomAdapter.prototype.getComputedStyle = function (el) { throw 'not implemented'; };
                Parse5DomAdapter.prototype.setData = function (el, name, value) { this.setAttribute(el, 'data-' + name, value); };
                // TODO(tbosch): move this into a separate environment class once we have it
                Parse5DomAdapter.prototype.setGlobalVar = function (path, value) { lang_216.setValueOnPath(lang_216.global, path, value); };
                Parse5DomAdapter.prototype.requestAnimationFrame = function (callback) { return setTimeout(callback, 0); };
                Parse5DomAdapter.prototype.cancelAnimationFrame = function (id) { clearTimeout(id); };
                Parse5DomAdapter.prototype.performanceNow = function () { return lang_216.DateWrapper.toMillis(lang_216.DateWrapper.now()); };
                Parse5DomAdapter.prototype.getAnimationPrefix = function () { return ''; };
                Parse5DomAdapter.prototype.getTransitionEnd = function () { return 'transitionend'; };
                Parse5DomAdapter.prototype.supportsAnimation = function () { return true; };
                Parse5DomAdapter.prototype.replaceChild = function (el, newNode, oldNode) { throw new Error('not implemented'); };
                Parse5DomAdapter.prototype.parse = function (templateHtml) { throw new Error('not implemented'); };
                Parse5DomAdapter.prototype.invoke = function (el, methodName, args) { throw new Error('not implemented'); };
                Parse5DomAdapter.prototype.getEventKey = function (event) { throw new Error('not implemented'); };
                return Parse5DomAdapter;
            }(common_dom_6.DomAdapter));
            exports_392("Parse5DomAdapter", Parse5DomAdapter);
            // TODO: build a proper list, this one is all the keys of a HTMLInputElement
            _HTMLElementPropertyList = [
                "webkitEntries",
                "incremental",
                "webkitdirectory",
                "selectionDirection",
                "selectionEnd",
                "selectionStart",
                "labels",
                "validationMessage",
                "validity",
                "willValidate",
                "width",
                "valueAsNumber",
                "valueAsDate",
                "value",
                "useMap",
                "defaultValue",
                "type",
                "step",
                "src",
                "size",
                "required",
                "readOnly",
                "placeholder",
                "pattern",
                "name",
                "multiple",
                "min",
                "minLength",
                "maxLength",
                "max",
                "list",
                "indeterminate",
                "height",
                "formTarget",
                "formNoValidate",
                "formMethod",
                "formEnctype",
                "formAction",
                "files",
                "form",
                "disabled",
                "dirName",
                "checked",
                "defaultChecked",
                "autofocus",
                "autocomplete",
                "alt",
                "align",
                "accept",
                "onautocompleteerror",
                "onautocomplete",
                "onwaiting",
                "onvolumechange",
                "ontoggle",
                "ontimeupdate",
                "onsuspend",
                "onsubmit",
                "onstalled",
                "onshow",
                "onselect",
                "onseeking",
                "onseeked",
                "onscroll",
                "onresize",
                "onreset",
                "onratechange",
                "onprogress",
                "onplaying",
                "onplay",
                "onpause",
                "onmousewheel",
                "onmouseup",
                "onmouseover",
                "onmouseout",
                "onmousemove",
                "onmouseleave",
                "onmouseenter",
                "onmousedown",
                "onloadstart",
                "onloadedmetadata",
                "onloadeddata",
                "onload",
                "onkeyup",
                "onkeypress",
                "onkeydown",
                "oninvalid",
                "oninput",
                "onfocus",
                "onerror",
                "onended",
                "onemptied",
                "ondurationchange",
                "ondrop",
                "ondragstart",
                "ondragover",
                "ondragleave",
                "ondragenter",
                "ondragend",
                "ondrag",
                "ondblclick",
                "oncuechange",
                "oncontextmenu",
                "onclose",
                "onclick",
                "onchange",
                "oncanplaythrough",
                "oncanplay",
                "oncancel",
                "onblur",
                "onabort",
                "spellcheck",
                "isContentEditable",
                "contentEditable",
                "outerText",
                "innerText",
                "accessKey",
                "hidden",
                "webkitdropzone",
                "draggable",
                "tabIndex",
                "dir",
                "translate",
                "lang",
                "title",
                "childElementCount",
                "lastElementChild",
                "firstElementChild",
                "children",
                "onwebkitfullscreenerror",
                "onwebkitfullscreenchange",
                "nextElementSibling",
                "previousElementSibling",
                "onwheel",
                "onselectstart",
                "onsearch",
                "onpaste",
                "oncut",
                "oncopy",
                "onbeforepaste",
                "onbeforecut",
                "onbeforecopy",
                "shadowRoot",
                "dataset",
                "classList",
                "className",
                "outerHTML",
                "innerHTML",
                "scrollHeight",
                "scrollWidth",
                "scrollTop",
                "scrollLeft",
                "clientHeight",
                "clientWidth",
                "clientTop",
                "clientLeft",
                "offsetParent",
                "offsetHeight",
                "offsetWidth",
                "offsetTop",
                "offsetLeft",
                "localName",
                "prefix",
                "namespaceURI",
                "id",
                "style",
                "attributes",
                "tagName",
                "parentElement",
                "textContent",
                "baseURI",
                "ownerDocument",
                "nextSibling",
                "previousSibling",
                "lastChild",
                "firstChild",
                "childNodes",
                "parentNode",
                "nodeType",
                "nodeValue",
                "nodeName",
                "closure_lm_714617",
                "__jsaction"
            ];
        }
    }
});
System.register("test/node_modules/angular2/ts/src/router/router_providers_common", ['angular2/src/router/location/location_strategy', 'angular2/src/router/location/path_location_strategy', 'angular2/src/router/router', 'angular2/src/router/route_registry', 'angular2/src/router/location/location', 'angular2/src/facade/lang', 'angular2/core', 'angular2/src/facade/exceptions'], function(exports_393, context_393) {
    "use strict";
    var __moduleName = context_393 && context_393.id;
    var location_strategy_8, path_location_strategy_2, router_8, route_registry_3, location_4, lang_217, core_136, exceptions_78;
    var ROUTER_PROVIDERS_COMMON;
    function routerFactory(registry, location, primaryComponent, appRef) {
        var rootRouter = new router_8.RootRouter(registry, location, primaryComponent);
        appRef.registerDisposeListener(function () { return rootRouter.dispose(); });
        return rootRouter;
    }
    function routerPrimaryComponentFactory(app) {
        if (app.componentTypes.length == 0) {
            throw new exceptions_78.BaseException("Bootstrap at least one component before injecting Router.");
        }
        return app.componentTypes[0];
    }
    return {
        setters:[
            function (location_strategy_8_1) {
                location_strategy_8 = location_strategy_8_1;
            },
            function (path_location_strategy_2_1) {
                path_location_strategy_2 = path_location_strategy_2_1;
            },
            function (router_8_1) {
                router_8 = router_8_1;
            },
            function (route_registry_3_1) {
                route_registry_3 = route_registry_3_1;
            },
            function (location_4_1) {
                location_4 = location_4_1;
            },
            function (lang_217_1) {
                lang_217 = lang_217_1;
            },
            function (core_136_1) {
                core_136 = core_136_1;
            },
            function (exceptions_78_1) {
                exceptions_78 = exceptions_78_1;
            }],
        execute: function() {
            /**
             * The Platform agnostic ROUTER PROVIDERS
             */
            exports_393("ROUTER_PROVIDERS_COMMON", ROUTER_PROVIDERS_COMMON = lang_217.CONST_EXPR([
                route_registry_3.RouteRegistry,
                lang_217.CONST_EXPR(new core_136.Provider(location_strategy_8.LocationStrategy, { useClass: path_location_strategy_2.PathLocationStrategy })),
                location_4.Location,
                lang_217.CONST_EXPR(new core_136.Provider(router_8.Router, {
                    useFactory: routerFactory,
                    deps: lang_217.CONST_EXPR([route_registry_3.RouteRegistry, location_4.Location, route_registry_3.ROUTER_PRIMARY_COMPONENT, core_136.ApplicationRef])
                })),
                lang_217.CONST_EXPR(new core_136.Provider(route_registry_3.ROUTER_PRIMARY_COMPONENT, { useFactory: routerPrimaryComponentFactory, deps: lang_217.CONST_EXPR([core_136.ApplicationRef]) }))
            ]));
        }
    }
});
System.register("test/node_modules/angular2/ts/src/router/location/browser_platform_location", ['angular2/core', "test/node_modules/angular2/ts/src/router/location/platform_location", 'angular2/src/platform/dom/dom_adapter'], function(exports_394, context_394) {
    "use strict";
    var __moduleName = context_394 && context_394.id;
    var core_137, platform_location_4, dom_adapter_22;
    var BrowserPlatformLocation;
    return {
        setters:[
            function (core_137_1) {
                core_137 = core_137_1;
            },
            function (platform_location_4_1) {
                platform_location_4 = platform_location_4_1;
            },
            function (dom_adapter_22_1) {
                dom_adapter_22 = dom_adapter_22_1;
            }],
        execute: function() {
            /**
             * `PlatformLocation` encapsulates all of the direct calls to platform APIs.
             * This class should not be used directly by an application developer. Instead, use
             * {@link Location}.
             */
            BrowserPlatformLocation = (function (_super) {
                __extends(BrowserPlatformLocation, _super);
                function BrowserPlatformLocation() {
                    _super.call(this);
                    this._init();
                }
                // This is moved to its own method so that `MockPlatformLocationStrategy` can overwrite it
                /** @internal */
                BrowserPlatformLocation.prototype._init = function () {
                    this._location = dom_adapter_22.DOM.getLocation();
                    this._history = dom_adapter_22.DOM.getHistory();
                };
                Object.defineProperty(BrowserPlatformLocation.prototype, "location", {
                    /** @internal */
                    get: function () { return this._location; },
                    enumerable: true,
                    configurable: true
                });
                BrowserPlatformLocation.prototype.getBaseHrefFromDOM = function () { return dom_adapter_22.DOM.getBaseHref(); };
                BrowserPlatformLocation.prototype.onPopState = function (fn) {
                    dom_adapter_22.DOM.getGlobalEventTarget('window').addEventListener('popstate', fn, false);
                };
                BrowserPlatformLocation.prototype.onHashChange = function (fn) {
                    dom_adapter_22.DOM.getGlobalEventTarget('window').addEventListener('hashchange', fn, false);
                };
                Object.defineProperty(BrowserPlatformLocation.prototype, "pathname", {
                    get: function () { return this._location.pathname; },
                    set: function (newPath) { this._location.pathname = newPath; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(BrowserPlatformLocation.prototype, "search", {
                    get: function () { return this._location.search; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(BrowserPlatformLocation.prototype, "hash", {
                    get: function () { return this._location.hash; },
                    enumerable: true,
                    configurable: true
                });
                BrowserPlatformLocation.prototype.pushState = function (state, title, url) {
                    this._history.pushState(state, title, url);
                };
                BrowserPlatformLocation.prototype.replaceState = function (state, title, url) {
                    this._history.replaceState(state, title, url);
                };
                BrowserPlatformLocation.prototype.forward = function () { this._history.forward(); };
                BrowserPlatformLocation.prototype.back = function () { this._history.back(); };
                BrowserPlatformLocation = __decorate([
                    core_137.Injectable(), 
                    __metadata('design:paramtypes', [])
                ], BrowserPlatformLocation);
                return BrowserPlatformLocation;
            }(platform_location_4.PlatformLocation));
            exports_394("BrowserPlatformLocation", BrowserPlatformLocation);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/router/router_providers", ["test/node_modules/angular2/ts/src/router/router_providers_common", 'angular2/core', 'angular2/src/facade/lang', "test/node_modules/angular2/ts/src/router/location/browser_platform_location", "test/node_modules/angular2/ts/src/router/location/platform_location"], function(exports_395, context_395) {
    "use strict";
    var __moduleName = context_395 && context_395.id;
    var router_providers_common_2, core_138, lang_218, browser_platform_location_2, platform_location_5;
    var ROUTER_PROVIDERS, ROUTER_BINDINGS;
    return {
        setters:[
            function (router_providers_common_2_1) {
                router_providers_common_2 = router_providers_common_2_1;
            },
            function (core_138_1) {
                core_138 = core_138_1;
            },
            function (lang_218_1) {
                lang_218 = lang_218_1;
            },
            function (browser_platform_location_2_1) {
                browser_platform_location_2 = browser_platform_location_2_1;
            },
            function (platform_location_5_1) {
                platform_location_5 = platform_location_5_1;
            }],
        execute: function() {
            /**
             * A list of {@link Provider}s. To use the router, you must add this to your application.
             *
             * ### Example ([live demo](http://plnkr.co/edit/iRUP8B5OUbxCWQ3AcIDm))
             *
             * ```
             * import {Component} from 'angular2/core';
             * import {
             *   ROUTER_DIRECTIVES,
             *   ROUTER_PROVIDERS,
             *   RouteConfig
             * } from 'angular2/router';
             *
             * @Component({directives: [ROUTER_DIRECTIVES]})
             * @RouteConfig([
             *  {...},
             * ])
             * class AppCmp {
             *   // ...
             * }
             *
             * bootstrap(AppCmp, [ROUTER_PROVIDERS]);
             * ```
             */
            exports_395("ROUTER_PROVIDERS", ROUTER_PROVIDERS = lang_218.CONST_EXPR([
                router_providers_common_2.ROUTER_PROVIDERS_COMMON,
                lang_218.CONST_EXPR(new core_138.Provider(platform_location_5.PlatformLocation, { useClass: browser_platform_location_2.BrowserPlatformLocation })),
            ]));
            /**
             * Use {@link ROUTER_PROVIDERS} instead.
             *
             * @deprecated
             */
            exports_395("ROUTER_BINDINGS", ROUTER_BINDINGS = ROUTER_PROVIDERS);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/router/directives/router_link_transform", ['angular2/compiler', 'angular2/src/core/change_detection/parser/ast', 'angular2/src/facade/exceptions', 'angular2/core', 'angular2/src/core/change_detection/parser/parser'], function(exports_396, context_396) {
    "use strict";
    var __moduleName = context_396 && context_396.id;
    var compiler_16, ast_5, exceptions_79, core_139, parser_2;
    var FixedPart, AuxiliaryStart, AuxiliaryEnd, Params, RouterLinkLexer, RouterLinkAstGenerator, RouterLinkAstTransformer, RouterLinkTransform;
    function parseRouterLinkExpression(parser, exp) {
        var tokens = new RouterLinkLexer(parser, exp.trim()).tokenize();
        return new RouterLinkAstGenerator(tokens).generate();
    }
    exports_396("parseRouterLinkExpression", parseRouterLinkExpression);
    return {
        setters:[
            function (compiler_16_1) {
                compiler_16 = compiler_16_1;
            },
            function (ast_5_1) {
                ast_5 = ast_5_1;
            },
            function (exceptions_79_1) {
                exceptions_79 = exceptions_79_1;
            },
            function (core_139_1) {
                core_139 = core_139_1;
            },
            function (parser_2_1) {
                parser_2 = parser_2_1;
            }],
        execute: function() {
            /**
             * e.g., './User', 'Modal' in ./User[Modal(param: value)]
             */
            FixedPart = (function () {
                function FixedPart(value) {
                    this.value = value;
                }
                return FixedPart;
            }());
            /**
             * The square bracket
             */
            AuxiliaryStart = (function () {
                function AuxiliaryStart() {
                }
                return AuxiliaryStart;
            }());
            /**
             * The square bracket
             */
            AuxiliaryEnd = (function () {
                function AuxiliaryEnd() {
                }
                return AuxiliaryEnd;
            }());
            /**
             * e.g., param:value in ./User[Modal(param: value)]
             */
            Params = (function () {
                function Params(ast) {
                    this.ast = ast;
                }
                return Params;
            }());
            RouterLinkLexer = (function () {
                function RouterLinkLexer(parser, exp) {
                    this.parser = parser;
                    this.exp = exp;
                    this.index = 0;
                }
                RouterLinkLexer.prototype.tokenize = function () {
                    var tokens = [];
                    while (this.index < this.exp.length) {
                        tokens.push(this._parseToken());
                    }
                    return tokens;
                };
                RouterLinkLexer.prototype._parseToken = function () {
                    var c = this.exp[this.index];
                    if (c == '[') {
                        this.index++;
                        return new AuxiliaryStart();
                    }
                    else if (c == ']') {
                        this.index++;
                        return new AuxiliaryEnd();
                    }
                    else if (c == '(') {
                        return this._parseParams();
                    }
                    else if (c == '/' && this.index !== 0) {
                        this.index++;
                        return this._parseFixedPart();
                    }
                    else {
                        return this._parseFixedPart();
                    }
                };
                RouterLinkLexer.prototype._parseParams = function () {
                    var start = this.index;
                    for (; this.index < this.exp.length; ++this.index) {
                        var c = this.exp[this.index];
                        if (c == ')') {
                            var paramsContent = this.exp.substring(start + 1, this.index);
                            this.index++;
                            return new Params(this.parser.parseBinding("{" + paramsContent + "}", null).ast);
                        }
                    }
                    throw new exceptions_79.BaseException("Cannot find ')'");
                };
                RouterLinkLexer.prototype._parseFixedPart = function () {
                    var start = this.index;
                    var sawNonSlash = false;
                    for (; this.index < this.exp.length; ++this.index) {
                        var c = this.exp[this.index];
                        if (c == '(' || c == '[' || c == ']' || (c == '/' && sawNonSlash)) {
                            break;
                        }
                        if (c != '.' && c != '/') {
                            sawNonSlash = true;
                        }
                    }
                    var fixed = this.exp.substring(start, this.index);
                    if (start === this.index || !sawNonSlash || fixed.startsWith('//')) {
                        throw new exceptions_79.BaseException("Invalid router link");
                    }
                    return new FixedPart(fixed);
                };
                return RouterLinkLexer;
            }());
            RouterLinkAstGenerator = (function () {
                function RouterLinkAstGenerator(tokens) {
                    this.tokens = tokens;
                    this.index = 0;
                }
                RouterLinkAstGenerator.prototype.generate = function () { return this._genAuxiliary(); };
                RouterLinkAstGenerator.prototype._genAuxiliary = function () {
                    var arr = [];
                    for (; this.index < this.tokens.length; this.index++) {
                        var r = this.tokens[this.index];
                        if (r instanceof FixedPart) {
                            arr.push(new ast_5.LiteralPrimitive(r.value));
                        }
                        else if (r instanceof Params) {
                            arr.push(r.ast);
                        }
                        else if (r instanceof AuxiliaryEnd) {
                            break;
                        }
                        else if (r instanceof AuxiliaryStart) {
                            this.index++;
                            arr.push(this._genAuxiliary());
                        }
                    }
                    return new ast_5.LiteralArray(arr);
                };
                return RouterLinkAstGenerator;
            }());
            RouterLinkAstTransformer = (function (_super) {
                __extends(RouterLinkAstTransformer, _super);
                function RouterLinkAstTransformer(parser) {
                    _super.call(this);
                    this.parser = parser;
                }
                RouterLinkAstTransformer.prototype.visitQuote = function (ast) {
                    if (ast.prefix == "route") {
                        return parseRouterLinkExpression(this.parser, ast.uninterpretedExpression);
                    }
                    else {
                        return _super.prototype.visitQuote.call(this, ast);
                    }
                };
                return RouterLinkAstTransformer;
            }(ast_5.AstTransformer));
            /**
             * A compiler plugin that implements the router link DSL.
             */
            RouterLinkTransform = (function () {
                function RouterLinkTransform(parser) {
                    this.astTransformer = new RouterLinkAstTransformer(parser);
                }
                RouterLinkTransform.prototype.visitNgContent = function (ast, context) { return ast; };
                RouterLinkTransform.prototype.visitEmbeddedTemplate = function (ast, context) { return ast; };
                RouterLinkTransform.prototype.visitElement = function (ast, context) {
                    var _this = this;
                    var updatedChildren = ast.children.map(function (c) { return c.visit(_this, context); });
                    var updatedInputs = ast.inputs.map(function (c) { return c.visit(_this, context); });
                    var updatedDirectives = ast.directives.map(function (c) { return c.visit(_this, context); });
                    return new compiler_16.ElementAst(ast.name, ast.attrs, updatedInputs, ast.outputs, ast.exportAsVars, updatedDirectives, updatedChildren, ast.ngContentIndex, ast.sourceSpan);
                };
                RouterLinkTransform.prototype.visitVariable = function (ast, context) { return ast; };
                RouterLinkTransform.prototype.visitEvent = function (ast, context) { return ast; };
                RouterLinkTransform.prototype.visitElementProperty = function (ast, context) { return ast; };
                RouterLinkTransform.prototype.visitAttr = function (ast, context) { return ast; };
                RouterLinkTransform.prototype.visitBoundText = function (ast, context) { return ast; };
                RouterLinkTransform.prototype.visitText = function (ast, context) { return ast; };
                RouterLinkTransform.prototype.visitDirective = function (ast, context) {
                    var _this = this;
                    var updatedInputs = ast.inputs.map(function (c) { return c.visit(_this, context); });
                    return new compiler_16.DirectiveAst(ast.directive, updatedInputs, ast.hostProperties, ast.hostEvents, ast.exportAsVars, ast.sourceSpan);
                };
                RouterLinkTransform.prototype.visitDirectiveProperty = function (ast, context) {
                    var transformedValue = ast.value.visit(this.astTransformer);
                    return new compiler_16.BoundDirectivePropertyAst(ast.directiveName, ast.templateName, transformedValue, ast.sourceSpan);
                };
                RouterLinkTransform = __decorate([
                    core_139.Injectable(), 
                    __metadata('design:paramtypes', [parser_2.Parser])
                ], RouterLinkTransform);
                return RouterLinkTransform;
            }());
            exports_396("RouterLinkTransform", RouterLinkTransform);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/testing/benchmark_util", ['angular2/src/platform/browser/browser_adapter', 'angular2/src/facade/browser', 'angular2/src/facade/lang', 'angular2/src/facade/exceptions'], function(exports_397, context_397) {
    "use strict";
    var __moduleName = context_397 && context_397.id;
    var browser_adapter_5, browser_11, lang_219, exceptions_80;
    var DOM;
    function getIntParameter(name) {
        return lang_219.NumberWrapper.parseInt(getStringParameter(name), 10);
    }
    exports_397("getIntParameter", getIntParameter);
    function getStringParameter(name) {
        var els = DOM.querySelectorAll(browser_11.document, "input[name=\"" + name + "\"]");
        var value;
        var el;
        for (var i = 0; i < els.length; i++) {
            el = els[i];
            var type = DOM.type(el);
            if ((type != 'radio' && type != 'checkbox') || DOM.getChecked(el)) {
                value = DOM.getValue(el);
                break;
            }
        }
        if (lang_219.isBlank(value)) {
            throw new exceptions_80.BaseException("Could not find and input field with name " + name);
        }
        return value;
    }
    exports_397("getStringParameter", getStringParameter);
    function bindAction(selector, callback) {
        var el = DOM.querySelector(browser_11.document, selector);
        DOM.on(el, 'click', function (_) { callback(); });
    }
    exports_397("bindAction", bindAction);
    function microBenchmark(name, iterationCount, callback) {
        var durationName = name + "/" + iterationCount;
        browser_11.window.console.time(durationName);
        callback();
        browser_11.window.console.timeEnd(durationName);
    }
    exports_397("microBenchmark", microBenchmark);
    function windowProfile(name) {
        browser_11.window.console.profile(name);
    }
    exports_397("windowProfile", windowProfile);
    function windowProfileEnd(name) {
        browser_11.window.console.profileEnd(name);
    }
    exports_397("windowProfileEnd", windowProfileEnd);
    return {
        setters:[
            function (browser_adapter_5_1) {
                browser_adapter_5 = browser_adapter_5_1;
            },
            function (browser_11_1) {
                browser_11 = browser_11_1;
            },
            function (lang_219_1) {
                lang_219 = lang_219_1;
            },
            function (exceptions_80_1) {
                exceptions_80 = exceptions_80_1;
            }],
        execute: function() {
            DOM = new browser_adapter_5.BrowserDomAdapter();
        }
    }
});
System.register("test/node_modules/angular2/ts/src/testing/e2e_util", ['selenium-webdriver'], function(exports_398, context_398) {
    "use strict";
    var __moduleName = context_398 && context_398.id;
    var webdriver;
    var browser, $;
    function clickAll(buttonSelectors) {
        buttonSelectors.forEach(function (selector) { $(selector).click(); });
    }
    exports_398("clickAll", clickAll);
    function verifyNoBrowserErrors() {
        // TODO(tbosch): Bug in ChromeDriver: Need to execute at least one command
        // so that the browser logs can be read out!
        browser.executeScript('1+1');
        browser.manage().logs().get('browser').then(function (browserLog) {
            var filteredLog = browserLog.filter(function (logEntry) {
                if (logEntry.level.value >= webdriver.logging.Level.INFO.value) {
                    console.log('>> ' + logEntry.message);
                }
                return logEntry.level.value > webdriver.logging.Level.WARNING.value;
            });
            expect(filteredLog).toEqual([]);
        });
    }
    exports_398("verifyNoBrowserErrors", verifyNoBrowserErrors);
    return {
        setters:[
            function (webdriver_1) {
                webdriver = webdriver_1;
            }],
        execute: function() {
            exports_398("browser", browser = global['browser']);
            exports_398("$", $ = global['$']);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/testing/lang_utils", [], function(exports_399, context_399) {
    "use strict";
    var __moduleName = context_399 && context_399.id;
    function getTypeOf(instance) {
        return instance.constructor;
    }
    exports_399("getTypeOf", getTypeOf);
    function instantiateType(type, params) {
        if (params === void 0) { params = []; }
        var instance = Object.create(type.prototype);
        instance.constructor.apply(instance, params);
        return instance;
    }
    exports_399("instantiateType", instantiateType);
    return {
        setters:[],
        execute: function() {
        }
    }
});
System.register("test/node_modules/angular2/ts/src/testing/perf_util", ["test/node_modules/angular2/ts/src/testing/e2e_util"], function(exports_400, context_400) {
    "use strict";
    var __moduleName = context_400 && context_400.id;
    var benchpress, bind, Options;
    function runClickBenchmark(config) {
        browser.ignoreSynchronization = !config.waitForAngular2;
        var buttons = config.buttons.map(function (selector) { return $(selector); });
        config.work = function () { buttons.forEach(function (button) { button.click(); }); };
        return runBenchmark(config);
    }
    exports_400("runClickBenchmark", runClickBenchmark);
    function runBenchmark(config) {
        return getScaleFactor(browser.params.benchmark.scaling)
            .then(function (scaleFactor) {
            var description = {};
            var urlParams = [];
            if (config.params) {
                config.params.forEach(function (param) {
                    var name = param.name;
                    var value = applyScaleFactor(param.value, scaleFactor, param.scale);
                    urlParams.push(name + '=' + value);
                    description[name] = value;
                });
            }
            var url = encodeURI(config.url + '?' + urlParams.join('&'));
            return browser.get(url).then(function () {
                return global['benchpressRunner'].sample({
                    id: config.id,
                    execute: config.work,
                    prepare: config.prepare,
                    microMetrics: config.microMetrics,
                    bindings: [bind(Options.SAMPLE_DESCRIPTION).toValue(description)]
                });
            });
        });
    }
    exports_400("runBenchmark", runBenchmark);
    function getScaleFactor(possibleScalings) {
        return browser.executeScript('return navigator.userAgent')
            .then(function (userAgent) {
            var scaleFactor = 1;
            possibleScalings.forEach(function (entry) {
                if (userAgent.match(entry.userAgent)) {
                    scaleFactor = entry.value;
                }
            });
            return scaleFactor;
        });
    }
    function applyScaleFactor(value, scaleFactor, method) {
        if (method === 'log2') {
            return value + Math.log(scaleFactor) / Math.LN2;
        }
        else if (method === 'sqrt') {
            return value * Math.sqrt(scaleFactor);
        }
        else if (method === 'linear') {
            return value * scaleFactor;
        }
        else {
            return value;
        }
    }
    return {
        setters:[
            function (e2e_util_6_1) {
                exports_400({
                    "verifyNoBrowserErrors": e2e_util_6_1["verifyNoBrowserErrors"]
                });
            }],
        execute: function() {
            benchpress = global['benchpress'];
            bind = benchpress.bind;
            Options = benchpress.Options;
        }
    }
});
System.register("test/node_modules/angular2/ts/src/transform/template_compiler/change_detector_codegen", [], function(exports_401, context_401) {
    "use strict";
    var __moduleName = context_401 && context_401.id;
    var Codegen;
    return {
        setters:[],
        execute: function() {
            // Note: This class is only here so that we can reference it from TypeScript code.
            // The actual implementation lives under modules_dart.
            // TODO(tbosch): Move the corresponding code into angular2/src/compiler once
            // the new compiler is done.
            Codegen = (function () {
                function Codegen(moduleAlias) {
                }
                Codegen.prototype.generate = function (typeName, changeDetectorTypeName, def) {
                    throw "Not implemented in JS";
                };
                Codegen.prototype.toString = function () { throw "Not implemented in JS"; };
                return Codegen;
            }());
            exports_401("Codegen", Codegen);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/web_workers/shared/api", ["angular2/src/facade/lang", "angular2/src/core/di"], function(exports_402, context_402) {
    "use strict";
    var __moduleName = context_402 && context_402.id;
    var lang_220, di_64;
    var ON_WEB_WORKER;
    return {
        setters:[
            function (lang_220_1) {
                lang_220 = lang_220_1;
            },
            function (di_64_1) {
                di_64 = di_64_1;
            }],
        execute: function() {
            exports_402("ON_WEB_WORKER", ON_WEB_WORKER = lang_220.CONST_EXPR(new di_64.OpaqueToken('WebWorker.onWebWorker')));
        }
    }
});
System.register("test/node_modules/angular2/ts/src/web_workers/shared/messaging_api", [], function(exports_403, context_403) {
    "use strict";
    var __moduleName = context_403 && context_403.id;
    var RENDERER_CHANNEL, XHR_CHANNEL, EVENT_CHANNEL, ROUTER_CHANNEL;
    return {
        setters:[],
        execute: function() {
            /**
             * All channels used by angular's WebWorker components are listed here.
             * You should not use these channels in your application code.
             */
            exports_403("RENDERER_CHANNEL", RENDERER_CHANNEL = "ng-Renderer");
            exports_403("XHR_CHANNEL", XHR_CHANNEL = "ng-XHR");
            exports_403("EVENT_CHANNEL", EVENT_CHANNEL = "ng-Events");
            exports_403("ROUTER_CHANNEL", ROUTER_CHANNEL = "ng-Router");
        }
    }
});
System.register("test/node_modules/angular2/ts/src/web_workers/shared/post_message_bus", ['angular2/src/facade/exceptions', 'angular2/src/facade/async', 'angular2/src/facade/collection', "angular2/src/core/di"], function(exports_404, context_404) {
    "use strict";
    var __moduleName = context_404 && context_404.id;
    var exceptions_81, async_37, collection_91, di_65;
    var PostMessageBusSink, PostMessageBusSource, PostMessageBus, _Channel;
    return {
        setters:[
            function (exceptions_81_1) {
                exceptions_81 = exceptions_81_1;
            },
            function (async_37_1) {
                async_37 = async_37_1;
            },
            function (collection_91_1) {
                collection_91 = collection_91_1;
            },
            function (di_65_1) {
                di_65 = di_65_1;
            }],
        execute: function() {
            PostMessageBusSink = (function () {
                function PostMessageBusSink(_postMessageTarget) {
                    this._postMessageTarget = _postMessageTarget;
                    this._channels = collection_91.StringMapWrapper.create();
                    this._messageBuffer = [];
                }
                PostMessageBusSink.prototype.attachToZone = function (zone) {
                    var _this = this;
                    this._zone = zone;
                    this._zone.runOutsideAngular(function () {
                        async_37.ObservableWrapper.subscribe(_this._zone.onStable, function (_) { _this._handleOnEventDone(); });
                    });
                };
                PostMessageBusSink.prototype.initChannel = function (channel, runInZone) {
                    var _this = this;
                    if (runInZone === void 0) { runInZone = true; }
                    if (collection_91.StringMapWrapper.contains(this._channels, channel)) {
                        throw new exceptions_81.BaseException(channel + " has already been initialized");
                    }
                    var emitter = new async_37.EventEmitter(false);
                    var channelInfo = new _Channel(emitter, runInZone);
                    this._channels[channel] = channelInfo;
                    emitter.subscribe(function (data) {
                        var message = { channel: channel, message: data };
                        if (runInZone) {
                            _this._messageBuffer.push(message);
                        }
                        else {
                            _this._sendMessages([message]);
                        }
                    });
                };
                PostMessageBusSink.prototype.to = function (channel) {
                    if (collection_91.StringMapWrapper.contains(this._channels, channel)) {
                        return this._channels[channel].emitter;
                    }
                    else {
                        throw new exceptions_81.BaseException(channel + " is not set up. Did you forget to call initChannel?");
                    }
                };
                PostMessageBusSink.prototype._handleOnEventDone = function () {
                    if (this._messageBuffer.length > 0) {
                        this._sendMessages(this._messageBuffer);
                        this._messageBuffer = [];
                    }
                };
                PostMessageBusSink.prototype._sendMessages = function (messages) { this._postMessageTarget.postMessage(messages); };
                return PostMessageBusSink;
            }());
            exports_404("PostMessageBusSink", PostMessageBusSink);
            PostMessageBusSource = (function () {
                function PostMessageBusSource(eventTarget) {
                    var _this = this;
                    this._channels = collection_91.StringMapWrapper.create();
                    if (eventTarget) {
                        eventTarget.addEventListener("message", function (ev) { return _this._handleMessages(ev); });
                    }
                    else {
                        // if no eventTarget is given we assume we're in a WebWorker and listen on the global scope
                        addEventListener("message", function (ev) { return _this._handleMessages(ev); });
                    }
                }
                PostMessageBusSource.prototype.attachToZone = function (zone) { this._zone = zone; };
                PostMessageBusSource.prototype.initChannel = function (channel, runInZone) {
                    if (runInZone === void 0) { runInZone = true; }
                    if (collection_91.StringMapWrapper.contains(this._channels, channel)) {
                        throw new exceptions_81.BaseException(channel + " has already been initialized");
                    }
                    var emitter = new async_37.EventEmitter(false);
                    var channelInfo = new _Channel(emitter, runInZone);
                    this._channels[channel] = channelInfo;
                };
                PostMessageBusSource.prototype.from = function (channel) {
                    if (collection_91.StringMapWrapper.contains(this._channels, channel)) {
                        return this._channels[channel].emitter;
                    }
                    else {
                        throw new exceptions_81.BaseException(channel + " is not set up. Did you forget to call initChannel?");
                    }
                };
                PostMessageBusSource.prototype._handleMessages = function (ev) {
                    var messages = ev.data;
                    for (var i = 0; i < messages.length; i++) {
                        this._handleMessage(messages[i]);
                    }
                };
                PostMessageBusSource.prototype._handleMessage = function (data) {
                    var channel = data.channel;
                    if (collection_91.StringMapWrapper.contains(this._channels, channel)) {
                        var channelInfo = this._channels[channel];
                        if (channelInfo.runInZone) {
                            this._zone.run(function () { channelInfo.emitter.emit(data.message); });
                        }
                        else {
                            channelInfo.emitter.emit(data.message);
                        }
                    }
                };
                return PostMessageBusSource;
            }());
            exports_404("PostMessageBusSource", PostMessageBusSource);
            /**
             * A TypeScript implementation of {@link MessageBus} for communicating via JavaScript's
             * postMessage API.
             */
            PostMessageBus = (function () {
                function PostMessageBus(sink, source) {
                    this.sink = sink;
                    this.source = source;
                }
                PostMessageBus.prototype.attachToZone = function (zone) {
                    this.source.attachToZone(zone);
                    this.sink.attachToZone(zone);
                };
                PostMessageBus.prototype.initChannel = function (channel, runInZone) {
                    if (runInZone === void 0) { runInZone = true; }
                    this.source.initChannel(channel, runInZone);
                    this.sink.initChannel(channel, runInZone);
                };
                PostMessageBus.prototype.from = function (channel) { return this.source.from(channel); };
                PostMessageBus.prototype.to = function (channel) { return this.sink.to(channel); };
                PostMessageBus = __decorate([
                    di_65.Injectable(), 
                    __metadata('design:paramtypes', [PostMessageBusSink, PostMessageBusSource])
                ], PostMessageBus);
                return PostMessageBus;
            }());
            exports_404("PostMessageBus", PostMessageBus);
            /**
             * Helper class that wraps a channel's {@link EventEmitter} and
             * keeps track of if it should run in the zone.
             */
            _Channel = (function () {
                function _Channel(emitter, runInZone) {
                    this.emitter = emitter;
                    this.runInZone = runInZone;
                }
                return _Channel;
            }());
        }
    }
});
System.register("test/node_modules/angular2/ts/src/web_workers/shared/render_store", ["angular2/src/core/di"], function(exports_405, context_405) {
    "use strict";
    var __moduleName = context_405 && context_405.id;
    var di_66;
    var RenderStore;
    return {
        setters:[
            function (di_66_1) {
                di_66 = di_66_1;
            }],
        execute: function() {
            RenderStore = (function () {
                function RenderStore() {
                    this._nextIndex = 0;
                    this._lookupById = new Map();
                    this._lookupByObject = new Map();
                }
                RenderStore.prototype.allocateId = function () { return this._nextIndex++; };
                RenderStore.prototype.store = function (obj, id) {
                    this._lookupById.set(id, obj);
                    this._lookupByObject.set(obj, id);
                };
                RenderStore.prototype.remove = function (obj) {
                    var index = this._lookupByObject.get(obj);
                    this._lookupByObject.delete(obj);
                    this._lookupById.delete(index);
                };
                RenderStore.prototype.deserialize = function (id) {
                    if (id == null) {
                        return null;
                    }
                    if (!this._lookupById.has(id)) {
                        return null;
                    }
                    return this._lookupById.get(id);
                };
                RenderStore.prototype.serialize = function (obj) {
                    if (obj == null) {
                        return null;
                    }
                    return this._lookupByObject.get(obj);
                };
                RenderStore = __decorate([
                    di_66.Injectable(), 
                    __metadata('design:paramtypes', [])
                ], RenderStore);
                return RenderStore;
            }());
            exports_405("RenderStore", RenderStore);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/web_workers/ui/bind", [], function(exports_406, context_406) {
    "use strict";
    var __moduleName = context_406 && context_406.id;
    function bind(fn, scope) {
        return fn.bind(scope);
    }
    exports_406("bind", bind);
    return {
        setters:[],
        execute: function() {
        }
    }
});
System.register("test/node_modules/angular2/ts/src/web_workers/ui/event_dispatcher", ['angular2/src/web_workers/shared/serializer', 'angular2/src/web_workers/ui/event_serializer', 'angular2/src/facade/exceptions', 'angular2/src/facade/async'], function(exports_407, context_407) {
    "use strict";
    var __moduleName = context_407 && context_407.id;
    var serializer_7, event_serializer_1, exceptions_82, async_38;
    var EventDispatcher;
    return {
        setters:[
            function (serializer_7_1) {
                serializer_7 = serializer_7_1;
            },
            function (event_serializer_1_1) {
                event_serializer_1 = event_serializer_1_1;
            },
            function (exceptions_82_1) {
                exceptions_82 = exceptions_82_1;
            },
            function (async_38_1) {
                async_38 = async_38_1;
            }],
        execute: function() {
            EventDispatcher = (function () {
                function EventDispatcher(_sink, _serializer) {
                    this._sink = _sink;
                    this._serializer = _serializer;
                }
                EventDispatcher.prototype.dispatchRenderEvent = function (element, eventTarget, eventName, event) {
                    var serializedEvent;
                    // TODO (jteplitz602): support custom events #3350
                    switch (event.type) {
                        case "click":
                        case "mouseup":
                        case "mousedown":
                        case "dblclick":
                        case "contextmenu":
                        case "mouseenter":
                        case "mouseleave":
                        case "mousemove":
                        case "mouseout":
                        case "mouseover":
                        case "show":
                            serializedEvent = event_serializer_1.serializeMouseEvent(event);
                            break;
                        case "keydown":
                        case "keypress":
                        case "keyup":
                            serializedEvent = event_serializer_1.serializeKeyboardEvent(event);
                            break;
                        case "input":
                        case "change":
                        case "blur":
                            serializedEvent = event_serializer_1.serializeEventWithTarget(event);
                            break;
                        case "abort":
                        case "afterprint":
                        case "beforeprint":
                        case "cached":
                        case "canplay":
                        case "canplaythrough":
                        case "chargingchange":
                        case "chargingtimechange":
                        case "close":
                        case "dischargingtimechange":
                        case "DOMContentLoaded":
                        case "downloading":
                        case "durationchange":
                        case "emptied":
                        case "ended":
                        case "error":
                        case "fullscreenchange":
                        case "fullscreenerror":
                        case "invalid":
                        case "languagechange":
                        case "levelfchange":
                        case "loadeddata":
                        case "loadedmetadata":
                        case "obsolete":
                        case "offline":
                        case "online":
                        case "open":
                        case "orientatoinchange":
                        case "pause":
                        case "pointerlockchange":
                        case "pointerlockerror":
                        case "play":
                        case "playing":
                        case "ratechange":
                        case "readystatechange":
                        case "reset":
                        case "scroll":
                        case "seeked":
                        case "seeking":
                        case "stalled":
                        case "submit":
                        case "success":
                        case "suspend":
                        case "timeupdate":
                        case "updateready":
                        case "visibilitychange":
                        case "volumechange":
                        case "waiting":
                            serializedEvent = event_serializer_1.serializeGenericEvent(event);
                            break;
                        case "transitionend":
                            serializedEvent = event_serializer_1.serializeTransitionEvent(event);
                            break;
                        default:
                            throw new exceptions_82.BaseException(eventName + " not supported on WebWorkers");
                    }
                    async_38.ObservableWrapper.callEmit(this._sink, {
                        "element": this._serializer.serialize(element, serializer_7.RenderStoreObject),
                        "eventName": eventName,
                        "eventTarget": eventTarget,
                        "event": serializedEvent
                    });
                    // TODO(kegluneq): Eventually, we want the user to indicate from the UI side whether the event
                    // should be canceled, but for now just call `preventDefault` on the original DOM event.
                    return false;
                };
                return EventDispatcher;
            }());
            exports_407("EventDispatcher", EventDispatcher);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/web_workers/ui/event_serializer", ['angular2/src/facade/collection', 'angular2/src/facade/lang'], function(exports_408, context_408) {
    "use strict";
    var __moduleName = context_408 && context_408.id;
    var collection_92, lang_221;
    var MOUSE_EVENT_PROPERTIES, KEYBOARD_EVENT_PROPERTIES, TRANSITION_EVENT_PROPERTIES, EVENT_PROPERTIES, NODES_WITH_VALUE;
    function serializeGenericEvent(e) {
        return serializeEvent(e, EVENT_PROPERTIES);
    }
    exports_408("serializeGenericEvent", serializeGenericEvent);
    // TODO(jteplitz602): Allow users to specify the properties they need rather than always
    // adding value and files #3374
    function serializeEventWithTarget(e) {
        var serializedEvent = serializeEvent(e, EVENT_PROPERTIES);
        return addTarget(e, serializedEvent);
    }
    exports_408("serializeEventWithTarget", serializeEventWithTarget);
    function serializeMouseEvent(e) {
        return serializeEvent(e, MOUSE_EVENT_PROPERTIES);
    }
    exports_408("serializeMouseEvent", serializeMouseEvent);
    function serializeKeyboardEvent(e) {
        var serializedEvent = serializeEvent(e, KEYBOARD_EVENT_PROPERTIES);
        return addTarget(e, serializedEvent);
    }
    exports_408("serializeKeyboardEvent", serializeKeyboardEvent);
    function serializeTransitionEvent(e) {
        var serializedEvent = serializeEvent(e, TRANSITION_EVENT_PROPERTIES);
        return addTarget(e, serializedEvent);
    }
    exports_408("serializeTransitionEvent", serializeTransitionEvent);
    // TODO(jteplitz602): #3374. See above.
    function addTarget(e, serializedEvent) {
        if (NODES_WITH_VALUE.has(e.target.tagName.toLowerCase())) {
            var target = e.target;
            serializedEvent['target'] = { 'value': target.value };
            if (lang_221.isPresent(target.files)) {
                serializedEvent['target']['files'] = target.files;
            }
        }
        return serializedEvent;
    }
    function serializeEvent(e, properties) {
        var serialized = {};
        for (var i = 0; i < properties.length; i++) {
            var prop = properties[i];
            serialized[prop] = e[prop];
        }
        return serialized;
    }
    return {
        setters:[
            function (collection_92_1) {
                collection_92 = collection_92_1;
            },
            function (lang_221_1) {
                lang_221 = lang_221_1;
            }],
        execute: function() {
            MOUSE_EVENT_PROPERTIES = [
                "altKey",
                "button",
                "clientX",
                "clientY",
                "metaKey",
                "movementX",
                "movementY",
                "offsetX",
                "offsetY",
                "region",
                "screenX",
                "screenY",
                "shiftKey"
            ];
            KEYBOARD_EVENT_PROPERTIES = [
                'altkey',
                'charCode',
                'code',
                'ctrlKey',
                'isComposing',
                'key',
                'keyCode',
                'location',
                'metaKey',
                'repeat',
                'shiftKey',
                'which'
            ];
            TRANSITION_EVENT_PROPERTIES = ['propertyName', 'elapsedTime', 'pseudoElement'];
            EVENT_PROPERTIES = ['type', 'bubbles', 'cancelable'];
            NODES_WITH_VALUE = new collection_92.Set(["input", "select", "option", "button", "li", "meter", "progress", "param"]);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/web_workers/ui/platform_location", ['angular2/src/router/location/browser_platform_location', 'angular2/src/core/di', 'angular2/src/web_workers/shared/messaging_api', 'angular2/src/web_workers/shared/service_message_broker', 'angular2/src/web_workers/shared/serializer', "test/node_modules/angular2/ts/src/web_workers/ui/bind", 'angular2/src/web_workers/shared/serialized_types', 'angular2/src/web_workers/shared/message_bus', 'angular2/src/facade/async'], function(exports_409, context_409) {
    "use strict";
    var __moduleName = context_409 && context_409.id;
    var browser_platform_location_3, di_67, messaging_api_1, service_message_broker_5, serializer_8, bind_1, serialized_types_2, message_bus_8, async_39;
    var MessageBasedPlatformLocation;
    return {
        setters:[
            function (browser_platform_location_3_1) {
                browser_platform_location_3 = browser_platform_location_3_1;
            },
            function (di_67_1) {
                di_67 = di_67_1;
            },
            function (messaging_api_1_1) {
                messaging_api_1 = messaging_api_1_1;
            },
            function (service_message_broker_5_1) {
                service_message_broker_5 = service_message_broker_5_1;
            },
            function (serializer_8_1) {
                serializer_8 = serializer_8_1;
            },
            function (bind_1_1) {
                bind_1 = bind_1_1;
            },
            function (serialized_types_2_1) {
                serialized_types_2 = serialized_types_2_1;
            },
            function (message_bus_8_1) {
                message_bus_8 = message_bus_8_1;
            },
            function (async_39_1) {
                async_39 = async_39_1;
            }],
        execute: function() {
            MessageBasedPlatformLocation = (function () {
                function MessageBasedPlatformLocation(_brokerFactory, _platformLocation, bus, _serializer) {
                    this._brokerFactory = _brokerFactory;
                    this._platformLocation = _platformLocation;
                    this._serializer = _serializer;
                    this._platformLocation.onPopState(bind_1.bind(this._sendUrlChangeEvent, this));
                    this._platformLocation.onHashChange(bind_1.bind(this._sendUrlChangeEvent, this));
                    this._broker = this._brokerFactory.createMessageBroker(messaging_api_1.ROUTER_CHANNEL);
                    this._channelSink = bus.to(messaging_api_1.ROUTER_CHANNEL);
                }
                MessageBasedPlatformLocation.prototype.start = function () {
                    this._broker.registerMethod("getLocation", null, bind_1.bind(this._getLocation, this), serialized_types_2.LocationType);
                    this._broker.registerMethod("setPathname", [serializer_8.PRIMITIVE], bind_1.bind(this._setPathname, this));
                    this._broker.registerMethod("pushState", [serializer_8.PRIMITIVE, serializer_8.PRIMITIVE, serializer_8.PRIMITIVE], bind_1.bind(this._platformLocation.pushState, this._platformLocation));
                    this._broker.registerMethod("replaceState", [serializer_8.PRIMITIVE, serializer_8.PRIMITIVE, serializer_8.PRIMITIVE], bind_1.bind(this._platformLocation.replaceState, this._platformLocation));
                    this._broker.registerMethod("forward", null, bind_1.bind(this._platformLocation.forward, this._platformLocation));
                    this._broker.registerMethod("back", null, bind_1.bind(this._platformLocation.back, this._platformLocation));
                };
                MessageBasedPlatformLocation.prototype._getLocation = function () {
                    return async_39.PromiseWrapper.resolve(this._platformLocation.location);
                };
                MessageBasedPlatformLocation.prototype._sendUrlChangeEvent = function (e) {
                    var loc = this._serializer.serialize(this._platformLocation.location, serialized_types_2.LocationType);
                    var serializedEvent = { 'type': e.type };
                    async_39.ObservableWrapper.callEmit(this._channelSink, { 'event': serializedEvent, 'location': loc });
                };
                MessageBasedPlatformLocation.prototype._setPathname = function (pathname) { this._platformLocation.pathname = pathname; };
                MessageBasedPlatformLocation = __decorate([
                    di_67.Injectable(), 
                    __metadata('design:paramtypes', [service_message_broker_5.ServiceMessageBrokerFactory, browser_platform_location_3.BrowserPlatformLocation, message_bus_8.MessageBus, serializer_8.Serializer])
                ], MessageBasedPlatformLocation);
                return MessageBasedPlatformLocation;
            }());
            exports_409("MessageBasedPlatformLocation", MessageBasedPlatformLocation);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/web_workers/ui/renderer", ['angular2/src/core/di', 'angular2/src/web_workers/shared/message_bus', 'angular2/src/web_workers/shared/serializer', 'angular2/src/core/render/api', 'angular2/src/web_workers/shared/messaging_api', "test/node_modules/angular2/ts/src/web_workers/ui/bind", 'angular2/src/web_workers/ui/event_dispatcher', 'angular2/src/web_workers/shared/render_store', 'angular2/src/web_workers/shared/service_message_broker'], function(exports_410, context_410) {
    "use strict";
    var __moduleName = context_410 && context_410.id;
    var di_68, message_bus_9, serializer_9, api_10, messaging_api_2, bind_2, event_dispatcher_1, render_store_4, service_message_broker_6;
    var MessageBasedRenderer;
    return {
        setters:[
            function (di_68_1) {
                di_68 = di_68_1;
            },
            function (message_bus_9_1) {
                message_bus_9 = message_bus_9_1;
            },
            function (serializer_9_1) {
                serializer_9 = serializer_9_1;
            },
            function (api_10_1) {
                api_10 = api_10_1;
            },
            function (messaging_api_2_1) {
                messaging_api_2 = messaging_api_2_1;
            },
            function (bind_2_1) {
                bind_2 = bind_2_1;
            },
            function (event_dispatcher_1_1) {
                event_dispatcher_1 = event_dispatcher_1_1;
            },
            function (render_store_4_1) {
                render_store_4 = render_store_4_1;
            },
            function (service_message_broker_6_1) {
                service_message_broker_6 = service_message_broker_6_1;
            }],
        execute: function() {
            MessageBasedRenderer = (function () {
                function MessageBasedRenderer(_brokerFactory, _bus, _serializer, _renderStore, _rootRenderer) {
                    this._brokerFactory = _brokerFactory;
                    this._bus = _bus;
                    this._serializer = _serializer;
                    this._renderStore = _renderStore;
                    this._rootRenderer = _rootRenderer;
                }
                MessageBasedRenderer.prototype.start = function () {
                    var broker = this._brokerFactory.createMessageBroker(messaging_api_2.RENDERER_CHANNEL);
                    this._bus.initChannel(messaging_api_2.EVENT_CHANNEL);
                    this._eventDispatcher = new event_dispatcher_1.EventDispatcher(this._bus.to(messaging_api_2.EVENT_CHANNEL), this._serializer);
                    broker.registerMethod("renderComponent", [api_10.RenderComponentType, serializer_9.PRIMITIVE], bind_2.bind(this._renderComponent, this));
                    broker.registerMethod("selectRootElement", [serializer_9.RenderStoreObject, serializer_9.PRIMITIVE, serializer_9.PRIMITIVE], bind_2.bind(this._selectRootElement, this));
                    broker.registerMethod("createElement", [serializer_9.RenderStoreObject, serializer_9.RenderStoreObject, serializer_9.PRIMITIVE, serializer_9.PRIMITIVE], bind_2.bind(this._createElement, this));
                    broker.registerMethod("createViewRoot", [serializer_9.RenderStoreObject, serializer_9.RenderStoreObject, serializer_9.PRIMITIVE], bind_2.bind(this._createViewRoot, this));
                    broker.registerMethod("createTemplateAnchor", [serializer_9.RenderStoreObject, serializer_9.RenderStoreObject, serializer_9.PRIMITIVE], bind_2.bind(this._createTemplateAnchor, this));
                    broker.registerMethod("createText", [serializer_9.RenderStoreObject, serializer_9.RenderStoreObject, serializer_9.PRIMITIVE, serializer_9.PRIMITIVE], bind_2.bind(this._createText, this));
                    broker.registerMethod("projectNodes", [serializer_9.RenderStoreObject, serializer_9.RenderStoreObject, serializer_9.RenderStoreObject], bind_2.bind(this._projectNodes, this));
                    broker.registerMethod("attachViewAfter", [serializer_9.RenderStoreObject, serializer_9.RenderStoreObject, serializer_9.RenderStoreObject], bind_2.bind(this._attachViewAfter, this));
                    broker.registerMethod("detachView", [serializer_9.RenderStoreObject, serializer_9.RenderStoreObject], bind_2.bind(this._detachView, this));
                    broker.registerMethod("destroyView", [serializer_9.RenderStoreObject, serializer_9.RenderStoreObject, serializer_9.RenderStoreObject], bind_2.bind(this._destroyView, this));
                    broker.registerMethod("setElementProperty", [serializer_9.RenderStoreObject, serializer_9.RenderStoreObject, serializer_9.PRIMITIVE, serializer_9.PRIMITIVE], bind_2.bind(this._setElementProperty, this));
                    broker.registerMethod("setElementAttribute", [serializer_9.RenderStoreObject, serializer_9.RenderStoreObject, serializer_9.PRIMITIVE, serializer_9.PRIMITIVE], bind_2.bind(this._setElementAttribute, this));
                    broker.registerMethod("setBindingDebugInfo", [serializer_9.RenderStoreObject, serializer_9.RenderStoreObject, serializer_9.PRIMITIVE, serializer_9.PRIMITIVE], bind_2.bind(this._setBindingDebugInfo, this));
                    broker.registerMethod("setElementClass", [serializer_9.RenderStoreObject, serializer_9.RenderStoreObject, serializer_9.PRIMITIVE, serializer_9.PRIMITIVE], bind_2.bind(this._setElementClass, this));
                    broker.registerMethod("setElementStyle", [serializer_9.RenderStoreObject, serializer_9.RenderStoreObject, serializer_9.PRIMITIVE, serializer_9.PRIMITIVE], bind_2.bind(this._setElementStyle, this));
                    broker.registerMethod("invokeElementMethod", [serializer_9.RenderStoreObject, serializer_9.RenderStoreObject, serializer_9.PRIMITIVE, serializer_9.PRIMITIVE], bind_2.bind(this._invokeElementMethod, this));
                    broker.registerMethod("setText", [serializer_9.RenderStoreObject, serializer_9.RenderStoreObject, serializer_9.PRIMITIVE], bind_2.bind(this._setText, this));
                    broker.registerMethod("listen", [serializer_9.RenderStoreObject, serializer_9.RenderStoreObject, serializer_9.PRIMITIVE, serializer_9.PRIMITIVE], bind_2.bind(this._listen, this));
                    broker.registerMethod("listenGlobal", [serializer_9.RenderStoreObject, serializer_9.PRIMITIVE, serializer_9.PRIMITIVE, serializer_9.PRIMITIVE], bind_2.bind(this._listenGlobal, this));
                    broker.registerMethod("listenDone", [serializer_9.RenderStoreObject, serializer_9.RenderStoreObject], bind_2.bind(this._listenDone, this));
                };
                MessageBasedRenderer.prototype._renderComponent = function (renderComponentType, rendererId) {
                    var renderer = this._rootRenderer.renderComponent(renderComponentType);
                    this._renderStore.store(renderer, rendererId);
                };
                MessageBasedRenderer.prototype._selectRootElement = function (renderer, selector, elId) {
                    this._renderStore.store(renderer.selectRootElement(selector), elId);
                };
                MessageBasedRenderer.prototype._createElement = function (renderer, parentElement, name, elId) {
                    this._renderStore.store(renderer.createElement(parentElement, name), elId);
                };
                MessageBasedRenderer.prototype._createViewRoot = function (renderer, hostElement, elId) {
                    var viewRoot = renderer.createViewRoot(hostElement);
                    if (this._renderStore.serialize(hostElement) !== elId) {
                        this._renderStore.store(viewRoot, elId);
                    }
                };
                MessageBasedRenderer.prototype._createTemplateAnchor = function (renderer, parentElement, elId) {
                    this._renderStore.store(renderer.createTemplateAnchor(parentElement), elId);
                };
                MessageBasedRenderer.prototype._createText = function (renderer, parentElement, value, elId) {
                    this._renderStore.store(renderer.createText(parentElement, value), elId);
                };
                MessageBasedRenderer.prototype._projectNodes = function (renderer, parentElement, nodes) {
                    renderer.projectNodes(parentElement, nodes);
                };
                MessageBasedRenderer.prototype._attachViewAfter = function (renderer, node, viewRootNodes) {
                    renderer.attachViewAfter(node, viewRootNodes);
                };
                MessageBasedRenderer.prototype._detachView = function (renderer, viewRootNodes) {
                    renderer.detachView(viewRootNodes);
                };
                MessageBasedRenderer.prototype._destroyView = function (renderer, hostElement, viewAllNodes) {
                    renderer.destroyView(hostElement, viewAllNodes);
                    for (var i = 0; i < viewAllNodes.length; i++) {
                        this._renderStore.remove(viewAllNodes[i]);
                    }
                };
                MessageBasedRenderer.prototype._setElementProperty = function (renderer, renderElement, propertyName, propertyValue) {
                    renderer.setElementProperty(renderElement, propertyName, propertyValue);
                };
                MessageBasedRenderer.prototype._setElementAttribute = function (renderer, renderElement, attributeName, attributeValue) {
                    renderer.setElementAttribute(renderElement, attributeName, attributeValue);
                };
                MessageBasedRenderer.prototype._setBindingDebugInfo = function (renderer, renderElement, propertyName, propertyValue) {
                    renderer.setBindingDebugInfo(renderElement, propertyName, propertyValue);
                };
                MessageBasedRenderer.prototype._setElementClass = function (renderer, renderElement, className, isAdd) {
                    renderer.setElementClass(renderElement, className, isAdd);
                };
                MessageBasedRenderer.prototype._setElementStyle = function (renderer, renderElement, styleName, styleValue) {
                    renderer.setElementStyle(renderElement, styleName, styleValue);
                };
                MessageBasedRenderer.prototype._invokeElementMethod = function (renderer, renderElement, methodName, args) {
                    renderer.invokeElementMethod(renderElement, methodName, args);
                };
                MessageBasedRenderer.prototype._setText = function (renderer, renderNode, text) {
                    renderer.setText(renderNode, text);
                };
                MessageBasedRenderer.prototype._listen = function (renderer, renderElement, eventName, unlistenId) {
                    var _this = this;
                    var unregisterCallback = renderer.listen(renderElement, eventName, function (event) { return _this._eventDispatcher.dispatchRenderEvent(renderElement, null, eventName, event); });
                    this._renderStore.store(unregisterCallback, unlistenId);
                };
                MessageBasedRenderer.prototype._listenGlobal = function (renderer, eventTarget, eventName, unlistenId) {
                    var _this = this;
                    var unregisterCallback = renderer.listenGlobal(eventTarget, eventName, function (event) { return _this._eventDispatcher.dispatchRenderEvent(null, eventTarget, eventName, event); });
                    this._renderStore.store(unregisterCallback, unlistenId);
                };
                MessageBasedRenderer.prototype._listenDone = function (renderer, unlistenCallback) { unlistenCallback(); };
                MessageBasedRenderer = __decorate([
                    di_68.Injectable(), 
                    __metadata('design:paramtypes', [service_message_broker_6.ServiceMessageBrokerFactory, message_bus_9.MessageBus, serializer_9.Serializer, render_store_4.RenderStore, api_10.RootRenderer])
                ], MessageBasedRenderer);
                return MessageBasedRenderer;
            }());
            exports_410("MessageBasedRenderer", MessageBasedRenderer);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/web_workers/ui/router_providers", ["test/node_modules/angular2/ts/src/web_workers/ui/platform_location", 'angular2/src/facade/lang', 'angular2/src/router/location/browser_platform_location', 'angular2/core'], function(exports_411, context_411) {
    "use strict";
    var __moduleName = context_411 && context_411.id;
    var platform_location_6, lang_222, browser_platform_location_4, core_140;
    var WORKER_RENDER_ROUTER;
    function initRouterListeners(injector) {
        return function () {
            var zone = injector.get(core_140.NgZone);
            zone.run(function () { return injector.get(platform_location_6.MessageBasedPlatformLocation).start(); });
        };
    }
    return {
        setters:[
            function (platform_location_6_1) {
                platform_location_6 = platform_location_6_1;
            },
            function (lang_222_1) {
                lang_222 = lang_222_1;
            },
            function (browser_platform_location_4_1) {
                browser_platform_location_4 = browser_platform_location_4_1;
            },
            function (core_140_1) {
                core_140 = core_140_1;
            }],
        execute: function() {
            exports_411("WORKER_RENDER_ROUTER", WORKER_RENDER_ROUTER = lang_222.CONST_EXPR([
                platform_location_6.MessageBasedPlatformLocation,
                browser_platform_location_4.BrowserPlatformLocation,
                lang_222.CONST_EXPR(new core_140.Provider(core_140.APP_INITIALIZER, { useFactory: initRouterListeners, multi: true, deps: lang_222.CONST_EXPR([core_140.Injector]) }))
            ]));
        }
    }
});
System.register("test/node_modules/angular2/ts/src/web_workers/ui/xhr_impl", ['angular2/src/core/di', 'angular2/src/web_workers/shared/serializer', 'angular2/src/web_workers/shared/messaging_api', 'angular2/src/compiler/xhr', 'angular2/src/web_workers/shared/service_message_broker', "test/node_modules/angular2/ts/src/web_workers/ui/bind"], function(exports_412, context_412) {
    "use strict";
    var __moduleName = context_412 && context_412.id;
    var di_69, serializer_10, messaging_api_3, xhr_9, service_message_broker_7, bind_3;
    var MessageBasedXHRImpl;
    return {
        setters:[
            function (di_69_1) {
                di_69 = di_69_1;
            },
            function (serializer_10_1) {
                serializer_10 = serializer_10_1;
            },
            function (messaging_api_3_1) {
                messaging_api_3 = messaging_api_3_1;
            },
            function (xhr_9_1) {
                xhr_9 = xhr_9_1;
            },
            function (service_message_broker_7_1) {
                service_message_broker_7 = service_message_broker_7_1;
            },
            function (bind_3_1) {
                bind_3 = bind_3_1;
            }],
        execute: function() {
            MessageBasedXHRImpl = (function () {
                function MessageBasedXHRImpl(_brokerFactory, _xhr) {
                    this._brokerFactory = _brokerFactory;
                    this._xhr = _xhr;
                }
                MessageBasedXHRImpl.prototype.start = function () {
                    var broker = this._brokerFactory.createMessageBroker(messaging_api_3.XHR_CHANNEL);
                    broker.registerMethod("get", [serializer_10.PRIMITIVE], bind_3.bind(this._xhr.get, this._xhr), serializer_10.PRIMITIVE);
                };
                MessageBasedXHRImpl = __decorate([
                    di_69.Injectable(), 
                    __metadata('design:paramtypes', [service_message_broker_7.ServiceMessageBrokerFactory, xhr_9.XHR])
                ], MessageBasedXHRImpl);
                return MessageBasedXHRImpl;
            }());
            exports_412("MessageBasedXHRImpl", MessageBasedXHRImpl);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/web_workers/worker/event_deserializer", [], function(exports_413, context_413) {
    "use strict";
    var __moduleName = context_413 && context_413.id;
    // no deserialization is necessary in TS.
    // This is only here to match dart interface
    function deserializeGenericEvent(serializedEvent) {
        return serializedEvent;
    }
    exports_413("deserializeGenericEvent", deserializeGenericEvent);
    return {
        setters:[],
        execute: function() {
        }
    }
});
System.register("test/node_modules/angular2/ts/src/web_workers/worker/platform_location", ['angular2/src/core/di', 'angular2/src/router/location/platform_location', 'angular2/src/web_workers/shared/client_message_broker', 'angular2/src/web_workers/shared/messaging_api', 'angular2/src/web_workers/shared/serialized_types', 'angular2/src/facade/async', 'angular2/src/facade/exceptions', 'angular2/src/web_workers/shared/serializer', 'angular2/src/web_workers/shared/message_bus', 'angular2/src/facade/collection', 'angular2/src/facade/lang', "test/node_modules/angular2/ts/src/web_workers/worker/event_deserializer"], function(exports_414, context_414) {
    "use strict";
    var __moduleName = context_414 && context_414.id;
    var di_70, platform_location_7, client_message_broker_5, messaging_api_4, serialized_types_3, async_40, exceptions_83, serializer_11, message_bus_10, collection_93, lang_223, event_deserializer_1;
    var WebWorkerPlatformLocation;
    return {
        setters:[
            function (di_70_1) {
                di_70 = di_70_1;
            },
            function (platform_location_7_1) {
                platform_location_7 = platform_location_7_1;
            },
            function (client_message_broker_5_1) {
                client_message_broker_5 = client_message_broker_5_1;
            },
            function (messaging_api_4_1) {
                messaging_api_4 = messaging_api_4_1;
            },
            function (serialized_types_3_1) {
                serialized_types_3 = serialized_types_3_1;
            },
            function (async_40_1) {
                async_40 = async_40_1;
            },
            function (exceptions_83_1) {
                exceptions_83 = exceptions_83_1;
            },
            function (serializer_11_1) {
                serializer_11 = serializer_11_1;
            },
            function (message_bus_10_1) {
                message_bus_10 = message_bus_10_1;
            },
            function (collection_93_1) {
                collection_93 = collection_93_1;
            },
            function (lang_223_1) {
                lang_223 = lang_223_1;
            },
            function (event_deserializer_1_1) {
                event_deserializer_1 = event_deserializer_1_1;
            }],
        execute: function() {
            WebWorkerPlatformLocation = (function (_super) {
                __extends(WebWorkerPlatformLocation, _super);
                function WebWorkerPlatformLocation(brokerFactory, bus, _serializer) {
                    var _this = this;
                    _super.call(this);
                    this._serializer = _serializer;
                    this._popStateListeners = [];
                    this._hashChangeListeners = [];
                    this._location = null;
                    this._broker = brokerFactory.createMessageBroker(messaging_api_4.ROUTER_CHANNEL);
                    this._channelSource = bus.from(messaging_api_4.ROUTER_CHANNEL);
                    async_40.ObservableWrapper.subscribe(this._channelSource, function (msg) {
                        var listeners = null;
                        if (collection_93.StringMapWrapper.contains(msg, 'event')) {
                            var type = msg['event']['type'];
                            if (lang_223.StringWrapper.equals(type, "popstate")) {
                                listeners = _this._popStateListeners;
                            }
                            else if (lang_223.StringWrapper.equals(type, "hashchange")) {
                                listeners = _this._hashChangeListeners;
                            }
                            if (listeners !== null) {
                                var e_1 = event_deserializer_1.deserializeGenericEvent(msg['event']);
                                // There was a popState or hashChange event, so the location object thas been updated
                                _this._location = _this._serializer.deserialize(msg['location'], serialized_types_3.LocationType);
                                listeners.forEach(function (fn) { return fn(e_1); });
                            }
                        }
                    });
                }
                /** @internal **/
                WebWorkerPlatformLocation.prototype.init = function () {
                    var _this = this;
                    var args = new client_message_broker_5.UiArguments("getLocation");
                    var locationPromise = this._broker.runOnService(args, serialized_types_3.LocationType);
                    return async_40.PromiseWrapper.then(locationPromise, function (val) {
                        _this._location = val;
                        return true;
                    }, function (err) { throw new exceptions_83.BaseException(err); });
                };
                WebWorkerPlatformLocation.prototype.getBaseHrefFromDOM = function () {
                    throw new exceptions_83.BaseException("Attempt to get base href from DOM from WebWorker. You must either provide a value for the APP_BASE_HREF token through DI or use the hash location strategy.");
                };
                WebWorkerPlatformLocation.prototype.onPopState = function (fn) { this._popStateListeners.push(fn); };
                WebWorkerPlatformLocation.prototype.onHashChange = function (fn) { this._hashChangeListeners.push(fn); };
                Object.defineProperty(WebWorkerPlatformLocation.prototype, "pathname", {
                    get: function () {
                        if (this._location === null) {
                            return null;
                        }
                        return this._location.pathname;
                    },
                    set: function (newPath) {
                        if (this._location === null) {
                            throw new exceptions_83.BaseException("Attempt to set pathname before value is obtained from UI");
                        }
                        this._location.pathname = newPath;
                        var fnArgs = [new client_message_broker_5.FnArg(newPath, serializer_11.PRIMITIVE)];
                        var args = new client_message_broker_5.UiArguments("setPathname", fnArgs);
                        this._broker.runOnService(args, null);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(WebWorkerPlatformLocation.prototype, "search", {
                    get: function () {
                        if (this._location === null) {
                            return null;
                        }
                        return this._location.search;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(WebWorkerPlatformLocation.prototype, "hash", {
                    get: function () {
                        if (this._location === null) {
                            return null;
                        }
                        return this._location.hash;
                    },
                    enumerable: true,
                    configurable: true
                });
                WebWorkerPlatformLocation.prototype.pushState = function (state, title, url) {
                    var fnArgs = [new client_message_broker_5.FnArg(state, serializer_11.PRIMITIVE), new client_message_broker_5.FnArg(title, serializer_11.PRIMITIVE), new client_message_broker_5.FnArg(url, serializer_11.PRIMITIVE)];
                    var args = new client_message_broker_5.UiArguments("pushState", fnArgs);
                    this._broker.runOnService(args, null);
                };
                WebWorkerPlatformLocation.prototype.replaceState = function (state, title, url) {
                    var fnArgs = [new client_message_broker_5.FnArg(state, serializer_11.PRIMITIVE), new client_message_broker_5.FnArg(title, serializer_11.PRIMITIVE), new client_message_broker_5.FnArg(url, serializer_11.PRIMITIVE)];
                    var args = new client_message_broker_5.UiArguments("replaceState", fnArgs);
                    this._broker.runOnService(args, null);
                };
                WebWorkerPlatformLocation.prototype.forward = function () {
                    var args = new client_message_broker_5.UiArguments("forward");
                    this._broker.runOnService(args, null);
                };
                WebWorkerPlatformLocation.prototype.back = function () {
                    var args = new client_message_broker_5.UiArguments("back");
                    this._broker.runOnService(args, null);
                };
                WebWorkerPlatformLocation = __decorate([
                    di_70.Injectable(), 
                    __metadata('design:paramtypes', [client_message_broker_5.ClientMessageBrokerFactory, message_bus_10.MessageBus, serializer_11.Serializer])
                ], WebWorkerPlatformLocation);
                return WebWorkerPlatformLocation;
            }(platform_location_7.PlatformLocation));
            exports_414("WebWorkerPlatformLocation", WebWorkerPlatformLocation);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/web_workers/worker/renderer", ['angular2/src/core/render/api', "angular2/src/web_workers/shared/client_message_broker", "angular2/src/facade/lang", 'angular2/src/facade/collection', "angular2/src/core/di", 'angular2/src/web_workers/shared/render_store', 'angular2/src/web_workers/shared/messaging_api', 'angular2/src/web_workers/shared/serializer', 'angular2/src/web_workers/shared/message_bus', 'angular2/src/facade/async', 'angular2/src/core/metadata/view', "test/node_modules/angular2/ts/src/web_workers/worker/event_deserializer"], function(exports_415, context_415) {
    "use strict";
    var __moduleName = context_415 && context_415.id;
    var api_11, client_message_broker_6, lang_224, collection_94, di_71, render_store_5, messaging_api_5, serializer_12, messaging_api_6, message_bus_11, async_41, view_14, event_deserializer_2;
    var WebWorkerRootRenderer, WebWorkerRenderer, NamedEventEmitter, WebWorkerRenderNode;
    function eventNameWithTarget(target, eventName) {
        return target + ":" + eventName;
    }
    return {
        setters:[
            function (api_11_1) {
                api_11 = api_11_1;
            },
            function (client_message_broker_6_1) {
                client_message_broker_6 = client_message_broker_6_1;
            },
            function (lang_224_1) {
                lang_224 = lang_224_1;
            },
            function (collection_94_1) {
                collection_94 = collection_94_1;
            },
            function (di_71_1) {
                di_71 = di_71_1;
            },
            function (render_store_5_1) {
                render_store_5 = render_store_5_1;
            },
            function (messaging_api_5_1) {
                messaging_api_5 = messaging_api_5_1;
                messaging_api_6 = messaging_api_5_1;
            },
            function (serializer_12_1) {
                serializer_12 = serializer_12_1;
            },
            function (message_bus_11_1) {
                message_bus_11 = message_bus_11_1;
            },
            function (async_41_1) {
                async_41 = async_41_1;
            },
            function (view_14_1) {
                view_14 = view_14_1;
            },
            function (event_deserializer_2_1) {
                event_deserializer_2 = event_deserializer_2_1;
            }],
        execute: function() {
            WebWorkerRootRenderer = (function () {
                function WebWorkerRootRenderer(messageBrokerFactory, bus, _serializer, _renderStore) {
                    var _this = this;
                    this._serializer = _serializer;
                    this._renderStore = _renderStore;
                    this.globalEvents = new NamedEventEmitter();
                    this._componentRenderers = new Map();
                    this._messageBroker = messageBrokerFactory.createMessageBroker(messaging_api_5.RENDERER_CHANNEL);
                    bus.initChannel(messaging_api_6.EVENT_CHANNEL);
                    var source = bus.from(messaging_api_6.EVENT_CHANNEL);
                    async_41.ObservableWrapper.subscribe(source, function (message) { return _this._dispatchEvent(message); });
                }
                WebWorkerRootRenderer.prototype._dispatchEvent = function (message) {
                    var eventName = message['eventName'];
                    var target = message['eventTarget'];
                    var event = event_deserializer_2.deserializeGenericEvent(message['event']);
                    if (lang_224.isPresent(target)) {
                        this.globalEvents.dispatchEvent(eventNameWithTarget(target, eventName), event);
                    }
                    else {
                        var element = this._serializer.deserialize(message['element'], serializer_12.RenderStoreObject);
                        element.events.dispatchEvent(eventName, event);
                    }
                };
                WebWorkerRootRenderer.prototype.renderComponent = function (componentType) {
                    var result = this._componentRenderers.get(componentType.id);
                    if (lang_224.isBlank(result)) {
                        result = new WebWorkerRenderer(this, componentType);
                        this._componentRenderers.set(componentType.id, result);
                        var id = this._renderStore.allocateId();
                        this._renderStore.store(result, id);
                        this.runOnService('renderComponent', [
                            new client_message_broker_6.FnArg(componentType, api_11.RenderComponentType),
                            new client_message_broker_6.FnArg(result, serializer_12.RenderStoreObject),
                        ]);
                    }
                    return result;
                };
                WebWorkerRootRenderer.prototype.runOnService = function (fnName, fnArgs) {
                    var args = new client_message_broker_6.UiArguments(fnName, fnArgs);
                    this._messageBroker.runOnService(args, null);
                };
                WebWorkerRootRenderer.prototype.allocateNode = function () {
                    var result = new WebWorkerRenderNode();
                    var id = this._renderStore.allocateId();
                    this._renderStore.store(result, id);
                    return result;
                };
                WebWorkerRootRenderer.prototype.allocateId = function () { return this._renderStore.allocateId(); };
                WebWorkerRootRenderer.prototype.destroyNodes = function (nodes) {
                    for (var i = 0; i < nodes.length; i++) {
                        this._renderStore.remove(nodes[i]);
                    }
                };
                WebWorkerRootRenderer = __decorate([
                    di_71.Injectable(), 
                    __metadata('design:paramtypes', [client_message_broker_6.ClientMessageBrokerFactory, message_bus_11.MessageBus, serializer_12.Serializer, render_store_5.RenderStore])
                ], WebWorkerRootRenderer);
                return WebWorkerRootRenderer;
            }());
            exports_415("WebWorkerRootRenderer", WebWorkerRootRenderer);
            WebWorkerRenderer = (function () {
                function WebWorkerRenderer(_rootRenderer, _componentType) {
                    this._rootRenderer = _rootRenderer;
                    this._componentType = _componentType;
                }
                WebWorkerRenderer.prototype.renderComponent = function (componentType) {
                    return this._rootRenderer.renderComponent(componentType);
                };
                WebWorkerRenderer.prototype._runOnService = function (fnName, fnArgs) {
                    var fnArgsWithRenderer = [new client_message_broker_6.FnArg(this, serializer_12.RenderStoreObject)].concat(fnArgs);
                    this._rootRenderer.runOnService(fnName, fnArgsWithRenderer);
                };
                WebWorkerRenderer.prototype.selectRootElement = function (selector) {
                    var node = this._rootRenderer.allocateNode();
                    this._runOnService('selectRootElement', [new client_message_broker_6.FnArg(selector, null), new client_message_broker_6.FnArg(node, serializer_12.RenderStoreObject)]);
                    return node;
                };
                WebWorkerRenderer.prototype.createElement = function (parentElement, name) {
                    var node = this._rootRenderer.allocateNode();
                    this._runOnService('createElement', [
                        new client_message_broker_6.FnArg(parentElement, serializer_12.RenderStoreObject),
                        new client_message_broker_6.FnArg(name, null),
                        new client_message_broker_6.FnArg(node, serializer_12.RenderStoreObject)
                    ]);
                    return node;
                };
                WebWorkerRenderer.prototype.createViewRoot = function (hostElement) {
                    var viewRoot = this._componentType.encapsulation === view_14.ViewEncapsulation.Native ?
                        this._rootRenderer.allocateNode() :
                        hostElement;
                    this._runOnService('createViewRoot', [new client_message_broker_6.FnArg(hostElement, serializer_12.RenderStoreObject), new client_message_broker_6.FnArg(viewRoot, serializer_12.RenderStoreObject)]);
                    return viewRoot;
                };
                WebWorkerRenderer.prototype.createTemplateAnchor = function (parentElement) {
                    var node = this._rootRenderer.allocateNode();
                    this._runOnService('createTemplateAnchor', [new client_message_broker_6.FnArg(parentElement, serializer_12.RenderStoreObject), new client_message_broker_6.FnArg(node, serializer_12.RenderStoreObject)]);
                    return node;
                };
                WebWorkerRenderer.prototype.createText = function (parentElement, value) {
                    var node = this._rootRenderer.allocateNode();
                    this._runOnService('createText', [
                        new client_message_broker_6.FnArg(parentElement, serializer_12.RenderStoreObject),
                        new client_message_broker_6.FnArg(value, null),
                        new client_message_broker_6.FnArg(node, serializer_12.RenderStoreObject)
                    ]);
                    return node;
                };
                WebWorkerRenderer.prototype.projectNodes = function (parentElement, nodes) {
                    this._runOnService('projectNodes', [new client_message_broker_6.FnArg(parentElement, serializer_12.RenderStoreObject), new client_message_broker_6.FnArg(nodes, serializer_12.RenderStoreObject)]);
                };
                WebWorkerRenderer.prototype.attachViewAfter = function (node, viewRootNodes) {
                    this._runOnService('attachViewAfter', [new client_message_broker_6.FnArg(node, serializer_12.RenderStoreObject), new client_message_broker_6.FnArg(viewRootNodes, serializer_12.RenderStoreObject)]);
                };
                WebWorkerRenderer.prototype.detachView = function (viewRootNodes) {
                    this._runOnService('detachView', [new client_message_broker_6.FnArg(viewRootNodes, serializer_12.RenderStoreObject)]);
                };
                WebWorkerRenderer.prototype.destroyView = function (hostElement, viewAllNodes) {
                    this._runOnService('destroyView', [new client_message_broker_6.FnArg(hostElement, serializer_12.RenderStoreObject), new client_message_broker_6.FnArg(viewAllNodes, serializer_12.RenderStoreObject)]);
                    this._rootRenderer.destroyNodes(viewAllNodes);
                };
                WebWorkerRenderer.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) {
                    this._runOnService('setElementProperty', [
                        new client_message_broker_6.FnArg(renderElement, serializer_12.RenderStoreObject),
                        new client_message_broker_6.FnArg(propertyName, null),
                        new client_message_broker_6.FnArg(propertyValue, null)
                    ]);
                };
                WebWorkerRenderer.prototype.setElementAttribute = function (renderElement, attributeName, attributeValue) {
                    this._runOnService('setElementAttribute', [
                        new client_message_broker_6.FnArg(renderElement, serializer_12.RenderStoreObject),
                        new client_message_broker_6.FnArg(attributeName, null),
                        new client_message_broker_6.FnArg(attributeValue, null)
                    ]);
                };
                WebWorkerRenderer.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) {
                    this._runOnService('setBindingDebugInfo', [
                        new client_message_broker_6.FnArg(renderElement, serializer_12.RenderStoreObject),
                        new client_message_broker_6.FnArg(propertyName, null),
                        new client_message_broker_6.FnArg(propertyValue, null)
                    ]);
                };
                WebWorkerRenderer.prototype.setElementDebugInfo = function (renderElement, info) { };
                WebWorkerRenderer.prototype.setElementClass = function (renderElement, className, isAdd) {
                    this._runOnService('setElementClass', [
                        new client_message_broker_6.FnArg(renderElement, serializer_12.RenderStoreObject),
                        new client_message_broker_6.FnArg(className, null),
                        new client_message_broker_6.FnArg(isAdd, null)
                    ]);
                };
                WebWorkerRenderer.prototype.setElementStyle = function (renderElement, styleName, styleValue) {
                    this._runOnService('setElementStyle', [
                        new client_message_broker_6.FnArg(renderElement, serializer_12.RenderStoreObject),
                        new client_message_broker_6.FnArg(styleName, null),
                        new client_message_broker_6.FnArg(styleValue, null)
                    ]);
                };
                WebWorkerRenderer.prototype.invokeElementMethod = function (renderElement, methodName, args) {
                    this._runOnService('invokeElementMethod', [
                        new client_message_broker_6.FnArg(renderElement, serializer_12.RenderStoreObject),
                        new client_message_broker_6.FnArg(methodName, null),
                        new client_message_broker_6.FnArg(args, null)
                    ]);
                };
                WebWorkerRenderer.prototype.setText = function (renderNode, text) {
                    this._runOnService('setText', [new client_message_broker_6.FnArg(renderNode, serializer_12.RenderStoreObject), new client_message_broker_6.FnArg(text, null)]);
                };
                WebWorkerRenderer.prototype.listen = function (renderElement, name, callback) {
                    var _this = this;
                    renderElement.events.listen(name, callback);
                    var unlistenCallbackId = this._rootRenderer.allocateId();
                    this._runOnService('listen', [
                        new client_message_broker_6.FnArg(renderElement, serializer_12.RenderStoreObject),
                        new client_message_broker_6.FnArg(name, null),
                        new client_message_broker_6.FnArg(unlistenCallbackId, null)
                    ]);
                    return function () {
                        renderElement.events.unlisten(name, callback);
                        _this._runOnService('listenDone', [new client_message_broker_6.FnArg(unlistenCallbackId, null)]);
                    };
                };
                WebWorkerRenderer.prototype.listenGlobal = function (target, name, callback) {
                    var _this = this;
                    this._rootRenderer.globalEvents.listen(eventNameWithTarget(target, name), callback);
                    var unlistenCallbackId = this._rootRenderer.allocateId();
                    this._runOnService('listenGlobal', [new client_message_broker_6.FnArg(target, null), new client_message_broker_6.FnArg(name, null), new client_message_broker_6.FnArg(unlistenCallbackId, null)]);
                    return function () {
                        _this._rootRenderer.globalEvents.unlisten(eventNameWithTarget(target, name), callback);
                        _this._runOnService('listenDone', [new client_message_broker_6.FnArg(unlistenCallbackId, null)]);
                    };
                };
                return WebWorkerRenderer;
            }());
            exports_415("WebWorkerRenderer", WebWorkerRenderer);
            NamedEventEmitter = (function () {
                function NamedEventEmitter() {
                }
                NamedEventEmitter.prototype._getListeners = function (eventName) {
                    if (lang_224.isBlank(this._listeners)) {
                        this._listeners = new Map();
                    }
                    var listeners = this._listeners.get(eventName);
                    if (lang_224.isBlank(listeners)) {
                        listeners = [];
                        this._listeners.set(eventName, listeners);
                    }
                    return listeners;
                };
                NamedEventEmitter.prototype.listen = function (eventName, callback) { this._getListeners(eventName).push(callback); };
                NamedEventEmitter.prototype.unlisten = function (eventName, callback) {
                    collection_94.ListWrapper.remove(this._getListeners(eventName), callback);
                };
                NamedEventEmitter.prototype.dispatchEvent = function (eventName, event) {
                    var listeners = this._getListeners(eventName);
                    for (var i = 0; i < listeners.length; i++) {
                        listeners[i](event);
                    }
                };
                return NamedEventEmitter;
            }());
            exports_415("NamedEventEmitter", NamedEventEmitter);
            WebWorkerRenderNode = (function () {
                function WebWorkerRenderNode() {
                    this.events = new NamedEventEmitter();
                }
                return WebWorkerRenderNode;
            }());
            exports_415("WebWorkerRenderNode", WebWorkerRenderNode);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/web_workers/worker/router_providers", ['angular2/core', 'angular2/src/router/location/platform_location', "test/node_modules/angular2/ts/src/web_workers/worker/platform_location", 'angular2/src/router/router_providers_common'], function(exports_416, context_416) {
    "use strict";
    var __moduleName = context_416 && context_416.id;
    var core_141, platform_location_8, platform_location_9, router_providers_common_3;
    var WORKER_APP_ROUTER;
    function initRouter(platformLocation, zone) {
        return zone.run(function () { return platformLocation.init(); });
    }
    return {
        setters:[
            function (core_141_1) {
                core_141 = core_141_1;
            },
            function (platform_location_8_1) {
                platform_location_8 = platform_location_8_1;
            },
            function (platform_location_9_1) {
                platform_location_9 = platform_location_9_1;
            },
            function (router_providers_common_3_1) {
                router_providers_common_3 = router_providers_common_3_1;
            }],
        execute: function() {
            exports_416("WORKER_APP_ROUTER", WORKER_APP_ROUTER = [
                router_providers_common_3.ROUTER_PROVIDERS_COMMON,
                new core_141.Provider(platform_location_8.PlatformLocation, { useClass: platform_location_9.WebWorkerPlatformLocation }),
                new core_141.Provider(core_141.APP_INITIALIZER, {
                    useFactory: function (platformLocation, zone) { return function () {
                        return initRouter(platformLocation, zone);
                    }; },
                    multi: true,
                    deps: [platform_location_8.PlatformLocation, core_141.NgZone]
                })
            ]);
        }
    }
});
System.register("test/node_modules/angular2/ts/src/web_workers/worker/xhr_impl", ['angular2/src/core/di', 'angular2/src/compiler/xhr', 'angular2/src/web_workers/shared/client_message_broker', 'angular2/src/web_workers/shared/messaging_api'], function(exports_417, context_417) {
    "use strict";
    var __moduleName = context_417 && context_417.id;
    var di_72, xhr_10, client_message_broker_7, messaging_api_7;
    var WebWorkerXHRImpl;
    return {
        setters:[
            function (di_72_1) {
                di_72 = di_72_1;
            },
            function (xhr_10_1) {
                xhr_10 = xhr_10_1;
            },
            function (client_message_broker_7_1) {
                client_message_broker_7 = client_message_broker_7_1;
            },
            function (messaging_api_7_1) {
                messaging_api_7 = messaging_api_7_1;
            }],
        execute: function() {
            /**
             * Implementation of compiler/xhr that relays XHR requests to the UI side where they are sent
             * and the result is proxied back to the worker
             */
            WebWorkerXHRImpl = (function (_super) {
                __extends(WebWorkerXHRImpl, _super);
                function WebWorkerXHRImpl(messageBrokerFactory) {
                    _super.call(this);
                    this._messageBroker = messageBrokerFactory.createMessageBroker(messaging_api_7.XHR_CHANNEL);
                }
                WebWorkerXHRImpl.prototype.get = function (url) {
                    var fnArgs = [new client_message_broker_7.FnArg(url, null)];
                    var args = new client_message_broker_7.UiArguments("get", fnArgs);
                    return this._messageBroker.runOnService(args, String);
                };
                WebWorkerXHRImpl = __decorate([
                    di_72.Injectable(), 
                    __metadata('design:paramtypes', [client_message_broker_7.ClientMessageBrokerFactory])
                ], WebWorkerXHRImpl);
                return WebWorkerXHRImpl;
            }(xhr_10.XHR));
            exports_417("WebWorkerXHRImpl", WebWorkerXHRImpl);
        }
    }
});
System.register("test/node_modules/angular2/ts/web_worker/ui", ['angular2/src/facade/facade', "test/node_modules/angular2/ts/src/core/di", "test/node_modules/angular2/ts/src/core/application_ref", "test/node_modules/angular2/ts/src/core/application_tokens", "test/node_modules/angular2/ts/src/core/zone", 'angular2/platform/worker_render'], function(exports_418, context_418) {
    "use strict";
    var __moduleName = context_418 && context_418.id;
    var exportedNames_10 = {
        'platform': true,
        'PlatformRef': true,
        'ApplicationRef': true,
        'APP_ID': true,
        'APP_COMPONENT': true,
        'APP_INITIALIZER': true,
        'PLATFORM_INITIALIZER': true
    };
    function exportStar_17(m) {
        var exports = {};
        for(var n in m) {
            if (n !== "default"&& !exportedNames_10.hasOwnProperty(n)) exports[n] = m[n];
        }
        exports_418(exports);
    }
    return {
        setters:[
            function (facade_2_1) {
                exportStar_17(facade_2_1);
            },
            function (di_73_1) {
                exportStar_17(di_73_1);
            },
            function (application_ref_4_1) {
                exports_418({
                    "platform": application_ref_4_1["platform"],
                    "PlatformRef": application_ref_4_1["PlatformRef"],
                    "ApplicationRef": application_ref_4_1["ApplicationRef"]
                });
            },
            function (application_tokens_6_1) {
                exports_418({
                    "APP_ID": application_tokens_6_1["APP_ID"],
                    "APP_COMPONENT": application_tokens_6_1["APP_COMPONENT"],
                    "APP_INITIALIZER": application_tokens_6_1["APP_INITIALIZER"],
                    "PLATFORM_INITIALIZER": application_tokens_6_1["PLATFORM_INITIALIZER"]
                });
            },
            function (zone_2_1) {
                exportStar_17(zone_2_1);
            },
            function (worker_render_3_1) {
                exportStar_17(worker_render_3_1);
            }],
        execute: function() {
        }
    }
});
System.register("test/node_modules/angular2/ts/web_worker/worker", ["test/node_modules/angular2/ts/common", "test/node_modules/angular2/ts/core", "test/node_modules/angular2/ts/platform/worker_app", "test/node_modules/angular2/ts/compiler", "test/node_modules/angular2/ts/instrumentation", 'angular2/src/platform/worker_app'], function(exports_419, context_419) {
    "use strict";
    var __moduleName = context_419 && context_419.id;
    var exportedNames_11 = {
        'UrlResolver': true
    };
    function exportStar_18(m) {
        var exports = {};
        for(var n in m) {
            if (n !== "default"&& !exportedNames_11.hasOwnProperty(n)) exports[n] = m[n];
        }
        exports_419(exports);
    }
    return {
        setters:[
            function (common_5_1) {
                exportStar_18(common_5_1);
            },
            function (core_142_1) {
                exportStar_18(core_142_1);
            },
            function (worker_app_2_1) {
                exportStar_18(worker_app_2_1);
            },
            function (compiler_17_1) {
                exports_419({
                    "UrlResolver": compiler_17_1["UrlResolver"]
                });
            },
            function (instrumentation_1_1) {
                exportStar_18(instrumentation_1_1);
            },
            function (worker_app_3_1) {
                exportStar_18(worker_app_3_1);
            }],
        execute: function() {
        }
    }
});
module.exports = 'typescript';
module.exports = 'ts';
//# sourceMappingURL=combined.js.map